{"version":3,"sources":["LocusZoom.js","Layouts.js","DataLayer.js","annotation_track.js","forest.js","genes.js","genome_legend.js","intervals.js","line.js","scatter.js","Singletons.js","Dashboard.js","Legend.js","Data.js","Plot.js","Panel.js"],"names":["LocusZoom","version","populate","selector","datasource","layout","d3","select","html","plot","call","node","id","iterator","empty","attr","Plot","container","dataset","region","parsed_state","parsePositionQuery","Object","keys","forEach","key","state","svg","append","style","setDimensions","positionPanels","initialize","length","refresh","populateAll","plots","selectAll","each","d","i","positionIntToString","pos","exp","suffix","exp_symbols","isNaN","log","Math","LN10","min","max","places_exp","floor","toFixed","min_exp","places","ret","pow","positionStringToInt","p","val","toUpperCase","replace","suffixre","exec","mult","Number","x","chrposoff","chrpos","match","center","offset","chr","start","end","position","prettyTicks","range","clip_range","target_tick_count","parseInt","min_n","shrink_sml","high_u_bias","u5_bias","abs","c","base","base_toFixed","round","unit","ticks","parseFloat","push","indexOf","slice","pop","createCORSPromise","method","url","body","headers","timeout","response","Q","defer","xhr","XMLHttpRequest","open","XDomainRequest","onreadystatechange","readyState","status","resolve","reject","setTimeout","header","setRequestHeader","send","promise","validateState","new_state","validated_region","attempted_midpoint","attempted_scale","temp","min_region_scale","max_region_scale","parseFields","data","tokens","regex","m","text","index","condition","variable","close","console","error","JSON","stringify","astify","token","shift","then","ast","cache","hasOwnProperty","Data","Field","render_node","value","map","join","getToolTipData","parentNode","classed","getToolTipDataLayer","getDataLayer","getToolTipPanel","data_layer","parent","getToolTipPlot","panel","generateCurtain","curtain","showing","content_selector","hide_delay","show","content","css","parent_plot","insert","on","hide","bind","update","clearTimeout","page_origin","getPageOrigin","top","y","left","width","height","delay","remove","generateLoader","loader","progress_selector","cancel_selector","percent","padding","loader_boundrect","getBoundingClientRect","animate","setPercentCompleted","subclass","extra","Sub","constructor","apply","arguments","prototype","create","k","ext","Layouts","obj","layouts","get","type","name","modifications","merge","unnamespaced","parse","default_namespace","namespace","default","toString","applyNamespaces","element","re","resolved_namespace","r","merge_namespace","namespaced_element","namespaced_property","property","set","add","list","custom_layout","default_layout","custom_type","default_type","Array","isArray","closable","or","and","covariates_model_association","orientation","fields","z_index","x_axis","field","y_axis","axis","ceiling","point_shape","scale_function","parameters","field_value","else","point_size","color","breaks","values","legend","shape","size","label","class","id_field","upper_buffer","min_extent","behaviors","onmouseover","action","onmouseout","onclick","exclusive","onshiftclick","tooltip","tooltip_positioning","category_field","lower_buffer","categories","null_value","fill_opacity","spacing","lines","filters","operator","start_field","end_field","track_split_field","split_tracks","always_hide_legend","components","group_position","title","subtitle","covariates_model_plot_dashboard","button_html","button_title","region_nav_plot_dashboard","step","min_width","min_height","proportional_width","margin","right","bottom","inner_border","dashboard","l","axes","label_offset","tick_format","extent","y1","y2","origin","hidden","interaction","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","data_layers","transform","data_layer_id","pad_from_bottom","responsive_resize","panels","proportional_height","StandardLayout","mouse_guide","DataLayer","initialized","layout_idx","Panel","DefaultLayout","_base_layout","state_id","setDefaultState","tooltips","global_statuses","addField","fieldName","transformations","fieldString","Statuses","adjectives","verbs","menu_antiverbs","getBaseId","getAbsoluteDataHeight","dataBCR","group","canTransition","transition","panel_boundaries","dragging","panel_id","getElementId","element_id","getElementStatusNodeId","getElementById","applyDataMethods","toHTML","deselect","unselectElement","applyCustomDataMethods","clipRect","moveUp","data_layer_ids_by_z_index","resortDataLayers","moveDown","resolveScalableParameter","idx","f","ScaleFunctions","getAxisExtent","dimension","axis_name","axis_layout","data_extent","original_extent_span","range_min","range_max","getTicks","config","createTooltip","positionTooltip","arrow","updateTooltip","destroyTooltip","destroyAllTooltips","event","pageX","pageY","positionAllTooltips","showOrHideTooltip","resolveStatus","statuses","directive","reduce","previousValue","currentValue","sub_status","sub_operator","show_directive","hide_directive","antistatus","show_resolved","hide_resolved","filter","return_type","test","operators","a","b","matches","filterIndexes","filterElements","verb","adjective","antiverb","setElementStatus","setElementStatusByFilters","setAllElementStatus","toggle","get_element_id_error","element_status_node_id","element_status_idx","splice","emit","active","status_ids","applyBehaviors","selection","event_match","executeBehaviors","requiredKeyStates","ctrl","ctrlKey","shiftKey","behavior","current_status_boolean","href","target","window","location","panel_origin","exportData","format","default_format","toLowerCase","e","jsonified","delimiter","record","draw","cliparea","reMap","lzd","getData","new_data","DataLayers","datalayers","datalayer","extend","parent_name","overrides","child","render","self","trackData","enter","exit","arrow_type","arrow_top","arrow_left","arrow_width","stroke_width","tooltip_box","data_layer_height","data_layer_width","x_center","x_scale","y_center","offset_right","offset_left","confidence_intervals","show_no_significance_line","border_radius","y_scale","sqrt","PI","ci_selection","ci_transform","ci_width","ci_height","duration","ease","points_selection","initial_y","fill","symbol","element_data","axis_num","item","field_to_add","stroke","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","getTrackHeight","transcript_idx","tracks","gene_track_index","assignTracks","getLabelWidth","gene_name","font_size","temp_text","label_width","getBBox","g","gene_id","split","gene_version","transcript_id","transcripts","display_range","text_anchor","centered_margin","display_domain","invert","track","potential_track","collision_on_potential_track","placed_gene","min_start","max_end","t","exons","gene","bboxes","boundary_fill","boundary_stroke","boundaries","labels","strand","exon_fill","exon_stroke","exon_id","clickareas","gene_bbox_id","gene_bbox","gene_center_x","chromosome_fill_colors","light","dark","chromosome_label_colors","genome_start","genome_end","chromosomes","variant_parts","variant","track_split_order","track_split_legend_to_y_axis","track_height","previous_tracks","interval_track_index","track_split_field_index","reverse","placed_interval","psuedoElement","sharedstatusnode_style","display","interval","statusnode_style","statusnodes","rects","interval_name","updateSplitTrackAxis","interval_bbox","interval_center_x","legend_axis","track_spacing","target_height","scaleHeightToData","toggleSplitTracks","interpolate","hitarea_width","mouse_event","line","tooltip_timeout","getMouseDisplayAndData","mouse","slope","x_field","y_field","bisect","bisector","datum","startDatum","endDatum","interpolateNumber","x_precision","toPrecision","y_precision","dd","min_arrow_left","max_arrow_left","path","hitarea","hitarea_line","path_class","global_status","decoupled","x_extent","y_extent","x_range","y_range","flip_labels","handle_lines","Boolean","min_x","max_x","flip","dn","dnl","dnx","text_swing","dnlx2","line_swing","label_texts","da","dax","abound","dal","label_lines","db","bbound","collision","separate_labels","seperate_iterations","alpha","again","sign","adjust","new_a_y","new_b_y","min_y","max_y","delta","label_elements","label_line","filtered_data","label_groups","makeLDReference","ref","applyState","ldrefvar","_prepareData","xField","sourceData","sort","ak","bk","av","bv","_generateCategoryBounds","uniqueCategories","category","bounds","categoryNames","_setDynamicColorScheme","colorParams","baseParams","parameters_categories_hash","every","colors","color_scale","scale","category10","category20","concat","categoryBounds","_categories","knownCategories","knownColors","xPos","diff","KnownDataSources","sources","findSourceByName","SOURCE_NAME","source","warn","source_name","newObj","params","Function","getAll","setAll","clear","TransformationFunctions","getTrans","fun","parseTrans","parseTransString","funs","result","substring","fn","ceil","toExponential","str","encodeURIComponent","s","functions","input","threshold","prev","curr","nullval","upper_idx","brk","normalized_input","isFinite","Dashboard","hide_timeout","persist","component","Components","shouldPersist","visibility","destroy","force","Component","parent_panel","parent_svg","button","menu","Button","parent_dashboard","tag","setTag","setHtml","setText","setHTML","setTitle","setColor","setStyle","getClass","permanent","setPermanent","bool","setStatus","highlight","disable","setOnMouseover","setOnMouseout","setOnclick","preUpdate","postUpdate","outer_selector","inner_selector","scroll_position","scrollTop","scrollbar_padding","menu_height_padding","page_scroll_top","document","documentElement","container_offset","getContainerOffset","dashboard_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","base_max_width","container_max_width","content_max_width","base_max_height","max_height","setPopulate","menu_populate_function","div_selector","title_selector","display_width","display_height","generateBase64SVG","base64_string","css_string","stylesheet","styleSheets","fcall","outerHTML","dy","initial_html","style_def","insert_at","btoa","p1","String","fromCharCode","suppress_confirm","confirm","removePanel","is_at_top","y_index","is_at_bottom","panel_ids_by_y_index","can_zoom","current_region_scale","zoom_factor","new_region_scale","menu_html","model","covariates","CovariatesModel","element_reference","updateComponent","removeByIdx","removeAll","table","covariate","row","cov","scale_timeout","status_adj","status_idx","status_verb","at_top","at_bottom","td","removeDataLayer","allowed_fields","fields_whitelist","dataLayer","layer_name","dataLayerLayout","defaultConfig","configSlot","_selected_item","uniqueID","random","menuLayout","renderRow","display_name","display_options","row_id","field_name","defaultName","default_config_display_name","options","Legend","background_rect","elements","elements_group","label_size","line_height","label_x","label_y","path_y","symbolTypes","radius","bcr","right_x","pad_from_right","DataSources","addSource","ns","dsobj","source_id","getSource","removeSource","fromJSON","ds","toJSON","parts","full_name","applyTransformations","Requester","split_requests","requests","raw","trans","outnames","request_handles","when","discrete","Source","enableCache","dependentSource","parseInit","init","getCacheKey","chain","getURL","fetchRequest","getRequest","req","cacheKey","_cachedKey","_cachedResponse","preGetData","pre","resp","parseResponse","normalizeResponse","N","sameLength","records","j","prepareData","annotateData","extractFields","fieldFound","output_record","v","combineChainBody","json","standardized","one_source_body","new_body","parseArraysToObjects","standard","parseObjectsToObjects","parseData","constructorFun","uniqueName","getPrototypeOf","AssociationSource","unshift","analysis","LDSource","findMergeFields","exactMatch","arr","regexes","dataFields","position_field","pvalue","pvalue_field","_names_","names","nameMatch","findRequestedFields","isrefvarin","isrefvarout","ldin","ldout","findExtremeValue","pval","extremeVal","extremeIdx","refSource","ldrefsource","reqFields","refVar","columns","leftJoin","lfield","rfield","position2","tagRefVariant","refvar","idfield","outname","GeneSource","GeneConstraintSource","geneids","substr","constraint_fields","RecombinationRateSource","recombsource","IntervalSource","bedtracksource","StaticSource","_data","PheWASSource","build","ConnectorSource","_source_name_mapping","specified_ids","REQUIRED_SOURCES","chain_source_id","applyPanelYIndexesToPanelLayouts","pid","remap_promises","window_onresize","event_hooks","hook","off","theseHooks","undefined","hookMatch","eventData","sourceID","hookToRun","eventContext","bounding_client_rect","x_offset","scrollLeft","y_offset","offsetParent","offsetTop","offsetLeft","canInteract","loading_data","zooming","initializeLayout","aspect_ratio","sumProportional","total","rescaleSVG","clientRect","panel_layout","addPanel","panel_width","panel_height","setOrigin","proportional_origin","clearPanelData","panelId","mode","panelsList","dlid","layer","x_linked_margins","total_proportional_height","proportional_adjustment","calculated_plot_height","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","selectors","corner_selector","panel_idx","panel_resize_drag","drag","this_panel","original_panel_height","panel_height_change","new_calculated_plot_height","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","dx","plot_page_origin","panel_page_origin","corner_padding","corner_size","mouseout_mouse_guide","mousemove_mouse_guide","coords","mouseup","stopDrag","mousemove","preventDefault","dragged_x","start_x","dragged_y","start_y","linked_panel_ids","client_rect","subscribeToData","success_callback","opts","error_callback","onerror","err","listener","catch","state_changes","all","drop","startDrag","getLinkedPanelIds","overrideAxisLayout","axis_number","y_axis_number","generateID","applyDataLayerZIndexesToDataLayerLayouts","data_promises","y1_scale","y2_scale","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","bubble","plot_origin","background_click","y1_linked","y2_linked","panel_count","setMargin","y1_range","y2_range","label_function","data_layer_layout","addDataLayer","clipPath","clearSelections","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","ascending","generateExtents","generateTicks","baseTickConfig","combinedTicks","acc","nextLayer","itemConfig","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","anchor","scalar","current_extent_size","current_scaled_extent_size","potential_extent_size","new_extent_size","offset_ratio","new_x_extent_start","y_shifted","linear","domain","renderAxis","zoom_handler","wheelDelta","detail","deltaY","zoom_listener","zoom","canRender","axis_params","label_rotate","ticksAreAllNumbers","orient","tickPadding","tickValues","tickFormat","tick_selector","tick_mouseover","focus","cursor","dh","addBasicLoader","show_immediately"],"mappings":"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","file":"locuszoom.app.js","sourcesContent":["/**\n * @namespace\n */\nvar LocusZoom = {\n    version: \"0.8.2\"\n};\n\n/**\n * Populate a single element with a LocusZoom plot.\n * selector can be a string for a DOM Query or a d3 selector.\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot} The newly created plot instance\n */\nLocusZoom.populate = function(selector, datasource, layout) {\n    if (typeof selector == \"undefined\"){\n        throw (\"LocusZoom.populate selector not defined\");\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html(\"\");\n    var plot;\n    d3.select(selector).call(function(){\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof this.node().id == \"undefined\"){\n            var iterator = 0;\n            while (!d3.select(\"#lz-\" + iterator).empty()){ iterator++; }\n            this.attr(\"id\", \"#lz-\" + iterator);\n        }\n        // Create the plot\n        plot = new LocusZoom.Plot(this.node().id, datasource, layout);\n        plot.container = this.node();\n        // Detect data-region and fill in state values if present\n        if (typeof this.node().dataset !== \"undefined\" && typeof this.node().dataset.region !== \"undefined\"){\n            var parsed_state = LocusZoom.parsePositionQuery(this.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key){\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select(\"div#\" + plot.id)\n            .append(\"svg\")\n            .attr(\"version\", \"1.1\")\n            .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n            .attr(\"id\", plot.id + \"_svg\").attr(\"class\", \"lz-locuszoom\")\n            .style(plot.layout.style);\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (typeof datasource == \"object\" && Object.keys(datasource).length){\n            plot.refresh();\n        }\n    });\n    return plot;\n};\n\n/**\n * Populate arbitrarily many elements each with a LocusZoom plot\n *   using a common datasource and layout\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot[]}\n */\nLocusZoom.populateAll = function(selector, datasource, layout) {\n    var plots = [];\n    d3.selectAll(selector).each(function(d,i) {\n        plots[i] = LocusZoom.populate(this, datasource, layout);\n    });\n    return plots;\n};\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {String} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nLocusZoom.positionIntToString = function(pos, exp, suffix){\n    var exp_symbols = { 0: \"\", 3: \"K\", 6: \"M\", 9: \"G\" };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null){\n        var log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    var places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    var min_exp = Math.min(Math.max(exp, 0), 2);\n    var places = Math.min(Math.max(places_exp, min_exp), 12);\n    var ret = \"\" + (pos / Math.pow(10, exp)).toFixed(places);\n    if (suffix && typeof exp_symbols[exp] !== \"undefined\"){\n        ret += \" \" + exp_symbols[exp] + \"b\";\n    }\n    return ret;\n};\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nLocusZoom.positionStringToInt = function(p) {\n    var val = p.toUpperCase();\n    val = val.replace(/,/g, \"\");\n    var suffixre = /([KMG])[B]*$/;\n    var suffix = suffixre.exec(val);\n    var mult = 1;\n    if (suffix) {\n        if (suffix[1]===\"M\") {\n            mult = 1e6;\n        } else if (suffix[1]===\"G\") {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre,\"\");\n    }\n    val = Number(val) * mult;\n    return val;\n};\n\n/**\n * Parse region queries into their constituent parts\n * TODO: handle genes (or send off to API)\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nLocusZoom.parsePositionQuery = function(x) {\n    var chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    var chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    var match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === \"+\") {\n            var center = LocusZoom.positionStringToInt(match[2]);\n            var offset = LocusZoom.positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: LocusZoom.positionStringToInt(match[2]),\n                end: LocusZoom.positionStringToInt(match[4])\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: LocusZoom.positionStringToInt(match[2])\n        };\n    }\n    return null;\n};\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nLocusZoom.prettyTicks = function(range, clip_range, target_tick_count){\n    if (typeof target_tick_count == \"undefined\" || isNaN(parseInt(target_tick_count))){\n        target_tick_count = 5;\n    }\n    target_tick_count = parseInt(target_tick_count);\n\n    var min_n = target_tick_count / 3;\n    var shrink_sml = 0.75;\n    var high_u_bias = 1.5;\n    var u5_bias = 0.5 + 1.5 * high_u_bias;\n\n    var d = Math.abs(range[0] - range[1]);\n    var c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2){\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n\n    var base = Math.pow(10, Math.floor(Math.log(c)/Math.LN10));\n    var base_toFixed = 0;\n    if (base < 1 && base !== 0){\n        base_toFixed = Math.abs(Math.round(Math.log(base)/Math.LN10));\n    }\n\n    var unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ){\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ){\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ){\n                unit = 10 * base;\n            }\n        }\n    }\n\n    var ticks = [];\n    var i = parseFloat( (Math.floor(range[0]/unit)*unit).toFixed(base_toFixed) );\n    while (i < range[1]){\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0){\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n\n    if (typeof clip_range == \"undefined\" || [\"low\", \"high\", \"both\", \"neither\"].indexOf(clip_range) === -1){\n        clip_range = \"neither\";\n    }\n    if (clip_range === \"low\" || clip_range === \"both\"){\n        if (ticks[0] < range[0]){ ticks = ticks.slice(1); }\n    }\n    if (clip_range === \"high\" || clip_range === \"both\"){\n        if (ticks[ticks.length-1] > range[1]){ ticks.pop(); }\n    }\n\n    return ticks;\n};\n\n/**\n * Make an AJAX request and return a promise.\n * From http://www.html5rocks.com/en/tutorials/cors/\n *   and with promises from https://gist.github.com/kriskowal/593076\n *\n * @param {String} method The HTTP verb\n * @param {String} url\n * @param {String} body The request body to send to the server\n * @param {Object} headers Object of custom request headers\n * @param {Number} [timeout] If provided, wait this long (in ms) before timing out\n * @returns {Promise}\n */\nLocusZoom.createCORSPromise = function (method, url, body, headers, timeout) {\n    var response = Q.defer();\n    var xhr = new XMLHttpRequest();\n    if (\"withCredentials\" in xhr) {\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n    }\n    if (xhr) {\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0 ) {\n                    response.resolve(xhr.response);\n                } else {\n                    response.reject(\"HTTP \" + xhr.status + \" for \" + url);\n                }\n            }\n        };\n        timeout && setTimeout(response.reject, timeout);\n        body = typeof body !== \"undefined\" ? body : \"\";\n        if (typeof headers !== \"undefined\"){\n            for (var header in headers){\n                xhr.setRequestHeader(header, headers[header]);\n            }\n        }\n        // Send the request\n        xhr.send(body);\n    }\n    return response.promise;\n};\n\n/**\n * Validate a (presumed complete) plot state object against internal rules for consistency, and ensure the plot fits\n *   within any constraints imposed by the layout.\n * @param {Object} new_state\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nLocusZoom.validateState = function(new_state, layout){\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    var validated_region = false;\n    if (typeof new_state.chr != \"undefined\" && typeof new_state.start != \"undefined\" && typeof new_state.end != \"undefined\"){\n        // Determine a numeric scale and midpoint for the attempted region,\n        var attempted_midpoint = null; var attempted_scale;\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)){\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)){\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0){\n                var temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0){\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n};\n\n//\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values! Will ignore non-scalars.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if {{field_name}} }} Conditional text {{/if}} will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n * @returns {string}\n */\nLocusZoom.parseFields = function (data, html) {\n    if (typeof data != \"object\"){\n        throw (\"LocusZoom.parseFields invalid arguments: data is not an object\");\n    }\n    if (typeof html != \"string\"){\n        throw (\"LocusZoom.parseFields invalid arguments: html is not a string\");\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    var tokens = [];\n    var regex = /\\{\\{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))\\}\\}/;\n    while (html.length > 0){\n        var m = regex.exec(html);\n        if (!m) { tokens.push({text: html}); html = \"\"; }\n        else if (m.index !== 0) { tokens.push({text: html.slice(0, m.index)}); html = html.slice(m.index); }\n        else if (m[1] === \"#if \") { tokens.push({condition: m[2]}); html = html.slice(m[0].length); }\n        else if (m[2]) { tokens.push({variable: m[2]}); html = html.slice(m[0].length); }\n        else if (m[3] === \"/if\") { tokens.push({close: \"if\"}); html = html.slice(m[0].length); }\n        else {\n            console.error(\"Error tokenizing tooltip when remaining template is \" + JSON.stringify(html) +\n                          \" and previous tokens are \" + JSON.stringify(tokens) +\n                          \" and current regex match is \" + JSON.stringify([m[1], m[2], m[3]]));\n            html=html.slice(m[0].length);\n        }\n    }\n    var astify = function() {\n        var token = tokens.shift();\n        if (typeof token.text !== \"undefined\" || token.variable) {\n            return token;\n        } else if (token.condition) {\n            token.then = [];\n            while(tokens.length > 0) {\n                if (tokens[0].close === \"if\") { tokens.shift(); break; }\n                token.then.push(astify());\n            }\n            return token;\n        } else {\n            console.error(\"Error making tooltip AST due to unknown token \" + JSON.stringify(token));\n            return { text: \"\" };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    var ast = [];\n    while (tokens.length > 0) ast.push(astify());\n\n    var resolve = function(variable) {\n        if (!resolve.cache.hasOwnProperty(variable)) {\n            resolve.cache[variable] = (new LocusZoom.Data.Field(variable)).resolve(data);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    var render_node = function(node) {\n        if (typeof node.text !== \"undefined\") {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                var value = resolve(node.variable);\n                if ([\"string\",\"number\",\"boolean\"].indexOf(typeof value) !== -1) { return value; }\n                if (value === null) { return \"\"; }\n            } catch (error) { console.error(\"Error while processing variable \" + JSON.stringify(node.variable)); }\n            return \"{{\" + node.variable + \"}}\";\n        } else if (node.condition) {\n            try {\n                var condition = resolve(node.condition);\n                if (condition || condition === 0) {\n                    return node.then.map(render_node).join(\"\");\n                }\n            } catch (error) { console.error(\"Error while processing condition \" + JSON.stringify(node.variable)); }\n            return \"\";\n        } else { console.error(\"Error rendering tooltip due to unknown AST node \" + JSON.stringify(node)); }\n    };\n    return ast.map(render_node).join(\"\");\n};\n\n/**\n * Shortcut method for getting the data bound to a tool tip.\n * @param {Element} node\n * @returns {*} The first element of data bound to the tooltip\n */\nLocusZoom.getToolTipData = function(node){\n    if (typeof node != \"object\" || typeof node.parentNode == \"undefined\"){\n        throw(\"Invalid node object\");\n    }\n    // If this node is a locuszoom tool tip then return its data\n    var selector = d3.select(node);\n    if (selector.classed(\"lz-data_layer-tooltip\") && typeof selector.data()[0] != \"undefined\"){\n        return selector.data()[0];\n    } else {\n        return LocusZoom.getToolTipData(node.parentNode);\n    }\n};\n\n/**\n * Shortcut method for getting a reference to the data layer that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.getToolTipDataLayer = function(node){\n    var data = LocusZoom.getToolTipData(node);\n    if (data.getDataLayer){ return data.getDataLayer(); }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the panel that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.getToolTipPanel = function(node){\n    var data_layer = LocusZoom.getToolTipDataLayer(node);\n    if (data_layer){ return data_layer.parent; }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the plot that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.getToolTipPlot = function(node){\n    var panel = LocusZoom.getToolTipPanel(node);\n    if (panel){ return panel.parent; }\n    return null;\n};\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nLocusZoom.generateCurtain = function(){\n    var curtain = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: function(content, css){\n            if (!this.curtain.showing){\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-curtain\").attr(\"id\", this.id + \".curtain\");\n                this.curtain.content_selector = this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-content\");\n                this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-dismiss\").html(\"Dismiss\")\n                    .on(\"click\", function(){\n                        this.curtain.hide();\n                    }.bind(this));\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        }.bind(this),\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: function(content, css){\n            if (!this.curtain.showing){ return this.curtain; }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == \"object\"){\n                this.curtain.selector.style(css);\n            }\n            // Update size and position\n            var page_origin = this.getPageOrigin();\n            this.curtain.selector.style({\n                top: page_origin.y + \"px\",\n                left: page_origin.x + \"px\",\n                width: this.layout.width + \"px\",\n                height: this.layout.height + \"px\"\n            });\n            this.curtain.content_selector.style({\n                \"max-width\": (this.layout.width - 40) + \"px\",\n                \"max-height\": (this.layout.height - 40) + \"px\"\n            });\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        }.bind(this),\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.curtain.showing){ return this.curtain; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        }.bind(this)\n    };\n    return curtain;\n};\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nLocusZoom.generateLoader = function(){\n    var loader = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: function(content){\n            // Generate loader\n            if (!this.loader.showing){\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-loader\").attr(\"id\", this.id + \".loader\");\n                this.loader.content_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-content\");\n                this.loader.progress_selector = this.loader.selector\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress-container\")\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress\");\n                /* TODO: figure out how to make this cancel button work\n                this.loader.cancel_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-cancel\").html(\"Cancel\")\n                    .on(\"click\", function(){\n                        this.loader.hide();\n                    }.bind(this));\n                */\n                this.loader.showing = true;\n                if (typeof content == \"undefined\"){ content = \"Loading...\"; }\n            }\n            return this.loader.update(content);\n        }.bind(this),\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: function(content, percent){\n            if (!this.loader.showing){ return this.loader; }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            var padding = 6; // is there a better place to store/define this?\n            var page_origin = this.getPageOrigin();\n            var loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector.style({\n                top: (page_origin.y + this.layout.height - loader_boundrect.height - padding) + \"px\",\n                left: (page_origin.x + padding) + \"px\"\n            });\n            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n            // Apply percent if provided\n            if (typeof percent == \"number\"){\n                this.loader.progress_selector.style({\n                    width: (Math.min(Math.max(percent, 1), 100)) + \"%\"\n                });\n            }\n            return this.loader;\n        }.bind(this),\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: function(){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", true);\n            return this.loader;\n        }.bind(this),\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: function(percent){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", false);\n            return this.loader.update(null, percent);\n        }.bind(this),\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.loader.showing){ return this.loader; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        }.bind(this)\n    };\n    return loader;\n};\n\n/**\n * Create a new subclass following classical inheritance patterns. Some registry singletons use this internally to\n *   enable code reuse and customization of known LZ core functionality.\n *\n * @param {Function} parent A parent class constructor that will be extended by the child class\n * @param {Object} extra An object of additional properties and methods to add/override behavior for the child class.\n *   The special \"constructor\" property can be used to specify a custom constructor, or it will call parent by default.\n *   Implementer must manage super calls when overriding the constructor.\n * @returns {Function} The constructor for the new child class\n */\nLocusZoom.subclass = function(parent, extra) {\n    if (typeof parent !== \"function\" ) {\n        throw \"Parent must be a callable constructor\";\n    }\n\n    extra = extra || {};\n    var Sub = extra.hasOwnProperty(\"constructor\") ? extra.constructor : function() {\n        parent.apply(this, arguments);\n    };\n\n    Sub.prototype = Object.create(parent.prototype);\n    Object.keys(extra).forEach(function(k) {\n        Sub.prototype[k] = extra[k];\n    });\n    return Sub;\n};\n\n\n/**\n * LocusZoom optional extensions will live under this namespace.\n *\n * Extension code is not part of the core LocusZoom app.js bundle.\n * @namespace\n * @public\n */\nLocusZoom.ext = {};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * Manage known layouts for all parts of the LocusZoom plot\n *\n * This registry allows for layouts to be reused and customized many times on a page, using a common base pattern.\n *   It handles the work of ensuring that each new instance of the layout has no shared state with other copies.\n *\n * @class\n */\nLocusZoom.Layouts = (function() {\n    var obj = {};\n    var layouts = {\n        \"plot\": {},\n        \"panel\": {},\n        \"data_layer\": {},\n        \"dashboard\": {},\n        \"tooltip\": {}\n    };\n\n    /**\n     * Generate a layout configuration object\n     * @param {('plot'|'panel'|'data_layer'|'dashboard'|'tooltip')} type The type of layout to retrieve\n     * @param {string} name Identifier of the predefined layout within the specified type\n     * @param {object} [modifications] Custom properties that override default settings for this layout\n     * @returns {object} A JSON-serializable object representation\n     */\n    obj.get = function(type, name, modifications) {\n        if (typeof type != \"string\" || typeof name != \"string\") {\n            throw(\"invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)\");\n        } else if (layouts[type][name]) {\n            // Get the base layout\n            var layout = LocusZoom.Layouts.merge(modifications || {}, layouts[type][name]);\n            // If \"unnamespaced\" is true then strike that from the layout and return the layout without namespacing\n            if (layout.unnamespaced){\n                delete layout.unnamespaced;\n                return JSON.parse(JSON.stringify(layout));\n            }\n            // Determine the default namespace for namespaced values\n            var default_namespace = \"\";\n            if (typeof layout.namespace == \"string\"){\n                default_namespace = layout.namespace;\n            } else if (typeof layout.namespace == \"object\" && Object.keys(layout.namespace).length){\n                if (typeof layout.namespace.default != \"undefined\"){\n                    default_namespace = layout.namespace.default;\n                } else {\n                    default_namespace = layout.namespace[Object.keys(layout.namespace)[0]].toString();\n                }\n            }\n            default_namespace += default_namespace.length ? \":\" : \"\";\n            // Apply namespaces to layout, recursively\n            var applyNamespaces = function(element, namespace){\n                if (namespace){\n                    if (typeof namespace == \"string\"){\n                        namespace = { default: namespace }; \n                    }\n                } else {\n                    namespace = { default: \"\" };\n                }\n                if (typeof element == \"string\"){\n                    var re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n                    var match, base, key, resolved_namespace;\n                    var replace = [];\n                    while ((match = re.exec(element)) !== null){\n                        base = match[0];\n                        key  = match[1].length ? match[1].replace(/(\\[|\\])/g,\"\") : null;\n                        resolved_namespace = default_namespace;\n                        if (namespace != null && typeof namespace == \"object\" && typeof namespace[key] != \"undefined\"){\n                            resolved_namespace = namespace[key] + (namespace[key].length ? \":\" : \"\");\n                        }\n                        replace.push({ base: base, namespace: resolved_namespace });\n                    }\n                    for (var r in replace){\n                        element = element.replace(replace[r].base, replace[r].namespace);\n                    }\n                } else if (typeof element == \"object\" && element != null){\n                    if (typeof element.namespace != \"undefined\"){\n                        var merge_namespace = (typeof element.namespace == \"string\") ? { default: element.namespace } : element.namespace;\n                        namespace = LocusZoom.Layouts.merge(namespace, merge_namespace);\n                    }\n                    var namespaced_element, namespaced_property;\n                    for (var property in element) {\n                        if (property === \"namespace\"){ continue; }\n                        namespaced_element = applyNamespaces(element[property], namespace);\n                        namespaced_property = applyNamespaces(property, namespace);\n                        if (property !== namespaced_property){\n                            delete element[property];\n                        }\n                        element[namespaced_property] = namespaced_element;\n                    }\n                }\n                return element;\n            };\n            layout = applyNamespaces(layout, layout.namespace);\n            // Return the layout as valid JSON only\n            return JSON.parse(JSON.stringify(layout));\n        } else {\n            throw(\"layout type [\" + type + \"] name [\" + name + \"] not found\");\n        }\n    };\n\n    /** @private */\n    obj.set = function(type, name, layout) {\n        if (typeof type != \"string\" || typeof name != \"string\" || typeof layout != \"object\"){\n            throw (\"unable to set new layout; bad arguments passed to set()\");\n        }\n        if (!layouts[type]){\n            layouts[type] = {};\n        }\n        if (layout){\n            return (layouts[type][name] = JSON.parse(JSON.stringify(layout)));\n        } else {\n            delete layouts[type][name];\n            return null;\n        }\n    };\n\n    /**\n     * Register a new layout definition by name.\n     *\n     * @param {string} type The type of layout to add. Usually, this will be one of the predefined LocusZoom types,\n     *   but if you pass a different name, this method will automatically create the new `type` bucket\n     * @param {string} name The identifier of the newly added layout\n     * @param {object} [layout] A JSON-serializable object containing configuration properties for this layout\n     * @returns The JSON representation of the newly created layout\n     */\n    obj.add = function(type, name, layout) {\n        return obj.set(type, name, layout);\n    };\n\n    /**\n     * List all registered layouts\n     * @param [type] Optionally narrow the list to only layouts of a specific type; else return all known layouts\n     * @returns {*}\n     */\n    obj.list = function(type) {\n        if (!layouts[type]){\n            var list = {};\n            Object.keys(layouts).forEach(function(type){\n                list[type] =  Object.keys(layouts[type]);\n            });\n            return list;\n        } else {\n            return Object.keys(layouts[type]);\n        }\n    };\n\n    /**\n     * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n     *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n     *\n     * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n     *\n     * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n     * @param {object} default_layout An object containing default settings.\n     * @returns The custom layout is modified in place and also returned from this method.\n     */\n    obj.merge = function (custom_layout, default_layout) {\n        if (typeof custom_layout !== \"object\" || typeof default_layout !== \"object\"){\n            throw(\"LocusZoom.Layouts.merge only accepts two layout objects; \" + (typeof custom_layout) + \", \" + (typeof default_layout) + \" given\");\n        }\n        for (var property in default_layout) {\n            if (!default_layout.hasOwnProperty(property)){ continue; }\n            // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n            // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n            // Also separate arrays from objects as a discrete type.\n            var custom_type  = custom_layout[property] === null ? \"undefined\" : typeof custom_layout[property];\n            var default_type = typeof default_layout[property];\n            if (custom_type === \"object\" && Array.isArray(custom_layout[property])){ custom_type = \"array\"; }\n            if (default_type === \"object\" && Array.isArray(default_layout[property])){ default_type = \"array\"; }\n            // Unsupported property types: throw an exception\n            if (custom_type === \"function\" || default_type === \"function\"){\n                throw(\"LocusZoom.Layouts.merge encountered an unsupported property type\");\n            }\n            // Undefined custom value: pull the default value\n            if (custom_type === \"undefined\"){\n                custom_layout[property] = JSON.parse(JSON.stringify(default_layout[property]));\n                continue;\n            }\n            // Both values are objects: merge recursively\n            if (custom_type === \"object\" && default_type === \"object\"){\n                custom_layout[property] = LocusZoom.Layouts.merge(custom_layout[property], default_layout[property]);\n                continue;\n            }\n        }\n        return custom_layout;\n    };\n\n    return obj;\n})();\n\n\n/**\n * Tooltip Layouts\n * @namespace LocusZoom.Layouts.tooltips\n */\n\n// TODO: Improve documentation of predefined types within layout namespaces\nLocusZoom.Layouts.add(\"tooltip\", \"standard_association\", {\n    namespace: { \"assoc\": \"assoc\" },\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<strong>{{{{namespace[assoc]}}variant}}</strong><br>\"\n        + \"P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation}}</strong><br>\"\n        + \"Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele}}</strong><br>\"\n        + \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipDataLayer(this).makeLDReference(LocusZoom.getToolTipData(this));\\\">Make LD Reference</a><br>\"\n});\n\nvar covariates_model_association = LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true });\ncovariates_model_association.html += \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\\\">Condition on Variant</a><br>\";\nLocusZoom.Layouts.add(\"tooltip\", \"covariates_model_association\", covariates_model_association);\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_genes\", {\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<h4><strong><i>{{gene_name}}</i></strong></h4>\"\n        + \"<div style=\\\"float: left;\\\">Gene ID: <strong>{{gene_id}}</strong></div>\"\n        + \"<div style=\\\"float: right;\\\">Transcript ID: <strong>{{transcript_id}}</strong></div>\"\n        + \"<div style=\\\"clear: both;\\\"></div>\"\n        + \"<table>\"\n        + \"<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>\"\n        + \"<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{n_syn}}</td><td>z = {{syn_z}}</td></tr>\"\n        + \"<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{n_mis}}</td><td>z = {{mis_z}}</td></tr>\"\n        + \"<tr><td>LoF</td><td>{{exp_lof}}</td><td>{{n_lof}}</td><td>pLI = {{pLI}}</td></tr>\"\n        + \"</table>\"\n        + \"<a href=\\\"http://exac.broadinstitute.org/gene/{{gene_id}}\\\" target=\\\"_new\\\">More data on ExAC</a>\"\n});\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    closable: false,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"{{{{namespace[intervals]}}state_name}}<br>{{{{namespace[intervals]}}start}}-{{{{namespace[intervals]}}end}}\"\n});\n\n/**\n * Data Layer Layouts: represent specific information from a data source\n * @namespace Layouts.data_layer\n*/\n\nLocusZoom.Layouts.add(\"data_layer\", \"significance\", {\n    id: \"significance\",\n    type: \"orthogonal_line\",\n    orientation: \"horizontal\",\n    offset: 4.522\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"recomb_rate\", {\n    namespace: { \"recomb\": \"recomb\" },\n    id: \"recombrate\",\n    type: \"line\",\n    fields: [\"{{namespace[recomb]}}position\", \"{{namespace[recomb]}}recomb_rate\"],\n    z_index: 1,\n    style: {\n        \"stroke\": \"#0000FF\",\n        \"stroke-width\": \"1.5px\"\n    },\n    x_axis: {\n        field: \"{{namespace[recomb]}}position\"\n    },\n    y_axis: {\n        axis: 2,\n        field: \"{{namespace[recomb]}}recomb_rate\",\n        floor: 0,\n        ceiling: 100\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"association_pvalues\", {\n    namespace: { \"assoc\": \"assoc\", \"ld\": \"ld\" },\n    id: \"associationpvalues\",\n    type: \"scatter\",\n    point_shape: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: \"diamond\",\n            else: \"circle\"\n        }\n    },\n    point_size: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40\n        }\n    },\n    color: [\n        {\n            scale_function: \"if\",\n            field: \"{{namespace[ld]}}isrefvar\",\n            parameters: {\n                field_value: 1,\n                then: \"#9632b8\"\n            }\n        },\n        {\n            scale_function: \"numerical_bin\",\n            field: \"{{namespace[ld]}}state\",\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                values: [\"#357ebd\",\"#46b8da\",\"#5cb85c\",\"#eea236\",\"#d43f3a\"]\n            }\n        },\n        \"#B8B8B8\"\n    ],\n    legend: [\n        { shape: \"diamond\", color: \"#9632b8\", size: 40, label: \"LD Ref Var\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#d43f3a\", size: 40, label: \"1.0 > r² ≥ 0.8\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#eea236\", size: 40, label: \"0.8 > r² ≥ 0.6\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#5cb85c\", size: 40, label: \"0.6 > r² ≥ 0.4\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#46b8da\", size: 40, label: \"0.4 > r² ≥ 0.2\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#357ebd\", size: 40, label: \"0.2 > r² ≥ 0.0\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#B8B8B8\", size: 40, label: \"no r² data\", class: \"lz-data_layer-scatter\" }\n    ],\n    fields: [\"{{namespace[assoc]}}variant\", \"{{namespace[assoc]}}position\", \"{{namespace[assoc]}}log_pvalue\", \"{{namespace[assoc]}}log_pvalue|logtoscinotation\", \"{{namespace[assoc]}}ref_allele\", \"{{namespace[ld]}}state\", \"{{namespace[ld]}}isrefvar\"],\n    id_field: \"{{namespace[assoc]}}variant\",\n    z_index: 2,\n    x_axis: {\n        field: \"{{namespace[assoc]}}position\"\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[assoc]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [ 0, 10 ]\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"phewas_pvalues\", {\n    namespace: {\"phewas\": \"phewas\"},\n    id: \"phewaspvalues\",\n    type: \"category_scatter\",\n    point_shape: \"circle\",\n    point_size: 70,\n    tooltip_positioning: \"vertical\",\n    id_field: \"{{namespace[phewas]}}id\",\n    fields: [\"{{namespace[phewas]}}id\", \"{{namespace[phewas]}}log_pvalue\", \"{{namespace[phewas]}}trait_group\", \"{{namespace[phewas]}}trait_label\"],\n    x_axis: {\n        field: \"{{namespace[phewas]}}x\",  // Synthetic/derived field added by `category_scatter` layer\n        category_field: \"{{namespace[phewas]}}trait_group\",\n        lower_buffer: 0.025,\n        upper_buffer: 0.025\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[phewas]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.15\n    },\n    color: {\n        field: \"{{namespace[phewas]}}trait_group\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: [\"highlighted\", \"selected\"] },\n        hide: { and: [\"unhighlighted\", \"unselected\"] },\n        html: [\n            \"<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>\",\n            \"<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>\",\n            \"<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>\"\n        ].join(\"\")\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    label: {\n        text: \"{{{{namespace[phewas]}}trait_label}}\",\n        spacing: 6,\n        lines: {\n            style: {\n                \"stroke-width\": \"2px\",\n                \"stroke\": \"#333333\",\n                \"stroke-dasharray\": \"2px 2px\"\n            }\n        },\n        filters: [\n            {\n                field: \"{{namespace[phewas]}}log_pvalue\",\n                operator: \">=\",\n                value: 20\n            }\n        ],\n        style: {\n            \"font-size\": \"14px\",\n            \"font-weight\": \"bold\",\n            \"fill\": \"#333333\"\n        }\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genes\", {\n    namespace: { \"gene\": \"gene\", \"constraint\": \"constraint\" },\n    id: \"genes\",\n    type: \"genes\",\n    fields: [\"{{namespace[gene]}}all\", \"{{namespace[constraint]}}all\"],\n    id_field: \"gene_id\",\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_genes\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genome_legend\", {\n    namespace: { \"genome\": \"genome\" },\n    id: \"genome_legend\",\n    type: \"genome_legend\",\n    fields: [\"{{namespace[genome]}}chr\", \"{{namespace[genome]}}base_pairs\"],\n    x_axis: {\n        floor: 0,\n        ceiling: 2881033286\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    id: \"intervals\",\n    type: \"intervals\",\n    fields: [\"{{namespace[intervals]}}start\",\"{{namespace[intervals]}}end\",\"{{namespace[intervals]}}state_id\",\"{{namespace[intervals]}}state_name\"],\n    id_field: \"{{namespace[intervals]}}start\",\n    start_field: \"{{namespace[intervals]}}start\",\n    end_field: \"{{namespace[intervals]}}end\",\n    track_split_field: \"{{namespace[intervals]}}state_id\",\n    split_tracks: true,\n    always_hide_legend: false,\n    color: {\n        field: \"{{namespace[intervals]}}state_id\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [1,2,3,4,5,6,7,8,9,10,11,12,13],\n            values: [\"rgb(212,63,58)\", \"rgb(250,120,105)\", \"rgb(252,168,139)\", \"rgb(240,189,66)\", \"rgb(250,224,105)\", \"rgb(240,238,84)\", \"rgb(244,252,23)\", \"rgb(23,232,252)\", \"rgb(32,191,17)\", \"rgb(23,166,77)\", \"rgb(32,191,17)\", \"rgb(162,133,166)\", \"rgb(212,212,212)\"],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    legend: [\n        { shape: \"rect\", color: \"rgb(212,63,58)\", width: 9, label: \"Active Promoter\", \"{{namespace[intervals]}}state_id\": 1 },\n        { shape: \"rect\", color: \"rgb(250,120,105)\", width: 9, label: \"Weak Promoter\", \"{{namespace[intervals]}}state_id\": 2 },\n        { shape: \"rect\", color: \"rgb(252,168,139)\", width: 9, label: \"Poised Promoter\", \"{{namespace[intervals]}}state_id\": 3 },\n        { shape: \"rect\", color: \"rgb(240,189,66)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 4 },\n        { shape: \"rect\", color: \"rgb(250,224,105)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 5 },\n        { shape: \"rect\", color: \"rgb(240,238,84)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 6 },\n        { shape: \"rect\", color: \"rgb(244,252,23)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 7 },\n        { shape: \"rect\", color: \"rgb(23,232,252)\", width: 9, label: \"Insulator\", \"{{namespace[intervals]}}state_id\": 8 },\n        { shape: \"rect\", color: \"rgb(32,191,17)\", width: 9, label: \"Transcriptional transition\", \"{{namespace[intervals]}}state_id\": 9 },\n        { shape: \"rect\", color: \"rgb(23,166,77)\", width: 9, label: \"Transcriptional elongation\", \"{{namespace[intervals]}}state_id\": 10 },\n        { shape: \"rect\", color: \"rgb(136,240,129)\", width: 9, label: \"Weak transcribed\", \"{{namespace[intervals]}}state_id\": 11 },\n        { shape: \"rect\", color: \"rgb(162,133,166)\", width: 9, label: \"Polycomb-repressed\", \"{{namespace[intervals]}}state_id\": 12 },\n        { shape: \"rect\", color: \"rgb(212,212,212)\", width: 9, label: \"Heterochromatin / low signal\", \"{{namespace[intervals]}}state_id\": 13 }\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_intervals\", { unnamespaced: true })\n});\n\n/**\n * Dashboard Layouts: toolbar buttons etc\n  * @namespace Layouts.dashboard\n */\nLocusZoom.Layouts.add(\"dashboard\", \"standard_panel\", {\n    components: [\n        {\n            type: \"remove_panel\",\n            position: \"right\",\n            color: \"red\",\n            group_position: \"end\"\n        },\n        {\n            type: \"move_panel_up\",\n            position: \"right\",\n            group_position: \"middle\"\n        },\n        {\n            type: \"move_panel_down\",\n            position: \"right\",\n            group_position: \"start\",\n            style: { \"margin-left\": \"0.75em\" }\n        }\n    ]\n});                 \n\nLocusZoom.Layouts.add(\"dashboard\", \"standard_plot\", {\n    components: [\n        {\n            type: \"title\",\n            title: \"LocusZoom\",\n            subtitle: \"<a href=\\\"https://statgen.github.io/locuszoom/\\\" target=\\\"_blank\\\">v\" + LocusZoom.version + \"</a>\",\n            position: \"left\"\n        },\n        {\n            type: \"download\",\n            position: \"right\"\n        }\n    ]\n});\n\nvar covariates_model_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\ncovariates_model_plot_dashboard.components.push({\n    type: \"covariates_model\",\n    button_html: \"Model\",\n    button_title: \"Show and edit covariates currently in model\",\n    position: \"left\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"covariates_model_plot\", covariates_model_plot_dashboard);\n\nvar region_nav_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 500000,\n    button_html: \">>\",\n    position: \"right\",\n    group_position: \"end\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 50000,\n    button_html: \">\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: 0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: -0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -50000,\n    button_html: \"<\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -500000,\n    button_html: \"<<\",\n    position: \"right\",\n    group_position: \"start\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"region_nav_plot\", region_nav_plot_dashboard);\n\n/**\n * Panel Layouts\n * @namespace Layouts.panel\n */\n\nLocusZoom.Layouts.add(\"panel\", \"association\", {\n    id: \"association\",\n    width: 800,\n    height: 225,\n    min_width:  400,\n    min_height: 200,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_legend\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {\n        x: {\n            label: \"Chromosome {{chr}} (Mb)\",\n            label_offset: 32,\n            tick_format: \"region\",\n            extent: \"state\"\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        },\n        y2: {\n            label: \"Recombination Rate (cM/Mb)\",\n            label_offset: 40\n        }\n    },\n    legend: {\n        orientation: \"vertical\",\n        origin: { x: 55, y: 40 },\n        hidden: true\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"recomb_rate\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"association_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genes\", {\n    id: \"genes\",\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 112.5,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"resize_to_data\",\n            position: \"right\"\n        });\n        return l;\n    })(),   \n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genes\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"phewas\", {\n    id: \"phewas\",\n    width: 800,\n    height: 300,\n    min_width:  800,\n    min_height: 300,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    \"font-weight\": \"bold\",\n                    \"font-size\": \"11px\",\n                    \"text-anchor\": \"start\"\n                },\n                transform: \"rotate(50)\",\n                position: \"left\"  // Special param recognized by `category_scatter` layers\n            }\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"phewas_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genome_legend\", {\n    id: \"genome_legend\",\n    width: 800,\n    height: 50,\n    origin: { x: 0, y: 300 },\n    min_width:  800,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 0, right: 50, bottom: 35, left: 50 },\n    axes: {\n        x: {\n            label: \"Genomic Position (number denotes chromosome)\",\n            label_offset: 35,\n            ticks: [\n                {\n                    x: 124625310,\n                    text: \"1\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 370850307,\n                    text: \"2\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 591461209,\n                    text: \"3\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 786049562,\n                    text: \"4\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 972084330,\n                    text: \"5\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1148099493,\n                    text: \"6\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1313226358,\n                    text: \"7\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1465977701,\n                    text: \"8\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1609766427,\n                    text: \"9\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1748140516,\n                    text: \"10\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1883411148,\n                    text: \"11\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2017840353,\n                    text: \"12\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2142351240,\n                    text: \"13\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2253610949,\n                    text: \"14\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2358551415,\n                    text: \"15\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2454994487,\n                    text: \"16\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2540769469,\n                    text: \"17\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2620405698,\n                    text: \"18\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2689008813,\n                    text: \"19\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2750086065,\n                    text: \"20\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2805663772,\n                    text: \"21\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2855381003,\n                    text: \"22\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                }\n            ]\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genome_legend\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"intervals\", {\n    id: \"intervals\",\n    width: 1000,\n    height: 50,\n    min_width: 500,\n    min_height: 50,\n    margin: { top: 25, right: 150, bottom: 5, left: 50 },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_split_tracks\",\n            data_layer_id: \"intervals\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    legend: {\n        hidden: true,\n        orientation: \"horizontal\",\n        origin: { x: 50, y: 0 },\n        pad_from_bottom: 5\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"intervals\", { unnamespaced: true })\n    ]\n});\n\n\n/**\n * Plot Layouts\n * @namespace Layouts.plot\n */\n\nLocusZoom.Layouts.add(\"plot\", \"standard_association\", {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, proportional_height: 0.5 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, proportional_height: 0.5 })\n    ]\n});\n\n// Shortcut to \"StandardLayout\" for backward compatibility\nLocusZoom.StandardLayout = LocusZoom.Layouts.get(\"plot\", \"standard_association\");\n\nLocusZoom.Layouts.add(\"plot\", \"standard_phewas\", {\n    width: 800,\n    height: 600,\n    min_width: 800,\n    min_height: 600,\n    responsive_resize: true,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true } ),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"phewas\", { unnamespaced: true, proportional_height: 0.45 }),\n        LocusZoom.Layouts.get(\"panel\", \"genome_legend\", { unnamespaced: true, proportional_height: 0.1 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", {\n            unnamespaced: true, proportional_height: 0.45,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: \"Chromosome {{chr}} (Mb)\",\n                    label_offset: 32,\n                    tick_format: \"region\",\n                    extent: \"state\"\n                }\n            }\n        })\n    ],\n    mouse_guide: false\n});\n\nLocusZoom.Layouts.add(\"plot\", \"interval_association\", {\n    state: {},\n    width: 800,\n    height: 550,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, width: 800, proportional_height: (225/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"intervals\", { unnamespaced: true, proportional_height: (120/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, width: 800, proportional_height: (225/570) })\n    ]\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @class\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n*/\nLocusZoom.DataLayer = function(layout, parent) {\n    /** @member {Boolean} */\n    this.initialized = false;\n    /** @member {Number} */\n    this.layout_idx = null;\n\n    /** @member {String} */\n    this.id     = null;\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent || null;\n    /**\n     * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n     */\n    this.svg    = {};\n\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    if (typeof parent != \"undefined\" && parent instanceof LocusZoom.Panel){ this.parent_plot = parent.parent; }\n\n    /** @member {Object} */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.DataLayer.DefaultLayout);\n    if (this.layout.id){ this.id = this.layout.id; }\n\n    // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n    if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== \"number\"){ this.layout.x_axis.axis = 1; }\n    if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== \"number\"){ this.layout.y_axis.axis = 1; }\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n    /** @member {Object} */\n    this.state = {};\n    /** @member {String} */\n    this.state_id = null;\n\n    this.setDefaultState();\n\n    // Initialize parameters for storing data and tool tips\n    /** @member {Array} */\n    this.data = [];\n    if (this.layout.tooltip){\n        /** @member {Object} */\n        this.tooltips = {};\n    }\n\n    // Initialize flags for tracking global statuses\n    this.global_statuses = {\n        \"highlighted\": false,\n        \"selected\": false,\n        \"faded\": false,\n        \"hidden\": false\n    };\n    \n    return this;\n\n};\n\n/**\n * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n *\n * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn\n *\n *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n * @param fieldName\n * @param namespace\n * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n * @returns {String} The raw string added to the fields array\n */\nLocusZoom.DataLayer.prototype.addField = function(fieldName, namespace, transformations) {\n    if (!fieldName || !namespace) {\n        throw \"Must specify field name and namespace to use when adding field\";\n    }\n    var fieldString = namespace + \":\" + fieldName;\n    if (transformations) {\n        fieldString += \"|\";\n        if (typeof transformations === \"string\") {\n            fieldString += transformations;\n        } else if (Array.isArray(transformations)) {\n            fieldString += transformations.join(\"|\");\n        } else {\n            throw \"Must provide transformations as either a string or array of strings\";\n        }\n    }\n    var fields = this.layout.fields;\n    if (fields.indexOf(fieldString) === -1) {\n        fields.push(fieldString);\n    }\n    return fieldString;\n};\n\n/**\n * Define default state that should get tracked during the lifetime of this layer.\n *\n * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n */\nLocusZoom.DataLayer.prototype.setDefaultState = function() {\n    // Define state parameters specific to this data layer. Within plot state, this will live under a key\n    //  `panel_name.layer_name`.\n    if (this.parent){\n        this.state = this.parent.state;\n        this.state_id = this.parent.id + \".\" + this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n        LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n            this.state[this.state_id][status] = this.state[this.state_id][status] || [];\n        }.bind(this));\n    }\n};\n\n/**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nLocusZoom.DataLayer.DefaultLayout = {\n    type: \"\",\n    fields: [],\n    x_axis: {},\n    y_axis: {}\n};\n\n/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb/antiverb and an adjective. Verbs and antiverbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[], menu_antiverbs: String[]}}\n */\nLocusZoom.DataLayer.Statuses = {\n    verbs: [\"highlight\", \"select\", \"fade\", \"hide\"],\n    adjectives: [\"highlighted\", \"selected\", \"faded\", \"hidden\"],\n    menu_antiverbs: [\"unhighlight\", \"deselect\", \"unfade\", \"show\"]\n};\n\n/**\n * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n *\n * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n */\nLocusZoom.DataLayer.prototype.getBaseId = function(){\n    return this.parent_plot.id + \".\" + this.parent.id + \".\" + this.id;\n};\n\n/**\n * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n *\n * May be used by operations that resize the data layer to fit available data\n *\n * @public\n * @returns {number}\n */\nLocusZoom.DataLayer.prototype.getAbsoluteDataHeight = function(){\n    var dataBCR = this.svg.group.node().getBoundingClientRect();\n    return dataBCR.height;\n};\n\n/**\n * Whether transitions can be applied to this data layer\n * @returns {boolean}\n */\nLocusZoom.DataLayer.prototype.canTransition = function(){\n    if (!this.layout.transition){ return false; }\n    return !(this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.panel_id);\n};\n\n/**\n * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n * @param {String|Object} element\n * @returns {String}\n */\nLocusZoom.DataLayer.prototype.getElementId = function(element){\n    var element_id = \"element\";\n    if (typeof element == \"string\"){\n        element_id = element;\n    } else if (typeof element == \"object\"){\n        var id_field = this.layout.id_field || \"id\";\n        if (typeof element[id_field] == \"undefined\"){\n            throw(\"Unable to generate element ID\");\n        }\n        element_id = element[id_field].toString().replace(/\\W/g,\"\");\n    }\n    return (this.getBaseId() + \"-\" + element_id).replace(/(:|\\.|\\[|\\]|,)/g, \"_\");\n};\n\n/**\n * Fetch an ID that may bind a data element to a separate visual node for displaying status\n * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n * even a common/shared node to show status across many elements in a set.\n * Abstract method. It should be overridden by data layers that implement seperate status\n * nodes specifically to the use case of the data layer type.\n * @param {String|Object} element\n * @returns {String|null}\n */\nLocusZoom.DataLayer.prototype.getElementStatusNodeId = function(element){\n    return null;\n};\n\n/**\n * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n *   referenced by the unique identifier for the element\n\n * @param {String} id The unique identifier for the element, as defined by `getElementId`\n * @returns {Object|null} The data bound to that element\n */\nLocusZoom.DataLayer.prototype.getElementById = function(id){\n    var selector = d3.select(\"#\" + id.replace(/(:|\\.|\\[|\\]|,)/g, \"\\\\$1\"));\n    if (!selector.empty() && selector.data() && selector.data().length){\n        return selector.data()[0];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Basic method to apply arbitrary methods and properties to data elements.\n *   This is called on all data immediately after being fetched.\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyDataMethods = function(){\n    this.data.forEach(function(d, i){\n        // Basic toHTML() method - return the stringified value in the id_field, if defined.\n        this.data[i].toHTML = function(){\n            var id_field = this.layout.id_field || \"id\";\n            var html = \"\";\n            if (this.data[i][id_field]){ html = this.data[i][id_field].toString(); }\n            return html;\n        }.bind(this);\n        // getDataLayer() method - return a reference to the data layer\n        this.data[i].getDataLayer = function(){\n            return this;\n        }.bind(this);\n        // deselect() method - shortcut method to deselect the element\n        this.data[i].deselect = function(){\n            var data_layer = this.getDataLayer();\n            data_layer.unselectElement(this);\n        };\n    }.bind(this));\n    this.applyCustomDataMethods();\n    return this;\n};\n\n/**\n * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyCustomDataMethods = function(){\n    return this;\n};\n\n/**\n * Initialize a data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.initialize = function(){\n\n    // Append a container group element to house the main data layer group element and the clip path\n    this.svg.container = this.parent.svg.group.append(\"g\")\n        .attr(\"class\", \"lz-data_layer-container\")\n        .attr(\"id\", this.getBaseId() + \".data_layer_container\");\n        \n    // Append clip path to the container element\n    this.svg.clipRect = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\")\n        .append(\"rect\");\n    \n    // Append svg group for rendering all data layer elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".data_layer\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    return this;\n\n};\n\n/**\n * Move a data layer up relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveUp = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Move a data layer down relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveDown = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Apply scaling functions to an element or parameter as needed, based on its layout and the element's data\n * If the layout parameter is already a primitive type, simply return the value as given\n * @param {Array|Number|String|Object} layout\n * @param {*} data The value to be used with the filter\n * @returns {*} The transformed value\n */\nLocusZoom.DataLayer.prototype.resolveScalableParameter = function(layout, data){\n    var ret = null;\n    if (Array.isArray(layout)){\n        var idx = 0;\n        while (ret === null && idx < layout.length){\n            ret = this.resolveScalableParameter(layout[idx], data);\n            idx++;\n        }\n    } else {\n        switch (typeof layout){\n        case \"number\":\n        case \"string\":\n            ret = layout;\n            break;\n        case \"object\":\n            if (layout.scale_function){\n                if(layout.field) {\n                    var f = new LocusZoom.Data.Field(layout.field);\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, f.resolve(data));\n                } else {\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, data);\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n};\n\n/**\n * Generate dimension extent function based on layout parameters\n * @param {('x'|'y')} dimension\n */\nLocusZoom.DataLayer.prototype.getAxisExtent = function(dimension){\n\n    if ([\"x\", \"y\"].indexOf(dimension) === -1){\n        throw(\"Invalid dimension identifier passed to LocusZoom.DataLayer.getAxisExtent()\");\n    }\n\n    var axis_name = dimension + \"_axis\";\n    var axis_layout = this.layout[axis_name];\n\n    // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n    if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)){\n        return [+axis_layout.floor, +axis_layout.ceiling];\n    }\n\n    // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n    var data_extent = [];\n    if (axis_layout.field && this.data) {\n        if (!this.data.length) {\n            // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n            //  because we don't need padding around an empty screen)\n            data_extent = axis_layout.min_extent || [];\n            return data_extent;\n        } else {\n            data_extent = d3.extent(this.data, function (d) {\n                var f = new LocusZoom.Data.Field(axis_layout.field);\n                return +f.resolve(d);\n            });\n\n            // Apply upper/lower buffers, if applicable\n            var original_extent_span = data_extent[1] - data_extent[0];\n            if (!isNaN(axis_layout.lower_buffer)) {\n                data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n            }\n            if (!isNaN(axis_layout.upper_buffer)) {\n                data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n            }\n\n            if (typeof axis_layout.min_extent == \"object\") {\n                // The data should span at least the range specified by min_extent, an array with [low, high]\n                var range_min = axis_layout.min_extent[0];\n                var range_max = axis_layout.min_extent[1];\n                if (!isNaN(range_min) && !isNaN(range_max)) {\n                    data_extent[0] = Math.min(data_extent[0], range_min);\n                }\n                if (!isNaN(range_max)) {\n                    data_extent[1] = Math.max(data_extent[1], range_max);\n                }\n            }\n            // If specified, floor and ceiling will override the actual data range\n            return [\n                isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling\n            ];\n        }\n    }\n\n    // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n    // then default to using the state-defined region as the extent\n    if (dimension === \"x\" && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n        return [this.state.start, this.state.end];\n    }\n\n    // No conditions met for generating a valid extent, return an empty array\n    return [];\n\n};\n\n/**\n * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n *\n *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n *\n * @param {('x'|'y1'|'y2')} dimension\n * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n *   and meanings of these parameters may vary between different data layers.\n * @returns {Object[]}\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.DataLayer.prototype.getTicks = function (dimension, config) {\n    if ([\"x\", \"y1\", \"y2\"].indexOf(dimension) === -1) {\n        throw(\"Invalid dimension identifier at layer level\" + dimension);\n    }\n    return [];\n};\n\n/**\n * Generate a tool tip for a given element\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.createTooltip = function(d, id){\n    if (typeof this.layout.tooltip != \"object\"){\n        throw (\"DataLayer [\" + this.id + \"] layout does not define a tooltip\");\n    }\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    if (this.tooltips[id]){\n        this.positionTooltip(id);\n        return;\n    }\n    this.tooltips[id] = {\n        data: d,\n        arrow: null,\n        selector: d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n            .attr(\"class\", \"lz-data_layer-tooltip\")\n            .attr(\"id\", id + \"-tooltip\")\n    };\n    this.updateTooltip(d);\n    return this;\n};\n\n/**\n * Update a tool tip (generate its inner HTML)\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.updateTooltip = function(d, id){\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    // Empty the tooltip of all HTML (including its arrow!)\n    this.tooltips[id].selector.html(\"\");\n    this.tooltips[id].arrow = null;\n    // Set the new HTML\n    if (this.layout.tooltip.html){\n        this.tooltips[id].selector.html(LocusZoom.parseFields(d, this.layout.tooltip.html));\n    }\n    // If the layout allows tool tips on this data layer to be closable then add the close button\n    // and add padding to the tooltip to accommodate it\n    if (this.layout.tooltip.closable){\n        this.tooltips[id].selector.insert(\"button\", \":first-child\")\n            .attr(\"class\", \"lz-tooltip-close-button\")\n            .attr(\"title\", \"Close\")\n            .text(\"×\")\n            .on(\"click\", function(){\n                this.destroyTooltip(id);\n            }.bind(this));\n    }\n    // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n    this.tooltips[id].selector.data([d]);\n    // Reposition and draw a new arrow\n    this.positionTooltip(id);\n    return this;\n};\n\n/**\n * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyTooltip = function(d, id){\n    if (typeof d == \"string\"){\n        id = d;\n    } else if (typeof id == \"undefined\"){\n        id = this.getElementId(d);\n    }\n    if (this.tooltips[id]){\n        if (typeof this.tooltips[id].selector == \"object\"){\n            this.tooltips[id].selector.remove();\n        }\n        delete this.tooltips[id];\n    }\n    return this;\n};\n\n/**\n * Loop through and destroy all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.destroyTooltip(id);\n    }\n    return this;\n};\n\n//\n/**\n * Position tool tip - naïve function to place a tool tip to the lower right of the current mouse element\n *   Most data layers reimplement this method to position tool tips specifically for the data they display\n * @param {String} id The identifier of the tooltip to position\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionTooltip = function(id){\n    if (typeof id != \"string\"){\n        throw (\"Unable to position tooltip: id is not a string\");\n    }\n    // Position the div itself\n    this.tooltips[id].selector\n        .style(\"left\", (d3.event.pageX) + \"px\")\n        .style(\"top\", (d3.event.pageY) + \"px\");\n    // Create / update position on arrow connecting tooltip to data\n    if (!this.tooltips[id].arrow){\n        this.tooltips[id].arrow = this.tooltips[id].selector.append(\"div\")\n            .style(\"position\", \"absolute\")\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_top_left\");\n    }\n    this.tooltips[id].arrow\n        .style(\"left\", \"-1px\")\n        .style(\"top\", \"-1px\");\n    return this;\n};\n\n/**\n * Loop through and position all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.positionTooltip(id);\n    }\n    return this;\n};\n\n/**\n * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n * @param {String|Object} element The element associated with the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.showOrHideTooltip = function(element){\n    \n    if (typeof this.layout.tooltip != \"object\"){ return; }\n    var id = this.getElementId(element);\n\n    var resolveStatus = function(statuses, directive, operator){\n        var status = null;\n        if (typeof statuses != \"object\" || statuses === null){ return null; }\n        if (Array.isArray(directive)){\n            if (typeof operator == \"undefined\"){ operator = \"and\"; }\n            if (directive.length === 1){\n                status = statuses[directive[0]];\n            } else {\n                status = directive.reduce(function(previousValue, currentValue) {\n                    if (operator === \"and\"){\n                        return statuses[previousValue] && statuses[currentValue];\n                    } else if (operator === \"or\"){\n                        return statuses[previousValue] || statuses[currentValue];\n                    }\n                    return null;\n                });\n            }\n        } else if (typeof directive == \"object\"){\n            var sub_status;\n            for (var sub_operator in directive){\n                sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                if (status === null){\n                    status = sub_status;\n                } else if (operator === \"and\"){\n                    status = status && sub_status;\n                } else if (operator === \"or\"){\n                    status = status || sub_status;\n                }\n            }\n        }\n        return status;\n    };\n\n    var show_directive = {};\n    if (typeof this.layout.tooltip.show == \"string\"){\n        show_directive = { and: [ this.layout.tooltip.show ] };\n    } else if (typeof this.layout.tooltip.show == \"object\"){\n        show_directive = this.layout.tooltip.show;\n    }\n\n    var hide_directive = {};\n    if (typeof this.layout.tooltip.hide == \"string\"){\n        hide_directive = { and: [ this.layout.tooltip.hide ] };\n    } else if (typeof this.layout.tooltip.hide == \"object\"){\n        hide_directive = this.layout.tooltip.hide;\n    }\n\n    var statuses = {};\n    LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n        var antistatus = \"un\" + status;\n        statuses[status] = this.state[this.state_id][status].indexOf(id) !== -1;\n        statuses[antistatus] = !statuses[status];\n    }.bind(this));\n\n    var show_resolved = resolveStatus(statuses, show_directive);\n    var hide_resolved = resolveStatus(statuses, hide_directive);\n\n    // Only show tooltip if the resolved logic explicitly shows and explicitly not hides the tool tip\n    // Otherwise ensure tooltip does not exist\n    if (show_resolved && !hide_resolved){\n        this.createTooltip(element);\n    } else {\n        this.destroyTooltip(element);\n    }\n\n    return this;\n    \n};\n\n/**\n * Find the elements (or indices) that match any of a set of provided filters\n * @protected\n * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n *   [field, operator, value] for other operators\n * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n *   elements, or references to the elements themselves\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filter = function(filters, return_type){\n    if (typeof return_type == \"undefined\" || [\"indexes\",\"elements\"].indexOf(return_type) === -1){\n        return_type = \"indexes\";\n    }\n    if (!Array.isArray(filters)){ return []; }\n    var test = function(element, filter){\n        var operators = {\n            \"=\": function(a,b){ return a === b; },\n            \"<\": function(a,b){ return a < b; },\n            \"<=\": function(a,b){ return a <= b; },\n            \">\": function(a,b){ return a > b; },\n            \">=\": function(a,b){ return a >= b; },\n            \"%\": function(a,b){ return a % b; }\n        };\n        if (!Array.isArray(filter)){ return false; }\n        if (filter.length === 2){\n            return element[filter[0]] === filter[1];\n        } else if (filter.length === 3 && operators[filter[1]]){\n            return operators[filter[1]](element[filter[0]], filter[2]);\n        } else {\n            return false;\n        }\n    };\n    var matches = [];\n    this.data.forEach(function(element, idx){\n        var match = true;\n        filters.forEach(function(filter){\n            if (!test(element, filter)){ match = false; }\n        });\n        if (match){ matches.push(return_type === \"indexes\" ? idx : element); }\n    });\n    return matches;\n};\n\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterIndexes = function(filters){ return this.filter(filters, \"indexes\"); };\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterElements = function(filters){ return this.filter(filters, \"elements\"); };\n\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset a single element's status\n    // TODO: Improve documentation for dynamically generated methods/properties\n    LocusZoom.DataLayer.prototype[verb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.DataLayer.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.DataLayer.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n/**\n * Toggle a status (e.g. highlighted, selected, identified) on an element\n * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n * @param {String|Object} element The data bound to the element of interest\n * @param {Boolean} toggle True to add the status (and associated CSS styles); false to remove it\n * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatus = function(status, element, toggle, exclusive){\n    // Sanity checks\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof element == \"undefined\"){\n        throw(\"Invalid element passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof toggle == \"undefined\"){\n        toggle = true;\n    }\n\n    // Get an ID for the element or return having changed nothing\n    try {\n        var element_id = this.getElementId(element);\n    } catch (get_element_id_error){\n        return this;\n    }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Set/unset the proper status class on the appropriate DOM element(s)\n    d3.select(\"#\" + element_id).classed(\"lz-data_layer-\" + this.layout.type + \"-\" + status, toggle);\n    var element_status_node_id = this.getElementStatusNodeId(element);\n    if (element_status_node_id !== null){\n        d3.select(\"#\" + element_status_node_id).classed(\"lz-data_layer-\" + this.layout.type + \"-statusnode-\" + status, toggle);\n    }\n    \n    // Track element ID in the proper status state array\n    var element_status_idx = this.state[this.state_id][status].indexOf(element_id);\n    if (toggle && element_status_idx === -1){\n        this.state[this.state_id][status].push(element_id);\n    }\n    if (!toggle && element_status_idx !== -1){\n        this.state[this.state_id][status].splice(element_status_idx, 1);\n    }\n    \n    // Trigger tool tip show/hide logic\n    this.showOrHideTooltip(element);\n\n    // Trigger layout changed event hook\n    this.parent.emit(\"layout_changed\", true);\n    if (status === \"selected\") {\n        // Notify parents that a given element has been interacted with. For now, we will only notify on\n        //   \"selected\" type events, which is (usually) a toggle-able state. If elements are exclusive, two selection\n        //   events will be sent in short order as the previously selected element has to be de-selected first\n        this.parent.emit(\"element_selection\", { element: element, active: toggle }, true);\n    }\n    return this;\n    \n};\n\n/**\n * Toggle a status on elements in the data layer based on a set of filters\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatusByFilters()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; } else { toggle = !!toggle; }\n    if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n    if (!Array.isArray(filters)){ filters = []; }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Apply statuses\n    this.filterElements(filters).forEach(function(element){\n        this.setElementStatus(status, element, toggle);\n    }.bind(this));\n    \n    return this;\n};\n\n/**\n * Toggle a status on all elements in the data layer\n * @param {String} status\n * @param {Boolean} toggle\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setAllElementStatus = function(status, toggle){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; }\n\n    // Apply statuses\n    if (toggle){\n        this.data.forEach(function(element){\n            this.setElementStatus(status, element, true);\n        }.bind(this));\n    } else {\n        var status_ids = this.state[this.state_id][status].slice();\n        status_ids.forEach(function(id){\n            var element = this.getElementById(id);\n            if (typeof element == \"object\" && element !== null){\n                this.setElementStatus(status, element, false);\n            }\n        }.bind(this));\n        this.state[this.state_id][status] = [];\n    }\n\n    // Update global status flag\n    this.global_statuses[status] = toggle;\n\n    return this;\n};\n\n/**\n * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n * @param {d3.selection} selection\n */\nLocusZoom.DataLayer.prototype.applyBehaviors = function(selection){\n    if (typeof this.layout.behaviors != \"object\"){ return; }\n    Object.keys(this.layout.behaviors).forEach(function(directive){\n        var event_match = /(click|mouseover|mouseout)/.exec(directive);\n        if (!event_match){ return; }\n        selection.on(event_match[0] + \".\" + directive, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n    }.bind(this));\n};\n\n/**\n * Generate a function that executes an arbitrary list of behaviors on an element during an event\n * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n * @param {Object} behaviors An object describing the behavior to attach to this single element\n * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n *  selected, etc)\n * @param {string} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n * @returns {function(this:LocusZoom.DataLayer)} Return a function that handles the event in context with the behavior\n *   and the element- can be attached as an event listener\n */\nLocusZoom.DataLayer.prototype.executeBehaviors = function(directive, behaviors) {\n\n    // Determine the required state of control and shift keys during the event\n    var requiredKeyStates = {\n        \"ctrl\": (directive.indexOf(\"ctrl\") !== -1),\n        \"shift\": (directive.indexOf(\"shift\") !== -1)\n    };\n\n    return function(element){\n\n        // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n        if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey){ return; }\n\n        // Loop through behaviors making each one go in succession\n        behaviors.forEach(function(behavior){\n            \n            // Route first by the action, if defined\n            if (typeof behavior != \"object\" || behavior === null){ return; }\n            \n            switch (behavior.action){\n                \n            // Set a status (set to true regardless of current status, optionally with exclusivity)\n            case \"set\":\n                this.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                break;\n                \n            // Unset a status (set to false regardless of current status, optionally with exclusivity)\n            case \"unset\":\n                this.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                break;\n                \n            // Toggle a status\n            case \"toggle\":\n                var current_status_boolean = (this.state[this.state_id][behavior.status].indexOf(this.getElementId(element)) !== -1);\n                var exclusive = behavior.exclusive && !current_status_boolean;\n                this.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                break;\n                \n            // Link to a dynamic URL\n            case \"link\":\n                if (typeof behavior.href == \"string\"){\n                    var url = LocusZoom.parseFields(element, behavior.href);\n                    if (typeof behavior.target == \"string\"){\n                        window.open(url, behavior.target);\n                    } else {\n                        window.location.href = url;\n                    }\n                }\n                break;\n                \n            // Action not defined, just return\n            default:\n                break;\n                \n            }\n            \n            return;\n            \n        }.bind(this));\n\n    }.bind(this);\n\n};\n\n/**\n * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n *   Necessary for positioning any HTML elements over the panel\n * @returns {{x: Number, y: Number}}\n */\nLocusZoom.DataLayer.prototype.getPageOrigin = function(){\n    var panel_origin = this.parent.getPageOrigin();\n    return {\n        x: panel_origin.x + this.parent.layout.margin.left,\n        y: panel_origin.y + this.parent.layout.margin.top\n    };\n};\n\n/**\n * Get a data layer's current underlying data in a standard format (e.g. JSON or CSV)\n * @param {('csv'|'tsv'|'json')} format How to export the data\n * @returns {*}\n */\nLocusZoom.DataLayer.prototype.exportData = function(format){\n    var default_format = \"json\";\n    format = format || default_format;\n    format = (typeof format == \"string\" ? format.toLowerCase() : default_format);\n    if ([\"json\",\"csv\",\"tsv\"].indexOf(format) === -1){ format = default_format; }\n    var ret;\n    switch (format){\n    case \"json\":\n        try {\n            ret = JSON.stringify(this.data);\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export JSON data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    case \"tsv\":\n    case \"csv\":\n        try {\n            var jsonified = JSON.parse(JSON.stringify(this.data));\n            if (typeof jsonified != \"object\"){\n                ret = jsonified.toString();\n            } else if (!Array.isArray(jsonified)){\n                ret = \"Object\";\n            } else {\n                var delimiter = (format === \"tsv\") ? \"\\t\" : \",\";\n                var header = this.layout.fields.map(function(header){\n                    return JSON.stringify(header);\n                }).join(delimiter) + \"\\n\";\n                ret = header + jsonified.map(function(record){\n                    return this.layout.fields.map(function(field){\n                        if (typeof record[field] == \"undefined\"){\n                            return JSON.stringify(null);\n                        } else if (typeof record[field] == \"object\" && record[field] !== null){\n                            return Array.isArray(record[field]) ? \"\\\"[Array(\" + record[field].length + \")]\\\"\" : \"\\\"[Object]\\\"\";\n                        } else {\n                            return JSON.stringify(record[field]);\n                        }\n                    }).join(delimiter);\n                }.bind(this)).join(\"\\n\");\n            }\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export CSV data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    }\n    return ret;\n};\n\n/**\n * Position the datalayer and all tooltips\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.draw = function(){\n    this.svg.container.attr(\"transform\", \"translate(\" + this.parent.layout.cliparea.origin.x +  \",\" + this.parent.layout.cliparea.origin.y + \")\");\n    this.svg.clipRect\n        .attr(\"width\", this.parent.layout.cliparea.width)\n        .attr(\"height\", this.parent.layout.cliparea.height);\n    this.positionAllTooltips();\n    return this;\n};\n\n\n/**\n * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n * @return {Promise}\n */\nLocusZoom.DataLayer.prototype.reMap = function(){\n\n    this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n    // and then recreated if returning to visibility\n\n    // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n    var promise = this.parent_plot.lzd.getData(this.state, this.layout.fields);\n    promise.then(function(new_data) {\n        this.data = new_data.body;\n        this.applyDataMethods();\n        this.initialized = true;\n    }.bind(this));\n\n    return promise;\n};\n\n\n/**\n * The central registry of known data layer definitions (which may be stored in separate files due to length)\n * @namespace\n */\nLocusZoom.DataLayers = (function() {\n    var obj = {};\n    var datalayers = {};\n    /**\n     * @name LocusZoom.DataLayers.get\n     * @param {String} name The name of the datalayer\n     * @param {Object} layout The configuration object for this data layer\n     * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n     * @returns {LocusZoom.DataLayer}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (datalayers[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for data layer [\" + name + \"]\");\n            } else {\n                return new datalayers[name](layout, parent);\n            }\n        } else {\n            throw(\"data layer [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @name LocusZoom.DataLayers.set\n     * @protected\n     * @param {String} name\n     * @param {Function} datalayer Constructor for the datalayer\n     */\n    obj.set = function(name, datalayer) {\n        if (datalayer) {\n            if (typeof datalayer != \"function\"){\n                throw(\"unable to set data layer [\" + name + \"], argument provided is not a function\");\n            } else {\n                datalayers[name] = datalayer;\n                datalayers[name].prototype = new LocusZoom.DataLayer();\n            }\n        } else {\n            delete datalayers[name];\n        }\n    };\n\n    /**\n     * Add a new type of datalayer to the registry of known layer types\n     * @name LocusZoom.DataLayers.add\n     * @param {String} name The name of the data layer to register\n     * @param {Function} datalayer\n     */\n    obj.add = function(name, datalayer) {\n        if (datalayers[name]) {\n            throw(\"data layer already exists with name: \" + name);\n        } else {\n            obj.set(name, datalayer);\n        }\n    };\n\n    /**\n     * Register a new datalayer that inherits and extends basic behaviors from a known datalayer\n     * @param {String} parent_name The name of the parent data layer whose behavior is to be extended\n     * @param {String} name The name of the new datalayer to register\n     * @param {Object} [overrides] Object of properties and methods to combine with the prototype of the parent datalayer\n     * @returns {Function} The constructor for the new child class\n     */\n    obj.extend = function(parent_name, name, overrides) {\n        // TODO: Consider exposing additional constructor argument, if there is a use case for very granular extension\n        overrides = overrides || {};\n\n        var parent = datalayers[parent_name];\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered datalayer type\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        // Bypass .set() because we want a layer of inheritance below `DataLayer`\n        datalayers[name] = child;\n        return child;\n    };\n\n    /**\n     * List the names of all known datalayers\n     * @name LocusZoom.DataLayers.list\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(datalayers);\n    };\n\n    return obj;\n})();\n","\"use strict\";\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @class LocusZoom.DataLayers.annotation_track\n * @augments LocusZoom.DataLayer\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `LocusZoom.DataLayer.filter` for details\n */\nLocusZoom.DataLayers.add(\"annotation_track\", function(layout) {\n    // In the future we may add additional options for controlling marker size/ shape, based on user feedback\n    this.DefaultLayout = {\n        color: \"#000000\",\n        filters: []\n    };\n\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    if (!Array.isArray(layout.filters)) {\n        throw \"Annotation track must specify array of filters for selecting points to annotate\";\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    this.render = function() {\n        var self = this;\n        // Only render points that currently satisfy all provided filter conditions.\n        var trackData = this.filter(this.layout.filters, \"elements\");\n\n        var selection = this.svg.group\n            .selectAll(\"rect.lz-data_layer-\" + self.layout.type)\n            .data(trackData, function(d) { return d[self.layout.id_field]; });\n\n        // Add new elements as needed\n        selection.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function (d){ return self.getElementId(d); });\n        // Update the set of elements to reflect new data\n        selection\n            .attr(\"x\", function (d) { return self.parent[\"x_scale\"](d[self.layout.x_axis.field]); })\n            .attr(\"width\", 1)  // TODO autocalc width of track? Based on datarange / pixel width presumably\n            .attr(\"height\", self.parent.layout.height)\n            .attr(\"fill\", function(d){ return self.resolveScalableParameter(self.layout.color, d); });\n        // Remove unused elements\n        selection.exit().remove();\n\n        // Set up tooltips and mouse interaction\n        this.applyBehaviors(selection);\n    };\n\n    // Reimplement the positionTooltip() method to be annotation-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != \"string\") {\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]) {\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var offset = stroke_width / 2;\n        var page_origin = this.getPageOrigin();\n\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_center = data_layer_height / 2;\n\n        // Tooltip should be horizontally centered above the point to be annotated. (or below if space is limited)\n        var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n        left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n        arrow_left = (tooltip_box.width / 2) - (arrow_width) + offset_left - offset_right - offset;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - y_center) {\n            top = page_origin.y + y_center - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + y_center + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    return this;\n});\n","\"use strict\";\n\n/**\n * Forest Data Layer\n * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n *  and extent in advance.\n *\n * If you are using dynamically fetched data, consider using `category_forest` instead.\n *\n * @class LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.add(\"forest\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"square\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2\n        },\n        id_field: \"id\",\n        confidence_intervals: {\n            start_field: \"ci_start\",\n            end_field: \"ci_end\"\n        },\n        show_no_significance_line: true\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be forest-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        // Position horizontally on the left or the right depending on which side of the plot the point is on\n        var offset = Math.sqrt(point_size / Math.PI);\n        var left, arrow_type, arrow_left;\n        if (x_center <= this.parent.layout.width / 2){\n            left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n            arrow_type = \"left\";\n            arrow_left = -1 * (arrow_width + stroke_width);\n        } else {\n            left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n            arrow_type = \"right\";\n            arrow_left = tooltip_box.width - stroke_width;\n        }\n        // Position vertically centered unless we're at the top or bottom of the plot\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var top, arrow_top;\n        if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n            top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n            arrow_top = border_radius;\n        } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n            top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n            arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n        } else { // vertically centered\n            top = page_origin.y + y_center - (tooltip_box.height / 2);\n            arrow_top = (tooltip_box.height / 2) - arrow_width;\n        }        \n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate confidence interval paths if fields are defined\n        if (this.layout.confidence_intervals\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.start_field) !== -1\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.end_field) !== -1){\n            // Generate a selection for all forest plot confidence intervals\n            var ci_selection = this.svg.group\n                .selectAll(\"rect.lz-data_layer-forest.lz-data_layer-forest-ci\")\n                .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n            // Create confidence interval rect elements\n            ci_selection.enter()\n                .append(\"rect\")\n                .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-ci\")\n                .attr(\"id\", function(d){ return this.getElementId(d) + \"_ci\"; }.bind(this))\n                .attr(\"transform\", \"translate(0,\" + (isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height) + \")\");\n            // Apply position and size parameters using transition if necessary\n            var ci_transform = function(d) {\n                var x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)){ x = -1000; }\n                if (isNaN(y)){ y = -1000; }\n                return \"translate(\" + x + \",\" + y + \")\";\n            }.bind(this);\n            var ci_width = function(d){\n                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                     - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n            }.bind(this);\n            var ci_height = 1;\n            if (this.canTransition()){\n                ci_selection\n                    .transition()\n                    .duration(this.layout.transition.duration || 0)\n                    .ease(this.layout.transition.ease || \"cubic-in-out\")\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            } else {\n                ci_selection\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            }\n            // Remove old elements as needed\n            ci_selection.exit().remove();\n        }\n            \n        // Generate a selection for all forest plot points\n        var points_selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-forest.lz-data_layer-forest-point\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        points_selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-point\")\n            .attr(\"id\", function(d){ return this.getElementId(d) + \"_point\"; }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n        if (this.canTransition()){\n            points_selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            points_selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        points_selection.exit().remove();\n\n        // Apply default event emitters to selection\n        points_selection.on(\"click.event_emitter\", function(element_data){\n            this.parent.emit(\"element_clicked\", element_data, true);\n        }.bind(this));\n       \n        // Apply behaviors to points\n        this.applyBehaviors(points_selection);\n        \n    };\n \n    return this;\n\n});\n\n/**\n * A y-aligned forest plot that dynamically chooses category labels when the data is first loaded.\n * This allows generating forest plots without defining the layout in advance.\n *\n * @class LocusZoom.DataLayers.category_forest\n * @augments LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.extend(\"forest\", \"category_forest\", {\n    getTicks: function(dimension, config) { // Overrides parent method\n        if ([\"x\", \"y1\", \"y2\"].indexOf(dimension) === -1) {\n            throw \"Invalid dimension identifier\" + dimension;\n        }\n\n        // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n        // Also assumes that every tick gets assigned a unique matching label\n        var axis_num = this.layout.y_axis.axis;\n        if (dimension === (\"y\" + axis_num)) {\n            var category_field = this.layout.y_axis.category_field;\n            if (!category_field) {\n                throw \"Layout for \" + this.layout.id + \" must specify category_field\";\n            }\n\n            return this.data.map(function (item, index) {\n                return {\n                    y: index + 1,\n                    text: item[category_field]\n                };\n            });\n        } else {\n            return [];\n        }\n    },\n\n    applyCustomDataMethods: function () {\n        // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n        //  correct extents.\n        var field_to_add = this.layout.y_axis.field;\n        if (!field_to_add) {\n            throw \"Layout for \" + this.layout.id + \" must specify yaxis.field\";\n        }\n\n        this.data = this.data.map(function (item, index) {\n            item[field_to_add] = index +1;\n            return item;\n        });\n        // Update axis extents based on one label for every point (with a bit of padding above and below)\n        this.layout.y_axis.floor = 0;\n        this.layout.y_axis.ceiling = this.data.length + 1;\n        return this;\n    }\n});\n","\"use strict\";\n\n/*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"genes\", function(layout){\n    /**\n     * Define a default layout for this DataLayer type and merge it with the passed argument\n     * @protected\n     * @member {Object}\n     * */\n    this.DefaultLayout = {\n        // Optionally specify different fill and stroke properties\n        stroke: \"rgb(54, 54, 150)\",\n        color: \"#363696\",\n        label_font_size: 12,\n        label_exon_spacing: 4,\n        exon_height: 16,\n        bounding_box_padding: 6,\n        track_vertical_spacing: 10\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        return this.getElementId(element) + \"-statusnode\";\n    };\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    this.getTrackHeight = function(){\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    };\n\n    /**\n     * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n     * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n     * @member {number}\n     * @type {number}\n     */\n    this.transcript_idx = 0;\n\n    /**\n     * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n     *   over positions / assignments\n     * @protected\n     * @member {number}\n     */\n    this.tracks = 1;\n\n    /**\n     * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n     * @member {Object.<Number, Array>}\n     */\n    this.gene_track_index = { 1: [] };\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.assignTracks = function(){\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         *      TODO: Move to outer scope?\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        this.getLabelWidth = function(gene_name, font_size){\n            try {\n                var temp_text = this.svg.group.append(\"text\")\n                    .attr(\"x\", 0).attr(\"y\", 0).attr(\"class\", \"lz-data_layer-genes lz-label\")\n                    .style(\"font-size\", font_size)\n                    .text(gene_name + \"→\");\n                var label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e){\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        this.data.map(function(d, g){\n\n            // If necessary, split combined gene id / version fields into discrete fields.\n            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n            if (this.data[g].gene_id && this.data[g].gene_id.indexOf(\".\")){\n                var split = this.data[g].gene_id.split(\".\");\n                this.data[g].gene_id = split[0];\n                this.data[g].gene_version = split[1];\n            }\n\n            // Stash the transcript ID on the parent gene\n            this.data[g].transcript_id = this.data[g].transcripts[this.transcript_idx].transcript_id;\n\n            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n            // (range: values in terms of pixels on the screen)\n            this.data[g].display_range = {\n                start: this.parent.x_scale(Math.max(d.start, this.state.start)),\n                end:   this.parent.x_scale(Math.min(d.end, this.state.end))\n            };\n            this.data[g].display_range.label_width = this.getLabelWidth(this.data[g].gene_name, this.layout.label_font_size);\n            this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            // Determine label text anchor (default to middle)\n            this.data[g].display_range.text_anchor = \"middle\";\n            if (this.data[g].display_range.width < this.data[g].display_range.label_width){\n                if (d.start < this.state.start){\n                    this.data[g].display_range.end = this.data[g].display_range.start\n                        + this.data[g].display_range.label_width\n                        + this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"start\";\n                } else if (d.end > this.state.end){\n                    this.data[g].display_range.start = this.data[g].display_range.end\n                        - this.data[g].display_range.label_width\n                        - this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"end\";\n                } else {\n                    var centered_margin = ((this.data[g].display_range.label_width - this.data[g].display_range.width) / 2)\n                        + this.layout.label_font_size;\n                    if ((this.data[g].display_range.start - centered_margin) < this.parent.x_scale(this.state.start)){\n                        this.data[g].display_range.start = this.parent.x_scale(this.state.start);\n                        this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"start\";\n                    } else if ((this.data[g].display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                        this.data[g].display_range.end = this.parent.x_scale(this.state.end);\n                        this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"end\";\n                    } else {\n                        this.data[g].display_range.start -= centered_margin;\n                        this.data[g].display_range.end += centered_margin;\n                    }\n                }\n                this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            }\n            // Add bounding box padding to the calculated display range start, end, and width\n            this.data[g].display_range.start -= this.layout.bounding_box_padding;\n            this.data[g].display_range.end   += this.layout.bounding_box_padding;\n            this.data[g].display_range.width += 2 * this.layout.bounding_box_padding;\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[g].display_domain = {\n                start: this.parent.x_scale.invert(this.data[g].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[g].display_range.end)\n            };\n            this.data[g].display_domain.width = this.data[g].display_domain.end - this.data[g].display_domain.start;\n\n            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n            this.data[g].track = null;\n            var potential_track = 1;\n            while (this.data[g].track === null){\n                var collision_on_potential_track = false;\n                this.gene_track_index[potential_track].map(function(placed_gene){\n                    if (!collision_on_potential_track){\n                        var min_start = Math.min(placed_gene.display_range.start, this.display_range.start);\n                        var max_end = Math.max(placed_gene.display_range.end, this.display_range.end);\n                        if ((max_end - min_start) < (placed_gene.display_range.width + this.display_range.width)){\n                            collision_on_potential_track = true;\n                        }\n                    }\n                }.bind(this.data[g]));\n                if (!collision_on_potential_track){\n                    this.data[g].track = potential_track;\n                    this.gene_track_index[potential_track].push(this.data[g]);\n                } else {\n                    potential_track++;\n                    if (potential_track > this.tracks){\n                        this.tracks = potential_track;\n                        this.gene_track_index[potential_track] = [];\n                    }\n                }\n            }\n\n            // Stash parent references on all genes, trascripts, and exons\n            this.data[g].parent = this;\n            this.data[g].transcripts.map(function(d, t){\n                this.data[g].transcripts[t].parent = this.data[g];\n                this.data[g].transcripts[t].exons.map(function(d, e){\n                    this.data[g].transcripts[t].exons[e].parent = this.data[g].transcripts[t];\n                }.bind(this));\n            }.bind(this));\n\n        }.bind(this));\n        return this;\n    };\n\n    /**\n     * Main render function\n     */\n    this.render = function(){\n\n        var self = this;\n        this.assignTracks();\n\n        var width, height, x, y;\n\n        // Render gene groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-genes\")\n            .data(this.data, function(d){ return d.gene_name; });\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-genes\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(gene){\n\n                var data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                var bboxes = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-data_layer-genes-statusnode\")\n                    .data([gene], function(d){ return data_layer.getElementStatusNodeId(d); });\n\n                bboxes.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-data_layer-genes-statusnode\");\n                \n                bboxes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementStatusNodeId(d);\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    bboxes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    bboxes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                bboxes.exit().remove();\n\n                // Render gene boundaries\n                var boundary_fill = function(d){ return self.resolveScalableParameter(self.layout.color, d); };\n                var boundary_stroke = function(d){ return self.resolveScalableParameter(self.layout.stroke, d); };\n                var boundaries = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-boundary\")\n                    .data([gene], function(d){ return d.gene_name + \"_boundary\"; })\n                    .style({ fill: boundary_fill, stroke: boundary_stroke });\n\n                boundaries.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-boundary\");\n\n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return 1; // TODO: scale dynamically?\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing\n                        + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                };\n                if (data_layer.canTransition()){\n                    boundaries\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    boundaries\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                \n                boundaries.exit().remove();\n\n                // Render gene labels\n                var labels = d3.select(this).selectAll(\"text.lz-data_layer-genes.lz-label\")\n                    .data([gene], function(d){ return d.gene_name + \"_label\"; });\n\n                labels.enter().append(\"text\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-label\");\n\n                labels\n                    .attr(\"text-anchor\", function(d){\n                        return d.display_range.text_anchor;\n                    })\n                    .text(function(d){\n                        return (d.strand === \"+\") ? d.gene_name + \"→\" : \"←\" + d.gene_name;\n                    })\n                    .style(\"font-size\", gene.parent.layout.label_font_size);\n\n                x = function(d){\n                    if (d.display_range.text_anchor === \"middle\"){\n                        return d.display_range.start + (d.display_range.width / 2);\n                    } else if (d.display_range.text_anchor === \"start\"){\n                        return d.display_range.start + data_layer.layout.bounding_box_padding;\n                    } else if (d.display_range.text_anchor === \"end\"){\n                        return d.display_range.end - data_layer.layout.bounding_box_padding;\n                    }\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size;\n                };\n                if (data_layer.canTransition()){\n                    labels\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    labels\n                        .attr(\"x\", x).attr(\"y\", y);\n                }\n\n                labels.exit().remove();\n\n                // Render exon rects (first transcript only, for now)\n                // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                var exon_fill = function(d){ return self.resolveScalableParameter(self.layout.color, d.parent.parent); };\n                var exon_stroke = function(d){ return self.resolveScalableParameter(self.layout.stroke, d.parent.parent); };\n\n                var exons = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-exon\")\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, function(d){ return d.exon_id; });\n\n                exons.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-exon\");\n\n                exons\n                    .style({ fill: exon_fill, stroke: exon_stroke });\n\n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return data_layer.layout.exon_height;\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(){\n                    return ((gene.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing;\n                };\n                if (data_layer.canTransition()){\n                    exons\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    exons\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                exons.exit().remove();\n\n                // Render gene click area\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-clickarea\")\n                    .data([gene], function(d){ return d.gene_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click.event_emitter\", function(element){\n                    element.parent.parent.emit(\"element_clicked\", element, true);\n                });\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be gene-specific\n     * @param {String} id\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        var gene_bbox = d3.select(\"#\" + gene_bbox_id).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the gene that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var gene_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - gene_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + gene_center_x - data_layer_width, 0);\n        var left = page_origin.x + gene_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the gene unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (gene_bbox.y + gene_bbox.height)){\n            top = page_origin.y + gene_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + gene_bbox.y + gene_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n  Genome Legend Data Layer\n  Implements a data layer that will render a genome legend\n*/\n\n// Build a custom data layer for a genome legend\nLocusZoom.DataLayers.add(\"genome_legend\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        chromosome_fill_colors: {\n            light: \"rgb(155, 155, 188)\",\n            dark: \"rgb(95, 95, 128)\"\n        },\n        chromosome_label_colors: {\n            light: \"rgb(120, 120, 186)\",\n            dark: \"rgb(0, 0, 66)\"\n        }\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Implement the main render function\n    this.render = function(){\n\n        // Iterate over data to generate genome-wide start/end values for each chromosome\n        var position = 0;\n        this.data.forEach(function(d, i){\n            this.data[i].genome_start = position;\n            this.data[i].genome_end = position + d[\"genome:base_pairs\"];\n            position += d[\"genome:base_pairs\"];\n        }.bind(this));\n\n        var chromosomes = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend\")\n            .data(this.data, function(d){ return d[\"genome:chr\"]; });\n\n        // Create chromosome elements, apply class\n        chromosomes.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend\");\n\n        // Position and fill chromosome rects\n        var data_layer = this;\n        var panel = this.parent;\n\n        chromosomes\n            .attr(\"fill\", function(d){ return (d[\"genome:chr\"] % 2 ? data_layer.layout.chromosome_fill_colors.light : data_layer.layout.chromosome_fill_colors.dark); })\n            .attr(\"x\", function(d){ return panel.x_scale(d.genome_start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d[\"genome:base_pairs\"]); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        // Remove old elements as needed\n        chromosomes.exit().remove();\n\n        // Parse current state variant into a position\n        // Assumes that variant string is of the format 10:123352136_C/T or 10:123352136\n        var variant_parts = /([^:]+):(\\d+)(?:_.*)?/.exec(this.state.variant);\n        if (!variant_parts) {\n            throw(\"Genome legend cannot understand the specified variant position\");\n        }\n        var chr = variant_parts[1];\n        var offset = variant_parts[2];\n        // TODO: How does this handle representation of X or Y chromosomes?\n        position = +this.data[chr-1].genome_start + +offset;\n\n        // Render the position\n        var region = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend-marker\")\n            .data([{ start: position, end: position + 1 }]);\n\n        region.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend-marker\");\n\n        region\n            .transition()\n            .duration(500)\n            .style({\n                \"fill\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke-width\": \"3px\"\n            })\n            .attr(\"x\", function(d){ return panel.x_scale(d.start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d.end - d.start); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        region.exit().remove();\n        \n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/**\n * Intervals Data Layer\n * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)\n * @class LocusZoom.DataLayers.intervals\n * @augments LocusZoom.DataLayer\n */\nLocusZoom.DataLayers.add(\"intervals\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        start_field: \"start\",\n        end_field: \"end\",\n        track_split_field: \"state_id\",\n        track_split_order: \"DESC\",\n        track_split_legend_to_y_axis: 2,\n        split_tracks: true,\n        track_height: 15,\n        track_vertical_spacing: 3,\n        bounding_box_padding: 2,\n        always_hide_legend: false,\n        color: \"#B8B8B8\",\n        fill_opacity: 1\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n    \n    /**\n     * To define shared highlighting on the track split field define the status node id override\n     * to generate an ID common to the track when we're actively splitting data out to separate tracks\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        if (this.layout.split_tracks){\n            return (this.getBaseId() + \"-statusnode-\" + element[this.layout.track_split_field]).replace(/[:.[\\],]/g, \"_\");\n        }\n        return this.getElementId(element) + \"-statusnode\";\n    }.bind(this);\n    \n    // Helper function to sum layout values to derive total height for a single interval track\n    this.getTrackHeight = function(){\n        return this.layout.track_height\n            + this.layout.track_vertical_spacing\n            + (2 * this.layout.bounding_box_padding);\n    };\n\n    this.tracks = 1;\n    this.previous_tracks = 1;\n    \n    // track-number-indexed object with arrays of interval indexes in the dataset\n    this.interval_track_index = { 1: [] };\n\n    // After we've loaded interval data interpret it to assign\n    // each to a track so that they do not overlap in the view\n    this.assignTracks = function(){\n\n        // Reinitialize some metadata\n        this.previous_tracks = this.tracks;\n        this.tracks = 0;\n        this.interval_track_index = { 1: [] };\n        this.track_split_field_index = {};\n        \n        // If splitting tracks by a field's value then do a first pass determine\n        // a value/track mapping that preserves the order of possible values\n        if (this.layout.track_split_field && this.layout.split_tracks){\n            this.data.map(function(d){\n                this.track_split_field_index[d[this.layout.track_split_field]] = null;\n            }.bind(this));\n            var index = Object.keys(this.track_split_field_index);\n            if (this.layout.track_split_order === \"DESC\"){ index.reverse(); }\n            index.forEach(function(val){\n                this.track_split_field_index[val] = this.tracks + 1;\n                this.interval_track_index[this.tracks + 1] = [];\n                this.tracks++;\n            }.bind(this));\n        }\n\n        this.data.map(function(d, i){\n\n            // Stash a parent reference on the interval\n            this.data[i].parent = this;\n\n            // Determine display range start and end, based on minimum allowable interval display width,\n            // bounded by what we can see (range: values in terms of pixels on the screen)\n            this.data[i].display_range = {\n                start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),\n                end:   this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))\n            };\n            this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start;\n            \n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[i].display_domain = {\n                start: this.parent.x_scale.invert(this.data[i].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[i].display_range.end)\n            };\n            this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start;\n\n            // If splitting to tracks based on the value of the designated track split field\n            // then don't bother with collision detection (intervals will be grouped on tracks\n            // solely by the value of track_split_field)\n            if (this.layout.track_split_field && this.layout.split_tracks){\n                var val = this.data[i][this.layout.track_split_field];\n                this.data[i].track = this.track_split_field_index[val];\n                this.interval_track_index[this.data[i].track].push(i);\n            } else {\n                // If not splitting to tracks based on a field value then do so based on collision\n                // detection (as how it's done for genes). Use display range/domain data generated\n                // above and cast each interval to tracks such that none overlap\n                this.tracks = 1;\n                this.data[i].track = null;\n                var potential_track = 1;\n                while (this.data[i].track === null){\n                    var collision_on_potential_track = false;\n                    this.interval_track_index[potential_track].map(function(placed_interval){\n                        if (!collision_on_potential_track){\n                            var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);\n                            var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);\n                            if ((max_end - min_start) < (placed_interval.display_range.width + this.display_range.width)){\n                                collision_on_potential_track = true;\n                            }\n                        }\n                    }.bind(this.data[i]));\n                    if (!collision_on_potential_track){\n                        this.data[i].track = potential_track;\n                        this.interval_track_index[potential_track].push(this.data[i]);\n                    } else {\n                        potential_track++;\n                        if (potential_track > this.tracks){\n                            this.tracks = potential_track;\n                            this.interval_track_index[potential_track] = [];\n                        }\n                    }\n                }\n\n            }\n\n        }.bind(this));\n\n        return this;\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        this.assignTracks();\n\n        // Remove any shared highlight nodes and re-render them if we're splitting on tracks\n        // At most there will only be dozen or so nodes here (one per track) and each time\n        // we render data we may have new tracks, so wiping/redrawing all is reasonable.\n        this.svg.group.selectAll(\".lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared\").remove();\n        Object.keys(this.track_split_field_index).forEach(function(key){\n            // Make a psuedo-element so that we can generate an id for the shared node\n            var psuedoElement = {};\n            psuedoElement[this.layout.track_split_field] = key;\n            // Insert the shared node\n            var sharedstatusnode_style = {display: (this.layout.split_tracks ? null : \"none\")};\n            this.svg.group.insert(\"rect\", \":first-child\")\n                .attr(\"id\", this.getElementStatusNodeId(psuedoElement))\n                .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared\")\n                .attr(\"rx\", this.layout.bounding_box_padding).attr(\"ry\", this.layout.bounding_box_padding)\n                .attr(\"width\", this.parent.layout.cliparea.width)\n                .attr(\"height\", this.getTrackHeight() - this.layout.track_vertical_spacing)\n                .attr(\"x\", 0)\n                .attr(\"y\", (this.track_split_field_index[key]-1) * this.getTrackHeight())\n                .style(sharedstatusnode_style);\n        }.bind(this));\n\n        var width, height, x, y, fill, fill_opacity;\n            \n        // Render interval groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-intervals\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-intervals\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(interval){\n\n                var data_layer = interval.parent;\n\n                // Render interval status nodes (displayed behind intervals to show highlight\n                // without needing to modify interval display element(s))\n                var statusnode_style = {display: (data_layer.layout.split_tracks ? \"none\" : null)};\n                var statusnodes = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete\")\n                    .data([interval], function(d){ return data_layer.getElementId(d) + \"-statusnode\"; });\n                statusnodes.enter().insert(\"rect\", \":first-child\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete\");\n                statusnodes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"-statusnode\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .style(statusnode_style);\n                width = function(d){\n                    return d.display_range.width + (2 * data_layer.layout.bounding_box_padding);\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start - data_layer.layout.bounding_box_padding;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    statusnodes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    statusnodes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                statusnodes.exit().remove();\n\n                // Render primary interval rects\n                var rects = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-interval_rect\")\n                    .data([interval], function(d){ return d[data_layer.layout.id_field] + \"_interval_rect\"; });\n\n                rects.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-interval_rect\");\n\n                height = data_layer.layout.track_height;\n                width = function(d){\n                    return d.display_range.width;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding;\n                };\n                fill = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.color, d);\n                };\n                fill_opacity = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d);\n                };\n                \n                \n                if (data_layer.canTransition()){\n                    rects\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                } else {\n                    rects\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                }\n                \n                rects.exit().remove();\n\n                // Render interval click areas\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-clickarea\")\n                    .data([interval], function(d){ return d.interval_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click\", function(element_data){\n                    element_data.parent.parent.emit(\"element_clicked\", element_data, true);\n                }.bind(this));\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Update the legend axis if the number of ticks changed\n        if (this.previous_tracks !== this.tracks){\n            this.updateSplitTrackAxis();\n        }\n\n        return this;\n\n    };\n    \n    // Reimplement the positionTooltip() method to be interval-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var interval_bbox = d3.select(\"#\" + this.getElementStatusNodeId(tooltip.data)).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the interval that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var interval_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - interval_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + interval_center_x - data_layer_width, 0);\n        var left = page_origin.x + interval_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the interval unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (interval_bbox.y + interval_bbox.height)){\n            top = page_origin.y + interval_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + interval_bbox.y + interval_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Redraw split track axis or hide it, and show/hide the legend, as determined\n    // by current layout parameters and data\n    this.updateSplitTrackAxis = function(){\n        var legend_axis = this.layout.track_split_legend_to_y_axis ? \"y\" + this.layout.track_split_legend_to_y_axis : false;\n        if (this.layout.split_tracks){\n            var tracks = +this.tracks || 0;\n            var track_height = +this.layout.track_height || 0;\n            var track_spacing =  2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);\n            var target_height = (tracks * track_height) + ((tracks - 1) * track_spacing);\n            this.parent.scaleHeightToData(target_height);\n            if (legend_axis && this.parent.legend){\n                this.parent.legend.hide();                            \n                this.parent.layout.axes[legend_axis] = {\n                    render: true,\n                    ticks: [],\n                    range: {\n                        start: (target_height - (this.layout.track_height/2)),\n                        end: (this.layout.track_height/2)\n                    }\n                };\n                this.layout.legend.forEach(function(element){\n                    var key = element[this.layout.track_split_field];\n                    var track = this.track_split_field_index[key];\n                    if (track){\n                        if (this.layout.track_split_order === \"DESC\"){\n                            track = Math.abs(track - tracks - 1);\n                        }\n                        this.parent.layout.axes[legend_axis].ticks.push({\n                            y: track,\n                            text: element.label\n                        });\n                    }\n                }.bind(this));\n                this.layout.y_axis = {\n                    axis: this.layout.track_split_legend_to_y_axis,\n                    floor: 1,\n                    ceiling: tracks\n                };\n                this.parent.render();\n            }\n            this.parent_plot.positionPanels();\n        } else {\n            if (legend_axis && this.parent.legend){\n                if (!this.layout.always_hide_legend){ this.parent.legend.show(); }\n                this.parent.layout.axes[legend_axis] = { render: false };\n                this.parent.render();\n            }\n        }\n        return this;\n    };\n\n    // Method to not only toggle the split tracks boolean but also update\n    // necessary display values to animate a complete merge/split\n    this.toggleSplitTracks = function(){\n        this.layout.split_tracks = !this.layout.split_tracks;\n        if (this.parent.legend && !this.layout.always_hide_legend){\n            this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);\n        }\n        this.render();\n        this.updateSplitTrackAxis();\n        return this;\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    /** @member {Object} */\n    this.DefaultLayout = {\n        style: {\n            fill: \"none\",\n            \"stroke-width\": \"2px\"\n        },\n        interpolate: \"linear\",\n        x_axis: { field: \"x\" },\n        y_axis: { field: \"y\", axis: 1 },\n        hitarea_width: 5\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Var for storing mouse events for use in tool tip positioning\n    /** @member {String} */\n    this.mouse_event = null;\n\n    /**\n     * Var for storing the generated line function itself\n     * @member {d3.svg.line}\n     * */\n    this.line = null;\n\n    /**\n     * The timeout identifier returned by setTimeout\n     * @member {Number}\n     */\n    this.tooltip_timeout = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n\n    /**\n     * Helper function to get display and data objects representing\n     *   the x/y coordinates of the current mouse event with respect to the line in terms of the display\n     *   and the interpolated values of the x/y fields with respect to the line\n     * @returns {{display: {x: *, y: null}, data: {}, slope: null}}\n     */\n    this.getMouseDisplayAndData = function(){\n        var ret = {\n            display: {\n                x: d3.mouse(this.mouse_event)[0],\n                y: null\n            },\n            data: {},\n            slope: null\n        };\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        ret.data[x_field] = this.parent[x_scale].invert(ret.display.x);\n        var bisect = d3.bisector(function(datum) { return +datum[x_field]; }).left;\n        var index = bisect(this.data, ret.data[x_field]) - 1;\n        var startDatum = this.data[index];\n        var endDatum = this.data[index + 1];\n        var interpolate = d3.interpolateNumber(+startDatum[y_field], +endDatum[y_field]);\n        var range = +endDatum[x_field] - +startDatum[x_field];\n        ret.data[y_field] = interpolate((ret.data[x_field] % range) / range);\n        ret.display.y = this.parent[y_scale](ret.data[y_field]);\n        if (this.layout.tooltip.x_precision){\n            ret.data[x_field] = ret.data[x_field].toPrecision(this.layout.tooltip.x_precision);\n        }\n        if (this.layout.tooltip.y_precision){\n            ret.data[y_field] = ret.data[y_field].toPrecision(this.layout.tooltip.y_precision);\n        }\n        ret.slope = (this.parent[y_scale](endDatum[y_field]) - this.parent[y_scale](startDatum[y_field]))\n                  / (this.parent[x_scale](endDatum[x_field]) - this.parent[x_scale](startDatum[x_field]));\n        return ret;\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be line-specific\n     * @param {String} id Identify the tooltip to be positioned\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var arrow_width = 7; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var stroke_width = parseFloat(this.layout.style[\"stroke-width\"]) || 1;\n        var page_origin = this.getPageOrigin();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        var top, left, arrow_top, arrow_left, arrow_type;\n\n        // Determine x/y coordinates for display and data\n        var dd = this.getMouseDisplayAndData();\n\n        // If the absolute value of the slope of the line at this point is above 1 (including Infinity)\n        // then position the tool tip left/right. Otherwise position top/bottom.\n        if (Math.abs(dd.slope) > 1){\n\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (dd.display.x <= this.parent.layout.width / 2){\n                left = page_origin.x + dd.display.x + stroke_width + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + dd.display.x - tooltip_box.width - stroke_width - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            if (dd.display.y - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + dd.display.y - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (dd.display.y + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + dd.display.y + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + dd.display.y - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n\n        } else {\n\n            // Position horizontally: attempt to center on the mouse's x coordinate\n            // pad to either side if bumping up against the edge of the data layer\n            var offset_right = Math.max((tooltip_box.width / 2) - dd.display.x, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + dd.display.x - data_layer_width, 0);\n            left = page_origin.x + dd.display.x - (tooltip_box.width / 2) - offset_left + offset_right;\n            var min_arrow_left = arrow_width / 2;\n            var max_arrow_left = tooltip_box.width - (2.5 * arrow_width);\n            arrow_left = (tooltip_box.width / 2) - arrow_width + offset_left - offset_right;\n            arrow_left = Math.min(Math.max(arrow_left, min_arrow_left), max_arrow_left);\n\n            // Position vertically above the line unless there's insufficient space\n            if (tooltip_box.height + stroke_width + arrow_width > dd.display.y){\n                top = page_origin.y + dd.display.y + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            } else {\n                top = page_origin.y + dd.display.y - (tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            }\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style({ left: left + \"px\", top: top + \"px\" });\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style({ \"left\": arrow_left + \"px\", top: arrow_top + \"px\" });\n\n    };\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var data_layer = this;\n        var panel = this.parent;\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n            .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n            .interpolate(this.layout.interpolate);\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Apply tooltip, etc\n        if (this.layout.tooltip){\n            // Generate an overlaying transparent \"hit area\" line for more intuitive mouse events\n            var hitarea_width = parseFloat(this.layout.hitarea_width).toString() + \"px\";\n            var hitarea = this.svg.group\n                .selectAll(\"path.lz-data_layer-line-hitarea\")\n                .data([this.data]);\n            hitarea.enter()\n                .append(\"path\")\n                .attr(\"class\", \"lz-data_layer-line-hitarea\")\n                .style(\"stroke-width\", hitarea_width);\n            var hitarea_line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n            hitarea\n                .attr(\"d\", hitarea_line)\n                .on(\"mouseover\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.createTooltip(dd.data);\n                })\n                .on(\"mousemove\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.updateTooltip(dd.data);\n                    data_layer.positionTooltip(data_layer.getElementId());\n                })\n                .on(\"mouseout\", function(){\n                    data_layer.tooltip_timeout = setTimeout(function(){\n                        data_layer.mouse_event = null;\n                        data_layer.destroyTooltip(data_layer.getElementId());\n                    }, 300);\n                });\n            hitarea.exit().remove();\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.setElementStatus = function(status, element, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setElementStatusByFilters = function(status, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setAllElementStatus = function(status, toggle){\n        // Sanity check\n        if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n            throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n        }\n        if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n        if (typeof toggle == \"undefined\"){ toggle = true; }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        var path_class = \"lz-data_layer-line\";\n        Object.keys(this.global_statuses).forEach(function(global_status){\n            if (this.global_statuses[global_status]){ path_class += \" lz-data_layer-line-\" + global_status; }\n        }.bind(this));\n        this.path.attr(\"class\", path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit(\"layout_changed\", true);\n        return this;\n    };\n\n    return this;\n\n});\n\n\n/***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"orthogonal_line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        style: {\n            \"stroke\": \"#D3D3D3\",\n            \"stroke-width\": \"3px\",\n            \"stroke-dasharray\": \"10px 10px\"\n        },\n        orientation: \"horizontal\",\n        x_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        y_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        offset: 0\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Require that orientation be \"horizontal\" or \"vertical\" only\n    if ([\"horizontal\",\"vertical\"].indexOf(layout.orientation) === -1){\n        layout.orientation = \"horizontal\";\n    }\n\n    // Vars for storing the data generated line\n    /** @member {Array} */\n    this.data = [];\n    /** @member {d3.svg.line} */\n    this.line = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var panel = this.parent;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        var x_extent = \"x_extent\";\n        var y_extent = \"y\" + this.layout.y_axis.axis + \"_extent\";\n        var x_range = \"x_range\";\n        var y_range = \"y\" + this.layout.y_axis.axis + \"_range\";\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === \"horizontal\"){\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset }\n            ];\n        } else {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] }\n            ];\n        }\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d, i) {\n                var x = parseFloat(panel[x_scale](d[\"x\"]));\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y(function(d, i) {\n                var y = parseFloat(panel[y_scale](d[\"y\"]));\n                return isNaN(y) ? panel[y_range][i] : y;\n            })\n            .interpolate(\"linear\");\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    return this;\n\n});\n","\"use strict\";\n\n/**\n * Scatter Data Layer\n * Implements a standard scatter plot\n * @class LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.add(\"scatter\", function(layout){\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"circle\",\n        tooltip_positioning: \"horizontal\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 1\n        },\n        id_field: \"id\"\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Extra default for layout spacing\n    // Not in default layout since that would make the label attribute always present\n    if (layout.label && isNaN(layout.label.spacing)){\n        layout.label.spacing = 4;\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be scatter-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var offset = Math.sqrt(point_size / Math.PI);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        if (this.layout.tooltip_positioning === \"vertical\"){\n            // Position horizontally centered above the point\n            var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right - offset;\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (y_center + offset)){\n                top = page_origin.y + y_center - (offset + tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                top = page_origin.y + y_center + offset + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            }\n        } else {\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (x_center <= this.parent.layout.width / 2){\n                left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n            if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    this.flip_labels = function(){\n        var data_layer = this;\n        var point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        var spacing = data_layer.layout.label.spacing;\n        var handle_lines = Boolean(data_layer.layout.label.lines);\n        var min_x = 2 * spacing;\n        var max_x = data_layer.parent.layout.width - data_layer.parent.layout.margin.left - data_layer.parent.layout.margin.right - (2 * spacing);\n        var flip = function(dn, dnl){\n            var dnx = +dn.attr(\"x\");\n            var text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            if (handle_lines){\n                var dnlx2 = +dnl.attr(\"x2\");\n                var line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style(\"text-anchor\") === \"start\"){\n                dn.style(\"text-anchor\", \"end\");\n                dn.attr(\"x\", dnx - text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 - line_swing); }\n            } else {\n                dn.style(\"text-anchor\", \"start\");\n                dn.attr(\"x\", dnx + text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 + line_swing); }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x){\n                var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            if (da.style(\"text-anchor\") === \"end\") return;\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n            data_layer.label_texts.each(function () {\n                var b = this;\n                var db = d3.select(b);\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (collision){\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr(\"x\");\n                    if (dax - abound.width - spacing < min_x){\n                        flip(da, dal);\n                    }\n                }\n                return;\n            });\n        });\n    };\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    this.separate_labels = function(){\n        this.seperate_iterations++;\n        var data_layer = this;\n        var alpha = 0.5;\n        var spacing = this.layout.label.spacing;\n        var again = false;\n        data_layer.label_texts.each(function () {\n            var a = this;\n            var da = d3.select(a);\n            var y1 = da.attr(\"y\");\n            data_layer.label_texts.each(function () {\n                var b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) return;\n                var db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr(\"text-anchor\") !== db.attr(\"text-anchor\")) return;\n                // Determine if the  bounding rects for the two text elements collide\n                var abound = da.node().getBoundingClientRect();\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (!collision) return;\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                var y2 = db.attr(\"y\");\n                var sign = abound.top < bbound.top ? 1 : -1;\n                var adjust = sign * alpha;\n                var new_a_y = +y1 - adjust;\n                var new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                var min_y = 2 * spacing;\n                var max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                var delta;\n                if (new_a_y - (abound.height/2) < min_y){\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height/2) < min_y){\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height/2) > max_y){\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height/2) > max_y){\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr(\"y\",new_a_y);\n                db.attr(\"y\",new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines){\n                var label_elements = data_layer.label_texts[0];\n                data_layer.label_lines.attr(\"y2\",function(d,i) {\n                    var label_line = d3.select(label_elements[i]);\n                    return label_line.attr(\"y\");\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150){\n                setTimeout(function(){\n                    this.separate_labels();\n                }.bind(this), 1);\n            }\n        }\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var data_layer = this;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate labels first (if defined)\n        if (this.layout.label){\n            // Apply filters to generate a filtered data set\n            var filtered_data = this.data.filter(function(d){\n                if (!data_layer.layout.label.filters){\n                    return true;\n                } else {\n                    // Start by assuming a match, run through all filters to test if not a match on any one\n                    var match = true;\n                    data_layer.layout.label.filters.forEach(function(filter){\n                        var field_value = (new LocusZoom.Data.Field(filter.field)).resolve(d);\n                        if (isNaN(field_value)){\n                            match = false;\n                        } else {\n                            switch (filter.operator){\n                            case \"<\":\n                                if (!(field_value < filter.value)){ match = false; }\n                                break;\n                            case \"<=\":\n                                if (!(field_value <= filter.value)){ match = false; }\n                                break;\n                            case \">\":\n                                if (!(field_value > filter.value)){ match = false; }\n                                break;\n                            case \">=\":\n                                if (!(field_value >= filter.value)){ match = false; }\n                                break;\n                            case \"=\":\n                                if (!(field_value === filter.value)){ match = false; }\n                                break;\n                            default:\n                                // If we got here the operator is not valid, so the filter should fail\n                                match = false;\n                                break;\n                            }\n                        }\n                    });\n                    return match;\n                }\n            });\n            // Render label groups\n            var self = this;\n            this.label_groups = this.svg.group\n                .selectAll(\"g.lz-data_layer-\" + this.layout.type + \"-label\")\n                .data(filtered_data, function(d){ return d[self.layout.id_field]  + \"_label\"; });\n            this.label_groups.enter()\n                .append(\"g\")\n                .attr(\"class\", \"lz-data_layer-\"+ this.layout.type + \"-label\");\n            // Render label texts\n            if (this.label_texts){ this.label_texts.remove(); }\n            this.label_texts = this.label_groups.append(\"text\")\n                .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n            this.label_texts\n                .text(function(d){\n                    return LocusZoom.parseFields(d, data_layer.layout.label.text || \"\");\n                })\n                .style(data_layer.layout.label.style || {})\n                .attr({\n                    \"x\": function(d){\n                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                              + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                              + data_layer.layout.label.spacing;\n                        if (isNaN(x)){ x = -1000; }\n                        return x;\n                    },\n                    \"y\": function(d){\n                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)){ y = -1000; }\n                        return y;\n                    },\n                    \"text-anchor\": function(){\n                        return \"start\";\n                    }\n                });\n            // Render label lines\n            if (data_layer.layout.label.lines){\n                if (this.label_lines){ this.label_lines.remove(); }\n                this.label_lines = this.label_groups.append(\"line\")\n                    .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n                this.label_lines\n                    .style(data_layer.layout.label.lines.style || {})\n                    .attr({\n                        \"x1\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y1\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        },\n                        \"x2\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                                  + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                                  + (data_layer.layout.label.spacing/2);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y2\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        }\n                    });\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit().remove();\n        }\n            \n        // Generate main scatter data elements\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-\" + this.layout.type)\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Apply default event emitters to selection\n        selection.on(\"click.event_emitter\", function(element){\n            this.parent.emit(\"element_clicked\", element, true);\n        }.bind(this));\n       \n        // Apply mouse behaviors\n        this.applyBehaviors(selection);\n        \n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label){\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n            // Apply default event emitters to selection\n            this.label_texts.on(\"click.event_emitter\", function(element){\n                this.parent.emit(\"element_clicked\", element, true);\n            }.bind(this));\n            // Extend mouse behaviors to labels\n            this.applyBehaviors(this.label_texts);\n        }\n        \n    };\n\n    // Method to set a passed element as the LD reference in the plot-level state\n    this.makeLDReference = function(element){\n        var ref = null;\n        if (typeof element == \"undefined\"){\n            throw(\"makeLDReference requires one argument of any type\");\n        } else if (typeof element == \"object\"){\n            if (this.layout.id_field && typeof element[this.layout.id_field] != \"undefined\"){\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element[\"id\"] != \"undefined\"){\n                ref = element[\"id\"].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent_plot.applyState({ ldrefvar: ref });\n    };\n \n    return this;\n\n});\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n * @class LocusZoom.DataLayers.category_scatter\n * @augments LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.extend(\"scatter\", \"category_scatter\", {\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData: function() {\n        var xField = this.layout.x_axis.field || \"x\";\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw \"Layout for \" + this.layout.id + \" must specify category_field\";\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        var sourceData = this.data\n            .sort(function(a, b) {\n                var ak = a[category_field];\n                var bk = b[category_field];\n                var av = ak.toString ? ak.toString().toLowerCase() : ak;\n                var bv = bk.toString ? bk.toString().toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);});\n        sourceData.forEach(function(d, i){\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    },\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds: function() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        var xField = this.layout.x_axis.field || \"x\";\n        var uniqueCategories = {};\n        this.data.forEach(function(item) {\n            var category = item[category_field];\n            var x = item[xField];\n            var bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        var categoryNames = Object.keys(uniqueCategories);\n        this._setDynamicColorScheme(categoryNames);\n\n        return uniqueCategories;\n    },\n\n    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n    _setDynamicColorScheme: function(categoryNames) {\n        var colorParams = this.layout.color.parameters;\n        var baseParams = this._base_layout.color.parameters;\n\n        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n        if (this.layout.color.scale_function !== \"categorical_bin\") {\n            throw \"This layer requires that coloring be specified as a `categorical_bin`\";\n        }\n\n        if (baseParams.categories.length && baseParams.values.length) {\n            // If there are preset category/color combos, make sure that they apply to the actual dataset\n            var parameters_categories_hash = {};\n            baseParams.categories.forEach(function (category) { parameters_categories_hash[category] = 1; });\n            if (categoryNames.every(function (name) { return parameters_categories_hash.hasOwnProperty(name); })) {\n                // The layout doesn't have to specify categories in order, but make sure they are all there\n                colorParams.categories = baseParams.categories;\n            } else {\n                colorParams.categories = categoryNames;\n            }\n        } else {\n            colorParams.categories = categoryNames;\n        }\n        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n        var colors;\n        if (baseParams.values.length) {\n            colors = baseParams.values;\n        } else {\n            var color_scale = categoryNames.length <= 10 ? d3.scale.category10 : d3.scale.category20;\n            colors = color_scale().range();\n        }\n        while (colors.length < categoryNames.length) { colors = colors.concat(colors); }\n        colors = colors.slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n        colorParams.values = colors;\n    },\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks: function(dimension, config) { // Overrides parent method\n        if ([\"x\", \"y1\", \"y2\"].indexOf(dimension) === -1) {\n            throw \"Invalid dimension identifier\";\n        }\n        var position = config.position || \"left\";\n        if ([\"left\", \"center\", \"right\"].indexOf(position) === -1) {\n            throw \"Invalid tick position\";\n        }\n\n        var categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === \"y\") {\n            return [];\n        }\n\n        if (dimension === \"x\") {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            var knownCategories = this.layout.color.parameters.categories || [];\n            var knownColors = this.layout.color.parameters.values || [];\n\n            return Object.keys(categoryBounds).map(function (category, index) {\n                var bounds = categoryBounds[category];\n                var xPos;\n\n                switch(position) {\n                case \"left\":\n                    xPos = bounds[0];\n                    break;\n                case \"center\":\n                    // Center tick under one or many elements as appropriate\n                    var diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case \"right\":\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        \"fill\": knownColors[knownCategories.indexOf(category)] || \"#000000\"\n                    }\n                };\n            });\n        }\n    },\n\n    applyCustomDataMethods: function() {\n        this.data = this._prepareData();\n        /**\n         * Define category names and extents (boundaries) for plotting.  TODO: properties in constructor\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n *\n * LocusZoom has various singleton objects that are used for registering functions or classes.\n * These objects provide safe, standard methods to redefine or delete existing functions/classes\n * as well as define new custom functions/classes to be used in a plot.\n *\n * @namespace Singletons\n */\n\n\n/*\n * The Collection of \"Known\" Data Sources. This registry is used internally by the `DataSources` class\n * @class\n * @static\n */\nLocusZoom.KnownDataSources = (function() {\n    /** @lends LocusZoom.KnownDataSources */\n    var obj = {};\n    /* @member {function[]} */\n    var sources = [];\n\n    var findSourceByName = function(x) {\n        for(var i=0; i<sources.length; i++) {\n            if (!sources[i].SOURCE_NAME) {\n                throw(\"KnownDataSources at position \" + i + \" does not have a 'SOURCE_NAME' static property\");\n            }\n            if (sources[i].SOURCE_NAME === x) {\n                return sources[i];\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Identify the datasource associated with a given name\n     * @param {String} name\n     * @returns {function} The constructor for the data source; will usually extend `Data.Source`\n     */\n    obj.get = function(name) {\n        return findSourceByName(name);\n    };\n\n    /**\n     * Register a data source constructor so that it may be located by name\n     * @param {function} source A constructor function for a data source; will usually extend `Data.Source`,\n     *   and should have a `SOURCE_NAME` property\n     */\n    obj.add = function(source) {\n        if (!source.SOURCE_NAME) {\n            console.warn(\"Data source added does not have a SOURCE_NAME\");\n        }\n        sources.push(source);\n    };\n\n    /**\n     * Create a custom source type that extends the behavior of an existing source, and registers that\n     *  source by the provided name\n     * @param {String} parent_name The name of a previously registered data source type to use as a template\n     * @param {String} source_name The new name to use when registering this data source\n     * @param {Object} overrides An object of additional properties and methods to add/override behavior\n     * @returns {LocusZoom.Data.Source} The newly defined class for this source\n     */\n    obj.extend = function(parent_name, source_name, overrides) {\n        var parent = findSourceByName(parent_name);\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered data source\";\n        }\n        if (!source_name) {\n            throw \"Must provide a name for the new data source\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        child.SOURCE_NAME = source_name;\n        sources.push(child);\n        return child;\n    };\n\n    /** @deprecated */\n    obj.push = function(source) {\n        console.warn(\"Warning: KnownDataSources.push() is deprecated. Use .add() instead\");\n        obj.add(source);\n    };\n\n    /**\n     * List the names of all registered datasources\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return sources.map(function(x) {return x.SOURCE_NAME;});\n    };\n\n    /**\n     * Create a datasource instance\n     * @param {String} name The name of the desired datasource to instantiate (must be defined in the registry)\n     * @returns {LocusZoom.Data.Source}\n     */\n    obj.create = function(name) {\n        //create new object (pass additional parameters to constructor)\n        var newObj = findSourceByName(name);\n        if (newObj) {\n            var params = arguments;\n            params[0] = null;\n            return new (Function.prototype.bind.apply(newObj, params));\n        } else {\n            throw(\"Unable to find data source for name: \" + name); \n        }\n    };\n\n    /**\n     * Get the array of all registered constructors\n     *   Generally only used for unit tests internally\n     * @private\n     * @returns {function[]}\n     */\n    obj.getAll = function() {\n        return sources;\n    };\n\n    /**\n     * Register an entire collection of data sources\n     *   Generally only used for unit tests internally\n     * @private\n     * @param {function[]} x An array of datasource constructors\n     */\n    obj.setAll = function(x) {\n        sources = x;\n    };\n\n    /**\n     * Unregister all known data sources\n     *   Generally only used for unit tests internally\n     * @private\n     */\n    obj.clear = function() {\n        sources = [];\n    };\n\n    return obj;\n})();\n\n/**************************\n * Transformation Functions\n *\n * Singleton for formatting or transforming a single input, for instance turning raw p values into negative log10 form\n * Transformation functions are chainable with a pipe on a field name, like so: \"pvalue|neglog10\"\n *\n * NOTE: Because these functions are chainable the FUNCTION is returned by get(), not the result of that function.\n *\n * All transformation functions must accept an object of parameters and a value to process.\n * @class\n */\nLocusZoom.TransformationFunctions = (function() {\n    /** @lends LocusZoom.TransformationFunctions */\n    var obj = {};\n    var transformations = {};\n\n    var getTrans = function(name) {\n        if (!name) {\n            return null;\n        }\n        var fun = transformations[name];\n        if (fun)  {\n            return fun;\n        } else {\n            throw(\"transformation \" + name + \" not found\");\n        }\n    };\n\n    //a single transformation with any parameters\n    //(parameters not currently supported)\n    var parseTrans = function(name) {\n        return getTrans(name);\n    };\n\n    //a \"raw\" transformation string with a leading pipe\n    //and one or more transformations\n    var parseTransString = function(x) {\n        var funs = [];\n        var re = /\\|([^|]+)/g;\n        var result;\n        while((result = re.exec(x))!==null) {\n            funs.push(result[1]);\n        }\n        if (funs.length===1) {\n            return parseTrans(funs[0]);\n        } else if (funs.length > 1) {\n            return function(x) {\n                var val = x;\n                for(var i = 0; i<funs.length; i++) {\n                    val = parseTrans(funs[i])(val);\n                }\n                return val;\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Retrieve a transformation function by name\n     * @param {String} name The name of the transformation function to retrieve. May optionally be prefixed with a\n     *   pipe (`|`) when chaining multiple transformation functions.\n     * @returns {function} The constructor for the transformation function\n     */\n    obj.get = function(name) {\n        if (name && name.substring(0,1)===\"|\") {\n            return parseTransString(name);\n        } else {\n            return parseTrans(name);\n        }\n    };\n    /**\n     * Internal logic that registers a transformation function\n     * @protected\n     * @param {String} name\n     * @param {function} fn\n     */\n    obj.set = function(name, fn) {\n        if (name.substring(0,1)===\"|\") {\n            throw(\"transformation name should not start with a pipe\");\n        } else {\n            if (fn) {\n                transformations[name] = fn;\n            } else {\n                delete transformations[name];\n            }\n        }\n    };\n\n    /**\n     * Register a transformation function\n     * @param {String} name\n     * @param {function} fn A transformation function (should accept one argument with the value)\n     */\n    obj.add = function(name, fn) {\n        if (transformations[name]) {\n            throw(\"transformation already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n    /**\n     * List the names of all registered transformation functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(transformations);\n    };\n\n    return obj;\n})();\n\n/**\n * Return the -log (base 10)\n * @function neglog10\n */\nLocusZoom.TransformationFunctions.add(\"neglog10\", function(x) {\n    if (isNaN(x) || x <= 0){ return null; }\n    return -Math.log(x) / Math.LN10;\n});\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\nLocusZoom.TransformationFunctions.add(\"logtoscinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"1\"; }\n    var exp = Math.ceil(x);\n    var diff = exp - x;\n    var base = Math.pow(10, diff);\n    if (exp === 1){\n        return (base / 10).toFixed(4);\n    } else if (exp === 2){\n        return (base / 100).toFixed(3);\n    } else {\n        return base.toFixed(2) + \" × 10^-\" + exp;\n    }\n});\n\n/**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} x\n * @returns {String}\n */\nLocusZoom.TransformationFunctions.add(\"scinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"0\"; }\n\n    var abs = Math.abs(x);\n    var log;\n    if (abs > 1) {\n        log = Math.ceil(Math.log(abs) / Math.LN10);\n    } else {  // 0...1\n        log = Math.floor(Math.log(abs) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3){\n        return x.toFixed(3);\n    } else {\n        return x.toExponential(2).replace(\"+\", \"\").replace(\"e\", \" × 10^\");\n    }\n});\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} str\n */\nLocusZoom.TransformationFunctions.add(\"urlencode\", function(str) {\n    return encodeURIComponent(str);\n});\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} str HTML-escape the provided value\n */\nLocusZoom.TransformationFunctions.add(\"htmlescape\", function(str) {\n    if ( !str ) {\n        return \"\";\n    }\n    str = str + \"\";\n\n    return str.replace( /['\"<>&`]/g, function( s ) {\n        switch ( s ) {\n        case \"'\":\n            return \"&#039;\";\n        case \"\\\"\":\n            return \"&quot;\";\n        case \"<\":\n            return \"&lt;\";\n        case \">\":\n            return \"&gt;\";\n        case \"&\":\n            return \"&amp;\";\n        case \"`\":\n            return \"&#x60;\";\n        }\n    });\n});\n\n/**\n * Singleton for accessing/storing functions that will convert arbitrary data points to values in a given scale\n * Useful for anything that needs to scale discretely with data (e.g. color, point size, etc.)\n *\n * A Scale Function can be thought of as a modifier to a layout directive that adds extra logic to how a piece of data\n *   can be resolved to a value.\n *\n * All scale functions must accept an object of parameters and a value to process.\n * @class\n * @static\n */\nLocusZoom.ScaleFunctions = (function() {\n    /** @lends LocusZoom.ScaleFunctions */\n    var obj = {};\n    var functions = {};\n\n    /**\n     * Find a scale function and return it. If parameters and values are passed, calls the function directly; otherwise\n     *   returns a callable.\n     * @param {String} name\n     * @param {Object} [parameters] Configuration parameters specific to the specified scale function\n     * @param {*} [value] The value to operate on\n     * @returns {*}\n     */\n    obj.get = function(name, parameters, value) {\n        if (!name) {\n            return null;\n        } else if (functions[name]) {\n            if (typeof parameters === \"undefined\" && typeof value === \"undefined\"){\n                return functions[name];\n            } else {\n                return functions[name](parameters, value);\n            }\n        } else {\n            throw(\"scale function [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @protected\n     * @param {String} name The name of the function to set/unset\n     * @param {Function} [fn] The function to register. If blank, removes this function name from the registry.\n     */\n    obj.set = function(name, fn) {\n        if (fn) {\n            functions[name] = fn;\n        } else {\n            delete functions[name];\n        }\n    };\n\n    /**\n     * Add a new scale function to the registry\n     * @param {String} name The name of the scale function\n     * @param {function} fn A scale function that accepts two parameters: an object of configuration and a value\n     */\n    obj.add = function(name, fn) {\n        if (functions[name]) {\n            throw(\"scale function already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n\n    /**\n     * List the names of all registered scale functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(functions);\n    };\n\n    return obj;\n})();\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nLocusZoom.ScaleFunctions.add(\"if\", function(parameters, input){\n    if (typeof input == \"undefined\" || parameters.field_value !== input){\n        if (typeof parameters.else != \"undefined\"){\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n});\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} null_value\n * @param {*} input value\n * @returns\n */\nLocusZoom.ScaleFunctions.add(\"numerical_bin\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    var threshold = breaks.reduce(function(prev, curr){\n        if (+input < prev || (+input >= prev && +input < curr)){\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n});\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nLocusZoom.ScaleFunctions.add(\"categorical_bin\", function(parameters, value){\n    if (typeof value == \"undefined\" || parameters.categories.indexOf(value) === -1){\n        return (parameters.null_value ? parameters.null_value : null); \n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n});\n\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nLocusZoom.ScaleFunctions.add(\"interpolate\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length){ return nullval; }\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){ return nullval; }\n    if (+input <= parameters.breaks[0]){\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length-1]){\n        return values[breaks.length-1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function(brk, idx){\n            if (!idx){ return; }\n            if (breaks[idx-1] <= +input && breaks[idx] >= +input){ upper_idx = idx; }\n        });\n        if (upper_idx === null){ return nullval; }\n        var normalized_input = (+input - breaks[upper_idx-1]) / (breaks[upper_idx] - breaks[upper_idx-1]);\n        if (!isFinite(normalized_input)){ return nullval; }\n        return d3.interpolate(values[upper_idx-1], values[upper_idx])(normalized_input);\n    }\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A Dashboard is an HTML element used for presenting arbitrary user interface components. Dashboards are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each dashboard is an HTML-based (read: not SVG) collection of components used to display information or provide\n *   user interface. Dashboards can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n * @class\n */\nLocusZoom.Dashboard = function(parent){\n    // parent must be a locuszoom plot or panel\n    if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create dashboard, parent must be a locuszoom plot or panel\";\n    }\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".dashboard\";\n    /** @member {('plot'|'panel')} */\n    this.type = (this.parent instanceof LocusZoom.Plot) ? \"plot\" : \"panel\";\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = this.type === \"plot\" ? this.parent : this.parent.parent;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {LocusZoom.Dashboard.Component[]} */\n    this.components = [];\n    /**\n     * The timer identifier as returned by setTimeout\n     * @member {Number}\n     */\n    this.hide_timeout = null;\n    /**\n     * Whether to hide the dashboard. Can be overridden by a child component. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n\n    // TODO: Return value from constructor function?\n    return this.initialize();\n};\n\n/**\n * Prepare the dashboard for first use: generate all component instances for this dashboard, based on the provided\n *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.initialize = function() {\n    // Parse layout to generate component instances\n    if (Array.isArray(this.parent.layout.dashboard.components)){\n        this.parent.layout.dashboard.components.forEach(function(layout){\n            try {\n                var component = LocusZoom.Dashboard.Components.get(layout.type, layout, this);\n                this.components.push(component);\n            } catch (e) {\n                console.warn(e);\n            }\n        }.bind(this));\n    }\n\n    // Add mouseover event handlers to show/hide panel dashboard\n    if (this.type === \"panel\"){\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseover.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            if (!this.selector || this.selector.style(\"visibility\") === \"hidden\"){ this.show(); }\n        }.bind(this));\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseout.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            this.hide_timeout = setTimeout(function(){ this.hide(); }.bind(this), 300);\n        }.bind(this));\n    }\n\n    return this;\n\n};\n\n/**\n * Whether to persist the dashboard. Returns true if at least one component should persist, or if the panel is engaged\n *   in an active drag event.\n * @returns {boolean}\n */\nLocusZoom.Dashboard.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    var persist = false;\n    // Persist if at least one component should also persist\n    this.components.forEach(function(component){\n        persist = persist || component.shouldPersist();\n    });\n    // Persist if in a parent drag event\n    persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n    return !!persist;\n};\n\n/**\n * Make the dashboard appear. If it doesn't exist yet create it, including creating/positioning all components within,\n *   and make sure it is set to be visible.\n */\nLocusZoom.Dashboard.prototype.show = function(){\n    if (!this.selector){\n        switch (this.type){\n        case \"plot\":\n            this.selector = d3.select(this.parent.svg.node().parentNode)\n                .insert(\"div\",\":first-child\");\n            break;\n        case \"panel\":\n            this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                .insert(\"div\", \".lz-data_layer-tooltip, .lz-dashboard-menu, .lz-curtain\").classed(\"lz-panel-dashboard\", true);\n            break;\n        }\n        this.selector.classed(\"lz-dashboard\", true).classed(\"lz-\"+this.type+\"-dashboard\", true).attr(\"id\", this.id);\n    }\n    this.components.forEach(function(component){ component.show(); });\n    this.selector.style({ visibility: \"visible\" });\n    return this.update();\n};\n\n/**\n * Update the dashboard and rerender all child components. This can be called whenever plot state changes.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.update = function(){\n    if (!this.selector){ return this; }\n    this.components.forEach(function(component){ component.update(); });\n    return this.position();\n};\n\n/**\n * Position the dashboard (and child components) within the panel\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.position = function(){\n    if (!this.selector){ return this; }\n    // Position the dashboard itself (panel only)\n    if (this.type === \"panel\"){\n        var page_origin = this.parent.getPageOrigin();\n        var top = (page_origin.y + 3.5).toString() + \"px\";\n        var left = page_origin.x.toString() + \"px\";\n        var width = (this.parent.layout.width - 4).toString() + \"px\";\n        this.selector.style({ position: \"absolute\", top: top, left: left, width: width });\n    }\n    // Recursively position components\n    this.components.forEach(function(component){ component.position(); });\n    return this;\n};\n\n/**\n * Hide the dashboard (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n *\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    this.components.forEach(function(component){ component.hide(); });\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n\n/**\n * Completely remove dashboard and all child components. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    this.components.forEach(function(component){ component.destroy(true); });\n    this.components = [];\n    this.selector.remove();\n    this.selector = null;\n    return this;\n};\n\n/**\n *\n * A dashboard component is an empty div rendered on a dashboard that can display custom\n * html of user interface elements. LocusZoom.Dashboard.Components is a singleton used to\n * define and manage an extendable collection of dashboard components.\n * (e.g. by LocusZoom.Dashboard.Components.add())\n * @class\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the component left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot dashboard is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple'} [layout.color='gray']  Color scheme for the\n *   component. Applies to buttons and menus.\n * @param {LocusZoom.Dashboard} parent The dashboard that contains this component\n*/\nLocusZoom.Dashboard.Component = function(layout, parent) {\n    /** @member {Object} */\n    this.layout = layout || {};\n    if (!this.layout.color){ this.layout.color = \"gray\"; }\n\n    /** @member {LocusZoom.Dashboard|*} */\n    this.parent = parent || null;\n    /**\n     * Some dashboards are attached to a panel, rather than directly to a plot\n     * @member {LocusZoom.Panel|null}\n     */\n    this.parent_panel = null;\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    /**\n     * This is a reference to either the panel or the plot, depending on what the dashboard is\n     *   tied to. Useful when absolutely positioning dashboard components relative to their SVG anchor.\n     * @member {LocusZoom.Plot|LocusZoom.Panel}\n     */\n    this.parent_svg = null;\n    if (this.parent instanceof LocusZoom.Dashboard){\n        // TODO: when is the immediate parent *not* a dashboard?\n        if (this.parent.type === \"panel\"){\n            this.parent_panel = this.parent.parent;\n            this.parent_plot = this.parent.parent.parent;\n            this.parent_svg = this.parent_panel;\n        } else {\n            this.parent_plot = this.parent.parent;\n            this.parent_svg = this.parent_plot;\n        }\n    }\n    /** @member {d3.selection} */\n    this.selector = null;\n    /**\n     * If this is an interactive component, it will contain a button or menu instance that handles the interactivity.\n     *   There is a 1-to-1 relationship of dashboard component to button\n     * @member {null|LocusZoom.Dashboard.Component.Button}\n     */\n    this.button  = null;\n    /**\n     * If any single component is marked persistent, it will bubble up to prevent automatic hide behavior on a\n     *   component's parent dashboard. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    if (!this.layout.position){ this.layout.position = \"left\"; }\n\n    // TODO: Return value in constructor\n    return this;\n};\n/**\n * Perform all rendering of component, including toggling visibility to true. Will initialize and create SVG element\n *   if necessary, as well as updating with new data and performing layout actions.\n */\nLocusZoom.Dashboard.Component.prototype.show = function(){\n    if (!this.parent || !this.parent.selector){ return; }\n    if (!this.selector){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.layout.group_position) !== -1 ? \" lz-dashboard-group-\" + this.layout.group_position : \"\");\n        this.selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-\" + this.layout.position + group_position);\n        if (this.layout.style){ this.selector.style(this.layout.style); }\n        if (typeof this.initialize == \"function\"){ this.initialize(); }\n    }\n    if (this.button && this.button.status === \"highlighted\"){ this.button.menu.show(); }\n    this.selector.style({ visibility: \"visible\" });\n    this.update();\n    return this.position();\n};\n/**\n * Update the dashboard component with any new data or plot state as appropriate. This method performs all\n *  necessary rendering steps.\n */\nLocusZoom.Dashboard.Component.prototype.update = function(){ /* stub */ };\n/**\n * Place the component correctly in the plot\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.position = function(){\n    if (this.button){ this.button.menu.position(); }\n    return this;\n};\n/**\n * Determine whether the component should persist (will bubble up to parent dashboard)\n * @returns {boolean}\n */\nLocusZoom.Dashboard.Component.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    if (this.button && this.button.persist){ return true; }\n    return false;\n};\n/**\n * Toggle visibility to hidden, unless marked as persistent\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    if (this.button){ this.button.menu.hide(); }\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n/**\n * Completely remove component and button. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.Component.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    if (this.button && this.button.menu){ this.button.menu.destroy(); }\n    this.selector.remove();\n    this.selector = null;\n    this.button = null;\n    return this;\n};\n\n/**\n * Singleton registry of all known components\n * @class\n * @static\n */\nLocusZoom.Dashboard.Components = (function() {\n    /** @lends LocusZoom.Dashboard.Components */\n    var obj = {};\n    var components = {};\n\n    /**\n     * Create a new component instance by name\n     * @param {String} name The string identifier of the desired component\n     * @param {Object} layout The layout to use to create the component\n     * @param {LocusZoom.Dashboard} parent The containing dashboard to use when creating the component\n     * @returns {LocusZoom.Dashboard.Component}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (components[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for dashboard component [\" + name + \"]\");\n            } else {\n                return new components[name](layout, parent);\n            }\n        } else {\n            throw(\"dashboard component [\" + name + \"] not found\");\n        }\n    };\n    /**\n     * Add a new component constructor to the registry and ensure that it extends the correct parent class\n     * @protected\n     * @param name\n     * @param component\n     */\n    obj.set = function(name, component) {\n        if (component) {\n            if (typeof component != \"function\"){\n                throw(\"unable to set dashboard component [\" + name + \"], argument provided is not a function\");\n            } else {\n                components[name] = component;\n                components[name].prototype = new LocusZoom.Dashboard.Component();\n            }\n        } else {\n            delete components[name];\n        }\n    };\n\n    /**\n     * Register a new component constructor by name\n     * @param {String} name\n     * @param {function} component The component constructor\n     */\n    obj.add = function(name, component) {\n        if (components[name]) {\n            throw(\"dashboard component already exists with name: \" + name);\n        } else {\n            obj.set(name, component);\n        }\n    };\n\n    /**\n     * List the names of all registered components\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(components);\n    };\n\n    return obj;\n})();\n\n/**\n * Plots and panels may have a \"dashboard\" element suited for showing HTML components that may be interactive.\n *   When components need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @class\n * @param {LocusZoom.Dashboard.Component} parent\n */\nLocusZoom.Dashboard.Component.Button = function(parent) {   \n    \n    if (!(parent instanceof LocusZoom.Dashboard.Component)){\n        throw \"Unable to create dashboard component button, invalid parent\";\n    }\n    /** @member {LocusZoom.Dashboard.Component} */\n    this.parent = parent;\n    /** @member {LocusZoom.Dashboard.Panel} */\n    this.parent_panel = this.parent.parent_panel;\n    /** @member {LocusZoom.Dashboard.Plot} */\n    this.parent_plot = this.parent.parent_plot;\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent_svg = this.parent.parent_svg;\n\n    /** @member {LocusZoom.Dashboard|null|*} */\n    this.parent_dashboard = this.parent.parent;\n    /** @member {d3.selection} */\n    this.selector = null;\n\n    /**\n     * Tag to use for the button (default: a)\n     * @member {String}\n     */\n    this.tag = \"a\";\n\n    /**\n     * TODO This method does not appear to be used anywhere\n     * @param {String} tag\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTag = function(tag){\n        if (typeof tag != \"undefined\"){ this.tag = tag.toString(); }\n        return this;\n    };\n\n    /**\n     * HTML for the button to show.\n     * @protected\n     * @member {String}\n     */\n    this.html = \"\";\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setHtml = function(html){\n        if (typeof html != \"undefined\"){ this.html = html.toString(); }\n        return this;\n    };\n    /**\n     * @deprecated since 0.5.6; use setHTML instead\n     */\n    this.setText = this.setHTML;\n\n    /**\n     * Mouseover title text for the button to show\n     * @protected\n     * @member {String}\n     */\n    this.title = \"\";\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTitle = function(title){\n        if (typeof title != \"undefined\"){ this.title = title.toString(); }\n        return this;\n    };\n\n    /**\n     * Color of the button\n     * @member {String}\n     */\n    this.color = \"gray\";\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setColor = function(color){\n        if (typeof color != \"undefined\"){\n            if ([\"gray\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"].indexOf(color) !== -1){ this.color = color; }\n            else { this.color = \"gray\"; }\n        }\n        return this;\n    };\n\n    /**\n     * Hash of arbitrary button styles to apply as {name: value} entries\n     * @protected\n     * @member {Object}\n     */\n    this.style = {};\n    /**\n     * Set a collection of custom styles to be used by the button\n     * @param {Object} style Hash of {name:value} entries\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setStyle = function(style){\n        if (typeof style != \"undefined\"){ this.style = style; }\n        return this;\n    };\n\n    //\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    this.getClass = function(){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.parent.layout.group_position) !== -1 ? \" lz-dashboard-button-group-\" + this.parent.layout.group_position : \"\");\n        return \"lz-dashboard-button lz-dashboard-button-\" + this.color + (this.status ? \"-\" + this.status : \"\") + group_position;\n    };\n\n    // Permanence\n    /**\n     * Track internal state on whether to keep showing the button/ menu contents at the moment\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    /**\n     * Configuration when defining a button: track whether this component should be allowed to keep open\n     *   menu/button contents in response to certain events\n     * @protected\n     * @member {Boolean}\n     */\n    this.permanent = false;\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setPermanent = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        this.permanent = bool;\n        if (this.permanent){ this.persist = true; }\n        return this;\n    };\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    this.shouldPersist = function(){\n        return this.permanent || this.persist;\n    };\n\n    /**\n     * Button status (highlighted / disabled/ etc)\n     * @protected\n     * @member {String}\n     */\n    this.status = \"\";\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    this.setStatus = function(status){\n        if (typeof status != \"undefined\" && [\"\", \"highlighted\", \"disabled\"].indexOf(status) !== -1){ this.status = status; }\n        return this.update();\n    };\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.highlight = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"highlighted\"); }\n        else if (this.status === \"highlighted\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.disable = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"disabled\"); }\n        else if (this.status === \"disabled\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n\n    // Mouse events\n    /** @member {function} */\n    this.onmouseover = function(){};\n    this.setOnMouseover = function(onmouseover){\n        if (typeof onmouseover == \"function\"){ this.onmouseover = onmouseover; }\n        else { this.onmouseover = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onmouseout = function(){};\n    this.setOnMouseout = function(onmouseout){\n        if (typeof onmouseout == \"function\"){ this.onmouseout = onmouseout; }\n        else { this.onmouseout = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onclick = function(){};\n    this.setOnclick = function(onclick){\n        if (typeof onclick == \"function\"){ this.onclick = onclick; }\n        else { this.onclick = function(){}; }\n        return this;\n    };\n    \n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    this.show = function(){\n        if (!this.parent){ return; }\n        if (!this.selector){\n            this.selector = this.parent.selector.append(this.tag).attr(\"class\", this.getClass());\n        }\n        return this.update();\n    };\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.preUpdate = function(){ return this; };\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.update = function(){\n        if (!this.selector){ return this; }\n        this.preUpdate();\n        this.selector\n            .attr(\"class\", this.getClass())\n            .attr(\"title\", this.title).style(this.style)\n            .on(\"mouseover\", (this.status === \"disabled\") ? null : this.onmouseover)\n            .on(\"mouseout\", (this.status === \"disabled\") ? null : this.onmouseout)\n            .on(\"click\", (this.status === \"disabled\") ? null : this.onclick)\n            .html(this.html);\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    };\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.postUpdate = function(){ return this; };\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.hide = function(){\n        if (this.selector && !this.shouldPersist()){\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    };    \n\n    /**\n     * Button Menu Object\n     * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n     *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n     * @member {Object}\n     */\n    this.menu = {\n        outer_selector: null,\n        inner_selector: null,\n        scroll_position: 0,\n        hidden: true,\n        /**\n         * Show the button menu, including setting up any DOM elements needed for first rendering\n         */\n        show: function(){\n            if (!this.menu.outer_selector){\n                this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu lz-dashboard-menu-\" + this.color)\n                    .attr(\"id\", this.parent_svg.getBaseId() + \".dashboard.menu\");\n                this.menu.inner_selector = this.menu.outer_selector.append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu-content\");\n                this.menu.inner_selector.on(\"scroll\", function(){\n                    this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                }.bind(this));\n            }\n            this.menu.outer_selector.style({ visibility: \"visible\" });\n            this.menu.hidden = false;\n            return this.menu.update();\n        }.bind(this),\n        /**\n         * Update the rendering of the menu\n         */\n        update: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in component definition\n            if (this.menu.inner_selector){ this.menu.inner_selector.node().scrollTop = this.menu.scroll_position; }\n            return this.menu.position();\n        }.bind(this),\n        position: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n            this.menu.outer_selector.style({ height: null });\n            var padding = 3;\n            var scrollbar_padding = 20;\n            var menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n            var page_origin = this.parent_svg.getPageOrigin();\n            var page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n            var container_offset = this.parent_plot.getContainerOffset();\n            var dashboard_client_rect = this.parent_dashboard.selector.node().getBoundingClientRect();\n            var button_client_rect = this.selector.node().getBoundingClientRect();\n            var menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n            var total_content_height = this.menu.inner_selector.node().scrollHeight;\n            var top = 0; var left = 0;\n            if (this.parent_dashboard.type === \"panel\"){\n                top = (page_origin.y + dashboard_client_rect.height + (2 * padding));\n                left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n            } else {\n                top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n            }\n            var base_max_width = Math.max(this.parent_svg.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n            var container_max_width = base_max_width;\n            var content_max_width = (base_max_width - (4 * padding));\n            var base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n            var height = Math.min(total_content_height, base_max_height);\n            var max_height = base_max_height;\n            this.menu.outer_selector.style({\n                \"top\": top.toString() + \"px\",\n                \"left\": left.toString() + \"px\",\n                \"max-width\": container_max_width.toString() + \"px\",\n                \"max-height\": max_height.toString() + \"px\",\n                \"height\": height.toString() + \"px\"\n            });\n            this.menu.inner_selector.style({ \"max-width\": content_max_width.toString() + \"px\" });\n            this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n            return this.menu;\n        }.bind(this),\n        hide: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.outer_selector.style({ visibility: \"hidden\" });\n            this.menu.hidden = true;\n            return this.menu;\n        }.bind(this),\n        destroy: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.inner_selector.remove();\n            this.menu.outer_selector.remove();\n            this.menu.inner_selector = null;\n            this.menu.outer_selector = null;\n            return this.menu;\n        }.bind(this),\n        /**\n         * Internal method definition\n         * By convention populate() does nothing and should be reimplemented with each dashboard button definition\n         *   Reimplement by way of Dashboard.Component.Button.menu.setPopulate to define the populate method and hook\n         *   up standard menu click-toggle behavior prototype.\n         * @protected\n         */\n        populate: function(){ /* stub */ }.bind(this),\n        /**\n         * Define how the menu is populated with items, and set up click and display properties as appropriate\n         * @public\n         */\n        setPopulate: function(menu_populate_function){\n            if (typeof menu_populate_function == \"function\"){\n                this.menu.populate = menu_populate_function;\n                this.setOnclick(function(){\n                    if (this.menu.hidden){\n                        this.menu.show();\n                        this.highlight().update();\n                        this.persist = true;\n                    } else {\n                        this.menu.hide();\n                        this.highlight(false).update();\n                        if (!this.permanent){ this.persist = false; }\n                    }\n                }.bind(this));\n            } else {\n                this.setOnclick();\n            }\n            return this;\n        }.bind(this)\n    };\n\n};\n\n/**\n * Renders arbitrary text with title formatting\n * @class LocusZoom.Dashboard.Components.title\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\nLocusZoom.Dashboard.Components.add(\"title\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.show = function(){\n        this.div_selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-title lz-dashboard-\" + this.layout.position);\n        this.title_selector = this.div_selector.append(\"h3\");\n        return this.update();\n    };\n    this.update = function(){\n        var title = layout.title.toString();\n        if (this.layout.subtitle){ title += \" <small>\" + this.layout.subtitle + \"</small>\"; }\n        this.title_selector.html(title);\n        return this;\n    };\n});\n\n/**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n * @class LocusZoom.Dashboard.Components.dimensions\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"dimensions\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var display_width = this.parent_plot.layout.width.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n        var display_height = this.parent_plot.layout.height.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n        this.selector.html(display_width + \"px × \" + display_height + \"px\");\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n * @class LocusZoom.Dashboard.Components.region_scale\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"region_scale\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null){\n            this.selector.style(\"display\", null);\n            this.selector.html(LocusZoom.positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style(\"display\", \"none\");\n        }\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Button to export current plot to an SVG image\n * @class LocusZoom.Dashboard.Components.download\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"download\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Download Image\").setTitle(\"Download image of the current plot as locuszoom.svg\")\n            .setOnMouseover(function() {\n                this.button.selector\n                    .classed(\"lz-dashboard-button-gray-disabled\", true)\n                    .html(\"Preparing Image\");\n                this.generateBase64SVG().then(function(base64_string){\n                    this.button.selector\n                        .attr(\"href\", \"data:image/svg+xml;base64,\\n\" + base64_string)\n                        .classed(\"lz-dashboard-button-gray-disabled\", false)\n                        .classed(\"lz-dashboard-button-gray-highlighted\", true)\n                        .html(\"Download Image\");\n                }.bind(this));\n            }.bind(this))\n            .setOnMouseout(function() {\n                this.button.selector.classed(\"lz-dashboard-button-gray-highlighted\", false);\n            }.bind(this));\n        this.button.show();\n        this.button.selector.attr(\"href-lang\", \"image/svg+xml\").attr(\"download\", \"locuszoom.svg\");\n        return this;\n    };\n    this.css_string = \"\";\n    for (var stylesheet in Object.keys(document.styleSheets)){\n        if ( document.styleSheets[stylesheet].href !== null\n             && document.styleSheets[stylesheet].href.indexOf(\"locuszoom.css\") !== -1){\n            // TODO: \"Download image\" button will render the image incorrectly if the stylesheet has been renamed or concatenated\n            LocusZoom.createCORSPromise(\"GET\", document.styleSheets[stylesheet].href)\n                .then(function(response){\n                    this.css_string = response.replace(/[\\r\\n]/g,\" \").replace(/\\s+/g,\" \");\n                    if (this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\")){\n                        this.css_string = this.css_string.substring(0, this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\"));\n                    }\n                }.bind(this));\n            break;\n        }\n    } \n    this.generateBase64SVG = function(){\n        return Q.fcall(function () {\n            // Insert a hidden div, clone the node into that so we can modify it with d3\n            var container = this.parent.selector.append(\"div\").style(\"display\", \"none\")\n                .html(this.parent_plot.svg.node().outerHTML);\n            // Remove unnecessary elements\n            container.selectAll(\"g.lz-curtain\").remove();\n            container.selectAll(\"g.lz-mouse_guide\").remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            container.selectAll(\"g.tick text\").each(function(){\n                var dy = +(d3.select(this).attr(\"dy\").substring(-2).slice(0,-2))*10;\n                d3.select(this).attr(\"dy\", dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            var initial_html = d3.select(container.select(\"svg\").node().parentNode).html();\n            var style_def = \"<style type=\\\"text/css\\\"><![CDATA[ \" + this.css_string + \" ]]></style>\";\n            var insert_at = initial_html.indexOf(\">\") + 1;\n            initial_html = initial_html.slice(0,insert_at) + style_def + initial_html.slice(insert_at);\n            // Delete the container node\n            container.remove();\n            // Base64-encode the string and return it\n            return btoa(encodeURIComponent(initial_html).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n                return String.fromCharCode(\"0x\" + p1);\n            }));\n        }.bind(this));\n    };\n});\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.remove_panel\n * @augments LocusZoom.Dashboard.Component\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\nLocusZoom.Dashboard.Components.add(\"remove_panel\", function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"×\").setTitle(\"Remove panel\")\n            .setOnclick(function(){\n                if (!layout.suppress_confirm && !confirm(\"Are you sure you want to remove this panel? This cannot be undone!\")){\n                    return false;\n                }\n                var panel = this.parent_panel;\n                panel.dashboard.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseover.\" + panel.getBaseId() + \".dashboard\", null);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseout.\" + panel.getBaseId() + \".dashboard\", null);\n                return panel.parent.removePanel(panel.id);\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_up\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_up\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▴\").setTitle(\"Move panel up\")\n            .setOnclick(function(){\n                this.parent_panel.moveUp();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_down\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_down\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length-1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▾\").setTitle(\"Move panel down\")\n            .setOnclick(function(){\n                this.parent_panel.moveDown();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @class LocusZoom.Dashboard.Components.shift_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\nLocusZoom.Dashboard.Components.add(\"shift_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add shift_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 50000; }\n    if (typeof layout.button_html !== \"string\"){ layout.button_html = layout.step > 0 ? \">\" : \"<\"; }\n    if (typeof layout.button_title !== \"string\"){\n        layout.button_title = \"Shift region by \" + (layout.step > 0 ? \"+\" : \"-\") + LocusZoom.positionIntToString(Math.abs(layout.step),null,true);\n    }\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + layout.step, 1),\n                    end: this.parent_plot.state.end + layout.step\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @class LocusZoom.Dashboard.Components.zoom_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\nLocusZoom.Dashboard.Components.add(\"zoom_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add zoom_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 0.2; }\n    if (typeof layout.button_html != \"string\"){ layout.button_html = layout.step > 0 ? \"z–\" : \"z+\"; }\n    if (typeof layout.button_title != \"string\"){\n        layout.button_title = \"Zoom region \" + (layout.step > 0 ? \"out\" : \"in\") + \" by \" + (Math.abs(layout.step)*100).toFixed(1) + \"%\";\n    }\n    this.update = function(){\n        if (this.button){\n            var can_zoom = true;\n            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale){\n                can_zoom = false;\n            }\n            if (layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale){\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                var zoom_factor = 1 + layout.step;\n                var new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)){\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)){\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                var delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @class LocusZoom.Dashboard.Components.menu\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nLocusZoom.Dashboard.Components.add(\"menu\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title);\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(layout.menu_html);\n        }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n *   objects and store them in the special `model.covariates` field of plot `state`.\n * @class LocusZoom.Dashboard.Components.covariates_model\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n */\nLocusZoom.Dashboard.Components.add(\"covariates_model\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.initialize = function(){\n        // Initialize state.model.covariates\n        this.parent_plot.state.model = this.parent_plot.state.model || {};\n        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n        // Create an object at the plot level for easy access to interface methods in custom client-side JS\n        /**\n         * When a covariates model dashboard element is present, create (one) object at the plot level that exposes\n         *   component data and state for custom interactions with other plot elements.\n         * @class LocusZoom.Plot.CovariatesModel\n         */\n        this.parent_plot.CovariatesModel = {\n            /** @member {LocusZoom.Dashboard.Component.Button} */\n            button: this,\n            /**\n             * Add an element to the model and show a representation of it in the dashboard component menu. If the\n             *   element is already part of the model, do nothing (to avoid adding duplicates).\n             * When plot state is changed, this will automatically trigger requests for new data accordingly.\n             * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n             *   to create a serialized representation of itself.\n             */\n            add: function(element_reference){\n                var element = JSON.parse(JSON.stringify(element_reference));\n                if (typeof element_reference == \"object\" && typeof element.html != \"string\"){\n                    element.html = ( (typeof element_reference.toHTML == \"function\") ? element_reference.toHTML() : element_reference.toString());\n                }\n                // Check if the element is already in the model covariates array and return if it is.\n                for (var i = 0; i < this.state.model.covariates.length; i++) {\n                    if (JSON.stringify(this.state.model.covariates[i]) === JSON.stringify(element)) {\n                        return this;\n                    }\n                }\n                this.state.model.covariates.push(element);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Remove an element from `state.model.covariates` (and from the dashboard component menu's\n             *  representation of the state model). When plot state is changed, this will automatically trigger\n             *  requests for new data accordingly.\n             * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n             */\n            removeByIdx: function(idx){\n                if (typeof this.state.model.covariates[idx] == \"undefined\"){\n                    throw(\"Unable to remove model covariate, invalid index: \" + idx.toString());\n                }\n                this.state.model.covariates.splice(idx, 1);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Empty the `state.model.covariates` array (and dashboard component menu representation thereof) of all\n             *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n             */\n            removeAll: function(){\n                this.state.model.covariates = [];\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Manually trigger the update methods on the dashboard component's button and menu elements to force\n             *   display of most up-to-date content. Can be used to force the dashboard to reflect changes made, eg if\n             *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n             */\n            updateComponent: function(){\n                this.button.update();\n                this.button.menu.update();\n            }.bind(this)\n        };\n    }.bind(this);\n\n    this.update = function(){\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            var selector = this.button.menu.inner_selector;\n            selector.html(\"\");\n            // General model HTML representation\n            if (typeof this.parent_plot.state.model.html != \"undefined\"){\n                selector.append(\"div\").html(this.parent_plot.state.model.html);\n            }\n            // Model covariates table\n            if (!this.parent_plot.state.model.covariates.length){\n                selector.append(\"i\").html(\"no covariates in model\");\n            } else {\n                selector.append(\"h5\").html(\"Model Covariates (\" + this.parent_plot.state.model.covariates.length + \")\");\n                var table = selector.append(\"table\");\n                this.parent_plot.state.model.covariates.forEach(function(covariate, idx){\n                    var html = ( (typeof covariate == \"object\" && typeof covariate.html == \"string\") ? covariate.html : covariate.toString() );\n                    var row = table.append(\"tr\");\n                    row.append(\"td\").append(\"button\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){\n                            this.parent_plot.CovariatesModel.removeByIdx(idx);\n                        }.bind(this))\n                        .html(\"×\");\n                    row.append(\"td\").html(html);\n                }.bind(this));\n                selector.append(\"button\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                    .style({ \"margin-left\": \"4px\" }).html(\"× Remove All Covariates\")\n                    .on(\"click\", function(){\n                        this.parent_plot.CovariatesModel.removeAll();\n                    }.bind(this));\n            }\n        }.bind(this));\n\n        this.button.preUpdate = function(){\n            var html = \"Model\";\n            if (this.parent_plot.state.model.covariates.length){\n                var cov = this.parent_plot.state.model.covariates.length > 1 ? \"covariates\" : \"covariate\";\n                html += \" (\" + this.parent_plot.state.model.covariates.length + \" \" + cov + \")\";\n            }\n            this.button.setHtml(html).disable(false);\n        }.bind(this);\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Button to toggle split tracks\n * @class LocusZoom.Dashboard.Components.toggle_split_tracks\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_split_tracks\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (!layout.data_layer_id){ layout.data_layer_id = \"intervals\"; }\n    if (!this.parent_panel.data_layers[layout.data_layer_id]){\n        throw (\"Dashboard toggle split tracks component missing valid data layer ID\");\n    }\n    this.update = function(){\n        var data_layer = this.parent_panel.data_layers[layout.data_layer_id];\n        var html = data_layer.layout.split_tracks ? \"Merge Tracks\" : \"Split Tracks\";\n        if (this.button){\n            this.button.setHtml(html);\n            this.button.show();\n            this.parent.position();\n            return this;\n        } else {\n            this.button = new LocusZoom.Dashboard.Component.Button(this)\n                .setColor(layout.color).setHtml(html)\n                .setTitle(\"Toggle whether tracks are split apart or merged together\")\n                .setOnclick(function(){\n                    data_layer.toggleSplitTracks();\n                    if (this.scale_timeout){ clearTimeout(this.scale_timeout); }\n                    var timeout = data_layer.layout.transition ? +data_layer.layout.transition.duration || 0 : 0;\n                    this.scale_timeout = setTimeout(function(){\n                        this.parent_panel.scaleHeightToData();\n                        this.parent_plot.positionPanels();\n                    }.bind(this), timeout);\n                    this.update();\n                }.bind(this));\n            return this.update();\n        }\n    };\n});\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @class LocusZoom.Dashboard.Components.resize_to_data\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"resize_to_data\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Resize to Data\")\n            .setTitle(\"Automatically resize this panel to fit the data its currently showing\")\n            .setOnclick(function(){\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to toggle legend\n * @class LocusZoom.Dashboard.Components.toggle_legend\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_legend\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var html = this.parent_panel.legend.layout.hidden ? \"Show Legend\" : \"Hide Legend\";\n        if (this.button){\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setTitle(\"Show or hide the legend for this panel\")\n            .setOnclick(function(){\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            }.bind(this));\n        return this.update();\n    };\n});\n\n/**\n * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n * @class LocusZoom.Dashboard.Components.data_layers\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"data_layers\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.update = function(){\n\n        if (typeof layout.button_html != \"string\"){ layout.button_html = \"Data Layers\"; }\n        if (typeof layout.button_title != \"string\"){ layout.button_title = \"Manipulate Data Layers (sort, dim, show/hide, etc.)\"; }\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(\"\");\n            var table = this.button.menu.inner_selector.append(\"table\");\n            this.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function(id, idx){\n                var data_layer = this.parent_panel.data_layers[id];\n                var name = (typeof data_layer.layout.name != \"string\") ? data_layer.id : data_layer.layout.name;\n                var row = table.append(\"tr\");\n                // Layer name\n                row.append(\"td\").html(name);\n                // Status toggle buttons\n                layout.statuses.forEach(function(status_adj){\n                    var status_idx = LocusZoom.DataLayer.Statuses.adjectives.indexOf(status_adj);\n                    var status_verb = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                    var html, onclick, highlight;\n                    if (data_layer.global_statuses[status_adj]){\n                        html = LocusZoom.DataLayer.Statuses.menu_antiverbs[status_idx];\n                        onclick = \"un\" + status_verb + \"AllElements\";\n                        highlight = \"-highlighted\";\n                    } else {\n                        html = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                        onclick = status_verb + \"AllElements\";\n                        highlight = \"\";\n                    }\n                    row.append(\"td\").append(\"a\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color + highlight)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){ data_layer[onclick](); this.button.menu.populate(); }.bind(this))\n                        .html(html);\n                }.bind(this));\n                // Sort layer buttons\n                var at_top = (idx === 0);\n                var at_bottom = (idx === (this.parent_panel.data_layer_ids_by_z_index.length - 1));\n                var td = row.append(\"td\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-start lz-dashboard-button-\" + this.layout.color + (at_bottom ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveDown(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▾\").attr(\"title\", \"Move layer down (further back)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-middle lz-dashboard-button-\" + this.layout.color + (at_top ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveUp(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▴\").attr(\"title\", \"Move layer up (further front)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-end lz-dashboard-button-red\")\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){\n                        if (confirm(\"Are you sure you want to remove the \" + name + \" layer? This cannot be undone!\")){\n                            data_layer.parent.removeDataLayer(id);\n                        }\n                        return this.button.menu.populate();\n                    }.bind(this))\n                    .html(\"×\").attr(\"title\", \"Remove layer\");\n            }.bind(this));\n            return this;\n        }.bind(this));\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @class LocusZoom.Dashboard.Components.display_options\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\nLocusZoom.Dashboard.Components.add(\"display_options\", function (layout) {\n    if (typeof layout.button_html != \"string\"){ layout.button_html = \"Display options\"; }\n    if (typeof layout.button_title != \"string\"){ layout.button_title = \"Control how plot items are displayed\"; }\n\n    // Call parent constructor\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n    //  information (like plot height etc) while changing point rendering\n    var allowed_fields = layout.fields_whitelist || [\"color\", \"fill_opacity\", \"label\", \"legend\",\n        \"point_shape\", \"point_size\", \"tooltip\", \"tooltip_positioning\"];\n\n    var dataLayer = this.parent_panel.data_layers[layout.layer_name];\n    var dataLayerLayout = dataLayer.layout;\n\n    // Store default configuration for the layer as a clean deep copy, so we may revert later\n    var defaultConfig = {};\n    allowed_fields.forEach(function(name) {\n        var configSlot = dataLayerLayout[name];\n        if (configSlot) {\n            defaultConfig[name] = JSON.parse(JSON.stringify(configSlot));\n        }\n    });\n\n    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n    this._selected_item = \"default\";\n\n    // Define the button + menu that provides the real functionality for this dashboard component\n    var self = this;\n    this.button = new LocusZoom.Dashboard.Component.Button(self)\n        .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n        .setOnclick(function () {\n            self.button.menu.populate();\n        });\n    this.button.menu.setPopulate(function () {\n        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n        var uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n        self.button.menu.inner_selector.html(\"\");\n        var table = self.button.menu.inner_selector.append(\"table\");\n\n        var menuLayout = self.layout;\n\n        var renderRow = function(display_name, display_options, row_id) { // Helper method\n            var row = table.append(\"tr\");\n            row.append(\"td\")\n                .append(\"input\")\n                .attr({type: \"radio\", name: \"color-picker-\" + uniqueID, value: row_id})\n                .property(\"checked\", (row_id === self._selected_item))\n                .on(\"click\", function () {\n                    Object.keys(display_options).forEach(function(field_name) {\n                        dataLayer.layout[field_name] = display_options[field_name];\n                    });\n                    self._selected_item = row_id;\n                    self.parent_panel.render();\n                    var legend = self.parent_panel.legend;\n                    if (legend && display_options.legend) {\n                        // Update the legend only if necessary\n                        legend.render();\n                    }\n                });\n            row.append(\"td\").text(display_name);\n        };\n        // Render the \"display options\" menu: default and special custom options\n        var defaultName = menuLayout.default_config_display_name || \"Default style\";\n        renderRow(defaultName, defaultConfig, \"default\");\n        menuLayout.options.forEach(function (item, index) {\n            renderRow(item.display_name, item.display, index);\n        });\n        return self;\n    });\n\n    this.update = function () {\n        this.button.show();\n        return this;\n    };\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @class\n * @param {LocusZoom.Panel} parent\n*/\nLocusZoom.Legend = function(parent){\n    if (!(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create legend, parent must be a locuszoom panel\";\n    }\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".legend\";\n\n    this.parent.layout.legend = LocusZoom.Layouts.merge(this.parent.layout.legend || {}, LocusZoom.Legend.DefaultLayout);\n    /** @member {Object} */\n    this.layout = this.parent.layout.legend;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {d3.selection} */\n    this.background_rect = null;\n    /** @member {d3.selection[]} */\n    this.elements = [];\n    /**\n     * SVG selector for the group containing all elements in the legend\n     * @protected\n     * @member {d3.selection|null}\n     */\n    this.elements_group = null;\n\n    /**\n     * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n     * @deprecated\n     * @protected\n     * @member {Boolean}\n     */\n    this.hidden = false;\n\n    // TODO Revisit constructor return value; see https://stackoverflow.com/a/3350364/1422268\n    return this.render();\n};\n\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nLocusZoom.Legend.DefaultLayout = {\n    orientation: \"vertical\",\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false\n};\n\n/**\n * Render the legend in the parent panel\n */\nLocusZoom.Legend.prototype.render = function(){\n\n    // Get a legend group selector if not yet defined\n    if (!this.selector){\n        this.selector = this.parent.svg.group.append(\"g\")\n            .attr(\"id\", this.parent.getBaseId() + \".legend\").attr(\"class\", \"lz-legend\");\n    }\n\n    // Get a legend background rect selector if not yet defined\n    if (!this.background_rect){\n        this.background_rect = this.selector.append(\"rect\")\n            .attr(\"width\", 100).attr(\"height\", 100).attr(\"class\", \"lz-legend-background\");\n    }\n\n    // Get a legend elements group selector if not yet defined\n    if (!this.elements_group){\n        this.elements_group = this.selector.append(\"g\");\n    }\n\n    // Remove all elements from the document and re-render from scratch\n    this.elements.forEach(function(element){\n        element.remove();\n    });\n    this.elements = [];\n\n    // Gather all elements from data layers in order (top to bottom) and render them\n    var padding = +this.layout.padding || 1;\n    var x = padding;\n    var y = padding;\n    var line_height = 0;\n    this.parent.data_layer_ids_by_z_index.slice().reverse().forEach(function(id){\n        if (Array.isArray(this.parent.data_layers[id].layout.legend)){\n            this.parent.data_layers[id].layout.legend.forEach(function(element){\n                var selector = this.elements_group.append(\"g\")\n                    .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                var label_size = +element.label_size || +this.layout.label_size || 12;\n                var label_x = 0;\n                var label_y = (label_size/2) + (padding/2);\n                line_height = Math.max(line_height, label_size + padding);\n                // Draw the legend element symbol (line, rect, shape, etc)\n                if (element.shape === \"line\"){\n                    // Line symbol\n                    var length = +element.length || 16;\n                    var path_y = (label_size/4) + (padding/2);\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", \"M0,\" + path_y + \"L\" + length + \",\" + path_y)\n                        .style(element.style || {});\n                    label_x = length + padding;\n                } else if (element.shape === \"rect\"){\n                    // Rect symbol\n                    var width = +element.width || 16;\n                    var height = +element.height || width;\n                    selector.append(\"rect\").attr(\"class\", element.class || \"\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = width + padding;\n                    line_height = Math.max(line_height, height + padding);\n                } else if (d3.svg.symbolTypes.indexOf(element.shape) !== -1) {\n                    // Shape symbol (circle, diamond, etc.)\n                    var size = +element.size || 40;\n                    var radius = Math.ceil(Math.sqrt(size/Math.PI));\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", d3.svg.symbol().size(size).type(element.shape))\n                        .attr(\"transform\", \"translate(\" + radius + \",\" + (radius+(padding/2)) + \")\")\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = (2*radius) + padding;\n                    label_y = Math.max((2*radius)+(padding/2), label_y);\n                    line_height = Math.max(line_height, (2*radius) + padding);\n                }\n                // Draw the legend element label\n                selector.append(\"text\").attr(\"text-anchor\", \"left\").attr(\"class\", \"lz-label\")\n                    .attr(\"x\", label_x).attr(\"y\", label_y).style({\"font-size\": label_size}).text(element.label);\n                // Position the legend element group based on legend layout orientation\n                var bcr = selector.node().getBoundingClientRect();\n                if (this.layout.orientation === \"vertical\"){\n                    y += bcr.height + padding;\n                    line_height = 0;\n                } else {\n                    // Ensure this element does not exceed the panel width\n                    // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                    var right_x = this.layout.origin.x + x + bcr.width;\n                    if (x > padding && right_x > this.parent.layout.width){\n                        y += line_height;\n                        x = padding;\n                        selector.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                    }\n                    x += bcr.width + (3*padding);\n                }\n                // Store the element\n                this.elements.push(selector);\n            }.bind(this));\n        }\n    }.bind(this));\n\n    // Scale the background rect to the elements in the legend\n    var bcr = this.elements_group.node().getBoundingClientRect();\n    this.layout.width = bcr.width + (2*this.layout.padding);\n    this.layout.height = bcr.height + (2*this.layout.padding);\n    this.background_rect\n        .attr(\"width\", this.layout.width)\n        .attr(\"height\", this.layout.height);\n\n    // Set the visibility on the legend from the \"hidden\" flag\n    // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n    this.selector.style({ visibility: this.layout.hidden ? \"hidden\" : \"visible\" });\n\n    // TODO: Annotate return type and make consistent\n    return this.position();\n};\n\n/**\n * Place the legend in position relative to the panel, as specified in the layout configuration\n * @returns {LocusZoom.Legend | null}\n * TODO: should this always be chainable?\n */\nLocusZoom.Legend.prototype.position = function(){\n    if (!this.selector){ return this; }\n    var bcr = this.selector.node().getBoundingClientRect();\n    if (!isNaN(+this.layout.pad_from_bottom)){\n        this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n    }\n    if (!isNaN(+this.layout.pad_from_right)){\n        this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n    }\n    this.selector.attr(\"transform\", \"translate(\" + this.layout.origin.x + \",\" + this.layout.origin.y + \")\");\n};\n\n/**\n * Hide the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.hide = function(){\n    this.layout.hidden = true;\n    this.render();\n};\n\n/**\n * Show the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.show = function(){\n    this.layout.hidden = false;\n    this.render();\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * LocusZoom functionality used for data parsing and retrieval\n * @namespace\n * @public\n */\nLocusZoom.Data = LocusZoom.Data ||  {};\n\n/**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * @public\n * @class\n */\nLocusZoom.DataSources = function() {\n    /** @member {Object.<string, LocusZoom.Data.Source>} */\n    this.sources = {};\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.addSource = function(ns, x) {\n    console.warn(\"Warning: .addSource() is deprecated. Use .add() instead\");\n    return this.add(ns, x);\n};\n\n/**\n * Add a (namespaced) datasource to the plot\n * @public\n * @param {String} ns A namespace used for fields from this data source\n * @param {LocusZoom.Data.Source|Array|null} x An instantiated datasource, or an array of arguments that can be used to\n *   create a known datasource type.\n */\nLocusZoom.DataSources.prototype.add = function(ns, x) {\n    return this.set(ns, x);\n};\n\n/** @protected */\nLocusZoom.DataSources.prototype.set = function(ns, x) {\n    if (Array.isArray(x)) {\n        // If passed array of source name and options, make the source\n        var dsobj = LocusZoom.KnownDataSources.create.apply(null, x);\n        // Each datasource in the chain should be aware of its assigned namespace\n        dsobj.source_id = ns;\n        this.sources[ns] = dsobj;\n    } else {\n        // If passed the already-created source object\n        if (x !== null) {\n            x.source_id = ns;\n            this.sources[ns] = x;\n        } else {\n            delete this.sources[ns];\n        }\n    }\n    return this;\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.getSource = function(ns) {\n    console.warn(\"Warning: .getSource() is deprecated. Use .get() instead\");\n    return this.get(ns);\n};\n\n/**\n * Return the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n * @returns {LocusZoom.Data.Source}\n */\nLocusZoom.DataSources.prototype.get = function(ns) {\n    return this.sources[ns];\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.removeSource = function(ns) {\n    console.warn(\"Warning: .removeSource() is deprecated. Use .remove() instead\");\n    return this.remove(ns);\n};\n\n/**\n * Remove the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n */\nLocusZoom.DataSources.prototype.remove = function(ns) {\n    return this.set(ns, null);\n};\n\n/**\n * Populate a list of datasources specified as a JSON object\n * @public\n * @param {String|Object} x An object or JSON representation containing {ns: configArray} entries\n * @returns {LocusZoom.DataSources}\n */\nLocusZoom.DataSources.prototype.fromJSON = function(x) {\n    if (typeof x === \"string\") {\n        x = JSON.parse(x);\n    }\n    var ds = this;\n    Object.keys(x).forEach(function(ns) {\n        ds.set(ns, x[ns]);\n    });\n    return ds;\n};\n\n/**\n * Return the names of all currently recognized datasources\n * @public\n * @returns {Array}\n */\nLocusZoom.DataSources.prototype.keys = function() {\n    return Object.keys(this.sources);\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents existing sources in that format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n */\nLocusZoom.DataSources.prototype.toJSON = function() {\n    return this.sources;\n};\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @public\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nLocusZoom.Data.Field = function(field){\n\n    var parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n    /** @member {String} */\n    this.full_name = field;\n    /** @member {String} */\n    this.namespace = parts[1] || null;\n    /** @member {String} */\n    this.name = parts[2] || null;\n    /** @member {Array} */\n    this.transformations = [];\n\n    if (typeof parts[3] == \"string\" && parts[3].length > 1){\n        this.transformations = parts[3].substring(1).split(\"|\");\n        this.transformations.forEach(function(transform, i){\n            this.transformations[i] = LocusZoom.TransformationFunctions.get(transform);\n        }.bind(this));\n    }\n\n    this.applyTransformations = function(val){\n        this.transformations.forEach(function(transform){\n            val = transform(val);\n        });\n        return val;\n    };\n\n    // Resolve the field for a given data element.\n    // First look for a full match with transformations already applied by the data requester.\n    // Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n    this.resolve = function(d){\n        if (typeof d[this.full_name] == \"undefined\"){\n            var val = null;\n            if (typeof (d[this.namespace+\":\"+this.name]) != \"undefined\"){ val = d[this.namespace+\":\"+this.name]; }\n            else if (typeof d[this.name] != \"undefined\"){ val = d[this.name]; }\n            d[this.full_name] = this.applyTransformations(val);\n        }\n        return d[this.full_name];\n    };\n\n};\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {LocusZoom.DataSources} sources An object of {ns: LocusZoom.Data.Source} instances\n * @class\n */\nLocusZoom.Data.Requester = function(sources) {\n\n    function split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || \"base\";\n            var field = parts[2];\n            var trans = LocusZoom.TransformationFunctions.get(parts[3]);\n            if (typeof requests[ns] ==\"undefined\") {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    this.getData = function(state, fields) {\n        var requests = split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var request_handles = Object.keys(requests).map(function(key) {\n            if (!sources.get(key)) {\n                throw(\"Datasource for namespace \" + key + \" not found\");\n            }\n            return sources.get(key).getData(state, requests[key].fields,\n                                            requests[key].outnames, requests[key].trans);\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Q.when({header:{}, body:{}, discrete: {}});\n        for(var i=0; i < request_handles.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(request_handles[i]);\n        }\n        return ret;\n    };\n};\n\n/**\n * Base class for LocusZoom data sources\n * This can be extended with .extend() to create custom data sources\n * @class\n * @public\n */\nLocusZoom.Data.Source = function() {\n    /**\n     * Whether this source should enable caching\n     * @member {Boolean}\n     */\n    this.enableCache = true;\n    /**\n     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n     *  association data if no data was found for that region.\n     * @member {boolean}\n     */\n    this.dependentSource = false;\n};\n\n/**\n * A default constructor that can be used when creating new data sources\n * @param {String|Object} init Basic configuration- either a url, or a config object\n * @param {String} [init.url] The datasource URL\n * @param {String} [init.params] Initial config params for the datasource\n */\nLocusZoom.Data.Source.prototype.parseInit = function(init) {\n    if (typeof init === \"string\") {\n        /** @member {String} */\n        this.url = init;\n        /** @member {String} */\n        this.params = {};\n    } else {\n        this.url = init.url;\n        this.params = init.params || {};\n    }\n    if (!this.url) {\n        throw(\"Source not initialized with required URL\");\n    }\n\n};\n\n/**\n * A unique identifier that indicates whether cached data is valid for this request\n * @protected\n * @param state\n * @param chain\n * @param fields\n * @returns {String|undefined}\n */\nLocusZoom.Data.Source.prototype.getCacheKey = function(state, chain, fields) {\n    return this.getURL && this.getURL(state, chain, fields);\n};\n\n/**\n * Stub: build the URL for any requests made by this source.\n */\nLocusZoom.Data.Source.prototype.getURL = function(state, chain, fields) { return this.url; };\n\n/**\n * Perform a network request to fetch data for this source\n * @protected\n * @param {Object} state The state of the parent plot\n * @param chain\n * @param fields\n */\nLocusZoom.Data.Source.prototype.fetchRequest = function(state, chain, fields) {\n    var url = this.getURL(state, chain, fields);\n    return LocusZoom.createCORSPromise(\"GET\", url);\n};\n\n/**\n * Gets the data for just this source, typically via a network request (caching where possible)\n * @protected\n */\nLocusZoom.Data.Source.prototype.getRequest = function(state, chain, fields) {\n    var req;\n    var cacheKey = this.getCacheKey(state, chain, fields);\n    if (this.enableCache && typeof(cacheKey) !== \"undefined\" && cacheKey === this._cachedKey) {\n        req = Q.when(this._cachedResponse);\n    } else {\n        req = this.fetchRequest(state, chain, fields);\n        if (this.enableCache) {\n            req = req.then(function(x) {\n                this._cachedKey = cacheKey;\n                return this._cachedResponse = x;\n            }.bind(this));\n        }\n    }\n    return req;\n};\n\n/**\n * Fetch the data from the specified data source, and apply transformations requested by an external consumer.\n * This is the public-facing datasource method that will most commonly be called by external code.\n *\n * @public\n * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {function} A callable operation that can be used as part of the data chain\n */\nLocusZoom.Data.Source.prototype.getData = function(state, fields, outnames, trans) {\n    if (this.preGetData) {\n        var pre = this.preGetData(state, fields, outnames, trans);\n        if(this.pre) {\n            state = pre.state || state;\n            fields = pre.fields || fields;\n            outnames = pre.outnames || outnames;\n            trans = pre.trans || trans;\n        }\n    }\n\n    var self = this;\n    return function (chain) {\n        if (self.dependentSource && chain && chain.body && !chain.body.length) {\n            // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n            // Therefore, it should simply return the previous data chain.\n            return Q.when(chain);\n        }\n\n        return self.getRequest(state, chain, fields).then(function(resp) {\n            return self.parseResponse(resp, chain, fields, outnames, trans);\n        });\n    };\n};\n\n/**\n * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n *\n * Does not apply namespacing, transformations, or field extraction.\n *\n * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other\n *  sources (eg, if the payload provides extra data rather than a series of records).\n *\n * @param {Object[]|Object} data The original parsed server response\n * @protected\n */\nLocusZoom.Data.Source.prototype.normalizeResponse = function (data) {\n    if (Array.isArray(data)) {\n        // Already in the desired form\n        return data;\n    }\n\n    // Otherwise, assume the server response is an object representing columns of data.\n    // Each array should have the same length (verify), and a given array index corresponds to a single row.\n    var keys = Object.keys(data);\n    var N = data[keys[0]].length;\n    var sameLength = keys.every(function(key) {\n        var item = data[key];\n        return item.length === N;\n    });\n    if (!sameLength) {\n        throw this.constructor.SOURCE_NAME + \" expects a response in which all arrays of data are the same length\";\n    }\n\n    // Go down the rows, and create an object for each record\n    var records = [];\n    var fields = Object.keys(data);\n    for(var i = 0; i < N; i++) {\n        var record = {};\n        for(var j = 0; j < fields.length; j++) {\n            record[fields[j]] = data[fields[j]][i];\n        }\n        records.push(record);\n    }\n    return records;\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.prepareData = function (records) {\n    console.warn(\"Warning: .prepareData() is deprecated. Use .annotateData() instead\");\n    return this.annotateData(records);\n};\n\n/**\n * Hook to post-process the data returned by this source with new, additional behavior.\n *   (eg cleaning up API values or performing complex calculations on the returned data)\n *\n * @param {Object[]} records The parsed data from the source (eg standardized api response)\n * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n * @returns {Object[]|Promise} The modified set of records\n */\nLocusZoom.Data.Source.prototype.annotateData = function(records, chain) {\n    // Default behavior: no transformations\n    return records;\n};\n\n/**\n * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n *   Apply per-field transformations as appropriate.\n *\n * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n *\n * @param {Object[]} data One record object per element\n * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n * @protected\n */\nLocusZoom.Data.Source.prototype.extractFields = function (data, fields, outnames, trans) {\n    //intended for an array of objects\n    //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n    // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n    if (!Array.isArray(data)) {\n        return data;\n    }\n\n    var fieldFound = [];\n    for (var k=0; k<fields.length; k++) {\n        fieldFound[k] = 0;\n    }\n\n    var records = data.map(function (item) {\n        var output_record = {};\n        for (var j=0; j < fields.length; j++) {\n            var val = item[fields[j]];\n            if (typeof val != \"undefined\") {\n                fieldFound[j] = 1;\n            }\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            output_record[outnames[j]] = val;\n        }\n        return output_record;\n    });\n    fieldFound.forEach(function(v, i) {\n        if (!v) {throw \"field \" + fields[i] + \" not found in response for \" + outnames[i];}\n    });\n    return records;\n};\n\n/**\n * Combine records from this source with others in the chain to yield final chain body.\n *   Handles merging this data with other sources (if applicable).\n *\n * @param {Object[]} data The data That would be returned from this source alone\n * @param {Object} chain The data chain built up during previous requests\n * @param {String[]} fields\n * @param {String[]} outnames\n * @return {Promise|Object[]} The new chain body\n * @protected\n */\nLocusZoom.Data.Source.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    return data;\n};\n\n/**\n * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n *\n * @public\n * @param {String|Object} resp The raw data associated with the response\n * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n *  including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {Promise|{header: ({}|*), discrete: {}, body: []}} A promise that resolves to an object containing\n *   request metadata (headers), the consolidated data for plotting (body), and the individual responses that would be\n *   returned by each source in the chain in isolation (discrete)\n */\nLocusZoom.Data.Source.prototype.parseResponse = function(resp, chain, fields, outnames, trans) {\n    var source_id = this.source_id || this.constructor.SOURCE_NAME;\n    if (!chain.discrete) {\n        chain.discrete = {};\n    }\n\n    if (!resp) {\n        // FIXME: Hack. Certain browser issues (such as mixed content warnings) are reported as a successful promise\n        //  resolution, even though the request was aborted. This is difficult to reliably detect, and is most likely\n        // to occur for annotation sources (such as from ExAC). If empty response is received, skip parsing and log.\n        // FIXME: Throw an error after pending, eg https://github.com/konradjk/exac_browser/issues/345\n        console.error(\"No usable response was returned for source: '\" + source_id + \"'. Parsing will be skipped.\");\n        return Q.when(chain);\n    }\n\n    var json = typeof resp == \"string\" ? JSON.parse(resp) : resp;\n\n    var self = this;\n    // Perform the 4 steps of parsing the payload and return a combined chain object\n    return Q.when(self.normalizeResponse(json.data || json))\n        .then(function(standardized) {\n            // Perform calculations on the data from just this source\n            return Q.when(self.annotateData(standardized, chain));\n        }).then(function (data) {\n            return Q.when(self.extractFields(data, fields, outnames, trans));\n        }).then(function (one_source_body) {\n            // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n            //   fields array into account). This is useful when we want to re-use the source output in many ways.\n            chain.discrete[source_id] = one_source_body;\n            return Q.when(self.combineChainBody(one_source_body, chain, fields, outnames));\n        }).then(function (new_body) {\n            return { header: chain.header || {}, discrete: chain.discrete, body: new_body };\n        });\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseArraysToObjects = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseArraysToObjects() is no longer used. A stub is provided for legacy use\");\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseObjectsToObjects = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseObjectsToObjects() is deprecated. Use .extractFields() instead\");\n    return this.extractFields(data, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseData = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseData() is no longer used. A stub is provided for legacy use\");\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/**\n * Method to define new custom datasources based on a provided constructor. (does not allow registering any additional methods)\n * @public\n * @param {Function} constructorFun Constructor function that is used to create the specified class\n * @param {String} [uniqueName] The name by which the class should be listed in `KnownDataSources`\n * @param {String|Function} [base=LocusZoomData.Source] The name or constructor of a base class to use\n * @returns {*|Function}\n */\nLocusZoom.Data.Source.extend = function(constructorFun, uniqueName, base) {\n    if (base) {\n        if (Array.isArray(base)) {\n            base = LocusZoom.KnownDataSources.create.apply(null, base);\n        } else if (typeof base === \"string\") {\n            base = LocusZoom.KnownDataSources.get(base).prototype;\n        } else if (typeof base === \"function\") {\n            base = base.prototype;\n        }\n    } else {\n        base =  new LocusZoom.Data.Source();\n    }\n    constructorFun = constructorFun || function() {};\n    constructorFun.prototype = base;\n    constructorFun.prototype.constructor = constructorFun;\n    if (uniqueName) {\n        /** @member {String} LocusZoom.Data.Source.SOURCENAME */\n        constructorFun.SOURCE_NAME = uniqueName;\n        LocusZoom.KnownDataSources.add(constructorFun);\n    }\n    return constructorFun;\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents an existing source in that data format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n *\n * Custom sources with their own parameters may need to re-implement this method\n *\n * @public\n * @returns {Object}\n */\nLocusZoom.Data.Source.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME,\n        {url:this.url, params:this.params}];\n};\n\n/**\n * Data Source for Association Data, as fetched from the LocusZoom API server (or compatible)\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.AssociationSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"AssociationLZ\");\n\nLocusZoom.Data.AssociationSource.prototype.preGetData = function(state, fields, outnames, trans) {\n    var id_field = this.params.id_field || \"id\";\n    [id_field, \"position\"].forEach(function(x) {\n        if (fields.indexOf(x)===-1) {\n            fields.unshift(x);\n            outnames.unshift(x);\n            trans.unshift(null);\n        }\n    });\n    return {fields: fields, outnames:outnames, trans:trans};\n};\n\nLocusZoom.Data.AssociationSource.prototype.getURL = function(state, chain, fields) {\n    var analysis = state.analysis || chain.header.analysis || this.params.analysis;\n    if (typeof analysis == \"undefined\") {\n        throw \"Association source must specify an analysis ID to plot\";\n    }\n    return this.url + \"results/?filter=analysis in \" + analysis  +\n        \" and chromosome in  '\" + state.chr + \"'\" +\n        \" and position ge \" + state.start +\n        \" and position le \" + state.end;\n};\n\nLocusZoom.Data.AssociationSource.prototype.normalizeResponse = function (data) {\n    // Some association sources do not sort their data in a predictable order, which makes it hard to reliably\n    //  align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.\n    // TODO: Consider more fine grained sorting control in the future\n    data = LocusZoom.Data.Source.prototype.normalizeResponse.call(this, data);\n    if (this.params && this.params.sort && data.length && data[0][\"position\"]) {\n        data.sort(function (a, b) { return a[\"position\"] - b[\"position\"]; });\n    }\n    return data;\n};\n\n/**\n * Data Source for LD Data, as fetched from the LocusZoom API server (or compatible)\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.LDSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, \"LDLZ\");\n\nLocusZoom.Data.LDSource.prototype.preGetData = function(state, fields) {\n    if (fields.length>1) {\n        if (fields.length!==2 || fields.indexOf(\"isrefvar\")===-1) {\n            throw(\"LD does not know how to get all fields: \" + fields.join(\", \"));\n        }\n    }\n};\n\nLocusZoom.Data.LDSource.prototype.findMergeFields = function(chain) {\n    // since LD may be shared across sources with different namespaces\n    // we use regex to find columns to join on rather than\n    // requiring exact matches\n    var exactMatch = function(arr) {return function() {\n        var regexes = arguments;\n        for(var i=0; i<regexes.length; i++) {\n            var regex = regexes[i];\n            var m = arr.filter(function(x) {return x.match(regex);});\n            if (m.length){\n                return m[0];\n            }\n        }\n        return null;\n    };};\n    var dataFields = {\n        id: this.params.id_field,\n        position: this.params.position_field,\n        pvalue: this.params.pvalue_field,\n        _names_:null\n    };\n    if (chain && chain.body && chain.body.length>0) {\n        var names = Object.keys(chain.body[0]);\n        var nameMatch = exactMatch(names);\n        dataFields.id = dataFields.id || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n        dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n        dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n        dataFields._names_ = names;\n    }\n    return dataFields;\n};\n\nLocusZoom.Data.LDSource.prototype.findRequestedFields = function(fields, outnames) {\n    var obj = {};\n    for(var i=0; i<fields.length; i++) {\n        if(fields[i]===\"isrefvar\") {\n            obj.isrefvarin = fields[i];\n            obj.isrefvarout = outnames && outnames[i];\n        } else {\n            obj.ldin = fields[i];\n            obj.ldout = outnames && outnames[i];\n        }\n    }\n    return obj;\n};\n\nLocusZoom.Data.LDSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.LDSource.prototype.getURL = function(state, chain, fields) {\n    var findExtremeValue = function(x, pval, sign) {\n        pval = pval || \"pvalue\";\n        sign = sign || 1;\n        var extremeVal = x[0][pval], extremeIdx=0;\n        for(var i=1; i<x.length; i++) {\n            if (x[i][pval] * sign > extremeVal) {\n                extremeVal = x[i][pval] * sign;\n                extremeIdx = i;\n            }\n        }\n        return extremeIdx;\n    };\n\n    var refSource = state.ldrefsource || chain.header.ldrefsource || 1;\n    var reqFields = this.findRequestedFields(fields);\n    var refVar = reqFields.ldin;\n    if (refVar === \"state\") {\n        refVar = state.ldrefvar || chain.header.ldrefvar || \"best\";\n    }\n    if (refVar === \"best\") {\n        if (!chain.body) {\n            throw(\"No association data found to find best pvalue\");\n        }\n        var keys = this.findMergeFields(chain);\n        if (!keys.pvalue || !keys.id) {\n            var columns = \"\";\n            if (!keys.id){ columns += (columns.length ? \", \" : \"\") + \"id\"; }\n            if (!keys.pvalue){ columns += (columns.length ? \", \" : \"\") + \"pvalue\"; }\n            throw(\"Unable to find necessary column(s) for merge: \" + columns + \" (available: \" + keys._names_ + \")\");\n        }\n        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n    }\n    if (!chain.header) {chain.header = {};}\n    chain.header.ldrefvar = refVar;\n    return this.url + \"results/?filter=reference eq \" + refSource +\n        \" and chromosome2 eq '\" + state.chr + \"'\" +\n        \" and position2 ge \" + state.start +\n        \" and position2 le \" + state.end +\n        \" and variant1 eq '\" + refVar + \"'\" +\n        \"&fields=chr,pos,rsquare\";\n};\n\nLocusZoom.Data.LDSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    var keys = this.findMergeFields(chain);\n    var reqFields = this.findRequestedFields(fields, outnames);\n    if (!keys.position) {\n        throw(\"Unable to find position field for merge: \" + keys._names_);\n    }\n    var leftJoin = function(left, right, lfield, rfield) {\n        var i=0, j=0;\n        while (i < left.length && j < right.position2.length) {\n            if (left[i][keys.position] === right.position2[j]) {\n                left[i][lfield] = right[rfield][j];\n                i++;\n                j++;\n            } else if (left[i][keys.position] < right.position2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    };\n    var tagRefVariant = function(data, refvar, idfield, outname) {\n        for(var i=0; i<data.length; i++) {\n            if (data[i][idfield] && data[i][idfield]===refvar) {\n                data[i][outname] = 1;\n            } else {\n                data[i][outname] = 0;\n            }\n        }\n    };\n\n    leftJoin(chain.body, data, reqFields.ldout, \"rsquare\");\n    if(reqFields.isrefvarin && chain.header.ldrefvar) {\n        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout);\n    }\n    return chain.body;\n};\n\n\n/**\n * Data Source for Gene Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.GeneSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneLZ\");\n\nLocusZoom.Data.GeneSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.source || chain.header.source || this.params.source || 2;\n    return this.url + \"?filter=source in \" + source +\n        \" and chrom eq '\" + state.chr + \"'\" +\n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\n// Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with the\n// exact information returned by the API. (ignoring the fields array in the layout)\nLocusZoom.Data.GeneSource.prototype.normalizeResponse = function (data) { return data; };\nLocusZoom.Data.GeneSource.prototype.extractFields = function (data, fields, outnames, trans) { return data; };\n\n/**\n * Data Source for Gene Constraint Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n*/\nLocusZoom.Data.GeneConstraintSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneConstraintLZ\");\n\nLocusZoom.Data.GeneConstraintSource.prototype.getURL = function() {\n    return this.url;\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.GeneConstraintSource.prototype.getCacheKey = function(state, chain, fields) {\n    return this.url + JSON.stringify(state);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.fetchRequest = function(state, chain, fields) {\n    var geneids = [];\n    chain.body.forEach(function(gene){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        geneids.push(gene_id);\n    });\n    var url = this.getURL(state, chain, fields);\n    var body = \"geneids=\" + encodeURIComponent(JSON.stringify(geneids));\n    var headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    return LocusZoom.createCORSPromise(\"POST\", url, body, headers);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    if (!data) {\n        return chain;\n    }\n    var constraint_fields = [\"bp\", \"exp_lof\", \"exp_mis\", \"exp_syn\", \"lof_z\", \"mis_z\", \"mu_lof\", \"mu_mis\",\"mu_syn\", \"n_exons\", \"n_lof\", \"n_mis\", \"n_syn\", \"pLI\", \"syn_z\"];\n    chain.body.forEach(function(gene, i){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        constraint_fields.forEach(function(field){\n            // Do not overwrite any fields defined in the original gene source\n            if (typeof chain.body[i][field] != \"undefined\"){ return; }\n            if (data[gene_id]){\n                var val = data[gene_id][field];\n                if (typeof val == \"number\" && val.toString().indexOf(\".\") !== -1){\n                    val = parseFloat(val.toFixed(2));\n                }\n                chain.body[i][field] = val;\n            } else {\n                // If the gene did not come back in the response then set the same field with a null values\n                chain.body[i][field] = null;\n            }\n        });\n    });\n    return chain.body;\n};\n\n/**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.RecombinationRateSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"RecombLZ\");\n\nLocusZoom.Data.RecombinationRateSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.recombsource || chain.header.recombsource || this.params.source || 15;\n    return this.url + \"?filter=id in \" + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        \" and position le \" + state.end +\n        \" and position ge \" + state.start;\n};\n\n/**\n * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.IntervalSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"IntervalLZ\");\n\nLocusZoom.Data.IntervalSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.bedtracksource || chain.header.bedtracksource || this.params.source || 16;\n    return this.url + \"?filter=id in \" + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\n/**\n * Data Source for static blobs of JSON Data. This does not perform additional parsing, and therefore it is the\n * responsibility of the user to pass information in a format that can be read and understood by the chosen plot.\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.StaticSource = LocusZoom.Data.Source.extend(function(data) {\n    /** @member {Object} */\n    this._data = data;\n},\"StaticJSON\");\n\nLocusZoom.Data.StaticSource.prototype.getRequest = function(state, chain, fields) {\n    return Q.fcall(function() {return this._data;}.bind(this));\n};\n\nLocusZoom.Data.StaticSource.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, this._data];\n};\n\n/**\n * Data source for PheWAS data served from external JSON files\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {String[]} init.build This datasource expects to be provided the name of the genome build that will be used to\n *   provide pheWAS results for this position. Note positions may not translate between builds.\n */\nLocusZoom.Data.PheWASSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"PheWASLZ\");\nLocusZoom.Data.PheWASSource.prototype.getURL = function(state, chain, fields) {\n    var build = this.params.build;\n    if (!build || !Array.isArray(build) || !build.length) {\n        throw [\"Data source\", this.constructor.SOURCE_NAME, \"requires that you specify array of one or more desired genome build names\"].join(\" \");\n    }\n    var url = [\n        this.url,\n        \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n        build.map(function(item) {return \"build=\" + encodeURIComponent(item);}).join(\"&\")\n    ];\n    return url.join(\"\");\n};\n\n/**\n * Base class for \"connectors\"- this is meant to be subclassed, rather than used directly.\n *\n * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object} init Configuration for this source\n * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n *  assumptions about what namespaces a source is using.\n * @type {*|Function}\n */\nLocusZoom.Data.ConnectorSource = LocusZoom.Data.Source.extend(function(init) {\n    if (!init || !init.sources) {\n        throw \"Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs\";\n    }\n\n    /**\n     * Tells the connector how to find the data it relies on\n     *\n     * For example, a connector that applies burden test information to the genes layer might specify:\n     *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n     *\n     * @member {Object}\n     */\n    this._source_name_mapping = init.sources;\n\n    // Validate that this source has been told how to find the required information\n    var specified_ids = Object.keys(init.sources);\n    var self = this;\n    this.REQUIRED_SOURCES.forEach(function (k) {\n        if (specified_ids.indexOf(k) === -1) {\n            throw \"Configuration for \" + self.constructor.SOURCE_NAME + \" must specify a source ID corresponding to \" + k;\n        }\n    });\n    this.parseInit(init);\n}, \"ConnectorSource\");\n\n/** @property {String[]} Specifies the sources that must be provided in the original config object */\nLocusZoom.Data.ConnectorSource.prototype.REQUIRED_SOURCES = [];\n\nLocusZoom.Data.ConnectorSource.prototype.parseInit = function(init) {};  // Stub\n\nLocusZoom.Data.ConnectorSource.prototype.getRequest = function(state, chain, fields) {\n    // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n    //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n    var self = this;\n    Object.keys(this._source_name_mapping).forEach(function(ns) {\n        var chain_source_id = self._source_name_mapping[ns];\n        if (chain.discrete && !chain.discrete[chain_source_id]) {\n            throw self.constructor.SOURCE_NAME + \" cannot be used before loading required data for: \" + chain_source_id;\n        }\n    });\n    return Q.when(chain.body || []);\n};\n\nLocusZoom.Data.ConnectorSource.prototype.parseResponse = function(data, chain, fields, outnames) {\n    // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n    //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n\n    // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n    // Typically connectors are called with `connector_name:all` in the fields array.\n    return Q.when(this.combineChainBody(data, chain, fields, outnames))\n        .then(function(new_body) {\n            return {header: chain.header || {}, discrete: chain.discrete || {}, body: new_body};\n        });\n};\n\nLocusZoom.Data.ConnectorSource.prototype.combineChainBody = function(records, chain) {\n    // Stub method: specifies how to combine the data\n    throw \"This method must be implemented in a subclass\";\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An independent LocusZoom object that renders a unique set of data and subpanels.\n * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n *\n * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n * to use the `LocusZoom.populate` helper method.\n *\n * @class\n * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n *   where the plot is rendered..\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n*/\nLocusZoom.Plot = function(id, datasource, layout) {\n    /** @member Boolean} */\n    this.initialized = false;\n    // TODO: This makes sense for all other locuszoom elements to have; determine whether this is interface boilerplate or something that can be removed\n    this.parent_plot = this;\n\n    /** @member {String} */\n    this.id = id;\n\n    /** @member {Element} */\n    this.container = null;\n    /**\n     * Selector for a node that will contain the plot. (set externally by populate methods)\n     * @member {d3.selection}\n     */\n    this.svg = null;\n\n    /** @member {Object.<String, Number>} */\n    this.panels = {};\n    /**\n     * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n     * @protected\n     * @member {String[]}\n     */\n    this.panel_ids_by_y_index = [];\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     */\n    this.applyPanelYIndexesToPanelLayouts = function(){\n        this.panel_ids_by_y_index.forEach(function(pid, idx){\n            this.panels[pid].layout.y_index = idx;\n        }.bind(this));\n    };\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @returns {String}\n     */\n    this.getBaseId = function(){\n        return this.id;\n    };\n\n    /**\n     * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n     * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n     * @protected\n     * @member {Promise[]}\n     */\n    this.remap_promises = [];\n\n    if (typeof layout == \"undefined\"){\n        /**\n         * The layout is a serializable object used to describe the composition of the Plot\n         *   If no layout was passed, use the Standard Association Layout\n         *   Otherwise merge whatever was passed with the Default Layout\n         *   TODO: Review description; we *always* merge with default layout?\n         * @member {Object}\n         */\n        this.layout = LocusZoom.Layouts.merge({}, LocusZoom.Layouts.get(\"plot\", \"standard_association\"));\n    } else {\n        this.layout = layout;\n    }\n    LocusZoom.Layouts.merge(this.layout, LocusZoom.Plot.DefaultLayout);\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original plot state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n\n    /**\n     * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n     *   with initial state/setup.\n     *\n     * Tracks state of the plot, eg start and end position\n     * @member {Object}\n     */\n    this.state = this.layout.state;\n\n    /** @member {LocusZoom.Data.Requester} */\n    this.lzd = new LocusZoom.Data.Requester(datasource);\n\n    /**\n     * Window.onresize listener (responsive layouts only)\n     * TODO: .on appears to return a selection, not a listener? Check logic here\n     * https://github.com/d3/d3-selection/blob/00b904b9bcec4dfaf154ae0bbc777b1fc1d7bc08/test/selection/on-test.js#L11\n     * @deprecated\n     * @member {d3.selection}\n     */\n    this.window_onresize = null;\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": [],\n        \"element_selection\": [],\n        \"state_changed\": []  // Only triggered when a state change causes rerender\n    };\n\n    /**\n     * @callback eventCallback\n     * @param {object} eventData A description of the event\n     * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n     *  triggered the event. Will be automatically filled in if not explicitly provided.\n     * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n     *   associated with a clicked plot element\n     */\n\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: plot - A data element in any of the plot's data layers has been clicked.\n     *   - `element_selection` - context: plot - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook){\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Plot}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof \"event\" != \"string\" || !Array.isArray(theseHooks)){\n            throw(\"Unable to remove event hook, invalid event: \" + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw(\"The specified event listener is not registered and therefore cannot be removed\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {LocusZoom.Plot}\n     */\n    this.emit = function(event, eventData) {\n        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        this.event_hooks[event].forEach(function(hookToRun) {\n            var eventContext;\n            if (eventData && eventData.sourceID) {\n                // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n                //  when re-emitting the event to plot-level listeners\n                eventContext = eventData;\n            } else {\n                eventContext = {sourceID: sourceID, data: eventData || null};\n            }\n            // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n            //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n            //  override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the plot\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    this.getPageOrigin = function(){\n        var bounding_client_rect = this.svg.node().getBoundingClientRect();\n        var x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        var y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        var container = this.svg.node();\n        while (container.parentNode !== null){\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style(\"position\") !== \"static\"){\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height\n        };\n    };\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @returns {{top: number, left: number}}\n     */\n    this.getContainerOffset = function(){\n        var offset = { top: 0, left: 0 };\n        var container = this.container.offsetParent || null;\n        while (container !== null){\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    };\n\n    //\n    /**\n     * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n     * TODO: Add/ document details of interaction structure as we expand\n     * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n     * @returns {LocusZoom.Plot}\n     */\n    this.interaction = {};\n\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    this.canInteract = function(panel_id){\n        panel_id = panel_id || null;\n        if (panel_id){\n            return ((typeof this.interaction.panel_id == \"undefined\" || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n    // TODO: Possibly superfluous return from constructor\n    return this;\n};\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\nLocusZoom.Plot.DefaultLayout = {\n    state: {},\n    width: 1,\n    height: 1,\n    min_width: 1,\n    min_height: 1,\n    responsive_resize: false,\n    aspect_ratio: 1,\n    panels: [],\n    dashboard: {\n        components: []\n    },\n    panel_boundaries: true,\n    mouse_guide: true\n};\n\n/**\n * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n * @param {('Height'|'Width')} dimension\n * @returns {number}\n */\nLocusZoom.Plot.prototype.sumProportional = function(dimension){\n    if (dimension !== \"height\" && dimension !== \"width\"){\n        throw (\"Bad dimension value passed to LocusZoom.Plot.prototype.sumProportional\");\n    }\n    var total = 0;\n    for (var id in this.panels){\n        // Ensure every panel contributing to the sum has a non-zero proportional dimension\n        if (!this.panels[id].layout[\"proportional_\" + dimension]){\n            this.panels[id].layout[\"proportional_\" + dimension] = 1 / Object.keys(this.panels).length;\n        }\n        total += this.panels[id].layout[\"proportional_\" + dimension];\n    }\n    return total;\n};\n\n/**\n * Resize the plot to fit the bounding container\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.rescaleSVG = function(){\n    var clientRect = this.svg.node().getBoundingClientRect();\n    this.setDimensions(clientRect.width, clientRect.height);\n    return this;\n};\n\n/**\n * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initializeLayout = function(){\n\n    // Sanity check layout values\n    // TODO: Find a way to generally abstract this, maybe into an object that models allowed layout values?\n    if (isNaN(this.layout.width) || this.layout.width <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.height) || this.layout.height <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.aspect_ratio) || this.layout.aspect_ratio <= 0){\n        throw (\"Plot layout parameter `aspect_ratio` must be a positive number\");\n    }\n\n    // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n    if (this.layout.responsive_resize){\n        this.window_onresize = d3.select(window).on(\"resize.lz-\"+this.id, function(){\n            this.rescaleSVG();\n        }.bind(this));\n        // Forcing one additional setDimensions() call after the page is loaded clears up\n        // any disagreements between the initial layout and the loaded responsive container's size\n        d3.select(window).on(\"load.lz-\"+this.id, function(){\n            this.setDimensions();\n        }.bind(this));\n    }\n\n    // Add panels\n    this.layout.panels.forEach(function(panel_layout){\n        this.addPanel(panel_layout);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n *\n * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n *   calculates the appropriate plot dimensions based on all panels.\n * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.setDimensions = function(width, height){\n\n    var id;\n\n    // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n    var min_width = parseFloat(this.layout.min_width) || 0;\n    var min_height = parseFloat(this.layout.min_height) || 0;\n    for (id in this.panels){\n        min_width = Math.max(min_width, this.panels[id].layout.min_width);\n        if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0){\n            min_height = Math.max(min_height, (this.panels[id].layout.min_height / this.panels[id].layout.proportional_height));\n        }\n    }\n    this.layout.min_width = Math.max(min_width, 1);\n    this.layout.min_height = Math.max(min_height, 1);\n    d3.select(this.svg.node().parentNode).style({\n        \"min-width\": this.layout.min_width + \"px\",\n        \"min-height\": this.layout.min_height + \"px\"\n    });\n\n    // If width and height arguments were passed then adjust them against plot minimums if necessary.\n    // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n    if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n        this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n        this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        this.layout.aspect_ratio = this.layout.width / this.layout.height;\n        // Override discrete values if resizing responsively\n        if (this.layout.responsive_resize){\n            if (this.svg){\n                this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n            }\n            this.layout.height = this.layout.width / this.layout.aspect_ratio;\n            if (this.layout.height < this.layout.min_height){\n                this.layout.height = this.layout.min_height;\n                this.layout.width  = this.layout.height * this.layout.aspect_ratio;\n            }\n        }\n        // Resize/reposition panels to fit, update proportional origins if necessary\n        var y_offset = 0;\n        this.panel_ids_by_y_index.forEach(function(panel_id){\n            var panel_width = this.layout.width;\n            var panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n            this.panels[panel_id].setDimensions(panel_width, panel_height);\n            this.panels[panel_id].setOrigin(0, y_offset);\n            this.panels[panel_id].layout.proportional_origin.x = 0;\n            this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n            y_offset += panel_height;\n            this.panels[panel_id].dashboard.update();\n        }.bind(this));\n    }\n\n    // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n    // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n    else if (Object.keys(this.panels).length) {\n        this.layout.width = 0;\n        this.layout.height = 0;\n        for (id in this.panels){\n            this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n            this.layout.height += this.panels[id].layout.height;\n        }\n        this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n        this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n    }\n\n    // Keep aspect ratio in agreement with dimensions\n    this.layout.aspect_ratio = this.layout.width / this.layout.height;\n\n    // Apply layout width and height as discrete values or viewbox values\n    if (this.svg !== null){\n        if (this.layout.responsive_resize){\n            this.svg\n                .attr(\"viewBox\", \"0 0 \" + this.layout.width + \" \" + this.layout.height)\n                .attr(\"preserveAspectRatio\", \"xMinYMin meet\");\n        } else {\n            this.svg.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n        }\n    }\n\n    // If the plot has been initialized then trigger some necessary render functions\n    if (this.initialized){\n        this.panel_boundaries.position();\n        this.dashboard.update();\n        this.curtain.update();\n        this.loader.update();\n    }\n\n    return this.emit(\"layout_changed\");\n};\n\n/**\n * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n * @param {Object} layout\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Plot.prototype.addPanel = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\"){\n        throw \"Invalid panel layout passed to LocusZoom.Plot.prototype.addPanel()\";\n    }\n\n    // Create the Panel and set its parent\n    var panel = new LocusZoom.Panel(layout, this);\n\n    // Store the Panel on the Plot\n    this.panels[panel.id] = panel;\n\n    // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n    if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n        && this.panel_ids_by_y_index.length > 0){\n        // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (panel.layout.y_index < 0){\n            panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n        }\n        this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n        this.applyPanelYIndexesToPanelLayouts();\n    } else {\n        var length = this.panel_ids_by_y_index.push(panel.id);\n        this.panels[panel.id].layout.y_index = length - 1;\n    }\n\n    // Determine if this panel was already in the layout.panels array.\n    // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n    var layout_idx = null;\n    this.layout.panels.forEach(function(panel_layout, idx){\n        if (panel_layout.id === panel.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n    }\n    this.panels[panel.id].layout_idx = layout_idx;\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        this.positionPanels();\n        // Initialize and load data into the new panel\n        this.panels[panel.id].initialize();\n        this.panels[panel.id].reMap();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this.panels[panel.id];\n};\n\n\n/**\n * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n *\n * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.clearPanelData = function(panelId, mode) {\n    mode = mode || \"wipe\";\n\n    // TODO: Add unit tests for this method\n    var panelsList;\n    if (panelId) {\n        panelsList = [panelId];\n    } else {\n        panelsList = Object.keys(this.panels);\n    }\n    var self = this;\n    panelsList.forEach(function(pid) {\n        self.panels[pid].data_layer_ids_by_z_index.forEach(function(dlid){\n            var layer = self.panels[pid].data_layers[dlid];\n            layer.destroyAllTooltips();\n\n            delete self.layout.state[pid + \".\" + dlid];\n            if(mode === \"reset\") {\n                layer.setDefaultState();\n            }\n        });\n    });\n    return this;\n};\n\n/**\n * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n * @param {String} id\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.removePanel = function(id){\n    if (!this.panels[id]){\n        throw (\"Unable to remove panel, ID not found: \" + id);\n    }\n\n    // Hide all panel boundaries\n    this.panel_boundaries.hide();\n\n    // Destroy all tooltips and state vars for all data layers on the panel\n    this.clearPanelData(id);\n\n    // Remove all panel-level HTML overlay elements\n    this.panels[id].loader.hide();\n    this.panels[id].dashboard.destroy(true);\n    this.panels[id].curtain.hide();\n\n    // Remove the svg container for the panel if it exists\n    if (this.panels[id].svg.container){\n        this.panels[id].svg.container.remove();\n    }\n\n    // Delete the panel and its presence in the plot layout and state\n    this.layout.panels.splice(this.panels[id].layout_idx, 1);\n    delete this.panels[id];\n    delete this.layout.state[id];\n\n    // Update layout_idx values for all remaining panels\n    this.layout.panels.forEach(function(panel_layout, idx){\n        this.panels[panel_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    // Remove the panel id from the y_index array\n    this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n    this.applyPanelYIndexesToPanelLayouts();\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n        this.layout.min_height = this._base_layout.min_height;\n        this.layout.min_width = this._base_layout.min_width;\n\n        this.positionPanels();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this;\n};\n\n\n/**\n * Automatically position panels based on panel positioning rules and values.\n * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n *\n * TODO: This logic currently only supports dynamic positioning of panels to prevent overlap in a VERTICAL orientation.\n *      Some framework exists for positioning panels in horizontal orientations as well (width, proportional_width, origin.x, etc.)\n *      but the logic for keeping these user-definable values straight approaches the complexity of a 2D box-packing algorithm.\n *      That's complexity we don't need right now, and may not ever need, so it's on hiatus until a use case materializes.\n */\nLocusZoom.Plot.prototype.positionPanels = function(){\n\n    var id;\n\n    // We want to enforce that all x-linked panels have consistent horizontal margins\n    // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n    // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n    var x_linked_margins = { left: 0, right: 0 };\n\n    // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n    // proportional heights for all panels with a null value from discretely set dimensions.\n    // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n    for (id in this.panels){\n        if (this.panels[id].layout.proportional_height === null){\n            this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n        }\n        if (this.panels[id].layout.proportional_width === null){\n            this.panels[id].layout.proportional_width = 1;\n        }\n        if (this.panels[id].layout.interaction.x_linked){\n            x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n            x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n        }\n    }\n\n    // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n    var total_proportional_height = this.sumProportional(\"height\");\n    if (!total_proportional_height){\n        return this;\n    }\n    var proportional_adjustment = 1 / total_proportional_height;\n    for (id in this.panels){\n        this.panels[id].layout.proportional_height *= proportional_adjustment;\n    }\n\n    // Update origins on all panels without changing plot-level dimensions yet\n    // Also apply x-linked margins to x-linked panels, updating widths as needed\n    var y_offset = 0;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setOrigin(0, y_offset);\n        this.panels[panel_id].layout.proportional_origin.x = 0;\n        y_offset += this.panels[panel_id].layout.height;\n        if (this.panels[panel_id].layout.interaction.x_linked){\n            var delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0)\n                      + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n            this.panels[panel_id].layout.width += delta;\n            this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n            this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n            this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n        }\n    }.bind(this));\n    var calculated_plot_height = y_offset;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n    }.bind(this));\n\n    // Update dimensions on the plot to accommodate repositioned panels\n    this.setDimensions();\n\n    // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width,\n                                            this.layout.height * this.panels[panel_id].layout.proportional_height);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n *\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initialize = function(){\n\n    // Ensure proper responsive class is present on the containing node if called for\n    if (this.layout.responsive_resize){\n        d3.select(this.container).classed(\"lz-container-responsive\", true);\n    }\n\n    // Create an element/layer for containing mouse guides\n    if (this.layout.mouse_guide) {\n        var mouse_guide_svg = this.svg.append(\"g\")\n            .attr(\"class\", \"lz-mouse_guide\").attr(\"id\", this.id + \".mouse_guide\");\n        var mouse_guide_vertical_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-vertical\").attr(\"x\",-1);\n        var mouse_guide_horizontal_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-horizontal\").attr(\"y\",-1);\n        this.mouse_guide = {\n            svg: mouse_guide_svg,\n            vertical: mouse_guide_vertical_svg,\n            horizontal: mouse_guide_horizontal_svg\n        };\n    }\n\n    // Add curtain and loader prototpyes to the plot\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    // Create the panel_boundaries object with show/position/hide methods\n    this.panel_boundaries = {\n        parent: this,\n        hide_timeout: null,\n        showing: false,\n        dragging: false,\n        selectors: [],\n        corner_selector: null,\n        show: function(){\n            // Generate panel boundaries\n            if (!this.showing && !this.parent.curtain.showing){\n                this.showing = true;\n                // Loop through all panels to create a horizontal boundary for each\n                this.parent.panel_ids_by_y_index.forEach(function(panel_id, panel_idx){\n                    var selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                        .attr(\"class\", \"lz-panel-boundary\")\n                        .attr(\"title\", \"Resize panel\");\n                    selector.append(\"span\");\n                    var panel_resize_drag = d3.behavior.drag();\n                    panel_resize_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                    panel_resize_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                    panel_resize_drag.on(\"drag\", function(){\n                        // First set the dimensions on the panel we're resizing\n                        var this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                        var original_panel_height = this_panel.layout.height;\n                        this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                        var panel_height_change = this_panel.layout.height - original_panel_height;\n                        var new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                        // Next loop through all panels.\n                        // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                        // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                        this.parent.panel_ids_by_y_index.forEach(function(loop_panel_id, loop_panel_idx){\n                            var loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                            loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                            if (loop_panel_idx > panel_idx){\n                                loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                loop_panel.dashboard.position();\n                            }\n                        }.bind(this));\n                        // Reset dimensions on the entire plot and reposition panel boundaries\n                        this.parent.positionPanels();\n                        this.position();\n                    }.bind(this));\n                    selector.call(panel_resize_drag);\n                    this.parent.panel_boundaries.selectors.push(selector);\n                }.bind(this));\n                // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                var corner_selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                    .attr(\"class\", \"lz-panel-corner-boundary\")\n                    .attr(\"title\", \"Resize plot\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-outer\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-inner\");\n                var corner_drag = d3.behavior.drag();\n                corner_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                corner_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                corner_drag.on(\"drag\", function(){\n                    this.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                }.bind(this.parent));\n                corner_selector.call(corner_drag);\n                this.parent.panel_boundaries.corner_selector = corner_selector;\n            }\n            return this.position();\n        },\n        position: function(){\n            if (!this.showing){ return this; }\n            // Position panel boundaries\n            var plot_page_origin = this.parent.getPageOrigin();\n            this.selectors.forEach(function(selector, panel_idx){\n                var panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].getPageOrigin();\n                var left = plot_page_origin.x;\n                var top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                var width = this.parent.layout.width - 1;\n                selector.style({\n                    top: top + \"px\",\n                    left: left + \"px\",\n                    width: width + \"px\"\n                });\n                selector.select(\"span\").style({\n                    width: width + \"px\"\n                });\n            }.bind(this));\n            // Position corner selector\n            var corner_padding = 10;\n            var corner_size = 16;\n            this.corner_selector.style({\n                top: (plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size) + \"px\",\n                left: (plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size) + \"px\"\n            });\n            return this;\n        },\n        hide: function(){\n            if (!this.showing){ return this; }\n            this.showing = false;\n            // Remove panel boundaries\n            this.selectors.forEach(function(selector){ selector.remove(); });\n            this.selectors = [];\n            // Remove corner boundary\n            this.corner_selector.remove();\n            this.corner_selector = null;\n            return this;\n        }\n    };\n\n    // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n    if (this.layout.panel_boundaries){\n        d3.select(this.svg.node().parentNode).on(\"mouseover.\" + this.id + \".panel_boundaries\", function(){\n            clearTimeout(this.panel_boundaries.hide_timeout);\n            this.panel_boundaries.show();\n        }.bind(this));\n        d3.select(this.svg.node().parentNode).on(\"mouseout.\" + this.id + \".panel_boundaries\", function(){\n            this.panel_boundaries.hide_timeout = setTimeout(function(){\n                this.panel_boundaries.hide();\n            }.bind(this), 300);\n        }.bind(this));\n    }\n\n    // Create the dashboard object and immediately show it\n    this.dashboard = new LocusZoom.Dashboard(this).show();\n\n    // Initialize all panels\n    for (var id in this.panels){\n        this.panels[id].initialize();\n    }\n\n    // Define plot-level mouse events\n    var namespace = \".\" + this.id;\n    if (this.layout.mouse_guide) {\n        var mouseout_mouse_guide = function(){\n            this.mouse_guide.vertical.attr(\"x\", -1);\n            this.mouse_guide.horizontal.attr(\"y\", -1);\n        }.bind(this);\n        var mousemove_mouse_guide = function(){\n            var coords = d3.mouse(this.svg.node());\n            this.mouse_guide.vertical.attr(\"x\", coords[0]);\n            this.mouse_guide.horizontal.attr(\"y\", coords[1]);\n        }.bind(this);\n        this.svg\n            .on(\"mouseout\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"touchleave\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"mousemove\" + namespace + \"-mouse_guide\", mousemove_mouse_guide);\n    }\n    var mouseup = function(){\n        this.stopDrag();\n    }.bind(this);\n    var mousemove = function(){\n        if (this.interaction.dragging){\n            var coords = d3.mouse(this.svg.node());\n            if (d3.event){ d3.event.preventDefault(); }\n            this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n            this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n            this.panels[this.interaction.panel_id].render();\n            this.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.panels[panel_id].render();\n            }.bind(this));\n        }\n    }.bind(this);\n    this.svg\n        .on(\"mouseup\" + namespace, mouseup)\n        .on(\"touchend\" + namespace, mouseup)\n        .on(\"mousemove\" + namespace, mousemove)\n        .on(\"touchmove\" + namespace, mousemove);\n\n    // Add an extra namespaced mouseup handler to the containing body, if there is one\n    // This helps to stop interaction events gracefully when dragging outside of the plot element\n    if (!d3.select(\"body\").empty()){\n        d3.select(\"body\")\n            .on(\"mouseup\" + namespace, mouseup)\n            .on(\"touchend\" + namespace, mouseup);\n    }\n\n    this.initialized = true;\n\n    // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n    // positioning. TODO: make this additional call unnecessary.\n    var client_rect = this.svg.node().getBoundingClientRect();\n    var width = client_rect.width ? client_rect.width : this.layout.width;\n    var height = client_rect.height ? client_rect.height : this.layout.height;\n    this.setDimensions(width, height);\n\n    return this;\n\n};\n\n/**\n * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n * @returns {Promise}\n */\nLocusZoom.Plot.prototype.refresh = function(){\n    return this.applyState();\n};\n\n\n/**\n * A user-defined callback function that can receive (and potentially act on) new plot data.\n * @callback externalDataCallback\n * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n *  a data layer making an equivalent request.\n */\n\n/**\n * A user-defined callback function that can respond to errors received during a previous operation\n * @callback externalErrorCallback\n * @param err A representation of the error that occurred\n */\n\n/**\n * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n *\n * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n *  using the same fields syntax and underlying methods as data layers.\n *\n * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n *  Different data sources should be prefixed by the source name.\n * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n *  new data is received by the plot.\n * @param {Object} [opts] Options\n * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n *  occurs during the data request or subsequent callback operations\n * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n *  uncombined record info\n *  @return {function} The newly created event listener, to allow for later cleanup/removal\n */\nLocusZoom.Plot.prototype.subscribeToData = function(fields, success_callback, opts) {\n    opts = opts || {};\n\n    // Register an event listener that is notified whenever new data has been rendered\n    var error_callback = opts.onerror || function(err) {\n        console.log(\"An error occurred while acting on an external callback\", err);\n    };\n    var self = this;\n\n    var listener = function() {\n        try {\n            self.lzd.getData(self.state, fields)\n                .then(function (new_data) {\n                    success_callback(opts.discrete ? new_data.discrete : new_data.body);\n                }).catch(error_callback);\n        } catch (error) {\n            // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n            error_callback(error);\n        }\n    };\n    this.on(\"data_rendered\", listener);\n    return listener;\n};\n\n/**\n * Update state values and trigger a pull for fresh data on all data sources for all data layers\n * @param state_changes\n * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n */\nLocusZoom.Plot.prototype.applyState = function(state_changes){\n    state_changes = state_changes || {};\n    if (typeof state_changes != \"object\"){\n        throw(\"LocusZoom.applyState only accepts an object; \" + (typeof state_changes) + \" given\");\n    }\n\n    // First make a copy of the current (old) state to work with\n    var new_state = JSON.parse(JSON.stringify(this.state));\n\n    // Apply changes by top-level property to the new state\n    for (var property in state_changes) {\n        new_state[property] = state_changes[property];\n    }\n\n    // Validate the new state (may do nothing, may do a lot, depends on how the user has things set up)\n    new_state = LocusZoom.validateState(new_state, this.layout);\n\n    // Apply new state to the actual state\n    for (property in new_state) {\n        this.state[property] = new_state[property];\n    }\n\n    // Generate requests for all panels given new state\n    this.emit(\"data_requested\");\n    this.remap_promises = [];\n    this.loading_data = true;\n    for (var id in this.panels){\n        this.remap_promises.push(this.panels[id].reMap());\n    }\n\n    return Q.all(this.remap_promises)\n        .catch(function(error){\n            console.error(error);\n            this.curtain.drop(error);\n            this.loading_data = false;\n        }.bind(this))\n        .then(function(){\n            // TODO: Check logic here; in some promise implementations, this would cause the error to be considered handled, and \"then\" would always fire. (may or may not be desired behavior)\n            // Update dashboard / components\n            this.dashboard.update();\n\n            // Apply panel-level state values\n            this.panel_ids_by_y_index.forEach(function(panel_id){\n                var panel = this.panels[panel_id];\n                panel.dashboard.update();\n                // Apply data-layer-level state values\n                panel.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n                    var data_layer = this.data_layers[data_layer_id];\n                    var state_id = panel_id + \".\" + data_layer_id;\n                    for (var property in this.state[state_id]){\n                        if (!this.state[state_id].hasOwnProperty(property)){ continue; }\n                        if (Array.isArray(this.state[state_id][property])){\n                            this.state[state_id][property].forEach(function(element_id){\n                                try {\n                                    this.setElementStatus(property, this.getElementById(element_id), true);\n                                } catch (e){\n                                    console.error(\"Unable to apply state: \" + state_id + \", \" + property);\n                                }\n                            }.bind(data_layer));\n                        }\n                    }\n                }.bind(panel));\n            }.bind(this));\n\n            // Emit events\n            this.emit(\"layout_changed\");\n            this.emit(\"data_rendered\");\n            this.emit(\"state_changed\", state_changes);\n\n            this.loading_data = false;\n\n        }.bind(this));\n};\n\n/**\n * Register interactions along the specified axis, provided that the target panel allows interaction.\n *\n * @param {LocusZoom.Panel} panel\n * @param {('x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.startDrag = function(panel, method){\n\n    panel = panel || null;\n    method = method || null;\n\n    var axis = null;\n    switch (method){\n    case \"background\":\n    case \"x_tick\":\n        axis = \"x\";\n        break;\n    case \"y1_tick\":\n        axis = \"y1\";\n        break;\n    case \"y2_tick\":\n        axis = \"y2\";\n        break;\n    }\n\n    if (!(panel instanceof LocusZoom.Panel) || !axis || !this.canInteract()){ return this.stopDrag(); }\n\n    var coords = d3.mouse(this.svg.node());\n    this.interaction = {\n        panel_id: panel.id,\n        linked_panel_ids: panel.getLinkedPanelIds(axis),\n        dragging: {\n            method: method,\n            start_x: coords[0],\n            start_y: coords[1],\n            dragged_x: 0,\n            dragged_y: 0,\n            axis: axis\n        }\n    };\n\n    this.svg.style(\"cursor\", \"all-scroll\");\n\n    return this;\n\n};\n\n/**\n * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n *   clear the event when complete\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.stopDrag = function(){\n\n    if (!this.interaction.dragging){ return this; }\n\n    if (typeof this.panels[this.interaction.panel_id] != \"object\"){\n        this.interaction = {};\n        return this;\n    }\n    var panel = this.panels[this.interaction.panel_id];\n\n    // Helper function to find the appropriate axis layouts on child data layers\n    // Once found, apply the extent as floor/ceiling and remove all other directives\n    // This forces all associated axes to conform to the extent generated by a drag action\n    var overrideAxisLayout = function(axis, axis_number, extent){\n        panel.data_layer_ids_by_z_index.forEach(function(id){\n            if (panel.data_layers[id].layout[axis+\"_axis\"].axis === axis_number){\n                panel.data_layers[id].layout[axis+\"_axis\"].floor = extent[0];\n                panel.data_layers[id].layout[axis+\"_axis\"].ceiling = extent[1];\n                delete panel.data_layers[id].layout[axis+\"_axis\"].lower_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].upper_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].min_extent;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].ticks;\n            }\n        });\n    };\n\n    switch(this.interaction.dragging.method){\n    case \"background\":\n    case \"x_tick\":\n        if (this.interaction.dragging.dragged_x !== 0){\n            overrideAxisLayout(\"x\", 1, panel.x_extent);\n            this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n        }\n        break;\n    case \"y1_tick\":\n    case \"y2_tick\":\n        if (this.interaction.dragging.dragged_y !== 0){\n            // TODO: Hardcoded assumption of only two possible axes with single-digit #s (switch/case)\n            var y_axis_number = parseInt(this.interaction.dragging.method[1]);\n            overrideAxisLayout(\"y\", y_axis_number, panel[\"y\"+y_axis_number+\"_extent\"]);\n        }\n        break;\n    }\n\n    this.interaction = {};\n    this.svg.style(\"cursor\", null);\n\n    return this;\n\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n * @class\n * @param {Object} layout\n * @param {LocusZoom.Plot|null} parent\n*/\nLocusZoom.Panel = function(layout, parent) {\n\n    if (typeof layout !== \"object\"){\n        throw \"Unable to create panel, invalid layout\";\n    }\n\n    /** @member {LocusZoom.Plot|null} */\n    this.parent = parent || null;\n    /** @member {LocusZoom.Plot|null} */\n    this.parent_plot = parent;\n\n    // Ensure a valid ID is present. If there is no valid ID then generate one\n    if (typeof layout.id !== \"string\" || !layout.id.length){\n        if (!this.parent){\n            layout.id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n        } else {\n            var id = null;\n            var generateID = function(){\n                id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n                if (id == null || typeof this.parent.panels[id] != \"undefined\"){\n                    id = generateID();\n                }\n            }.bind(this);\n            layout.id = id;\n        }\n    } else if (this.parent) {\n        if (typeof this.parent.panels[layout.id] !== \"undefined\"){\n            throw \"Cannot create panel with id [\" + layout.id + \"]; panel with that id already exists\";\n        }\n    }\n    /** @member {String} */\n    this.id = layout.id;\n\n    /** @member {Boolean} */\n    this.initialized = false;\n    /**\n     * The index of this panel in the parent plot's `layout.panels`\n     * @member {number}\n     * */\n    this.layout_idx = null;\n    /** @member {Object} */\n    this.svg = {};\n\n    /**\n     * A JSON-serializable object used to describe the composition of the Panel\n     * @member {Object}\n     */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.Panel.DefaultLayout);\n\n    // Define state parameters specific to this panel\n    if (this.parent){\n        /** @member {Object} */\n        this.state = this.parent.state;\n\n        /** @member {String} */\n        this.state_id = this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n    } else {\n        this.state = null;\n        this.state_id = null;\n    }\n\n    /** @member {Object} */\n    this.data_layers = {};\n    /** @member {String[]} */\n    this.data_layer_ids_by_z_index = [];\n\n    /** @protected */\n    this.applyDataLayerZIndexesToDataLayerLayouts = function(){\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    }.bind(this);\n\n    /**\n     * Track data requests in progress\n     * @member {Promise[]}\n     *  @protected\n     */\n    this.data_promises = [];\n\n    /** @member {d3.scale} */\n    this.x_scale  = null;\n    /** @member {d3.scale} */\n    this.y1_scale = null;\n    /** @member {d3.scale} */\n    this.y2_scale = null;\n\n    /** @member {d3.extent} */\n    this.x_extent  = null;\n    /** @member {d3.extent} */\n    this.y1_extent = null;\n    /** @member {d3.extent} */\n    this.y2_extent = null;\n\n    /** @member {Number[]} */\n    this.x_ticks  = [];\n    /** @member {Number[]} */\n    this.y1_ticks = [];\n    /** @member {Number[]} */\n    this.y2_ticks = [];\n\n    /**\n     * A timeout ID as returned by setTimeout\n     * @protected\n     * @member {number}\n     */\n    this.zoom_timeout = null;\n\n    /** @returns {string} */\n    this.getBaseId = function(){\n        return this.parent.id + \".\" + this.id;\n    };\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": [],\n        \"element_selection\": []\n    };\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: panel - A data element in any of the panel's data layers has been clicked.\n     *   - `element_selection` - context: panel - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of the event (as defined in `event_hooks`)\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook){\n        // TODO: Dry plot and panel event code into a shared mixin\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Panel}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof \"event\" != \"string\" || !Array.isArray(theseHooks)){\n            throw(\"Unable to remove event hook, invalid event: \" + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw(\"The specified event listener is not registered and therefore cannot be removed\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {LocusZoom.Panel}\n     */\n    this.emit = function(event, eventData, bubble)  {\n        bubble = bubble || false;\n\n        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        if (typeof eventData === \"boolean\" && arguments.length === 2) {\n            // Overloaded method signature: emit(event, bubble)\n            bubble = eventData;\n            eventData = null;\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        var eventContext = {sourceID: sourceID, data: eventData || null};\n        this.event_hooks[event].forEach(function(hookToRun) {\n            // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n            // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        if (bubble && this.parent) {\n            this.parent.emit(event, eventContext);\n        }\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @returns {{x: Number, y: Number}}\n     */\n    this.getPageOrigin = function(){\n        var plot_origin = this.parent.getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y\n        };\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n\n    return this;\n\n};\n\n/**\n * Default panel layout\n * @static\n * @type {Object}\n */\nLocusZoom.Panel.DefaultLayout = {\n    title: { text: \"\", style: {}, x: 10, y: 22 },\n    y_index: null,\n    width:  0,\n    height: 0,\n    origin: { x: 0, y: null },\n    min_width: 1,\n    min_height: 1,\n    proportional_width: null,\n    proportional_height: null,\n    proportional_origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: \"clear_selections\",\n    dashboard: {\n        components: []\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 }\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {}\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false\n    },\n    data_layers: []\n};\n\n/**\n * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n *   and preparing / positioning data layers as appropriate.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initializeLayout = function(){\n\n    // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n    // This will default the panel to taking up the full width of the plot.\n    if (this.layout.width === 0 && this.layout.proportional_width === null){\n        this.layout.proportional_width = 1;\n    }\n\n    // If the layout is missing BOTH height and proportional height then set the proportional height to\n    // an equal share of the plot's current height.\n    if (this.layout.height === 0 && this.layout.proportional_height === null){\n        var panel_count = Object.keys(this.parent.panels).length;\n        if (panel_count > 0){\n            this.layout.proportional_height = (1 / panel_count);\n        } else {\n            this.layout.proportional_height = 1;\n        }\n    }\n\n    // Set panel dimensions, origin, and margin\n    this.setDimensions();\n    this.setOrigin();\n    this.setMargin();\n\n    // Set ranges\n    // TODO: Define stub values in constructor\n    this.x_range = [0, this.layout.cliparea.width];\n    this.y1_range = [this.layout.cliparea.height, 0];\n    this.y2_range = [this.layout.cliparea.height, 0];\n\n    // Initialize panel axes\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render ===false){\n            // The default layout sets the axis to an empty object, so set its render boolean here\n            this.layout.axes[axis].render = false;\n        } else {\n            this.layout.axes[axis].render = true;\n            this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n            this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n        }\n    }.bind(this));\n\n    // Add data layers (which define x and y extents)\n    this.layout.data_layers.forEach(function(data_layer_layout){\n        this.addDataLayer(data_layer_layout);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n *\n * @public\n * @param {number} [width]\n * @param {number} [height]\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setDimensions = function(width, height){\n    if (typeof width != \"undefined\" && typeof height != \"undefined\"){\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        }\n    } else {\n        if (this.layout.proportional_width !== null){\n            this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n        }\n        if (this.layout.proportional_height !== null){\n            this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n        }\n    }\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    if (this.svg.clipRect){\n        this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n    }\n    if (this.initialized){\n        this.render();\n        this.curtain.update();\n        this.loader.update();\n        this.dashboard.update();\n        if (this.legend){ this.legend.position(); }\n    }\n    return this;\n};\n\n/**\n * Set panel origin on the plot, and re-render as appropriate\n *\n * @public\n * @param {number} x\n * @param {number} y\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setOrigin = function(x, y){\n    if (!isNaN(x) && x >= 0){ this.layout.origin.x = Math.max(Math.round(+x), 0); }\n    if (!isNaN(y) && y >= 0){ this.layout.origin.y = Math.max(Math.round(+y), 0); }\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set margins around this panel\n * @public\n * @param {number} top\n * @param {number} right\n * @param {number} bottom\n * @param {number} left\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setMargin = function(top, right, bottom, left){\n    var extra;\n    if (!isNaN(top)    && top    >= 0){ this.layout.margin.top    = Math.max(Math.round(+top),    0); }\n    if (!isNaN(right)  && right  >= 0){ this.layout.margin.right  = Math.max(Math.round(+right),  0); }\n    if (!isNaN(bottom) && bottom >= 0){ this.layout.margin.bottom = Math.max(Math.round(+bottom), 0); }\n    if (!isNaN(left)   && left   >= 0){ this.layout.margin.left   = Math.max(Math.round(+left),   0); }\n    if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height){\n        extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n        this.layout.margin.top -= extra;\n        this.layout.margin.bottom -= extra;\n    }\n    if (this.layout.margin.left + this.layout.margin.right > this.layout.width){\n        extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.layout.width) / 2);\n        this.layout.margin.left -= extra;\n        this.layout.margin.right -= extra;\n    }\n    [\"top\", \"right\", \"bottom\", \"left\"].forEach(function(m){\n        this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n    }.bind(this));\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    this.layout.cliparea.origin.x = this.layout.margin.left;\n    this.layout.cliparea.origin.y = this.layout.margin.top;\n\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n *   string, the title DOM element will be set to display: none.\n *\n * @param {string|object|null} title The title text, or an object with additional configuration\n * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n    NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setTitle = function(title){\n    if (typeof this.layout.title == \"string\"){\n        var text = this.layout.title;\n        this.layout.title = { text: text, x: 0, y: 0, style: {} };\n    }\n    if (typeof title == \"string\"){\n        this.layout.title.text = title;\n    } else if (typeof title == \"object\" && title !== null){\n        this.layout.title = LocusZoom.Layouts.merge(title, this.layout.title);\n    }\n    if (this.layout.title.text.length){\n        this.title.attr(\"display\", null)\n            .attr(\"x\", parseFloat(this.layout.title.x))\n            .attr(\"y\", parseFloat(this.layout.title.y))\n            .style(this.layout.title.style)\n            .text(this.layout.title.text);\n    } else {\n        this.title.attr(\"display\", \"none\");\n    }\n    return this;\n};\n\n\n/**\n * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n *   elements such as axes,  title, and loader/curtain.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initialize = function(){\n\n    // Append a container group element to house the main panel group element and the clip path\n    // Position with initial layout parameters\n    this.svg.container = this.parent.svg.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel_container\")\n        .attr(\"transform\", \"translate(\" + (this.layout.origin.x || 0) + \",\" + (this.layout.origin.y || 0) + \")\");\n\n    // Append clip path to the parent svg element, size with initial layout parameters\n    var clipPath = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\");\n    this.svg.clipRect = clipPath.append(\"rect\")\n        .attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Append svg group for rendering all panel child elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    // Add curtain and loader prototypes to the panel\n    /** @member {Object} */\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    /** @member {Object} */\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    /**\n     * Create the dashboard object and hang components on it as defined by panel layout\n     * @member {LocusZoom.Dashboard}\n     */\n    this.dashboard = new LocusZoom.Dashboard(this);\n\n    // Inner border\n    this.inner_border = this.svg.group.append(\"rect\")\n        .attr(\"class\", \"lz-panel-background\")\n        .on(\"click\", function(){\n            if (this.layout.background_click === \"clear_selections\"){ this.clearSelections(); }\n        }.bind(this));\n\n    // Add the title\n    /** @member {Element} */\n    this.title = this.svg.group.append(\"text\").attr(\"class\", \"lz-panel-title\");\n    if (typeof this.layout.title != \"undefined\"){ this.setTitle(); }\n\n    // Initialize Axes\n    this.svg.x_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".x_axis\").attr(\"class\", \"lz-x lz-axis\");\n    if (this.layout.axes.x.render){\n        this.svg.x_axis_label = this.svg.x_axis.append(\"text\")\n            .attr(\"class\", \"lz-x lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y1_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y1_axis\").attr(\"class\", \"lz-y lz-y1 lz-axis\");\n    if (this.layout.axes.y1.render){\n        this.svg.y1_axis_label = this.svg.y1_axis.append(\"text\")\n            .attr(\"class\", \"lz-y1 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y2_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y2_axis\").attr(\"class\", \"lz-y lz-y2 lz-axis\");\n    if (this.layout.axes.y2.render){\n        this.svg.y2_axis_label = this.svg.y2_axis.append(\"text\")\n            .attr(\"class\", \"lz-y2 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n\n    // Initialize child Data Layers\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].initialize();\n    }.bind(this));\n\n    /**\n     * Legend object, as defined by panel layout and child data layer layouts\n     * @member {LocusZoom.Legend}\n     * */\n    this.legend = null;\n    if (this.layout.legend){\n        this.legend = new LocusZoom.Legend(this);\n    }\n\n    // Establish panel background drag interaction mousedown event handler (on the panel background)\n    if (this.layout.interaction.drag_background_to_pan){\n        var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n        var mousedown = function(){\n            this.parent.startDrag(this, \"background\");\n        }.bind(this);\n        this.svg.container.select(\".lz-panel-background\")\n            .on(\"mousedown\" + namespace + \".background\", mousedown)\n            .on(\"touchstart\" + namespace + \".background\", mousedown);\n    }\n\n    return this;\n\n};\n\n/**\n * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n */\nLocusZoom.Panel.prototype.resortDataLayers = function(){\n    var sort = [];\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        sort.push(this.data_layers[id].layout.z_index);\n    }.bind(this));\n    this.svg.group.selectAll(\"g.lz-data_layer-container\").data(sort).sort(d3.ascending);\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n};\n\n/**\n * Get an array of panel IDs that are axis-linked to this panel\n * @param {('x'|'y1'|'y2')} axis\n * @returns {Array}\n */\nLocusZoom.Panel.prototype.getLinkedPanelIds = function(axis){\n    axis = axis || null;\n    var linked_panel_ids = [];\n    if ([\"x\",\"y1\",\"y2\"].indexOf(axis) === -1){ return linked_panel_ids; }\n    if (!this.layout.interaction[axis + \"_linked\"]){ return linked_panel_ids; }\n    this.parent.panel_ids_by_y_index.forEach(function(panel_id){\n        if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[axis + \"_linked\"]){\n            linked_panel_ids.push(panel_id);\n        }\n    }.bind(this));\n    return linked_panel_ids;\n};\n\n/**\n * Move a panel up relative to others by y-index\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveUp = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Move a panel down (y-axis) relative to others in the plot\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveDown = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n *   in the layout provided.\n * @param {object} layout\n * @returns {*}\n */\nLocusZoom.Panel.prototype.addDataLayer = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\" || typeof layout.id !== \"string\" || !layout.id.length){\n        throw \"Invalid data layer layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n    if (typeof this.data_layers[layout.id] !== \"undefined\"){\n        throw \"Cannot create data_layer with id [\" + layout.id + \"]; data layer with that id already exists in the panel\";\n    }\n    if (typeof layout.type !== \"string\"){\n        throw \"Invalid data layer type in layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n\n    // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n    if (typeof layout.y_axis == \"object\" && (typeof layout.y_axis.axis == \"undefined\" || [1,2].indexOf(layout.y_axis.axis) === -1)){\n        layout.y_axis.axis = 1;\n    }\n\n    // Create the Data Layer\n    var data_layer = LocusZoom.DataLayers.get(layout.type, layout, this);\n\n    // Store the Data Layer on the Panel\n    this.data_layers[data_layer.id] = data_layer;\n\n    // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n    if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n        && this.data_layer_ids_by_z_index.length > 0){\n        // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (data_layer.layout.z_index < 0){\n            data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n        }\n        this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    } else {\n        var length = this.data_layer_ids_by_z_index.push(data_layer.id);\n        this.data_layers[data_layer.id].layout.z_index = length - 1;\n    }\n\n    // Determine if this data layer was already in the layout.data_layers array.\n    // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n    var layout_idx = null;\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        if (data_layer_layout.id === data_layer.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n    }\n    this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n    return this.data_layers[data_layer.id];\n};\n\n/**\n * Remove a data layer by id\n * @param {string} id\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.removeDataLayer = function(id){\n    if (!this.data_layers[id]){\n        throw (\"Unable to remove data layer, ID not found: \" + id);\n    }\n\n    // Destroy all tooltips for the data layer\n    this.data_layers[id].destroyAllTooltips();\n\n    // Remove the svg container for the data layer if it exists\n    if (this.data_layers[id].svg.container){\n        this.data_layers[id].svg.container.remove();\n    }\n\n    // Delete the data layer and its presence in the panel layout and state\n    this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n    delete this.state[this.data_layers[id].state_id];\n    delete this.data_layers[id];\n\n    // Remove the data_layer id from the z_index array\n    this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n    // Update layout_idx and layout.z_index values for all remaining data_layers\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        this.data_layers[data_layer_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Clear all selections on all data layers\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.clearSelections = function(){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(\"selected\", false);\n    }.bind(this));\n    return this;\n};\n\n/**\n * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n *   from the API as the viewing region changes\n * @returns {Promise}\n */\nLocusZoom.Panel.prototype.reMap = function(){\n    this.emit(\"data_requested\");\n    this.data_promises = [];\n\n    // Remove any previous error messages before attempting to load new data\n    this.curtain.hide();\n    // Trigger reMap on each Data Layer\n    for (var id in this.data_layers){\n        try {\n            this.data_promises.push(this.data_layers[id].reMap());\n        } catch (error) {\n            console.warn(error);\n            this.curtain.show(error);\n        }\n    }\n    // When all finished trigger a render\n    return Q.all(this.data_promises)\n        .then(function(){\n            this.initialized = true;\n            this.render();\n            this.emit(\"layout_changed\", true);\n            this.emit(\"data_rendered\");\n        }.bind(this))\n        .catch(function(error){\n            console.warn(error);\n            this.curtain.show(error);\n        }.bind(this));\n};\n\n/**\n * Iterate over data layers to generate panel axis extents\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.generateExtents = function(){\n\n    // Reset extents\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        this[axis + \"_extent\"] = null;\n    }.bind(this));\n\n    // Loop through the data layers\n    for (var id in this.data_layers){\n\n        var data_layer = this.data_layers[id];\n\n        // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n        if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled){\n            this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent(\"x\")));\n        }\n\n        // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n        if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled){\n            var y_axis = \"y\" + data_layer.layout.y_axis.axis;\n            this[y_axis+\"_extent\"] = d3.extent((this[y_axis+\"_extent\"] || []).concat(data_layer.getAxisExtent(\"y\")));\n        }\n\n    }\n\n    // Override x_extent from state if explicitly defined to do so\n    if (this.layout.axes.x && this.layout.axes.x.extent === \"state\"){\n        this.x_extent = [ this.state.start, this.state.end ];\n    }\n\n    return this;\n\n};\n\n/**\n * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n *   1. An array of specific tick marks\n *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n *     object to override the layer's default presentation settings\n *   3. Generate generic tick marks based on the extent of the data\n * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n * @returns {Number[]|Object[]}  TODO: number format?\n *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.Panel.prototype.generateTicks = function(axis){\n\n    // Parse an explicit 'ticks' attribute in the axis layout\n    if (this.layout.axes[axis].ticks){\n        var layout = this.layout.axes[axis];\n\n        var baseTickConfig = layout.ticks;\n        if (Array.isArray(baseTickConfig)){\n            // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n            return baseTickConfig;\n        }\n\n        if (typeof baseTickConfig === \"object\") {\n            // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n            //   data layer to report the tick marks that it thinks it needs\n            // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n            var self = this;\n\n            // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n            var config = { position: baseTickConfig.position };\n\n            var combinedTicks = this.data_layer_ids_by_z_index.reduce(function(acc, data_layer_id) {\n                var nextLayer = self.data_layers[data_layer_id];\n                return acc.concat(nextLayer.getTicks(axis, config));\n            }, []);\n\n            return combinedTicks.map(function(item) {\n                // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                var itemConfig = {};\n                itemConfig = LocusZoom.Layouts.merge(itemConfig, baseTickConfig);\n                return LocusZoom.Layouts.merge(itemConfig, item);\n            });\n        }\n    }\n\n    // If no other configuration is provided, attempt to generate ticks from the extent\n    if (this[axis + \"_extent\"]) {\n        return LocusZoom.prettyTicks(this[axis + \"_extent\"], \"both\");\n    }\n    return [];\n};\n\n/**\n * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n *   prepared the first time via `initialize`\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.render = function(){\n\n    // Position the panel container\n    this.svg.container.attr(\"transform\", \"translate(\" + this.layout.origin.x +  \",\" + this.layout.origin.y + \")\");\n\n    // Set size on the clip rect\n    this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Set and position the inner border, style if necessary\n    this.inner_border\n        .attr(\"x\", this.layout.margin.left).attr(\"y\", this.layout.margin.top)\n        .attr(\"width\", this.layout.width - (this.layout.margin.left + this.layout.margin.right))\n        .attr(\"height\", this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n    if (this.layout.inner_border){\n        this.inner_border.style({ \"stroke-width\": 1, \"stroke\": this.layout.inner_border });\n    }\n\n    // Set/update panel title if necessary\n    this.setTitle();\n\n    // Regenerate all extents\n    this.generateExtents();\n\n    // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n    // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n    var constrain = function(value, limit_exponent){\n        var neg_min = Math.pow(-10, limit_exponent);\n        var neg_max = Math.pow(-10, -limit_exponent);\n        var pos_min = Math.pow(10, -limit_exponent);\n        var pos_max = Math.pow(10, limit_exponent);\n        if (value === Infinity){ value = pos_max; }\n        if (value === -Infinity){ value = neg_min; }\n        if (value === 0){ value = pos_min; }\n        if (value > 0){ value = Math.max(Math.min(value, pos_max), pos_min); }\n        if (value < 0){ value = Math.max(Math.min(value, neg_max), neg_min); }\n        return value;\n    };\n\n    // Define default and shifted ranges for all axes\n    var ranges = {};\n    if (this.x_extent){\n        var base_x_range = { start: 0, end: this.layout.cliparea.width };\n        if (this.layout.axes.x.range){\n            base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n            base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n        }\n        ranges.x = [base_x_range.start, base_x_range.end];\n        ranges.x_shifted = [base_x_range.start, base_x_range.end];\n    }\n    if (this.y1_extent){\n        var base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y1.range){\n            base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n            base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n        }\n        ranges.y1 = [base_y1_range.start, base_y1_range.end];\n        ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n    }\n    if (this.y2_extent){\n        var base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y2.range){\n            base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n            base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n        }\n        ranges.y2 = [base_y2_range.start, base_y2_range.end];\n        ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n    }\n\n    // Shift ranges based on any drag or zoom interactions currently underway\n    if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.indexOf(this.id) !== -1)){\n        var anchor, scalar = null;\n        if (this.parent.interaction.zooming && typeof this.x_scale == \"function\"){\n            var current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n            var current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n            var zoom_factor = this.parent.interaction.zooming.scale;\n            var potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n            if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)){\n                zoom_factor = 1 /(Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n            } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)){\n                zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n            }\n            var new_extent_size = Math.floor(current_extent_size * zoom_factor);\n            anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n            var offset_ratio = anchor / this.layout.cliparea.width;\n            var new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n            ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n        } else if (this.parent.interaction.dragging){\n            switch (this.parent.interaction.dragging.method){\n            case \"background\":\n                ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                break;\n            case \"x_tick\":\n                if (d3.event && d3.event.shiftKey){\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                } else {\n                    anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                    scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                    ranges.x_shifted[0] = 0;\n                    ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                }\n                break;\n            case \"y1_tick\":\n            case \"y2_tick\":\n                var y_shifted = \"y\" + this.parent.interaction.dragging.method[1] + \"_shifted\";\n                if (d3.event && d3.event.shiftKey){\n                    ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                    ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                } else {\n                    anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                    scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                    ranges[y_shifted][0] = this.layout.cliparea.height;\n                    ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                }\n            }\n        }\n    }\n\n    // Generate scales and ticks for all axes, then render them\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!this[axis + \"_extent\"]){ return; }\n\n        // Base Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"])\n            .range(ranges[axis + \"_shifted\"]);\n\n        // Shift the extent\n        this[axis + \"_extent\"] = [\n            this[axis + \"_scale\"].invert(ranges[axis][0]),\n            this[axis + \"_scale\"].invert(ranges[axis][1])\n        ];\n\n        // Finalize Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"]).range(ranges[axis]);\n\n        // Render axis (and generate ticks as needed)\n        this.renderAxis(axis);\n    }.bind(this));\n\n    // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n    if (this.layout.interaction.scroll_to_zoom){\n        var zoom_handler = function(){\n            // Look for a shift key press while scrolling to execute.\n            // If not present, gracefully raise a notification and allow conventional scrolling\n            if (!d3.event.shiftKey){\n                if (this.parent.canInteract(this.id)){\n                    this.loader.show(\"Press <tt>[SHIFT]</tt> while scrolling to zoom\").hide(1000);\n                }\n                return;\n            }\n            d3.event.preventDefault();\n            if (!this.parent.canInteract(this.id)){ return; }\n            var coords = d3.mouse(this.svg.container.node());\n            var delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n            if (delta === 0){ return; }\n            this.parent.interaction = {\n                panel_id: this.id,\n                linked_panel_ids: this.getLinkedPanelIds(\"x\"),\n                zooming: {\n                    scale: (delta < 1) ? 0.9 : 1.1,\n                    center: coords[0]\n                }\n            };\n            this.render();\n            this.parent.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.parent.panels[panel_id].render();\n            }.bind(this));\n            if (this.zoom_timeout !== null){ clearTimeout(this.zoom_timeout); }\n            this.zoom_timeout = setTimeout(function(){\n                this.parent.interaction = {};\n                this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n            }.bind(this), 500);\n        }.bind(this);\n        this.zoom_listener = d3.behavior.zoom();\n        this.svg.container.call(this.zoom_listener)\n            .on(\"wheel.zoom\", zoom_handler)\n            .on(\"mousewheel.zoom\", zoom_handler)\n            .on(\"DOMMouseScroll.zoom\", zoom_handler);\n    }\n\n    // Render data layers in order by z-index\n    this.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n        this.data_layers[data_layer_id].draw().render();\n    }.bind(this));\n\n    return this;\n};\n\n\n/**\n * Render ticks for a particular axis\n * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.renderAxis = function(axis){\n\n    if ([\"x\", \"y1\", \"y2\"].indexOf(axis) === -1){\n        throw(\"Unable to render axis; invalid axis identifier: \" + axis);\n    }\n\n    var canRender = this.layout.axes[axis].render\n        && typeof this[axis + \"_scale\"] == \"function\"\n        && !isNaN(this[axis + \"_scale\"](0));\n\n    // If the axis has already been rendered then check if we can/can't render it\n    // Make sure the axis element is shown/hidden to suit\n    if (this[axis+\"_axis\"]){\n        this.svg.container.select(\"g.lz-axis.lz-\"+axis).style(\"display\", canRender ? null : \"none\");\n    }\n\n    if (!canRender){ return this; }\n\n    // Axis-specific values to plug in where needed\n    var axis_params = {\n        x: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + (this.layout.height - this.layout.margin.bottom) + \")\",\n            orientation: \"bottom\",\n            label_x: this.layout.cliparea.width / 2,\n            label_y: (this.layout.axes[axis].label_offset || 0),\n            label_rotate: null\n        },\n        y1: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + this.layout.margin.top + \")\",\n            orientation: \"left\",\n            label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        },\n        y2: {\n            position: \"translate(\" + (this.layout.width - this.layout.margin.right) + \",\" + this.layout.margin.top + \")\",\n            orientation: \"right\",\n            label_x: (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        }\n    };\n\n    // Generate Ticks\n    this[axis + \"_ticks\"] = this.generateTicks(axis);\n\n    // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n    var ticksAreAllNumbers = (function(ticks){\n        for (var i = 0; i < ticks.length; i++){\n            if (isNaN(ticks[i])){\n                return false;\n            }\n        }\n        return true;\n    })(this[axis+\"_ticks\"]);\n\n    // Initialize the axis; set scale and orientation\n    this[axis+\"_axis\"] = d3.svg.axis().scale(this[axis+\"_scale\"]).orient(axis_params[axis].orientation).tickPadding(3);\n\n    // Set tick values and format\n    if (ticksAreAllNumbers){\n        this[axis+\"_axis\"].tickValues(this[axis+\"_ticks\"]);\n        if (this.layout.axes[axis].tick_format === \"region\"){\n            this[axis+\"_axis\"].tickFormat(function(d) { return LocusZoom.positionIntToString(d, 6); });\n        }\n    } else {\n        var ticks = this[axis+\"_ticks\"].map(function(t){\n            return(t[axis.substr(0,1)]);\n        });\n        this[axis+\"_axis\"].tickValues(ticks)\n            .tickFormat(function(t, i) { return this[axis+\"_ticks\"][i].text; }.bind(this));\n    }\n\n    // Position the axis in the SVG and apply the axis construct\n    this.svg[axis+\"_axis\"]\n        .attr(\"transform\", axis_params[axis].position)\n        .call(this[axis+\"_axis\"]);\n\n    // If necessary manually apply styles and transforms to ticks as specified by the layout\n    if (!ticksAreAllNumbers){\n        var tick_selector = d3.selectAll(\"g#\" + this.getBaseId().replace(\".\",\"\\\\.\") + \"\\\\.\" + axis + \"_axis g.tick\");\n        var panel = this;\n        tick_selector.each(function(d, i){\n            var selector = d3.select(this).select(\"text\");\n            if (panel[axis+\"_ticks\"][i].style){\n                selector.style(panel[axis+\"_ticks\"][i].style);\n            }\n            if (panel[axis+\"_ticks\"][i].transform){\n                selector.attr(\"transform\", panel[axis+\"_ticks\"][i].transform);\n            }\n        });\n    }\n\n    // Render the axis label if necessary\n    var label = this.layout.axes[axis].label || null;\n    if (label !== null){\n        this.svg[axis+\"_axis_label\"]\n            .attr(\"x\", axis_params[axis].label_x).attr(\"y\", axis_params[axis].label_y)\n            .text(LocusZoom.parseFields(this.state, label));\n        if (axis_params[axis].label_rotate !== null){\n            this.svg[axis+\"_axis_label\"]\n                .attr(\"transform\", \"rotate(\" + axis_params[axis].label_rotate + \" \" + axis_params[axis].label_x + \",\" + axis_params[axis].label_y + \")\");\n        }\n    }\n\n    // Attach interactive handlers to ticks as needed\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (this.layout.interaction[\"drag_\" + axis + \"_ticks_to_scale\"]){\n            var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n            var tick_mouseover = function(){\n                if (typeof d3.select(this).node().focus == \"function\"){ d3.select(this).node().focus(); }\n                var cursor = (axis === \"x\") ? \"ew-resize\" : \"ns-resize\";\n                if (d3.event && d3.event.shiftKey){ cursor = \"move\"; }\n                d3.select(this)\n                    .style({\"font-weight\": \"bold\", \"cursor\": cursor})\n                    .on(\"keydown\" + namespace, tick_mouseover)\n                    .on(\"keyup\" + namespace, tick_mouseover);\n            };\n            this.svg.container.selectAll(\".lz-axis.lz-\" + axis + \" .tick text\")\n                .attr(\"tabindex\", 0) // necessary to make the tick focusable so keypress events can be captured\n                .on(\"mouseover\" + namespace, tick_mouseover)\n                .on(\"mouseout\" + namespace,  function(){\n                    d3.select(this).style({\"font-weight\": \"normal\"});\n                    d3.select(this).on(\"keydown\" + namespace, null).on(\"keyup\" + namespace, null);\n                })\n                .on(\"mousedown\" + namespace, function(){\n                    this.parent.startDrag(this, axis + \"_tick\");\n                }.bind(this));\n        }\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Force the height of this panel to the largest absolute height of the data in\n *   all child data layers (if not null for any child data layers)\n * @param {number} [target_height] A target height, which will be used in situations when the expected height can be\n *   pre-calculated (eg when the layers are transitioning)\n */\nLocusZoom.Panel.prototype.scaleHeightToData = function(target_height){\n    target_height = +target_height || null;\n    if (target_height === null){\n        this.data_layer_ids_by_z_index.forEach(function(id){\n            var dh = this.data_layers[id].getAbsoluteDataHeight();\n            if (+dh){\n                if (target_height === null){ target_height = +dh; }\n                else { target_height = Math.max(target_height, +dh); }\n            }\n        }.bind(this));\n    }\n    if (+target_height){\n        target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n        this.setDimensions(this.layout.width, target_height);\n        this.parent.setDimensions();\n        this.parent.panel_ids_by_y_index.forEach(function(id){\n            this.parent.panels[id].layout.proportional_height = null;\n        }.bind(this));\n        this.parent.positionPanels();\n    }\n};\n\n/**\n * Methods to set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n */\nLocusZoom.Panel.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n    }.bind(this));\n};\n/**\n * Set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n */\nLocusZoom.Panel.prototype.setAllElementStatus = function(status, toggle){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(status, toggle);\n    }.bind(this));\n};\n// TODO: Capture documentation for dynamically generated methods\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.Panel.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.Panel.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.Panel.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.Panel.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n\n/**\n * Add a \"basic\" loader to a panel\n * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n *\n *\n * @param {Boolean} show_immediately\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.addBasicLoader = function(show_immediately){\n    if (typeof show_immediately != \"undefined\"){ show_immediately = true; }\n    if (show_immediately){\n        this.loader.show(\"Loading...\").animate();\n    }\n    this.on(\"data_requested\", function(){\n        this.loader.show(\"Loading...\").animate();\n    }.bind(this));\n    this.on(\"data_rendered\", function(){\n        this.loader.hide();\n    }.bind(this));\n    return this;\n};\n"]}