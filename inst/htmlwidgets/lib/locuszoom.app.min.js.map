{"version":3,"sources":["locuszoom.app.min.js","Dashboard.js","Singletons.js","DataLayer.js","Layouts.js","LocusZoom.js","annotation_track.js","forest.js","genes.js","genome_legend.js","intervals.js","line.js","scatter.js","Legend.js","Data.js","Plot.js","Panel.js"],"names":["root","factory","this","d3","Q","obj","components","functions","transformations","parseTrans","sources","findSourceByName","datalayers","l","layouts","minimum_d3_version","minimum_version","current_version","minimum_version_array","split","current_version_array","version_is_ok","forEach","d","i","semanticVersionIsOk","version","LocusZoom","selector","datasource","layout","plot","select","html","call","node","id","iterator","empty","attr","Plot","container","dataset","region","parsed_state","parsePositionQuery","Object","keys","key","state","svg","append","style","setDimensions","positionPanels","initialize","length","refresh","plots","selectAll","each","populate","pos","exp","suffix","exp_symbols","0","3","6","9","isNaN","log","Math","LN10","min","max","places_exp","floor","toFixed","min_exp","places","ret","pow","p","val","toUpperCase","replace","suffixre","exec","mult","Number","x","match","center","positionStringToInt","offset","chr","start","end","position","range","clip_range","target_tick_count","parseInt","min_n","abs","c","base","base_toFixed","round","unit","ticks","parseFloat","push","indexOf","slice","pop","method","url","body","headers","timeout","response","defer","xhr","XMLHttpRequest","open","XDomainRequest","onreadystatechange","readyState","status","resolve","reject","setTimeout","header","setRequestHeader","send","promise","new_state","validated_region","attempted_scale","attempted_midpoint","temp","min_region_scale","max_region_scale","data","tokens","regex","m","index","text","condition","variable","close","console","error","JSON","stringify","astify","token","shift","then","ast","cache","hasOwnProperty","Data","Field","render_node","value","map","join","parentNode","classed","getToolTipData","getDataLayer","data_layer","getToolTipDataLayer","parent","panel","getToolTipPanel","showing","content_selector","hide_delay","show","content","css","curtain","parent_plot","insert","on","hide","bind","update","clearTimeout","page_origin","getPageOrigin","top","y","left","width","height","max-width","max-height","delay","remove","progress_selector","cancel_selector","loader","percent","loader_boundrect","getBoundingClientRect","animate","setPercentCompleted","extra","Sub","constructor","apply","arguments","prototype","create","k","Layouts","dashboard","tooltip","get","type","name","modifications","merge","unnamespaced","parse","default_namespace","namespace","default","toString","applyNamespaces","element","resolved_namespace","re","r","merge_namespace","namespaced_element","namespaced_property","property","set","add","list","custom_layout","default_layout","custom_type","default_type","Array","isArray","assoc","closable","or","and","covariates_model_association","intervals","orientation","recomb","fields","z_index","stroke","stroke-width","x_axis","field","y_axis","axis","ceiling","ld","point_shape","scale_function","parameters","field_value","else","point_size","color","breaks","values","legend","shape","size","label","class","id_field","upper_buffer","min_extent","behaviors","onmouseover","action","onmouseout","onclick","exclusive","onshiftclick","phewas","tooltip_positioning","category_field","lower_buffer","categories","null_value","fill_opacity","spacing","lines","stroke-dasharray","filters","operator","font-size","font-weight","fill","gene","constraint","genome","start_field","end_field","track_split_field","split_tracks","always_hide_legend","{{namespace[intervals]}}state_id","group_position","margin-left","title","subtitle","covariates_model_plot_dashboard","button_html","button_title","region_nav_plot_dashboard","step","min_width","min_height","proportional_width","margin","right","bottom","inner_border","axes","label_offset","tick_format","extent","y1","y2","origin","hidden","interaction","drag_background_to_pan","drag_x_ticks_to_scale","drag_y1_ticks_to_scale","drag_y2_ticks_to_scale","scroll_to_zoom","x_linked","data_layers","text-anchor","transform","data_layer_id","pad_from_bottom","responsive_resize","panels","proportional_height","StandardLayout","mouse_guide","DataLayer","initialized","layout_idx","Panel","DefaultLayout","_base_layout","state_id","setDefaultState","tooltips","global_statuses","highlighted","selected","faded","addField","fieldName","fieldString","Statuses","adjectives","verbs","menu_antiverbs","getBaseId","getAbsoluteDataHeight","group","canTransition","transition","panel_boundaries","dragging","panel_id","getElementId","element_id","getElementStatusNodeId","getElementById","applyDataMethods","toHTML","deselect","unselectElement","applyCustomDataMethods","clipRect","moveUp","data_layer_ids_by_z_index","resortDataLayers","moveDown","resolveScalableParameter","idx","f","ScaleFunctions","getAxisExtent","dimension","axis_name","axis_layout","data_extent","original_extent_span","range_min","range_max","getTicks","config","createTooltip","arrow","updateTooltip","positionTooltip","parseFields","destroyTooltip","destroyAllTooltips","event","pageX","pageY","positionAllTooltips","showOrHideTooltip","resolveStatus","statuses","directive","reduce","previousValue","currentValue","sub_status","sub_operator","show_directive","hide_directive","antistatus","show_resolved","hide_resolved","filter","return_type","matches","operators","=","a","b","<","<=",">",">=","%","filterIndexes","filterElements","verb","adjective","antiverb","setElementStatus","setElementStatusByFilters","setAllElementStatus","toggle","get_element_id_error","element_status_node_id","element_status_idx","splice","emit","active","applyBehaviors","selection","event_match","executeBehaviors","requiredKeyStates","ctrlKey","shiftKey","behavior","current_status_boolean","href","target","window","location","panel_origin","exportData","format","default_format","toLowerCase","e","jsonified","delimiter","record","draw","cliparea","reMap","lzd","getData","new_data","DataLayers","datalayer","extend","parent_name","overrides","child","subclass","render","self","trackData","enter","exit","arrow_type","arrow_top","arrow_left","tooltip_box","data_layer_height","data_layer_width","x_center","x_scale","y_center","offset_right","offset_left","stroke_width","confidence_intervals","show_no_significance_line","y_scale","sqrt","PI","ci_selection","ci_transform","ci_width","duration","ease","points_selection","initial_y","symbol","element_data","item","field_to_add","label_font_size","label_exon_spacing","exon_height","bounding_box_padding","track_vertical_spacing","getTrackHeight","transcript_idx","tracks","gene_track_index","1","assignTracks","getLabelWidth","gene_name","font_size","temp_text","label_width","getBBox","g","gene_id","gene_version","transcript_id","transcripts","display_range","text_anchor","centered_margin","display_domain","invert","track","potential_track","collision_on_potential_track","placed_gene","min_start","t","exons","bboxes","boundaries","labels","strand","exon_id","clickareas","gene_bbox_id","gene_bbox","gene_center_x","arrow_width","chromosome_fill_colors","light","dark","chromosome_label_colors","genome_start","genome_end","chromosomes","variant_parts","variant","track_split_order","track_split_legend_to_y_axis","track_height","previous_tracks","interval_track_index","track_split_field_index","reverse","placed_interval","psuedoElement","sharedstatusnode_style","display","interval","statusnode_style","statusnodes","rects","interval_name","updateSplitTrackAxis","interval_bbox","interval_center_x","legend_axis","track_spacing","target_height","scaleHeightToData","toggleSplitTracks","interpolate","hitarea_width","mouse_event","line","tooltip_timeout","getMouseDisplayAndData","mouse","slope","x_field","y_field","bisect","bisector","datum","startDatum","endDatum","interpolateNumber","x_precision","toPrecision","y_precision","dd","max_arrow_left","path","hitarea","hitarea_line","path_class","global_status","decoupled","x_extent","y_extent","y_range","flip_labels","handle_lines","Boolean","min_x","max_x","flip","dn","dnl","dnx","text_swing","dnlx2","line_swing","label_texts","da","dal","label_lines","abound","bbound","separate_labels","seperate_iterations","again","db","delta","adjust","new_a_y","new_b_y","min_y","max_y","label_elements","filtered_data","label_groups","x1","x2","makeLDReference","ref","applyState","ldrefvar","_prepareData","xField","sourceData","sort","ak","bk","av","bv","_generateCategoryBounds","uniqueCategories","category","bounds","categoryNames","_setDynamicColorScheme","colors","colorParams","baseParams","parameters_categories_hash","every","scale","category10","category20","concat","categoryBounds","_categories","knownCategories","knownColors","xPos","diff","KnownDataSources","SOURCE_NAME","source","warn","source_name","newObj","params","Function","getAll","setAll","clear","TransformationFunctions","fun","getTrans","substring","result","funs","parseTransString","fn","ceil","toExponential","str","encodeURIComponent","s","input","threshold","prev","curr","nullval","upper_idx","brk","normalized_input","isFinite","Dashboard","hide_timeout","persist","component","Components","shouldPersist","visibility","destroy","force","Component","parent_panel","parent_svg","button","menu","Button","parent_dashboard","tag","setTag","setHtml","setText","setHTML","setTitle","setColor","setStyle","getClass","permanent","setPermanent","bool","setStatus","highlight","disable","setOnMouseover","setOnMouseout","setOnclick","preUpdate","postUpdate","outer_selector","inner_selector","scroll_position","scrollTop","page_scroll_top","document","documentElement","container_offset","getContainerOffset","dashboard_client_rect","button_client_rect","menu_client_rect","total_content_height","scrollHeight","base_max_width","container_max_width","content_max_width","base_max_height","max_height","setPopulate","menu_populate_function","div_selector","title_selector","display_width","display_height","positionIntToString","stylesheet","generateBase64SVG","base64_string","css_string","styleSheets","createCORSPromise","fcall","outerHTML","dy","initial_html","style_def","insert_at","btoa","p1","String","fromCharCode","suppress_confirm","confirm","removePanel","is_at_top","y_index","is_at_bottom","panel_ids_by_y_index","can_zoom","current_region_scale","new_region_scale","menu_html","model","covariates","CovariatesModel","element_reference","updateComponent","removeByIdx","removeAll","table","covariate","row","cov","scale_timeout","status_adj","status_idx","status_verb","at_top","at_bottom","td","removeDataLayer","allowed_fields","fields_whitelist","dataLayer","layer_name","dataLayerLayout","defaultConfig","configSlot","_selected_item","uniqueID","random","menuLayout","renderRow","display_name","display_options","row_id","field_name","defaultName","default_config_display_name","options","Legend","background_rect","elements","elements_group","padding","label_size","line_height","label_x","label_y","path_y","symbolTypes","radius","bcr","right_x","pad_from_right","DataSources","addSource","ns","dsobj","source_id","getSource","removeSource","fromJSON","ds","toJSON","parts","full_name","applyTransformations","Requester","requests","raw","trans","outnames","request_handles","when","discrete","Source","enableCache","dependentSource","parseInit","init","getCacheKey","chain","getURL","fetchRequest","getRequest","req","cacheKey","_cachedKey","_cachedResponse","preGetData","pre","resp","parseResponse","normalizeResponse","N","records","j","prepareData","annotateData","extractFields","fieldFound","output_record","v","combineChainBody","json","standardized","one_source_body","new_body","parseArraysToObjects","standard","parseObjectsToObjects","parseData","constructorFun","uniqueName","getPrototypeOf","AssociationSource","unshift","analysis","LDSource","findMergeFields","arr","dataFields","position_field","pvalue","pvalue_field","_names_","names","nameMatch","regexes","findRequestedFields","isrefvarin","isrefvarout","ldin","ldout","refSource","ldrefsource","refVar","columns","pval","sign","extremeVal","extremeIdx","findExtremeValue","reqFields","lfield","rfield","position2","leftJoin","refvar","idfield","outname","tagRefVariant","GeneSource","GeneConstraintSource","geneids","substr","Content-Type","constraint_fields","RecombinationRateSource","recombsource","IntervalSource","bedtracksource","StaticSource","_data","PheWASSource","build","ConnectorSource","_source_name_mapping","specified_ids","REQUIRED_SOURCES","chain_source_id","applyPanelYIndexesToPanelLayouts","pid","remap_promises","window_onresize","event_hooks","layout_changed","data_requested","data_rendered","element_clicked","element_selection","state_changed","hook","off","theseHooks","undefined","hookMatch","eventData","sourceID","hookToRun","eventContext","bounding_client_rect","x_offset","scrollLeft","y_offset","offsetParent","offsetTop","offsetLeft","canInteract","loading_data","zooming","initializeLayout","aspect_ratio","sumProportional","total","rescaleSVG","clientRect","panel_layout","addPanel","min-width","min-height","panel_width","panel_height","setOrigin","proportional_origin","clearPanelData","panelId","mode","panelsList","dlid","layer","x_linked_margins","total_proportional_height","proportional_adjustment","calculated_plot_height","mouse_guide_svg","mouse_guide_vertical_svg","mouse_guide_horizontal_svg","vertical","horizontal","generateCurtain","generateLoader","selectors","corner_selector","panel_idx","panel_resize_drag","drag","this_panel","original_panel_height","panel_height_change","new_calculated_plot_height","loop_panel_id","loop_panel_idx","loop_panel","corner_drag","dx","plot_page_origin","panel_page_origin","mouseout_mouse_guide","mousemove_mouse_guide","coords","mouseup","stopDrag","mousemove","preventDefault","dragged_x","start_x","dragged_y","start_y","linked_panel_ids","client_rect","subscribeToData","success_callback","opts","error_callback","onerror","err","listener","catch","state_changes","validateState","all","drop","startDrag","getLinkedPanelIds","overrideAxisLayout","axis_number","y_axis_number","generateID","applyDataLayerZIndexesToDataLayerLayouts","data_promises","y1_scale","y2_scale","y1_extent","y2_extent","x_ticks","y1_ticks","y2_ticks","zoom_timeout","bubble","plot_origin","background_click","y1_linked","y2_linked","panel_count","setMargin","x_range","y1_range","y2_range","label_function","data_layer_layout","addDataLayer","clipPath","clearSelections","x_axis_label","y1_axis","y1_axis_label","y2_axis","y2_axis_label","mousedown","ascending","generateExtents","generateTicks","baseTickConfig","acc","nextLayer","itemConfig","prettyTicks","constrain","limit_exponent","neg_min","neg_max","pos_min","pos_max","Infinity","ranges","base_x_range","x_shifted","base_y1_range","y1_shifted","base_y2_range","y2_shifted","anchor","scalar","current_extent_size","current_scaled_extent_size","zoom_factor","potential_extent_size","new_extent_size","offset_ratio","new_x_extent_start","y_shifted","linear","domain","renderAxis","zoom_handler","wheelDelta","detail","deltaY","zoom_listener","zoom","canRender","axis_params","label_rotate","ticksAreAllNumbers","orient","tickPadding","tickValues","tickFormat","tick_selector","tick_mouseover","focus","cursor","dh","addBasicLoader","show_immediately","plugin_loading_error","define","amd","module","exports","require"],"mappings":"kQAAWA,EAAMC,yaAAND,EAgBTE,KAhBeD,EAgBT,SAAUE,EAAIC,GAClB,IC8SJC,EACAC,ECyCAD,EACAE,EA5MAF,EACAG,EAgBAC,EA3JAJ,EAEAK,EAEAC,ECuhCAN,EACAO,ECxEAC,EA5TAA,EA1DAA,EAtmBAR,EACAS,EJoBI,IAEI,IAAIC,EAAqB,QACzB,GAAiB,iBAANZ,EACP,KAAM,0CAEV,IAtBsB,SAAUa,EAAiBC,GAEjD,GAAIA,GAAmBD,EACnB,OAAO,EAGX,IAAIE,EAAwBF,EAAgBG,MAAM,KAC9CC,EAAwBH,EAAgBE,MAAM,KAC9CE,GAAgB,EAMpB,OALAH,EAAsBI,QAAQ,SAAUC,EAAGC,IAClCH,IAAkBD,EAAsBI,IAAMN,EAAsBM,KACrEH,GAAgB,KAGjBA,EAQFI,CAAoBV,EAAoBZ,EAAGuB,SAC5C,KAAM,mGAA0HvB,EAAGuB,QAAU,KAGjJ,GAAgB,mBAALtB,EACP,KAAM,yCKzClB,IAAAuB,EAAA,CACAD,QAAA,QAYAC,SAAA,SAAAC,EAAAC,EAAAC,GACA,QAAA,IAAAF,EACA,KAAA,0CAIA,IAAAG,EAkCA,OAnCA5B,EAAA6B,OAAAJ,GAAAK,KAAA,IAEA9B,EAAA6B,OAAAJ,GAAAM,KAAA,WAEA,QAAA,IAAAhC,KAAAiC,OAAAC,GAAA,CAEA,IADA,IAAAC,EAAA,GACAlC,EAAA6B,OAAA,OAAAK,GAAAC,SAAAD,IACAnC,KAAAqC,KAAA,KAAA,OAAAF,GAMA,IAHAN,EAAA,IAAAJ,EAAAa,KAAAtC,KAAAiC,OAAAC,GAAAP,EAAAC,IACAW,UAAAvC,KAAAiC,YAEA,IAAAjC,KAAAiC,OAAAO,cAAA,IAAAxC,KAAAiC,OAAAO,QAAAC,OAAA,CACA,IAAAC,EAAAjB,EAAAkB,mBAAA3C,KAAAiC,OAAAO,QAAAC,QACAG,OAAAC,KAAAH,GAAAtB,QAAA,SAAA0B,GACAjB,EAAAkB,MAAAD,GAAAJ,EAAAI,KAIAjB,EAAAmB,IAAA/C,EAAA6B,OAAA,OAAAD,EAAAK,IACAe,OAAA,OACAZ,KAAA,UAAA,OACAA,KAAA,QAAA,8BACAA,KAAA,KAAAR,EAAAK,GAAA,QAAAG,KAAA,QAAA,gBACAa,MAAArB,EAAAD,OAAAsB,OACArB,EAAAsB,gBACAtB,EAAAuB,iBAEAvB,EAAAwB,aAEA,iBAAA1B,GAAAiB,OAAAC,KAAAlB,GAAA2B,QACAzB,EAAA0B,YAGA1B,GAYAJ,YAAA,SAAAC,EAAAC,EAAAC,GACA,IAAA4B,EAAA,GAIA,OAHAvD,EAAAwD,UAAA/B,GAAAgC,KAAA,SAAArC,EAAAC,GACAkC,EAAAlC,GAAAG,EAAAkC,SAAA3D,KAAA2B,EAAAC,KAEA4B,GAWA/B,oBAAA,SAAAmC,EAAAC,EAAAC,GACA,IAAAC,EAAA,CAAAC,EAAA,GAAAC,EAAA,IAAAC,EAAA,IAAAC,EAAA,KAEA,GADAL,EAAAA,IAAA,EACAM,MAAAP,IAAA,OAAAA,EAAA,CACA,IAAAQ,EAAAC,KAAAD,IAAAT,GAAAU,KAAAC,KACAV,EAAAS,KAAAE,IAAAF,KAAAG,IAAAJ,EAAAA,EAAA,EAAA,GAAA,GAEA,IAAAK,EAAAb,EAAAS,KAAAK,OAAAL,KAAAD,IAAAT,GAAAU,KAAAC,MAAAK,QAAAf,EAAA,IACAgB,EAAAP,KAAAE,IAAAF,KAAAG,IAAAZ,EAAA,GAAA,GACAiB,EAAAR,KAAAE,IAAAF,KAAAG,IAAAC,EAAAG,GAAA,IACAE,EAAA,IAAAnB,EAAAU,KAAAU,IAAA,GAAAnB,IAAAe,QAAAE,GAIA,OAHAhB,QAAA,IAAAC,EAAAF,KACAkB,GAAA,IAAAhB,EAAAF,GAAA,KAEAkB,GAQAtD,oBAAA,SAAAwD,GACA,IAAAC,EAAAD,EAAAE,cACAD,EAAAA,EAAAE,QAAA,KAAA,IACA,IAAAC,EAAA,eACAvB,EAAAuB,EAAAC,KAAAJ,GACAK,EAAA,EAYA,OAXAzB,IAEAyB,EADA,MAAAzB,EAAA,GACA,IACA,MAAAA,EAAA,GACA,IAEA,IAEAoB,EAAAA,EAAAE,QAAAC,EAAA,KAEAH,EAAAM,OAAAN,GAAAK,GAWA9D,mBAAA,SAAAgE,GACA,IAEAC,EAFA,yDAEAJ,KAAAG,GACA,GAAAC,EAAA,CACA,GAAA,MAAAA,EAAA,GAAA,CACA,IAAAC,EAAAlE,EAAAmE,oBAAAF,EAAA,IACAG,EAAApE,EAAAmE,oBAAAF,EAAA,IACA,MAAA,CACAI,IAAAJ,EAAA,GACAK,MAAAJ,EAAAE,EACAG,IAAAL,EAAAE,GAGA,MAAA,CACAC,IAAAJ,EAAA,GACAK,MAAAtE,EAAAmE,oBAAAF,EAAA,IACAM,IAAAvE,EAAAmE,oBAAAF,EAAA,KAKA,OADAA,EAnBA,+BAmBAJ,KAAAG,IAEA,CACAK,IAAAJ,EAAA,GACAO,SAAAxE,EAAAmE,oBAAAF,EAAA,KAGA,MAeAjE,YAAA,SAAAyE,EAAAC,EAAAC,SACA,IAAAA,GAAAhC,MAAAiC,SAAAD,OACAA,EAAA,GAIA,IAAAE,GAFAF,EAAAC,SAAAD,IAEA,EAKA/E,EAAAiD,KAAAiC,IAAAL,EAAA,GAAAA,EAAA,IACAM,EAAAnF,EAAA+E,EACA9B,KAAAD,IAAAhD,GAAAiD,KAAAC,MAAA,IACAiC,EAPA,IAOAlC,KAAAG,IAAAH,KAAAiC,IAAAlF,IAAAiF,GAGA,IAAAG,EAAAnC,KAAAU,IAAA,GAAAV,KAAAK,MAAAL,KAAAD,IAAAmC,GAAAlC,KAAAC,OACAmC,EAAA,EACAD,EAAA,GAAA,IAAAA,IACAC,EAAApC,KAAAiC,IAAAjC,KAAAqC,MAAArC,KAAAD,IAAAoC,GAAAnC,KAAAC,QAGA,IAAAqC,EAAAH,EACA,EAAAA,EAAAD,EAhBA,KAgBAA,EAAAI,IAEA,EAAAH,EAAAD,EAjBA,MAiBAA,GADAI,EAAA,EAAAH,KAGA,GAAAA,EAAAD,EApBA,KAoBAA,GADAI,EAAA,EAAAH,MAEAG,EAAA,GAAAH,GAOA,IAFA,IAAAI,EAAA,GACAvF,EAAAwF,YAAAxC,KAAAK,MAAAuB,EAAA,GAAAU,GAAAA,GAAAhC,QAAA8B,IACApF,EAAA4E,EAAA,IACAW,EAAAE,KAAAzF,GACAA,GAAAsF,EACA,EAAAF,IACApF,EAAAwF,WAAAxF,EAAAsD,QAAA8B,KAeA,OAZAG,EAAAE,KAAAzF,QAEA,IAAA6E,IAAA,IAAA,CAAA,MAAA,OAAA,OAAA,WAAAa,QAAAb,KACAA,EAAA,WAEA,QAAAA,GAAA,SAAAA,GACAU,EAAA,GAAAX,EAAA,KAAAW,EAAAA,EAAAI,MAAA,IAEA,SAAAd,GAAA,SAAAA,GACAU,EAAAA,EAAAvD,OAAA,GAAA4C,EAAA,IAAAW,EAAAK,MAGAL,GAeApF,kBAAA,SAAA0F,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAC,EAAAtH,EAAAuH,QACAC,EAAA,IAAAC,eAcA,GAbA,oBAAAD,EAGAA,EAAAE,KAAAT,EAAAC,GAAA,GACA,oBAAAS,gBAGAH,EAAA,IAAAG,gBACAD,KAAAT,EAAAC,GAGAM,EAAA,KAEAA,EAAA,CAYA,GAXAA,EAAAI,mBAAA,WACA,IAAAJ,EAAAK,aACA,MAAAL,EAAAM,QAAA,IAAAN,EAAAM,OACAR,EAAAS,QAAAP,EAAAF,UAEAA,EAAAU,OAAA,QAAAR,EAAAM,OAAA,QAAAZ,KAIAG,GAAAY,WAAAX,EAAAU,OAAAX,GACAF,OAAA,IAAAA,EAAAA,EAAA,QACA,IAAAC,EACA,IAAA,IAAAc,KAAAd,EACAI,EAAAW,iBAAAD,EAAAd,EAAAc,IAIAV,EAAAY,KAAAjB,GAEA,OAAAG,EAAAe,SAYA9G,cAAA,SAAA+G,EAAA5G,GAGAA,EAAAA,GAAA,GAIA,IAAA6G,GAAA,EACA,QAAA,KANAD,EAAAA,GAAA,IAMA1C,UAAA,IAAA0C,EAAAzC,YAAA,IAAAyC,EAAAxC,IAAA,CAEA,IAAA0C,EAAAC,EAAA,KAGA,GAFAH,EAAAzC,MAAAzB,KAAAG,IAAA4B,SAAAmC,EAAAzC,OAAA,GACAyC,EAAAxC,IAAA1B,KAAAG,IAAA4B,SAAAmC,EAAAxC,KAAA,GACA5B,MAAAoE,EAAAzC,QAAA3B,MAAAoE,EAAAxC,KACAwC,EAAAzC,MAAA,EACAyC,EAAAxC,IAAA,EACA2C,EAAA,GACAD,EAAA,OACA,GAAAtE,MAAAoE,EAAAzC,QAAA3B,MAAAoE,EAAAxC,KACA2C,EAAAH,EAAAzC,OAAAyC,EAAAxC,IACA0C,EAAA,EACAF,EAAAzC,MAAA3B,MAAAoE,EAAAzC,OAAAyC,EAAAxC,IAAAwC,EAAAzC,MACAyC,EAAAxC,IAAA5B,MAAAoE,EAAAxC,KAAAwC,EAAAzC,MAAAyC,EAAAxC,QACA,CAGA,GAFA2C,EAAArE,KAAAqC,OAAA6B,EAAAzC,MAAAyC,EAAAxC,KAAA,IACA0C,EAAAF,EAAAxC,IAAAwC,EAAAzC,OACA,EAAA,CACA,IAAA6C,EAAAJ,EAAAzC,MACAyC,EAAAxC,IAAAwC,EAAAzC,MACAyC,EAAAzC,MAAA6C,EACAF,EAAAF,EAAAxC,IAAAwC,EAAAzC,MAEA4C,EAAA,IACAH,EAAAzC,MAAA,EACAyC,EAAAxC,IAAA,EACA0C,EAAA,GAGAD,GAAA,EAeA,OAXArE,MAAAxC,EAAAiH,mBAAAJ,GAAAC,EAAA9G,EAAAiH,mBACAL,EAAAzC,MAAAzB,KAAAG,IAAAkE,EAAArE,KAAAK,MAAA/C,EAAAiH,iBAAA,GAAA,GACAL,EAAAxC,IAAAwC,EAAAzC,MAAAnE,EAAAiH,mBAIAzE,MAAAxC,EAAAkH,mBAAAL,GAAAC,EAAA9G,EAAAkH,mBACAN,EAAAzC,MAAAzB,KAAAG,IAAAkE,EAAArE,KAAAK,MAAA/C,EAAAkH,iBAAA,GAAA,GACAN,EAAAxC,IAAAwC,EAAAzC,MAAAnE,EAAAkH,kBAGAN,GAgBA/G,YAAA,SAAAsH,EAAAhH,GACA,GAAA,iBAAAgH,EACA,KAAA,iEAEA,GAAA,iBAAAhH,EACA,KAAA,gEAMA,IAFA,IAAAiH,EAAA,GACAC,EAAA,8CACA,EAAAlH,EAAAuB,QAAA,CACA,IAAA4F,EAAAD,EAAA3D,KAAAvD,GACAmH,EACA,IAAAA,EAAAC,OAAAH,EAAAjC,KAAA,CAAAqC,KAAArH,EAAAkF,MAAA,EAAAiC,EAAAC,SAAApH,EAAAA,EAAAkF,MAAAiC,EAAAC,SACA,SAAAD,EAAA,GAAAF,EAAAjC,KAAA,CAAAsC,UAAAH,EAAA,KACAA,EAAA,GAAAF,EAAAjC,KAAA,CAAAuC,SAAAJ,EAAA,KACA,QAAAA,EAAA,GAAAF,EAAAjC,KAAA,CAAAwC,MAAA,OAEAC,QAAAC,MAAA,uDAAAC,KAAAC,UAAA5H,GACA,4BAAA2H,KAAAC,UAAAX,GACA,+BAAAU,KAAAC,UAAA,CAAAT,EAAA,GAAAA,EAAA,GAAAA,EAAA,MANAnH,EAAAA,EAAAkF,MAAAiC,EAAA,GAAA5F,UAFA0F,EAAAjC,KAAA,CAAAqC,KAAArH,IAAAA,EAAA,IA+BA,IAnBA,IAAA6H,EAAA,WACA,IAAAC,EAAAb,EAAAc,QACA,QAAA,IAAAD,EAAAT,MAAAS,EAAAP,SACA,OAAAO,EACA,GAAAA,EAAAR,UAAA,CAEA,IADAQ,EAAAE,KAAA,GACA,EAAAf,EAAA1F,QAAA,CACA,GAAA,OAAA0F,EAAA,GAAAO,MAAA,CAAAP,EAAAc,QAAA,MACAD,EAAAE,KAAAhD,KAAA6C,KAEA,OAAAC,EAGA,OADAL,QAAAC,MAAA,iDAAAC,KAAAC,UAAAE,IACA,CAAAT,KAAA,KAKAY,EAAA,GACA,EAAAhB,EAAA1F,QAAA0G,EAAAjD,KAAA6C,KAEA,IAAA3B,EAAA,SAAAqB,GAIA,OAHArB,EAAAgC,MAAAC,eAAAZ,KACArB,EAAAgC,MAAAX,GAAA,IAAA7H,EAAA0I,KAAAC,MAAAd,GAAArB,QAAAc,IAEAd,EAAAgC,MAAAX,IAEArB,EAAAgC,MAAA,GACA,IAAAI,EAAA,SAAApI,GACA,QAAA,IAAAA,EAAAmH,KACA,OAAAnH,EAAAmH,KACA,GAAAnH,EAAAqH,SAAA,CACA,IACA,IAAAgB,EAAArC,EAAAhG,EAAAqH,UACA,IAAA,IAAA,CAAA,SAAA,SAAA,WAAAtC,eAAAsD,GAAA,OAAAA,EACA,GAAA,OAAAA,EAAA,MAAA,GACA,MAAAb,GAAAD,QAAAC,MAAA,mCAAAC,KAAAC,UAAA1H,EAAAqH,WACA,MAAA,KAAArH,EAAAqH,SAAA,KACA,GAAArH,EAAAoH,UAAA,CACA,IACA,IAAAA,EAAApB,EAAAhG,EAAAoH,WACA,GAAAA,GAAA,IAAAA,EACA,OAAApH,EAAA8H,KAAAQ,IAAAF,GAAAG,KAAA,IAEA,MAAAf,GAAAD,QAAAC,MAAA,oCAAAC,KAAAC,UAAA1H,EAAAqH,WACA,MAAA,GACAE,QAAAC,MAAA,mDAAAC,KAAAC,UAAA1H,KAEA,OAAA+H,EAAAO,IAAAF,GAAAG,KAAA,KAQA/I,eAAA,SAAAQ,GACA,GAAA,iBAAAA,QAAA,IAAAA,EAAAwI,WACA,KAAA,sBAGA,IAAA/I,EAAAzB,EAAA6B,OAAAG,GACA,OAAAP,EAAAgJ,QAAA,+BAAA,IAAAhJ,EAAAqH,OAAA,GACArH,EAAAqH,OAAA,GAEAtH,EAAAkJ,eAAA1I,EAAAwI,aASAhJ,oBAAA,SAAAQ,GACA,IAAA8G,EAAAtH,EAAAkJ,eAAA1I,GACA,OAAA8G,EAAA6B,aAAA7B,EAAA6B,eACA,MAQAnJ,gBAAA,SAAAQ,GACA,IAAA4I,EAAApJ,EAAAqJ,oBAAA7I,GACA,OAAA4I,EAAAA,EAAAE,OACA,MAQAtJ,eAAA,SAAAQ,GACA,IAAA+I,EAAAvJ,EAAAwJ,gBAAAhJ,GACA,OAAA+I,EAAAA,EAAAD,OACA,MAWAtJ,gBAAA,WA+EA,MA9EA,CACAyJ,SAAA,EACAxJ,SAAA,KACAyJ,iBAAA,KACAC,WAAA,KAQAC,KAAA,SAAAC,EAAAC,GAWA,OAVAvL,KAAAwL,QAAAN,UACAlL,KAAAwL,QAAA9J,SAAAzB,EAAA6B,OAAA9B,KAAAyL,YAAAzI,IAAAf,OAAAwI,YAAAiB,OAAA,OACArJ,KAAA,QAAA,cAAAA,KAAA,KAAArC,KAAAkC,GAAA,YACAlC,KAAAwL,QAAAL,iBAAAnL,KAAAwL,QAAA9J,SAAAuB,OAAA,OAAAZ,KAAA,QAAA,sBACArC,KAAAwL,QAAA9J,SAAAuB,OAAA,OAAAZ,KAAA,QAAA,sBAAAN,KAAA,WACA4J,GAAA,QAAA,WACA3L,KAAAwL,QAAAI,QACAC,KAAA7L,OACAA,KAAAwL,QAAAN,SAAA,GAEAlL,KAAAwL,QAAAM,OAAAR,EAAAC,IACAM,KAAA7L,MAQA8L,OAAA,SAAAR,EAAAC,GACA,IAAAvL,KAAAwL,QAAAN,QAAA,OAAAlL,KAAAwL,QACAO,aAAA/L,KAAAwL,QAAAJ,YAEA,iBAAAG,GACAvL,KAAAwL,QAAA9J,SAAAwB,MAAAqI,GAGA,IAAAS,EAAAhM,KAAAiM,gBAeA,OAdAjM,KAAAwL,QAAA9J,SAAAwB,MAAA,CACAgJ,IAAAF,EAAAG,EAAA,KACAC,KAAAJ,EAAAvG,EAAA,KACA4G,MAAArM,KAAA4B,OAAAyK,MAAA,KACAC,OAAAtM,KAAA4B,OAAA0K,OAAA,OAEAtM,KAAAwL,QAAAL,iBAAAjI,MAAA,CACAqJ,YAAAvM,KAAA4B,OAAAyK,MAAA,GAAA,KACAG,aAAAxM,KAAA4B,OAAA0K,OAAA,GAAA,OAGA,iBAAAhB,GACAtL,KAAAwL,QAAAL,iBAAApJ,KAAAuJ,GAEAtL,KAAAwL,SACAK,KAAA7L,MAMA4L,KAAA,SAAAa,GACA,OAAAzM,KAAAwL,QAAAN,UAEA,iBAAAuB,GACAV,aAAA/L,KAAAwL,QAAAJ,YACApL,KAAAwL,QAAAJ,WAAAjD,WAAAnI,KAAAwL,QAAAI,KAAAa,KAIAzM,KAAAwL,QAAA9J,SAAAgL,SACA1M,KAAAwL,QAAA9J,SAAA,KACA1B,KAAAwL,QAAAL,iBAAA,KACAnL,KAAAwL,QAAAN,SAAA,IANAlL,KAAAwL,SAQAK,KAAA7L,QAcAyB,eAAA,WA+GA,MA9GA,CACAyJ,SAAA,EACAxJ,SAAA,KACAyJ,iBAAA,KACAwB,kBAAA,KACAC,gBAAA,KAMAvB,KAAA,SAAAC,GAoBA,OAlBAtL,KAAA6M,OAAA3B,UACAlL,KAAA6M,OAAAnL,SAAAzB,EAAA6B,OAAA9B,KAAAyL,YAAAzI,IAAAf,OAAAwI,YAAAiB,OAAA,OACArJ,KAAA,QAAA,aAAAA,KAAA,KAAArC,KAAAkC,GAAA,WACAlC,KAAA6M,OAAA1B,iBAAAnL,KAAA6M,OAAAnL,SAAAuB,OAAA,OACAZ,KAAA,QAAA,qBACArC,KAAA6M,OAAAF,kBAAA3M,KAAA6M,OAAAnL,SACAuB,OAAA,OAAAZ,KAAA,QAAA,gCACAY,OAAA,OAAAZ,KAAA,QAAA,sBAQArC,KAAA6M,OAAA3B,SAAA,OACA,IAAAI,IAAAA,EAAA,eAEAtL,KAAA6M,OAAAf,OAAAR,IACAO,KAAA7L,MAQA8L,OAAA,SAAAR,EAAAwB,GACA,IAAA9M,KAAA6M,OAAA3B,QAAA,OAAAlL,KAAA6M,OACAd,aAAA/L,KAAA6M,OAAAzB,YAEA,iBAAAE,GACAtL,KAAA6M,OAAA1B,iBAAApJ,KAAAuJ,GAGA,IACAU,EAAAhM,KAAAiM,gBACAc,EAAA/M,KAAA6M,OAAAnL,SAAAO,OAAA+K,wBAiBA,OAhBAhN,KAAA6M,OAAAnL,SAAAwB,MAAA,CACAgJ,IAAAF,EAAAG,EAAAnM,KAAA4B,OAAA0K,OAAAS,EAAAT,OAJA,EAIA,KACAF,KAAAJ,EAAAvG,EALA,EAKA,OASA,iBAAAqH,GACA9M,KAAA6M,OAAAF,kBAAAzJ,MAAA,CACAmJ,MAAA/H,KAAAE,IAAAF,KAAAG,IAAAqI,EAAA,GAAA,KAAA,MAGA9M,KAAA6M,QACAhB,KAAA7L,MAMAiN,QAAA,WAEA,OADAjN,KAAA6M,OAAAF,kBAAAjC,QAAA,+BAAA,GACA1K,KAAA6M,QACAhB,KAAA7L,MAMAkN,oBAAA,SAAAJ,GAEA,OADA9M,KAAA6M,OAAAF,kBAAAjC,QAAA,+BAAA,GACA1K,KAAA6M,OAAAf,OAAA,KAAAgB,IACAjB,KAAA7L,MAMA4L,KAAA,SAAAa,GACA,OAAAzM,KAAA6M,OAAA3B,UAEA,iBAAAuB,GACAV,aAAA/L,KAAA6M,OAAAzB,YACApL,KAAA6M,OAAAzB,WAAAjD,WAAAnI,KAAA6M,OAAAjB,KAAAa,KAIAzM,KAAA6M,OAAAnL,SAAAgL,SACA1M,KAAA6M,OAAAnL,SAAA,KACA1B,KAAA6M,OAAA1B,iBAAA,KACAnL,KAAA6M,OAAAF,kBAAA,KACA3M,KAAA6M,OAAAD,gBAAA,KACA5M,KAAA6M,OAAA3B,SAAA,IARAlL,KAAA6M,QAUAhB,KAAA7L,QAeAyB,SAAA,SAAAsJ,EAAAoC,GACA,GAAA,mBAAApC,EACA,KAAA,wCAIA,IAAAqC,GADAD,EAAAA,GAAA,IACAjD,eAAA,eAAAiD,EAAAE,YAAA,WACAtC,EAAAuC,MAAAtN,KAAAuN,YAOA,OAJAH,EAAAI,UAAA5K,OAAA6K,OAAA1C,EAAAyC,WACA5K,OAAAC,KAAAsK,GAAA/L,QAAA,SAAAsM,GACAN,EAAAI,UAAAE,GAAAP,EAAAO,KAEAN,GAWA3L,IAAA,IDvtBAA,EAAAkM,SAEA/M,EAAA,CACAiB,KAAA,GACAmJ,MAAA,GACAH,WAAA,GACA+C,UAAA,GACAC,QAAA,KANA1N,EAAA,IAgBA2N,IAAA,SAAAC,EAAAC,EAAAC,GACA,GAAA,iBAAAF,GAAA,iBAAAC,EACA,KAAA,4GACA,GAAApN,EAAAmN,GAAAC,GAAA,CAEA,IAAApM,EAAAH,EAAAkM,QAAAO,MAAAD,GAAA,GAAArN,EAAAmN,GAAAC,IAEA,GAAApM,EAAAuM,aAEA,cADAvM,EAAAuM,aACAzE,KAAA0E,MAAA1E,KAAAC,UAAA/H,IAGA,IAAAyM,EAAA,GACA,iBAAAzM,EAAA0M,UACAD,EAAAzM,EAAA0M,UACA,iBAAA1M,EAAA0M,WAAA1L,OAAAC,KAAAjB,EAAA0M,WAAAhL,SAEA+K,OADA,IAAAzM,EAAA0M,UAAAC,QACA3M,EAAA0M,UAAAC,QAEA3M,EAAA0M,UAAA1L,OAAAC,KAAAjB,EAAA0M,WAAA,IAAAE,YAGAH,GAAAA,EAAA/K,OAAA,IAAA,GAEA,IAAAmL,EAAA,SAAAC,EAAAJ,GAQA,GAPAA,EACA,iBAAAA,IACAA,EAAA,CAAAC,QAAAD,IAGAA,EAAA,CAAAC,QAAA,IAEA,iBAAAG,EAAA,CAIA,IAHA,IACAhJ,EAAAe,EAAA3D,EAAA6L,EADAC,EAAA,yCAEAxJ,EAAA,GACA,QAAAM,EAAAkJ,EAAAtJ,KAAAoJ,KACAjI,EAAAf,EAAA,GACA5C,EAAA4C,EAAA,GAAApC,OAAAoC,EAAA,GAAAN,QAAA,WAAA,IAAA,KACAuJ,EAAAN,EACA,MAAAC,GAAA,iBAAAA,QAAA,IAAAA,EAAAxL,KACA6L,EAAAL,EAAAxL,IAAAwL,EAAAxL,GAAAQ,OAAA,IAAA,KAEA8B,EAAA2B,KAAA,CAAAN,KAAAA,EAAA6H,UAAAK,IAEA,IAAA,IAAAE,KAAAzJ,EACAsJ,EAAAA,EAAAtJ,QAAAA,EAAAyJ,GAAApI,KAAArB,EAAAyJ,GAAAP,gBAEA,GAAA,iBAAAI,GAAA,MAAAA,EAAA,CACA,QAAA,IAAAA,EAAAJ,UAAA,CACA,IAAAQ,EAAA,iBAAAJ,EAAAJ,UAAA,CAAAC,QAAAG,EAAAJ,WAAAI,EAAAJ,UACAA,EAAA7M,EAAAkM,QAAAO,MAAAI,EAAAQ,GAEA,IAAAC,EAAAC,EACA,IAAA,IAAAC,KAAAP,EACA,cAAAO,IACAF,EAAAN,EAAAC,EAAAO,GAAAX,GAEAW,KADAD,EAAAP,EAAAQ,EAAAX,YAEAI,EAAAO,GAEAP,EAAAM,GAAAD,GAGA,OAAAL,GAIA,OAFA9M,EAAA6M,EAAA7M,EAAAA,EAAA0M,WAEA5E,KAAA0E,MAAA1E,KAAAC,UAAA/H,IAEA,KAAA,gBAAAmM,EAAA,WAAAC,EAAA,eAKA7N,EAAA+O,IAAA,SAAAnB,EAAAC,EAAApM,GACA,GAAA,iBAAAmM,GAAA,iBAAAC,GAAA,iBAAApM,EACA,KAAA,0DAKA,OAHAhB,EAAAmN,KACAnN,EAAAmN,GAAA,IAEAnM,EACAhB,EAAAmN,GAAAC,GAAAtE,KAAA0E,MAAA1E,KAAAC,UAAA/H,YAEAhB,EAAAmN,GAAAC,GACA,OAaA7N,EAAAgP,IAAA,SAAApB,EAAAC,EAAApM,GACA,OAAAzB,EAAA+O,IAAAnB,EAAAC,EAAApM,IAQAzB,EAAAiP,KAAA,SAAArB,GACA,GAAAnN,EAAAmN,GAOA,OAAAnL,OAAAC,KAAAjC,EAAAmN,IANA,IAAAqB,EAAA,GAIA,OAHAxM,OAAAC,KAAAjC,GAAAQ,QAAA,SAAA2M,GACAqB,EAAArB,GAAAnL,OAAAC,KAAAjC,EAAAmN,MAEAqB,GAgBAjP,EAAA+N,MAAA,SAAAmB,EAAAC,GACA,GAAA,iBAAAD,GAAA,iBAAAC,EACA,KAAA,mEAAAD,EAAA,YAAAC,EAAA,SAEA,IAAA,IAAAL,KAAAK,EACA,GAAAA,EAAApF,eAAA+E,GAAA,CAIA,IAAAM,EAAA,OAAAF,EAAAJ,GAAA,mBAAAI,EAAAJ,GACAO,SAAAF,EAAAL,GAIA,GAHA,WAAAM,GAAAE,MAAAC,QAAAL,EAAAJ,MAAAM,EAAA,SACA,WAAAC,GAAAC,MAAAC,QAAAJ,EAAAL,MAAAO,EAAA,SAEA,aAAAD,GAAA,aAAAC,EACA,KAAA,mEAGA,cAAAD,EAKA,WAAAA,GAAA,WAAAC,IACAH,EAAAJ,GAAAxN,EAAAkM,QAAAO,MAAAmB,EAAAJ,GAAAK,EAAAL,KALAI,EAAAJ,GAAAvF,KAAA0E,MAAA1E,KAAAC,UAAA2F,EAAAL,KASA,OAAAI,GAGAlP,GAUAsB,EAAAkM,QAAAwB,IAAA,UAAA,uBAAA,CACAb,UAAA,CAAAqB,MAAA,SACAC,UAAA,EACAvE,KAAA,CAAAwE,GAAA,CAAA,cAAA,aACAjE,KAAA,CAAAkE,IAAA,CAAA,gBAAA,eACA/N,KAAA,oWAMA,IAAAgO,EAAAtO,EAAAkM,QAAAG,IAAA,UAAA,uBAAA,CAAAK,cAAA,IACA4B,EAAAhO,MAAA,2JACAN,EAAAkM,QAAAwB,IAAA,UAAA,+BAAAY,GAEAtO,EAAAkM,QAAAwB,IAAA,UAAA,iBAAA,CACAS,UAAA,EACAvE,KAAA,CAAAwE,GAAA,CAAA,cAAA,aACAjE,KAAA,CAAAkE,IAAA,CAAA,gBAAA,eACA/N,KAAA,2rBAaAN,EAAAkM,QAAAwB,IAAA,UAAA,qBAAA,CACAb,UAAA,CAAA0B,UAAA,aACAJ,UAAA,EACAvE,KAAA,CAAAwE,GAAA,CAAA,cAAA,aACAjE,KAAA,CAAAkE,IAAA,CAAA,gBAAA,eACA/N,KAAA,gHAQAN,EAAAkM,QAAAwB,IAAA,aAAA,eAAA,CACAjN,GAAA,eACA6L,KAAA,kBACAkC,YAAA,aACApK,OAAA,QAGApE,EAAAkM,QAAAwB,IAAA,aAAA,cAAA,CACAb,UAAA,CAAA4B,OAAA,UACAhO,GAAA,aACA6L,KAAA,OACAoC,OAAA,CAAA,gCAAA,oCACAC,QAAA,EACAlN,MAAA,CACAmN,OAAA,UACAC,eAAA,SAEAC,OAAA,CACAC,MAAA,iCAEAC,OAAA,CACAC,KAAA,EACAF,MAAA,mCACA7L,MAAA,EACAgM,QAAA,OAIAlP,EAAAkM,QAAAwB,IAAA,aAAA,sBAAA,CACAb,UAAA,CAAAqB,MAAA,QAAAiB,GAAA,MACA1O,GAAA,qBACA6L,KAAA,UACA8C,YAAA,CACAC,eAAA,KACAN,MAAA,4BACAO,WAAA,CACAC,YAAA,EACAjH,KAAA,UACAkH,KAAA,WAGAC,WAAA,CACAJ,eAAA,KACAN,MAAA,4BACAO,WAAA,CACAC,YAAA,EACAjH,KAAA,GACAkH,KAAA,KAGAE,MAAA,CACA,CACAL,eAAA,KACAN,MAAA,4BACAO,WAAA,CACAC,YAAA,EACAjH,KAAA,YAGA,CACA+G,eAAA,gBACAN,MAAA,yBACAO,WAAA,CACAK,OAAA,CAAA,EAAA,GAAA,GAAA,GAAA,IACAC,OAAA,CAAA,UAAA,UAAA,UAAA,UAAA,aAGA,WAEAC,OAAA,CACA,CAAAC,MAAA,UAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,aAAAC,MAAA,yBACA,CAAAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,yBACA,CAAAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,yBACA,CAAAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,yBACA,CAAAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,yBACA,CAAAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,iBAAAC,MAAA,yBACA,CAAAH,MAAA,SAAAJ,MAAA,UAAAK,KAAA,GAAAC,MAAA,aAAAC,MAAA,0BAEAvB,OAAA,CAAA,8BAAA,+BAAA,iCAAA,kDAAA,iCAAA,yBAAA,6BACAwB,SAAA,8BACAvB,QAAA,EACAG,OAAA,CACAC,MAAA,gCAEAC,OAAA,CACAC,KAAA,EACAF,MAAA,iCACA7L,MAAA,EACAiN,aAAA,GACAC,WAAA,CAAA,EAAA,KAEAC,UAAA,CACAC,YAAA,CACA,CAAAC,OAAA,MAAAhK,OAAA,gBAEAiK,WAAA,CACA,CAAAD,OAAA,QAAAhK,OAAA,gBAEAkK,QAAA,CACA,CAAAF,OAAA,SAAAhK,OAAA,WAAAmK,WAAA,IAEAC,aAAA,CACA,CAAAJ,OAAA,SAAAhK,OAAA,cAGA6F,QAAApM,EAAAkM,QAAAG,IAAA,UAAA,uBAAA,CAAAK,cAAA,MAGA1M,EAAAkM,QAAAwB,IAAA,aAAA,iBAAA,CACAb,UAAA,CAAA+D,OAAA,UACAnQ,GAAA,gBACA6L,KAAA,mBACA8C,YAAA,SACAK,WAAA,GACAoB,oBAAA,WACAX,SAAA,0BACAxB,OAAA,CAAA,0BAAA,kCAAA,mCAAA,oCACAI,OAAA,CACAC,MAAA,yBACA+B,eAAA,mCACAC,aAAA,KACAZ,aAAA,MAEAnB,OAAA,CACAC,KAAA,EACAF,MAAA,kCACA7L,MAAA,EACAiN,aAAA,KAEAT,MAAA,CACAX,MAAA,mCACAM,eAAA,kBACAC,WAAA,CACA0B,WAAA,GACApB,OAAA,GACAqB,WAAA,YAGAC,aAAA,GACA9E,QAAA,CACA+B,UAAA,EACAvE,KAAA,CAAAwE,GAAA,CAAA,cAAA,aACAjE,KAAA,CAAAkE,IAAA,CAAA,gBAAA,eACA/N,KAAA,CACA,8EACA,uFACA,iGACAyI,KAAA,KAEAsH,UAAA,CACAC,YAAA,CACA,CAAAC,OAAA,MAAAhK,OAAA,gBAEAiK,WAAA,CACA,CAAAD,OAAA,QAAAhK,OAAA,gBAEAkK,QAAA,CACA,CAAAF,OAAA,SAAAhK,OAAA,WAAAmK,WAAA,IAEAC,aAAA,CACA,CAAAJ,OAAA,SAAAhK,OAAA,cAGAyJ,MAAA,CACArI,KAAA,uCACAwJ,QAAA,EACAC,MAAA,CACA3P,MAAA,CACAoN,eAAA,MACAD,OAAA,UACAyC,mBAAA,YAGAC,QAAA,CACA,CACAvC,MAAA,kCACAwC,SAAA,KACA1I,MAAA,KAGApH,MAAA,CACA+P,YAAA,OACAC,cAAA,OACAC,KAAA,cAKA1R,EAAAkM,QAAAwB,IAAA,aAAA,QAAA,CACAb,UAAA,CAAA8E,KAAA,OAAAC,WAAA,cACAnR,GAAA,QACA6L,KAAA,QACAoC,OAAA,CAAA,yBAAA,gCACAwB,SAAA,UACAG,UAAA,CACAC,YAAA,CACA,CAAAC,OAAA,MAAAhK,OAAA,gBAEAiK,WAAA,CACA,CAAAD,OAAA,QAAAhK,OAAA,gBAEAkK,QAAA,CACA,CAAAF,OAAA,SAAAhK,OAAA,WAAAmK,WAAA,IAEAC,aAAA,CACA,CAAAJ,OAAA,SAAAhK,OAAA,cAGA6F,QAAApM,EAAAkM,QAAAG,IAAA,UAAA,iBAAA,CAAAK,cAAA,MAGA1M,EAAAkM,QAAAwB,IAAA,aAAA,gBAAA,CACAb,UAAA,CAAAgF,OAAA,UACApR,GAAA,gBACA6L,KAAA,gBACAoC,OAAA,CAAA,2BAAA,mCACAI,OAAA,CACA5L,MAAA,EACAgM,QAAA,cAIAlP,EAAAkM,QAAAwB,IAAA,aAAA,YAAA,CACAb,UAAA,CAAA0B,UAAA,aACA9N,GAAA,YACA6L,KAAA,YACAoC,OAAA,CAAA,gCAAA,8BAAA,mCAAA,sCACAwB,SAAA,gCACA4B,YAAA,gCACAC,UAAA,8BACAC,kBAAA,mCACAC,cAAA,EACAC,oBAAA,EACAxC,MAAA,CACAX,MAAA,mCACAM,eAAA,kBACAC,WAAA,CACA0B,WAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,GAAA,GAAA,IACApB,OAAA,CAAA,iBAAA,mBAAA,mBAAA,kBAAA,mBAAA,kBAAA,kBAAA,kBAAA,iBAAA,iBAAA,iBAAA,mBAAA,oBACAqB,WAAA,YAGApB,OAAA,CACA,CAAAC,MAAA,OAAAJ,MAAA,iBAAA9E,MAAA,EAAAoF,MAAA,kBAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,mBAAA9E,MAAA,EAAAoF,MAAA,gBAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,mBAAA9E,MAAA,EAAAoF,MAAA,kBAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,kBAAA9E,MAAA,EAAAoF,MAAA,kBAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,mBAAA9E,MAAA,EAAAoF,MAAA,kBAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,kBAAA9E,MAAA,EAAAoF,MAAA,gBAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,kBAAA9E,MAAA,EAAAoF,MAAA,gBAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,kBAAA9E,MAAA,EAAAoF,MAAA,YAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,iBAAA9E,MAAA,EAAAoF,MAAA,6BAAAmC,mCAAA,GACA,CAAArC,MAAA,OAAAJ,MAAA,iBAAA9E,MAAA,EAAAoF,MAAA,6BAAAmC,mCAAA,IACA,CAAArC,MAAA,OAAAJ,MAAA,mBAAA9E,MAAA,EAAAoF,MAAA,mBAAAmC,mCAAA,IACA,CAAArC,MAAA,OAAAJ,MAAA,mBAAA9E,MAAA,EAAAoF,MAAA,qBAAAmC,mCAAA,IACA,CAAArC,MAAA,OAAAJ,MAAA,mBAAA9E,MAAA,EAAAoF,MAAA,+BAAAmC,mCAAA,KAEA9B,UAAA,CACAC,YAAA,CACA,CAAAC,OAAA,MAAAhK,OAAA,gBAEAiK,WAAA,CACA,CAAAD,OAAA,QAAAhK,OAAA,gBAEAkK,QAAA,CACA,CAAAF,OAAA,SAAAhK,OAAA,WAAAmK,WAAA,IAEAC,aAAA,CACA,CAAAJ,OAAA,SAAAhK,OAAA,cAGA6F,QAAApM,EAAAkM,QAAAG,IAAA,UAAA,qBAAA,CAAAK,cAAA,MAOA1M,EAAAkM,QAAAwB,IAAA,YAAA,iBAAA,CACA/O,WAAA,CACA,CACA2N,KAAA,eACA9H,SAAA,QACAkL,MAAA,MACA0C,eAAA,OAEA,CACA9F,KAAA,gBACA9H,SAAA,QACA4N,eAAA,UAEA,CACA9F,KAAA,kBACA9H,SAAA,QACA4N,eAAA,QACA3Q,MAAA,CAAA4Q,cAAA,cAKArS,EAAAkM,QAAAwB,IAAA,YAAA,gBAAA,CACA/O,WAAA,CACA,CACA2N,KAAA,QACAgG,MAAA,YACAC,SAAA,mEAAAvS,EAAAD,QAAA,OACAyE,SAAA,QAEA,CACA8H,KAAA,WACA9H,SAAA,YAKA,IAAAgO,EAAAxS,EAAAkM,QAAAG,IAAA,YAAA,iBACAmG,EAAA7T,WAAA2G,KAAA,CACAgH,KAAA,mBACAmG,YAAA,QACAC,aAAA,8CACAlO,SAAA,SAEAxE,EAAAkM,QAAAwB,IAAA,YAAA,wBAAA8E,GAEA,IAAAG,EAAA3S,EAAAkM,QAAAG,IAAA,YAAA,iBACAsG,EAAAhU,WAAA2G,KAAA,CACAgH,KAAA,eACAsG,KAAA,IACAH,YAAA,KACAjO,SAAA,QACA4N,eAAA,QAEAO,EAAAhU,WAAA2G,KAAA,CACAgH,KAAA,eACAsG,KAAA,IACAH,YAAA,IACAjO,SAAA,QACA4N,eAAA,WAEAO,EAAAhU,WAAA2G,KAAA,CACAgH,KAAA,cACAsG,KAAA,GACApO,SAAA,QACA4N,eAAA,WAEAO,EAAAhU,WAAA2G,KAAA,CACAgH,KAAA,cACAsG,MAAA,GACApO,SAAA,QACA4N,eAAA,WAEAO,EAAAhU,WAAA2G,KAAA,CACAgH,KAAA,eACAsG,MAAA,IACAH,YAAA,IACAjO,SAAA,QACA4N,eAAA,WAEAO,EAAAhU,WAAA2G,KAAA,CACAgH,KAAA,eACAsG,MAAA,IACAH,YAAA,KACAjO,SAAA,QACA4N,eAAA,UAEApS,EAAAkM,QAAAwB,IAAA,YAAA,kBAAAiF,GAOA3S,EAAAkM,QAAAwB,IAAA,QAAA,cAAA,CACAjN,GAAA,cACAmK,MAAA,IACAC,OAAA,IACAgI,UAAA,IACAC,WAAA,IACAC,mBAAA,EACAC,OAAA,CAAAvI,IAAA,GAAAwI,MAAA,GAAAC,OAAA,GAAAvI,KAAA,IACAwI,aAAA,qBACAhH,WACAjN,EAAAc,EAAAkM,QAAAG,IAAA,YAAA,iBAAA,CAAAK,cAAA,IACAxN,EAAAP,WAAA2G,KAAA,CACAgH,KAAA,gBACA9H,SAAA,UAEAtF,GAEAkU,KAAA,CACApP,EAAA,CACAgM,MAAA,0BACAqD,aAAA,GACAC,YAAA,SACAC,OAAA,SAEAC,GAAA,CACAxD,MAAA,iBACAqD,aAAA,IAEAI,GAAA,CACAzD,MAAA,6BACAqD,aAAA,KAGAxD,OAAA,CACArB,YAAA,WACAkF,OAAA,CAAA1P,EAAA,GAAA0G,EAAA,IACAiJ,QAAA,GAEAC,YAAA,CACAC,wBAAA,EACAC,uBAAA,EACAC,wBAAA,EACAC,wBAAA,EACAC,gBAAA,EACAC,UAAA,GAEAC,YAAA,CACAnU,EAAAkM,QAAAG,IAAA,aAAA,eAAA,CAAAK,cAAA,IACA1M,EAAAkM,QAAAG,IAAA,aAAA,cAAA,CAAAK,cAAA,IACA1M,EAAAkM,QAAAG,IAAA,aAAA,sBAAA,CAAAK,cAAA,OAIA1M,EAAAkM,QAAAwB,IAAA,QAAA,QAAA,CACAjN,GAAA,QACAmK,MAAA,IACAC,OAAA,IACAgI,UAAA,IACAC,WAAA,MACAC,mBAAA,EACAC,OAAA,CAAAvI,IAAA,GAAAwI,MAAA,GAAAC,OAAA,GAAAvI,KAAA,IACAyI,KAAA,GACAQ,YAAA,CACAC,wBAAA,EACAI,gBAAA,EACAC,UAAA,GAEA/H,WACAjN,EAAAc,EAAAkM,QAAAG,IAAA,YAAA,iBAAA,CAAAK,cAAA,IACAxN,EAAAP,WAAA2G,KAAA,CACAgH,KAAA,iBACA9H,SAAA,UAEAtF,GAEAiV,YAAA,CACAnU,EAAAkM,QAAAG,IAAA,aAAA,QAAA,CAAAK,cAAA,OAIA1M,EAAAkM,QAAAwB,IAAA,QAAA,SAAA,CACAjN,GAAA,SACAmK,MAAA,IACAC,OAAA,IACAgI,UAAA,IACAC,WAAA,IACAC,mBAAA,EACAC,OAAA,CAAAvI,IAAA,GAAAwI,MAAA,GAAAC,OAAA,IAAAvI,KAAA,IACAwI,aAAA,qBACAC,KAAA,CACApP,EAAA,CACAoB,MAAA,CACA3D,MAAA,CACAgQ,cAAA,OACAD,YAAA,OACA4C,cAAA,SAEAC,UAAA,aACA7P,SAAA,SAGAgP,GAAA,CACAxD,MAAA,iBACAqD,aAAA,KAGAc,YAAA,CACAnU,EAAAkM,QAAAG,IAAA,aAAA,eAAA,CAAAK,cAAA,IACA1M,EAAAkM,QAAAG,IAAA,aAAA,iBAAA,CAAAK,cAAA,OAIA1M,EAAAkM,QAAAwB,IAAA,QAAA,gBAAA,CACAjN,GAAA,gBACAmK,MAAA,IACAC,OAAA,GACA6I,OAAA,CAAA1P,EAAA,EAAA0G,EAAA,KACAmI,UAAA,IACAC,WAAA,GACAC,mBAAA,EACAC,OAAA,CAAAvI,IAAA,EAAAwI,MAAA,GAAAC,OAAA,GAAAvI,KAAA,IACAyI,KAAA,CACApP,EAAA,CACAgM,MAAA,+CACAqD,aAAA,GACAjO,MAAA,CACA,CACApB,EAAA,UACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,UACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,UACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,UACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,UACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,IACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,qBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,mBAEA,CACArQ,EAAA,WACA2D,KAAA,KACAlG,MAAA,CACAiQ,KAAA,gBACA0C,cAAA,SACA5C,YAAA,OACAC,cAAA,QAEA4C,UAAA,sBAKAF,YAAA,CACAnU,EAAAkM,QAAAG,IAAA,aAAA,gBAAA,CAAAK,cAAA,OAIA1M,EAAAkM,QAAAwB,IAAA,QAAA,YAAA,CACAjN,GAAA,YACAmK,MAAA,IACAC,OAAA,GACAgI,UAAA,IACAC,WAAA,GACAE,OAAA,CAAAvI,IAAA,GAAAwI,MAAA,IAAAC,OAAA,EAAAvI,KAAA,IACAwB,WACAjN,EAAAc,EAAAkM,QAAAG,IAAA,YAAA,iBAAA,CAAAK,cAAA,IACAxN,EAAAP,WAAA2G,KAAA,CACAgH,KAAA,sBACAgI,cAAA,YACA9P,SAAA,UAEAtF,GAEAkU,KAAA,GACAQ,YAAA,CACAC,wBAAA,EACAI,gBAAA,EACAC,UAAA,GAEArE,OAAA,CACA8D,QAAA,EACAnF,YAAA,aACAkF,OAAA,CAAA1P,EAAA,GAAA0G,EAAA,GACA6J,gBAAA,GAEAJ,YAAA,CACAnU,EAAAkM,QAAAG,IAAA,aAAA,YAAA,CAAAK,cAAA,OAUA1M,EAAAkM,QAAAwB,IAAA,OAAA,uBAAA,CACApM,MAAA,GACAsJ,MAAA,IACAC,OAAA,IACA2J,mBAAA,EACApN,iBAAA,IACAC,iBAAA,IACA8E,UAAAnM,EAAAkM,QAAAG,IAAA,YAAA,gBAAA,CAAAK,cAAA,IACA+H,OAAA,CACAzU,EAAAkM,QAAAG,IAAA,QAAA,cAAA,CAAAK,cAAA,EAAAgI,oBAAA,KACA1U,EAAAkM,QAAAG,IAAA,QAAA,QAAA,CAAAK,cAAA,EAAAgI,oBAAA,QAKA1U,EAAA2U,eAAA3U,EAAAkM,QAAAG,IAAA,OAAA,wBAEArM,EAAAkM,QAAAwB,IAAA,OAAA,kBAAA,CACA9C,MAAA,IACAC,OAAA,IACAgI,UAAA,IACAC,WAAA,IACA0B,mBAAA,EACArI,UAAAnM,EAAAkM,QAAAG,IAAA,YAAA,gBAAA,CAAAK,cAAA,IACA+H,OAAA,CACAzU,EAAAkM,QAAAG,IAAA,QAAA,SAAA,CAAAK,cAAA,EAAAgI,oBAAA,MACA1U,EAAAkM,QAAAG,IAAA,QAAA,gBAAA,CAAAK,cAAA,EAAAgI,oBAAA,KACA1U,EAAAkM,QAAAG,IAAA,QAAA,QAAA,CACAK,cAAA,EAAAgI,oBAAA,IACA1B,OAAA,CAAAE,OAAA,IACAE,KAAA,CACApP,EAAA,CACAgM,MAAA,0BACAqD,aAAA,GACAC,YAAA,SACAC,OAAA,aAKAqB,aAAA,IAGA5U,EAAAkM,QAAAwB,IAAA,OAAA,uBAAA,CACApM,MAAA,GACAsJ,MAAA,IACAC,OAAA,IACA2J,mBAAA,EACApN,iBAAA,IACAC,iBAAA,IACA8E,UAAAnM,EAAAkM,QAAAG,IAAA,YAAA,gBAAA,CAAAK,cAAA,IACA+H,OAAA,CACAzU,EAAAkM,QAAAG,IAAA,QAAA,cAAA,CAAAK,cAAA,EAAA9B,MAAA,IAAA8J,oBAAA,IAAA,MACA1U,EAAAkM,QAAAG,IAAA,QAAA,YAAA,CAAAK,cAAA,EAAAgI,oBAAA,IAAA,MACA1U,EAAAkM,QAAAG,IAAA,QAAA,QAAA,CAAAK,cAAA,EAAA9B,MAAA,IAAA8J,oBAAA,IAAA,SDnjCA1U,EAAA6U,UAAA,SAAA1U,EAAAmJ,GAwDA,OAtDA/K,KAAAuW,aAAA,EAEAvW,KAAAwW,WAAA,KAGAxW,KAAAkC,GAAA,KAEAlC,KAAA+K,OAAAA,GAAA,KAIA/K,KAAAgD,IAAA,GAGAhD,KAAAyL,YAAA,UACA,IAAAV,GAAAA,aAAAtJ,EAAAgV,QAAAzW,KAAAyL,YAAAV,EAAAA,QAGA/K,KAAA4B,OAAAH,EAAAkM,QAAAO,MAAAtM,GAAA,GAAAH,EAAA6U,UAAAI,eACA1W,KAAA4B,OAAAM,KAAAlC,KAAAkC,GAAAlC,KAAA4B,OAAAM,IAGAlC,KAAA4B,OAAA2O,SAAA,IAAA,iBAAAvQ,KAAA4B,OAAA2O,OAAAG,OAAA1Q,KAAA4B,OAAA2O,OAAAG,KAAA,GACA1Q,KAAA4B,OAAA6O,SAAA,IAAA,iBAAAzQ,KAAA4B,OAAA6O,OAAAC,OAAA1Q,KAAA4B,OAAA6O,OAAAC,KAAA,GAMA1Q,KAAA2W,aAAAjN,KAAA0E,MAAA1E,KAAAC,UAAA3J,KAAA4B,SAGA5B,KAAA+C,MAAA,GAEA/C,KAAA4W,SAAA,KAEA5W,KAAA6W,kBAIA7W,KAAA+I,KAAA,GACA/I,KAAA4B,OAAAiM,UAEA7N,KAAA8W,SAAA,IAIA9W,KAAA+W,gBAAA,CACAC,aAAA,EACAC,UAAA,EACAC,OAAA,EACA9B,QAAA,GAGApV,MAeAyB,EAAA6U,UAAA9I,UAAA2J,SAAA,SAAAC,EAAA9I,EAAAhO,GACA,IAAA8W,IAAA9I,EACA,KAAA,iEAEA,IAAA+I,EAAA/I,EAAA,IAAA8I,EACA,GAAA9W,EAEA,GADA+W,GAAA,IACA,iBAAA/W,EACA+W,GAAA/W,MACA,CAAA,IAAAmP,MAAAC,QAAApP,GAGA,KAAA,sEAFA+W,GAAA/W,EAAAkK,KAAA,KAKA,IAAA2F,EAAAnQ,KAAA4B,OAAAuO,OAIA,OAHA,IAAAA,EAAAnJ,QAAAqQ,IACAlH,EAAApJ,KAAAsQ,GAEAA,GAUA5V,EAAA6U,UAAA9I,UAAAqJ,gBAAA,WAGA7W,KAAA+K,SACA/K,KAAA+C,MAAA/C,KAAA+K,OAAAhI,MACA/C,KAAA4W,SAAA5W,KAAA+K,OAAA7I,GAAA,IAAAlC,KAAAkC,GACAlC,KAAA+C,MAAA/C,KAAA4W,UAAA5W,KAAA+C,MAAA/C,KAAA4W,WAAA,GACAnV,EAAA6U,UAAAgB,SAAAC,WAAAnW,QAAA,SAAA4G,GACAhI,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAAhI,KAAA+C,MAAA/C,KAAA4W,UAAA5O,IAAA,IACA6D,KAAA7L,SASAyB,EAAA6U,UAAAI,cAAA,CACA3I,KAAA,GACAoC,OAAA,GACAI,OAAA,GACAE,OAAA,IAYAhP,EAAA6U,UAAAgB,SAAA,CACAE,MAAA,CAAA,YAAA,SAAA,OAAA,QACAD,WAAA,CAAA,cAAA,WAAA,QAAA,UACAE,eAAA,CAAA,cAAA,WAAA,SAAA,SAQAhW,EAAA6U,UAAA9I,UAAAkK,UAAA,WACA,OAAA1X,KAAAyL,YAAAvJ,GAAA,IAAAlC,KAAA+K,OAAA7I,GAAA,IAAAlC,KAAAkC,IAWAT,EAAA6U,UAAA9I,UAAAmK,sBAAA,WAEA,OADA3X,KAAAgD,IAAA4U,MAAA3V,OAAA+K,wBACAV,QAOA7K,EAAA6U,UAAA9I,UAAAqK,cAAA,WACA,QAAA7X,KAAA4B,OAAAkW,cACA9X,KAAAyL,YAAAsM,iBAAAC,UAAAhY,KAAAyL,YAAA4J,YAAA4C,WASAxW,EAAA6U,UAAA9I,UAAA0K,aAAA,SAAAxJ,GACA,IAAAyJ,EAAA,UACA,GAAA,iBAAAzJ,EACAyJ,EAAAzJ,OACA,GAAA,iBAAAA,EAAA,CACA,IAAAiD,EAAA3R,KAAA4B,OAAA+P,UAAA,KACA,QAAA,IAAAjD,EAAAiD,GACA,KAAA,gCAEAwG,EAAAzJ,EAAAiD,GAAAnD,WAAApJ,QAAA,MAAA,IAEA,OAAApF,KAAA0X,YAAA,IAAAS,GAAA/S,QAAA,kBAAA,MAYA3D,EAAA6U,UAAA9I,UAAA4K,uBAAA,SAAA1J,GACA,OAAA,MAUAjN,EAAA6U,UAAA9I,UAAA6K,eAAA,SAAAnW,GACA,IAAAR,EAAAzB,EAAA6B,OAAA,IAAAI,EAAAkD,QAAA,kBAAA,SACA,OAAA1D,EAAAU,SAAAV,EAAAqH,QAAArH,EAAAqH,OAAAzF,OACA5B,EAAAqH,OAAA,GAEA,MASAtH,EAAA6U,UAAA9I,UAAA8K,iBAAA,WAoBA,OAnBAtY,KAAA+I,KAAA3H,QAAA,SAAAC,EAAAC,GAEAtB,KAAA+I,KAAAzH,GAAAiX,OAAA,WACA,IAAA5G,EAAA3R,KAAA4B,OAAA+P,UAAA,KACA5P,EAAA,GAEA,OADA/B,KAAA+I,KAAAzH,GAAAqQ,KAAA5P,EAAA/B,KAAA+I,KAAAzH,GAAAqQ,GAAAnD,YACAzM,GACA8J,KAAA7L,MAEAA,KAAA+I,KAAAzH,GAAAsJ,aAAA,WACA,OAAA5K,MACA6L,KAAA7L,MAEAA,KAAA+I,KAAAzH,GAAAkX,SAAA,WACAxY,KAAA4K,eACA6N,gBAAAzY,QAEA6L,KAAA7L,OACAA,KAAA0Y,yBACA1Y,MAOAyB,EAAA6U,UAAA9I,UAAAkL,uBAAA,WACA,OAAA1Y,MAOAyB,EAAA6U,UAAA9I,UAAAnK,WAAA,WAiBA,OAdArD,KAAAgD,IAAAT,UAAAvC,KAAA+K,OAAA/H,IAAA4U,MAAA3U,OAAA,KACAZ,KAAA,QAAA,2BACAA,KAAA,KAAArC,KAAA0X,YAAA,yBAGA1X,KAAAgD,IAAA2V,SAAA3Y,KAAAgD,IAAAT,UAAAU,OAAA,YACAZ,KAAA,KAAArC,KAAA0X,YAAA,SACAzU,OAAA,QAGAjD,KAAAgD,IAAA4U,MAAA5X,KAAAgD,IAAAT,UAAAU,OAAA,KACAZ,KAAA,KAAArC,KAAA0X,YAAA,eACArV,KAAA,YAAA,QAAArC,KAAA0X,YAAA,UAEA1X,MAQAyB,EAAA6U,UAAA9I,UAAAoL,OAAA,WAMA,OALA5Y,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,QAAA,KACApQ,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,SAAApQ,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,QAAA,GACApQ,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,QAAA,GAAApQ,KAAAkC,GACAlC,KAAA+K,OAAA+N,oBAEA9Y,MAOAyB,EAAA6U,UAAA9I,UAAAuL,SAAA,WAMA,OALA/Y,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,QAAA,KACApQ,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,SAAApQ,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,QAAA,GACApQ,KAAA+K,OAAA8N,0BAAA7Y,KAAA4B,OAAAwO,QAAA,GAAApQ,KAAAkC,GACAlC,KAAA+K,OAAA+N,oBAEA9Y,MAUAyB,EAAA6U,UAAA9I,UAAAwL,yBAAA,SAAApX,EAAAmH,GACA,IAAAhE,EAAA,KACA,GAAA0K,MAAAC,QAAA9N,GAEA,IADA,IAAAqX,EAAA,EACA,OAAAlU,GAAAkU,EAAArX,EAAA0B,QACAyB,EAAA/E,KAAAgZ,yBAAApX,EAAAqX,GAAAlQ,GACAkQ,SAGA,cAAArX,GACA,IAAA,SACA,IAAA,SACAmD,EAAAnD,EACA,MACA,IAAA,SACA,GAAAA,EAAAkP,eACA,GAAAlP,EAAA4O,MAAA,CACA,IAAA0I,EAAA,IAAAzX,EAAA0I,KAAAC,MAAAxI,EAAA4O,OACAzL,EAAAtD,EAAA0X,eAAArL,IAAAlM,EAAAkP,eAAAlP,EAAAmP,YAAA,GAAAmI,EAAAjR,QAAAc,SAEAhE,EAAAtD,EAAA0X,eAAArL,IAAAlM,EAAAkP,eAAAlP,EAAAmP,YAAA,GAAAhI,GAMA,OAAAhE,GAOAtD,EAAA6U,UAAA9I,UAAA4L,cAAA,SAAAC,GAEA,IAAA,IAAA,CAAA,IAAA,KAAArS,QAAAqS,GACA,KAAA,6EAGA,IAAAC,EAAAD,EAAA,QACAE,EAAAvZ,KAAA4B,OAAA0X,GAGA,IAAAlV,MAAAmV,EAAA5U,SAAAP,MAAAmV,EAAA5I,SACA,MAAA,EAAA4I,EAAA5U,OAAA4U,EAAA5I,SAIA,IAAA6I,EAAA,GACA,GAAAD,EAAA/I,OAAAxQ,KAAA+I,KAAA,CACA,GAAA/I,KAAA+I,KAAAzF,OAKA,CAOA,IAAAmW,GANAD,EAAAvZ,EAAA+U,OAAAhV,KAAA+I,KAAA,SAAA1H,GAEA,OADA,IAAAI,EAAA0I,KAAAC,MAAAmP,EAAA/I,OACAvI,QAAA5G,MAIA,GAAAmY,EAAA,GAQA,GAPApV,MAAAmV,EAAA/G,gBACAgH,EAAA,IAAAC,EAAAF,EAAA/G,cAEApO,MAAAmV,EAAA3H,gBACA4H,EAAA,IAAAC,EAAAF,EAAA3H,cAGA,iBAAA2H,EAAA1H,WAAA,CAEA,IAAA6H,EAAAH,EAAA1H,WAAA,GACA8H,EAAAJ,EAAA1H,WAAA,GACAzN,MAAAsV,IAAAtV,MAAAuV,KACAH,EAAA,GAAAlV,KAAAE,IAAAgV,EAAA,GAAAE,IAEAtV,MAAAuV,KACAH,EAAA,GAAAlV,KAAAG,IAAA+U,EAAA,GAAAG,IAIA,MAAA,CACAvV,MAAAmV,EAAA5U,OAAA6U,EAAA,GAAAD,EAAA5U,MACAP,MAAAmV,EAAA5I,SAAA6I,EAAA,GAAAD,EAAA5I,SA9BA,OADA6I,EAAAD,EAAA1H,YAAA,GAsCA,MAAA,MAAAwH,GAAAjV,MAAApE,KAAA+C,MAAAgD,QAAA3B,MAAApE,KAAA+C,MAAAiD,KAKA,GAJA,CAAAhG,KAAA+C,MAAAgD,MAAA/F,KAAA+C,MAAAiD,MAyBAvE,EAAA6U,UAAA9I,UAAAoM,SAAA,SAAAP,EAAAQ,GACA,IAAA,IAAA,CAAA,IAAA,KAAA,MAAA7S,QAAAqS,GACA,KAAA,8CAAAA,EAEA,MAAA,IAQA5X,EAAA6U,UAAA9I,UAAAsM,cAAA,SAAAzY,EAAAa,GACA,GAAA,iBAAAlC,KAAA4B,OAAAiM,QACA,KAAA,cAAA7N,KAAAkC,GAAA,qCAGA,QADA,IAAAA,IAAAA,EAAAlC,KAAAkY,aAAA7W,KACArB,KAAA8W,SAAA5U,GAYA,OARAlC,KAAA8W,SAAA5U,GAAA,CACA6G,KAAA1H,EACA0Y,MAAA,KACArY,SAAAzB,EAAA6B,OAAA9B,KAAAyL,YAAAzI,IAAAf,OAAAwI,YAAAxH,OAAA,OACAZ,KAAA,QAAA,yBACAA,KAAA,KAAAH,EAAA,aAEAlC,KAAAga,cAAA3Y,GACArB,KAXAA,KAAAia,gBAAA/X,IAmBAT,EAAA6U,UAAA9I,UAAAwM,cAAA,SAAA3Y,EAAAa,GAwBA,YAvBA,IAAAA,IAAAA,EAAAlC,KAAAkY,aAAA7W,IAEArB,KAAA8W,SAAA5U,GAAAR,SAAAK,KAAA,IACA/B,KAAA8W,SAAA5U,GAAA6X,MAAA,KAEA/Z,KAAA4B,OAAAiM,QAAA9L,MACA/B,KAAA8W,SAAA5U,GAAAR,SAAAK,KAAAN,EAAAyY,YAAA7Y,EAAArB,KAAA4B,OAAAiM,QAAA9L,OAIA/B,KAAA4B,OAAAiM,QAAA+B,UACA5P,KAAA8W,SAAA5U,GAAAR,SAAAgK,OAAA,SAAA,gBACArJ,KAAA,QAAA,2BACAA,KAAA,QAAA,SACA+G,KAAA,KACAuC,GAAA,QAAA,WACA3L,KAAAma,eAAAjY,IACA2J,KAAA7L,OAGAA,KAAA8W,SAAA5U,GAAAR,SAAAqH,KAAA,CAAA1H,IAEArB,KAAAia,gBAAA/X,GACAlC,MASAyB,EAAA6U,UAAA9I,UAAA2M,eAAA,SAAA9Y,EAAAa,GAYA,MAXA,iBAAAb,EACAa,EAAAb,OACA,IAAAa,IACAA,EAAAlC,KAAAkY,aAAA7W,IAEArB,KAAA8W,SAAA5U,KACA,iBAAAlC,KAAA8W,SAAA5U,GAAAR,UACA1B,KAAA8W,SAAA5U,GAAAR,SAAAgL,gBAEA1M,KAAA8W,SAAA5U,IAEAlC,MAOAyB,EAAA6U,UAAA9I,UAAA4M,mBAAA,WACA,IAAA,IAAAlY,KAAAlC,KAAA8W,SACA9W,KAAAma,eAAAjY,GAEA,OAAAlC,MAUAyB,EAAA6U,UAAA9I,UAAAyM,gBAAA,SAAA/X,GACA,GAAA,iBAAAA,EACA,KAAA,iDAeA,OAZAlC,KAAA8W,SAAA5U,GAAAR,SACAwB,MAAA,OAAAjD,EAAAoa,MAAAC,MAAA,MACApX,MAAA,MAAAjD,EAAAoa,MAAAE,MAAA,MAEAva,KAAA8W,SAAA5U,GAAA6X,QACA/Z,KAAA8W,SAAA5U,GAAA6X,MAAA/Z,KAAA8W,SAAA5U,GAAAR,SAAAuB,OAAA,OACAC,MAAA,WAAA,YACAb,KAAA,QAAA,yCAEArC,KAAA8W,SAAA5U,GAAA6X,MACA7W,MAAA,OAAA,QACAA,MAAA,MAAA,QACAlD,MAOAyB,EAAA6U,UAAA9I,UAAAgN,oBAAA,WACA,IAAA,IAAAtY,KAAAlC,KAAA8W,SACA9W,KAAAia,gBAAA/X,GAEA,OAAAlC,MAQAyB,EAAA6U,UAAA9I,UAAAiN,kBAAA,SAAA/L,GAEA,GAAA,iBAAA1O,KAAA4B,OAAAiM,QAAA,CACA,IAAA3L,EAAAlC,KAAAkY,aAAAxJ,GAEAgM,EAAA,SAAAC,EAAAC,EAAA5H,GACA,IAAAhL,EAAA,KACA,GAAA,iBAAA2S,GAAA,OAAAA,EAAA,OAAA,KACA,GAAAlL,MAAAC,QAAAkL,QACA,IAAA5H,IAAAA,EAAA,OAEAhL,EADA,IAAA4S,EAAAtX,OACAqX,EAAAC,EAAA,IAEAA,EAAAC,OAAA,SAAAC,EAAAC,GACA,MAAA,QAAA/H,EACA2H,EAAAG,IAAAH,EAAAI,GACA,OAAA/H,EACA2H,EAAAG,IAAAH,EAAAI,GAEA,YAGA,GAAA,iBAAAH,EAAA,CACA,IAAAI,EACA,IAAA,IAAAC,KAAAL,EACAI,EAAAN,EAAAC,EAAAC,EAAAK,GAAAA,GACA,OAAAjT,EACAA,EAAAgT,EACA,QAAAhI,EACAhL,EAAAA,GAAAgT,EACA,OAAAhI,IACAhL,EAAAA,GAAAgT,GAIA,OAAAhT,GAGAkT,EAAA,GACA,iBAAAlb,KAAA4B,OAAAiM,QAAAxC,KACA6P,EAAA,CAAApL,IAAA,CAAA9P,KAAA4B,OAAAiM,QAAAxC,OACA,iBAAArL,KAAA4B,OAAAiM,QAAAxC,OACA6P,EAAAlb,KAAA4B,OAAAiM,QAAAxC,MAGA,IAAA8P,EAAA,GACA,iBAAAnb,KAAA4B,OAAAiM,QAAAjC,KACAuP,EAAA,CAAArL,IAAA,CAAA9P,KAAA4B,OAAAiM,QAAAjC,OACA,iBAAA5L,KAAA4B,OAAAiM,QAAAjC,OACAuP,EAAAnb,KAAA4B,OAAAiM,QAAAjC,MAGA,IAAA+O,EAAA,GACAlZ,EAAA6U,UAAAgB,SAAAC,WAAAnW,QAAA,SAAA4G,GACA,IAAAoT,EAAA,KAAApT,EACA2S,EAAA3S,IAAA,IAAAhI,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAAhB,QAAA9E,GACAyY,EAAAS,IAAAT,EAAA3S,IACA6D,KAAA7L,OAEA,IAAAqb,EAAAX,EAAAC,EAAAO,GACAI,EAAAZ,EAAAC,EAAAQ,GAUA,OANAE,IAAAC,EACAtb,KAAA8Z,cAAApL,GAEA1O,KAAAma,eAAAzL,GAGA1O,OAaAyB,EAAA6U,UAAA9I,UAAA+N,OAAA,SAAAxI,EAAAyI,GAIA,QAHA,IAAAA,IAAA,IAAA,CAAA,UAAA,YAAAxU,QAAAwU,KACAA,EAAA,YAEA/L,MAAAC,QAAAqD,GAAA,MAAA,GACA,IAkBA0I,EAAA,GAQA,OAPAzb,KAAA+I,KAAA3H,QAAA,SAAAsN,EAAAuK,GACA,IAAAvT,GAAA,EACAqN,EAAA3R,QAAA,SAAAma,GArBA,IAAA7M,EAAA6M,EACAG,EADAhN,EAsBAA,EAtBA6M,EAsBAA,EArBAG,EAAA,CACAC,IAAA,SAAAC,EAAAC,GAAA,OAAAD,IAAAC,GACAC,IAAA,SAAAF,EAAAC,GAAA,OAAAD,EAAAC,GACAE,KAAA,SAAAH,EAAAC,GAAA,OAAAD,GAAAC,GACAG,IAAA,SAAAJ,EAAAC,GAAA,OAAAA,EAAAD,GACAK,KAAA,SAAAL,EAAAC,GAAA,OAAAA,GAAAD,GACAM,IAAA,SAAAN,EAAAC,GAAA,OAAAD,EAAAC,IAEApM,MAAAC,QAAA6L,KACA,IAAAA,EAAAjY,OACAoL,EAAA6M,EAAA,MAAAA,EAAA,GACA,IAAAA,EAAAjY,QAAAoY,EAAAH,EAAA,KACAG,EAAAH,EAAA,IAAA7M,EAAA6M,EAAA,IAAAA,EAAA,OASA7V,GAAA,KAEAA,GAAA+V,EAAA1U,KAAA,YAAAyU,EAAAvC,EAAAvK,KAEA+M,GAOAha,EAAA6U,UAAA9I,UAAA2O,cAAA,SAAApJ,GAAA,OAAA/S,KAAAub,OAAAxI,EAAA,YAKAtR,EAAA6U,UAAA9I,UAAA4O,eAAA,SAAArJ,GAAA,OAAA/S,KAAAub,OAAAxI,EAAA,aAEAtR,EAAA6U,UAAAgB,SAAAE,MAAApW,QAAA,SAAAib,EAAApD,GACA,IAAAqD,EAAA7a,EAAA6U,UAAAgB,SAAAC,WAAA0B,GACAsD,EAAA,KAAAF,EAGA5a,EAAA6U,UAAA9I,UAAA6O,EAAA,WAAA,SAAA3N,EAAAyD,GAGA,OAFAA,OAAA,IAAAA,KAAAA,EACAnS,KAAAwc,iBAAAF,EAAA5N,GAAA,EAAAyD,GACAnS,MAEAyB,EAAA6U,UAAA9I,UAAA+O,EAAA,WAAA,SAAA7N,EAAAyD,GAGA,OAFAA,OAAA,IAAAA,KAAAA,EACAnS,KAAAwc,iBAAAF,EAAA5N,GAAA,EAAAyD,GACAnS,MAGAyB,EAAA6U,UAAA9I,UAAA6O,EAAA,qBAAA,SAAAtJ,EAAAZ,GAEA,OADAA,OAAA,IAAAA,KAAAA,EACAnS,KAAAyc,0BAAAH,GAAA,EAAAvJ,EAAAZ,IAEA1Q,EAAA6U,UAAA9I,UAAA+O,EAAA,qBAAA,SAAAxJ,EAAAZ,GAEA,OADAA,OAAA,IAAAA,KAAAA,EACAnS,KAAAyc,0BAAAH,GAAA,EAAAvJ,EAAAZ,IAGA1Q,EAAA6U,UAAA9I,UAAA6O,EAAA,eAAA,WAEA,OADArc,KAAA0c,oBAAAJ,GAAA,GACAtc,MAEAyB,EAAA6U,UAAA9I,UAAA+O,EAAA,eAAA,WAEA,OADAvc,KAAA0c,oBAAAJ,GAAA,GACAtc,QAYAyB,EAAA6U,UAAA9I,UAAAgP,iBAAA,SAAAxU,EAAA0G,EAAAiO,EAAAxK,GAEA,QAAA,IAAAnK,IAAA,IAAAvG,EAAA6U,UAAAgB,SAAAC,WAAAvQ,QAAAgB,GACA,KAAA,wDAEA,QAAA,IAAA0G,EACA,KAAA,8DAEA,IAAAiO,IACAA,GAAA,GAIA,IACA,IAAAxE,EAAAnY,KAAAkY,aAAAxJ,GACA,MAAAkO,GACA,OAAA5c,KAIAmS,GACAnS,KAAA0c,oBAAA1U,GAAA2U,GAIA1c,EAAA6B,OAAA,IAAAqW,GAAAzN,QAAA,iBAAA1K,KAAA4B,OAAAmM,KAAA,IAAA/F,EAAA2U,GACA,IAAAE,EAAA7c,KAAAoY,uBAAA1J,GACA,OAAAmO,GACA5c,EAAA6B,OAAA,IAAA+a,GAAAnS,QAAA,iBAAA1K,KAAA4B,OAAAmM,KAAA,eAAA/F,EAAA2U,GAIA,IAAAG,EAAA9c,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAAhB,QAAAmR,GAmBA,OAlBAwE,IAAA,IAAAG,GACA9c,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAAjB,KAAAoR,GAEAwE,IAAA,IAAAG,GACA9c,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAA+U,OAAAD,EAAA,GAIA9c,KAAAya,kBAAA/L,GAGA1O,KAAA+K,OAAAiS,KAAA,kBAAA,GACA,aAAAhV,GAIAhI,KAAA+K,OAAAiS,KAAA,oBAAA,CAAAtO,QAAAA,EAAAuO,OAAAN,IAAA,GAEA3c,MAYAyB,EAAA6U,UAAA9I,UAAAiP,0BAAA,SAAAzU,EAAA2U,EAAA5J,EAAAZ,GAGA,QAAA,IAAAnK,IAAA,IAAAvG,EAAA6U,UAAAgB,SAAAC,WAAAvQ,QAAAgB,GACA,KAAA,iEAEA,YAAA,IAAAhI,KAAA+C,MAAA/C,KAAA4W,UAAA5O,KACA2U,OAAA,IAAAA,KAAAA,EACAxK,OAAA,IAAAA,KAAAA,EACA1C,MAAAC,QAAAqD,KAAAA,EAAA,IAGAZ,GACAnS,KAAA0c,oBAAA1U,GAAA2U,GAIA3c,KAAAoc,eAAArJ,GAAA3R,QAAA,SAAAsN,GACA1O,KAAAwc,iBAAAxU,EAAA0G,EAAAiO,IACA9Q,KAAA7L,QAbAA,MAwBAyB,EAAA6U,UAAA9I,UAAAkP,oBAAA,SAAA1U,EAAA2U,GAGA,QAAA,IAAA3U,IAAA,IAAAvG,EAAA6U,UAAAgB,SAAAC,WAAAvQ,QAAAgB,GACA,KAAA,2DAEA,QAAA,IAAAhI,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAA,OAAAhI,WACA,IAAA2c,IAAAA,GAAA,GAGAA,GACA3c,KAAA+I,KAAA3H,QAAA,SAAAsN,GACA1O,KAAAwc,iBAAAxU,EAAA0G,GAAA,IACA7C,KAAA7L,QAEAA,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAAf,QACA7F,QAAA,SAAAc,GACA,IAAAwM,EAAA1O,KAAAqY,eAAAnW,GACA,iBAAAwM,GAAA,OAAAA,GACA1O,KAAAwc,iBAAAxU,EAAA0G,GAAA,IAEA7C,KAAA7L,OACAA,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAA,IAMA,OAFAhI,KAAA+W,gBAAA/O,GAAA2U,EAEA3c,MAOAyB,EAAA6U,UAAA9I,UAAA0P,eAAA,SAAAC,GACA,iBAAAnd,KAAA4B,OAAAkQ,WACAlP,OAAAC,KAAA7C,KAAA4B,OAAAkQ,WAAA1Q,QAAA,SAAAwZ,GACA,IAAAwC,EAAA,6BAAA9X,KAAAsV,GACAwC,GACAD,EAAAxR,GAAAyR,EAAA,GAAA,IAAAxC,EAAA5a,KAAAqd,iBAAAzC,EAAA5a,KAAA4B,OAAAkQ,UAAA8I,MACA/O,KAAA7L,QAeAyB,EAAA6U,UAAA9I,UAAA6P,iBAAA,SAAAzC,EAAA9I,GAGA,IAAAwL,GACA,IAAA1C,EAAA5T,QAAA,QADAsW,GAEA,IAAA1C,EAAA5T,QAAA,SAGA,OAAA,SAAA0H,GAGA4O,MAAArd,EAAAoa,MAAAkD,SAAAD,MAAArd,EAAAoa,MAAAmD,UAGA1L,EAAA1Q,QAAA,SAAAqc,GAGA,GAAA,iBAAAA,GAAA,OAAAA,EAEA,OAAAA,EAAAzL,QAGA,IAAA,MACAhS,KAAAwc,iBAAAiB,EAAAzV,OAAA0G,GAAA,EAAA+O,EAAAtL,WACA,MAGA,IAAA,QACAnS,KAAAwc,iBAAAiB,EAAAzV,OAAA0G,GAAA,EAAA+O,EAAAtL,WACA,MAGA,IAAA,SACA,IAAAuL,GAAA,IAAA1d,KAAA+C,MAAA/C,KAAA4W,UAAA6G,EAAAzV,QAAAhB,QAAAhH,KAAAkY,aAAAxJ,IACAyD,EAAAsL,EAAAtL,YAAAuL,EACA1d,KAAAwc,iBAAAiB,EAAAzV,OAAA0G,GAAAgP,EAAAvL,GACA,MAGA,IAAA,OACA,GAAA,iBAAAsL,EAAAE,KAAA,CACA,IAAAvW,EAAA3F,EAAAyY,YAAAxL,EAAA+O,EAAAE,MACA,iBAAAF,EAAAG,OACAC,OAAAjW,KAAAR,EAAAqW,EAAAG,QAEAC,OAAAC,SAAAH,KAAAvW,KAaAyE,KAAA7L,QAEA6L,KAAA7L,OASAyB,EAAA6U,UAAA9I,UAAAvB,cAAA,WACA,IAAA8R,EAAA/d,KAAA+K,OAAAkB,gBACA,MAAA,CACAxG,EAAAsY,EAAAtY,EAAAzF,KAAA+K,OAAAnJ,OAAA6S,OAAArI,KACAD,EAAA4R,EAAA5R,EAAAnM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,MASAzK,EAAA6U,UAAA9I,UAAAwQ,WAAA,SAAAC,GACA,IAIAlZ,EAJAmZ,EAAA,OAKA,OAHAD,EAAA,iBADAA,EAAAA,GAAAC,GACAD,EAAAE,cAAAD,GACA,IAAA,CAAA,OAAA,MAAA,OAAAlX,QAAAiX,KAAAA,EAAAC,GAEAD,GACA,IAAA,OACA,IACAlZ,EAAA2E,KAAAC,UAAA3J,KAAA+I,MACA,MAAAqV,GACArZ,EAAA,KACAyE,QAAAC,MAAA,+CAAAzJ,KAAA0X,YAAA,IAAA0G,GAEA,MACA,IAAA,MACA,IAAA,MACA,IACA,IAAAC,EAAA3U,KAAA0E,MAAA1E,KAAAC,UAAA3J,KAAA+I,OACA,GAAA,iBAAAsV,EACAtZ,EAAAsZ,EAAA7P,gBACA,GAAAiB,MAAAC,QAAA2O,GAEA,CACA,IAAAC,EAAA,QAAAL,EAAA,KAAA,IAIAlZ,EAHA/E,KAAA4B,OAAAuO,OAAA5F,IAAA,SAAAnC,GACA,OAAAsB,KAAAC,UAAAvB,KACAoC,KAAA8T,GAAA,KACAD,EAAA9T,IAAA,SAAAgU,GACA,OAAAve,KAAA4B,OAAAuO,OAAA5F,IAAA,SAAAiG,GACA,YAAA,IAAA+N,EAAA/N,GACA9G,KAAAC,UAAA,MACA,iBAAA4U,EAAA/N,IAAA,OAAA+N,EAAA/N,GACAf,MAAAC,QAAA6O,EAAA/N,IAAA,WAAA+N,EAAA/N,GAAAlN,OAAA,MAAA,aAEAoG,KAAAC,UAAA4U,EAAA/N,MAEAhG,KAAA8T,IACAzS,KAAA7L,OAAAwK,KAAA,WAhBAzF,EAAA,SAkBA,MAAAqZ,GACArZ,EAAA,KACAyE,QAAAC,MAAA,8CAAAzJ,KAAA0X,YAAA,IAAA0G,IAIA,OAAArZ,GAOAtD,EAAA6U,UAAA9I,UAAAgR,KAAA,WAMA,OALAxe,KAAAgD,IAAAT,UAAAF,KAAA,YAAA,aAAArC,KAAA+K,OAAAnJ,OAAA6c,SAAAtJ,OAAA1P,EAAA,IAAAzF,KAAA+K,OAAAnJ,OAAA6c,SAAAtJ,OAAAhJ,EAAA,KACAnM,KAAAgD,IAAA2V,SACAtW,KAAA,QAAArC,KAAA+K,OAAAnJ,OAAA6c,SAAApS,OACAhK,KAAA,SAAArC,KAAA+K,OAAAnJ,OAAA6c,SAAAnS,QACAtM,KAAAwa,sBACAxa,MAQAyB,EAAA6U,UAAA9I,UAAAkR,MAAA,WAEA1e,KAAAoa,qBAIA,IAAA7R,EAAAvI,KAAAyL,YAAAkT,IAAAC,QAAA5e,KAAA+C,MAAA/C,KAAA4B,OAAAuO,QAOA,OANA5H,EAAAwB,KAAA,SAAA8U,GACA7e,KAAA+I,KAAA8V,EAAAxX,KACArH,KAAAsY,mBACAtY,KAAAuW,aAAA,GACA1K,KAAA7L,OAEAuI,GAQA9G,EAAAqd,YAEApe,EAAA,IADAP,EAAA,IASA2N,IAAA,SAAAE,EAAApM,EAAAmJ,GACA,GAAAiD,EAEA,CAAA,GAAAtN,EAAAsN,GAAA,CACA,GAAA,iBAAApM,EACA,KAAA,2CAAAoM,EAAA,IAEA,OAAA,IAAAtN,EAAAsN,GAAApM,EAAAmJ,GAGA,KAAA,eAAAiD,EAAA,cARA,OAAA,MAkBA7N,EAAA+O,IAAA,SAAAlB,EAAA+Q,GACA,GAAAA,EAAA,CACA,GAAA,mBAAAA,EACA,KAAA,6BAAA/Q,EAAA,yCAEAtN,EAAAsN,GAAA+Q,EACAre,EAAAsN,GAAAR,UAAA,IAAA/L,EAAA6U,sBAGA5V,EAAAsN,IAUA7N,EAAAgP,IAAA,SAAAnB,EAAA+Q,GACA,GAAAre,EAAAsN,GACA,KAAA,wCAAAA,EAEA7N,EAAA+O,IAAAlB,EAAA+Q,IAWA5e,EAAA6e,OAAA,SAAAC,EAAAjR,EAAAkR,GAEAA,EAAAA,GAAA,GAEA,IAAAnU,EAAArK,EAAAue,GACA,IAAAlU,EACA,KAAA,kEAEA,GAAA,iBAAAmU,EACA,KAAA,mDAEA,IAAAC,EAAA1d,EAAA2d,SAAArU,EAAAmU,GAGA,OADAxe,EAAAsN,GAAAmR,GASAhf,EAAAiP,KAAA,WACA,OAAAxM,OAAAC,KAAAnC,IAGAP,GG1nCAsB,EAAAqd,WAAA3P,IAAA,mBAAA,SAAAvN,GASA,GAPA5B,KAAA0W,cAAA,CACAvF,MAAA,UACA4B,QAAA,IAGAnR,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,gBAEAjH,MAAAC,QAAA9N,EAAAmR,SACA,KAAA,kFAiFA,OA7EAtR,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WAEAvN,KAAAqf,OAAA,WACA,IAAAC,EAAAtf,KAEAuf,EAAAvf,KAAAub,OAAAvb,KAAA4B,OAAAmR,QAAA,YAEAoK,EAAAnd,KAAAgD,IAAA4U,MACAnU,UAAA,sBAAA6b,EAAA1d,OAAAmM,MACAhF,KAAAwW,EAAA,SAAAle,GAAA,OAAAA,EAAAie,EAAA1d,OAAA+P,YAGAwL,EAAAqC,QACAvc,OAAA,QACAZ,KAAA,QAAA,iBAAArC,KAAA4B,OAAAmM,MACA1L,KAAA,KAAA,SAAAhB,GAAA,OAAAie,EAAApH,aAAA7W,KAEA8b,EACA9a,KAAA,IAAA,SAAAhB,GAAA,OAAAie,EAAAvU,OAAAuU,QAAAje,EAAAie,EAAA1d,OAAA2O,OAAAC,UACAnO,KAAA,QAAA,GACAA,KAAA,SAAAid,EAAAvU,OAAAnJ,OAAA0K,QACAjK,KAAA,OAAA,SAAAhB,GAAA,OAAAie,EAAAtG,yBAAAsG,EAAA1d,OAAAuP,MAAA9P,KAEA8b,EAAAsC,OAAA/S,SAGA1M,KAAAkd,eAAAC,IAIAnd,KAAAia,gBAAA,SAAA/X,GACA,GAAA,iBAAAA,EACA,KAAA,iDAEA,IAAAlC,KAAA8W,SAAA5U,GACA,KAAA,mEAEA,IAAAgK,EAAAE,EAAAsT,EAAAC,EAAAC,EACA/R,EAAA7N,KAAA8W,SAAA5U,GAIA8J,EAAAhM,KAAAiM,gBAEA4T,EAAAhS,EAAAnM,SAAAO,OAAA+K,wBACA8S,EAAA9f,KAAA+K,OAAAnJ,OAAA0K,QAAAtM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,IAAAlM,KAAA+K,OAAAnJ,OAAA6S,OAAAE,QACAoL,EAAA/f,KAAA+K,OAAAnJ,OAAAyK,OAAArM,KAAA+K,OAAAnJ,OAAA6S,OAAArI,KAAApM,KAAA+K,OAAAnJ,OAAA6S,OAAAC,OAEAsL,EAAAhgB,KAAA+K,OAAAkV,QAAApS,EAAA9E,KAAA/I,KAAA4B,OAAA2O,OAAAC,QACA0P,EAAAJ,EAAA,EAGAK,EAAA7b,KAAAG,IAAAob,EAAAxT,MAAA,EAAA2T,EAAA,GACAI,EAAA9b,KAAAG,IAAAob,EAAAxT,MAAA,EAAA2T,EAAAD,EAAA,GACA3T,EAAAJ,EAAAvG,EAAAua,EAAAH,EAAAxT,MAAA,EAAA+T,EAAAD,EACAP,EAAAC,EAAAxT,MAAA,EAhBA,EAgBA+T,EAAAD,EAdAE,GAeAR,EAAAvT,OAhBA,EADA,EAiBAwT,EAAAI,GACAhU,EAAAF,EAAAG,EAAA+T,GAAAL,EAAAvT,OAjBA,EADA,GAmBAoT,EAAA,OACAC,EAAAE,EAAAvT,OAnBA,IAqBAJ,EAAAF,EAAAG,EAAA+T,EArBA,EADA,EAuBAR,EAAA,KACAC,GAAA,GAGA9R,EAAAnM,SAAAwB,MAAA,OAAAkJ,EAAA,MAAAlJ,MAAA,MAAAgJ,EAAA,MAEA2B,EAAAkM,QACAlM,EAAAkM,MAAAlM,EAAAnM,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA2K,EAAAkM,MACA1X,KAAA,QAAA,+BAAAqd,GACAxc,MAAA,OAAA0c,EAAA,MACA1c,MAAA,MAAAyc,EAAA,OAGA3f,OC9FAyB,EAAAqd,WAAA3P,IAAA,SAAA,SAAAvN,GA2LA,OAxLA5B,KAAA0W,cAAA,CACAxF,WAAA,GACAL,YAAA,SACAM,MAAA,UACAwB,aAAA,EACAlC,OAAA,CACAC,KAAA,GAEAiB,SAAA,KACA2O,qBAAA,CACA/M,YAAA,WACAC,UAAA,UAEA+M,2BAAA,GAEA3e,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,eAGAjV,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WAGAvN,KAAAia,gBAAA,SAAA/X,GACA,GAAA,iBAAAA,EACA,KAAA,iDAEA,IAAAlC,KAAA8W,SAAA5U,GACA,KAAA,mEAEA,IAYAkK,EAAAsT,EAAAE,EAZA/R,EAAA7N,KAAA8W,SAAA5U,GACAgP,EAAAlR,KAAAgZ,yBAAAhZ,KAAA4B,OAAAsP,WAAArD,EAAA9E,MAIAiD,EAAAhM,KAAAiM,gBACA+T,EAAAhgB,KAAA+K,OAAAkV,QAAApS,EAAA9E,KAAA/I,KAAA4B,OAAA2O,OAAAC,QACAgQ,EAAA,IAAAxgB,KAAA4B,OAAA6O,OAAAC,KAAA,SACAwP,EAAAlgB,KAAA+K,OAAAyV,GAAA3S,EAAA9E,KAAA/I,KAAA4B,OAAA6O,OAAAD,QACAqP,EAAAhS,EAAAnM,SAAAO,OAAA+K,wBAEAnH,EAAAvB,KAAAmc,KAAAvP,EAAA5M,KAAAoc,IAEAV,GAAAhgB,KAAA+K,OAAAnJ,OAAAyK,MAAA,GACAD,EAAAJ,EAAAvG,EAAAua,EAAAna,EAZA,EACA,EAYA6Z,EAAA,OACAE,GAAA,IAEAxT,EAAAJ,EAAAvG,EAAAua,EAAAH,EAAAxT,MAAAxG,EAhBA,EACA,EAgBA6Z,EAAA,QACAE,EAAAC,EAAAxT,MAjBA,GAoBA,IACAH,EAAAyT,EADAG,EAAA9f,KAAA+K,OAAAnJ,OAAA0K,QAAAtM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,IAAAlM,KAAA+K,OAAAnJ,OAAA6S,OAAAE,QAEAuL,EAAAL,EAAAvT,OAAA,GAAA,GACAJ,EAAAF,EAAAG,EAAA+T,EAAA,KAtBA,EAuBAP,EAvBA,GAwBAO,EAAAL,EAAAvT,OAAA,GAAAwT,GACA5T,EAAAF,EAAAG,EAAA+T,EA3BA,EAEA,EAyBAL,EAAAvT,OACAqT,EAAAE,EAAAvT,OAAA,GA1BA,IA4BAJ,EAAAF,EAAAG,EAAA+T,EAAAL,EAAAvT,OAAA,EACAqT,EAAAE,EAAAvT,OAAA,EA/BA,GAkCAuB,EAAAnM,SAAAwB,MAAA,OAAAkJ,EAAA,MAAAlJ,MAAA,MAAAgJ,EAAA,MAEA2B,EAAAkM,QACAlM,EAAAkM,MAAAlM,EAAAnM,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA2K,EAAAkM,MACA1X,KAAA,QAAA,+BAAAqd,GACAxc,MAAA,OAAA0c,EAAA,MACA1c,MAAA,MAAAyc,EAAA,OAIA3f,KAAAqf,OAAA,WAEA,IAAAY,EAAA,UACAO,EAAA,IAAAxgB,KAAA4B,OAAA6O,OAAAC,KAAA,SAGA,GAAA1Q,KAAA4B,OAAA0e,uBACA,IAAAtgB,KAAA4B,OAAAuO,OAAAnJ,QAAAhH,KAAA4B,OAAA0e,qBAAA/M,eACA,IAAAvT,KAAA4B,OAAAuO,OAAAnJ,QAAAhH,KAAA4B,OAAA0e,qBAAA9M,WAAA,CAEA,IAAAmN,EAAA3gB,KAAAgD,IAAA4U,MACAnU,UAAA,qDACAsF,KAAA/I,KAAA+I,KAAA,SAAA1H,GAAA,OAAAA,EAAArB,KAAA4B,OAAA+P,WAAA9F,KAAA7L,OAEA2gB,EAAAnB,QACAvc,OAAA,QACAZ,KAAA,QAAA,gDACAA,KAAA,KAAA,SAAAhB,GAAA,OAAArB,KAAAkY,aAAA7W,GAAA,OAAAwK,KAAA7L,OACAqC,KAAA,YAAA,gBAAA+B,MAAApE,KAAA+K,OAAAnJ,OAAA0K,QAAA,EAAAtM,KAAA+K,OAAAnJ,OAAA0K,QAAA,KAEA,IAAAsU,EAAA,SAAAvf,GACA,IAAAoE,EAAAzF,KAAA+K,OAAAkV,GAAA5e,EAAArB,KAAA4B,OAAA0e,qBAAA/M,cACApH,EAAAnM,KAAA+K,OAAAyV,GAAAnf,EAAArB,KAAA4B,OAAA6O,OAAAD,QAGA,OAFApM,MAAAqB,KAAAA,GAAA,KACArB,MAAA+H,KAAAA,GAAA,KACA,aAAA1G,EAAA,IAAA0G,EAAA,KACAN,KAAA7L,MACA6gB,EAAA,SAAAxf,GACA,OAAArB,KAAA+K,OAAAkV,GAAA5e,EAAArB,KAAA4B,OAAA0e,qBAAA9M,YACAxT,KAAA+K,OAAAkV,GAAA5e,EAAArB,KAAA4B,OAAA0e,qBAAA/M,eACA1H,KAAA7L,MAEAA,KAAA6X,gBACA8I,EACA7I,aACAgJ,SAAA9gB,KAAA4B,OAAAkW,WAAAgJ,UAAA,GACAC,KAAA/gB,KAAA4B,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,YAAAue,GACAve,KAAA,QAAAwe,GAAAxe,KAAA,SAPA,GASAse,EACAte,KAAA,YAAAue,GACAve,KAAA,QAAAwe,GAAAxe,KAAA,SAXA,GAcAse,EAAAlB,OAAA/S,SAIA,IAAAsU,EAAAhhB,KAAAgD,IAAA4U,MACAnU,UAAA,wDACAsF,KAAA/I,KAAA+I,KAAA,SAAA1H,GAAA,OAAAA,EAAArB,KAAA4B,OAAA+P,WAAA9F,KAAA7L,OAGAihB,EAAA7c,MAAApE,KAAA+K,OAAAnJ,OAAA0K,QAAA,EAAAtM,KAAA+K,OAAAnJ,OAAA0K,OACA0U,EAAAxB,QACAvc,OAAA,QACAZ,KAAA,QAAA,mDACAA,KAAA,KAAA,SAAAhB,GAAA,OAAArB,KAAAkY,aAAA7W,GAAA,UAAAwK,KAAA7L,OACAqC,KAAA,YAAA,eAAA4e,EAAA,KAGA,IAAAnL,EAAA,SAAAzU,GACA,IAAAoE,EAAAzF,KAAA+K,OAAAkV,GAAA5e,EAAArB,KAAA4B,OAAA2O,OAAAC,QACArE,EAAAnM,KAAA+K,OAAAyV,GAAAnf,EAAArB,KAAA4B,OAAA6O,OAAAD,QAGA,OAFApM,MAAAqB,KAAAA,GAAA,KACArB,MAAA+H,KAAAA,GAAA,KACA,aAAA1G,EAAA,IAAA0G,EAAA,KACAN,KAAA7L,MAEAmT,EAAA,SAAA9R,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAAuP,MAAA9P,IAAAwK,KAAA7L,MACA2S,EAAA,SAAAtR,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAA+Q,aAAAtR,IAAAwK,KAAA7L,MAEAuR,EAAAtR,EAAA+C,IAAAke,SACA1P,KAAA,SAAAnQ,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAAsP,WAAA7P,IAAAwK,KAAA7L,OACA+N,KAAA,SAAA1M,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAAiP,YAAAxP,IAAAwK,KAAA7L,OAGAA,KAAA6X,gBACAmJ,EACAlJ,aACAgJ,SAAA9gB,KAAA4B,OAAAkW,WAAAgJ,UAAA,GACAC,KAAA/gB,KAAA4B,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,YAAAyT,GACAzT,KAAA,OAAA8Q,GACA9Q,KAAA,eAAAsQ,GACAtQ,KAAA,IAAAkP,GAEAyP,EACA3e,KAAA,YAAAyT,GACAzT,KAAA,OAAA8Q,GACA9Q,KAAA,eAAAsQ,GACAtQ,KAAA,IAAAkP,GAIAyP,EAAAvB,OAAA/S,SAGAsU,EAAArV,GAAA,sBAAA,SAAAwV,GACAnhB,KAAA+K,OAAAiS,KAAA,kBAAAmE,GAAA,IACAtV,KAAA7L,OAGAA,KAAAkd,eAAA8D,IAIAhhB,OAWAyB,EAAAqd,WAAAE,OAAA,SAAA,kBAAA,CACApF,SAAA,SAAAP,EAAAQ,GACA,IAAA,IAAA,CAAA,IAAA,KAAA,MAAA7S,QAAAqS,GACA,KAAA,+BAAAA,EAMA,GAAAA,IAAA,IADArZ,KAAA4B,OAAA6O,OAAAC,KACA,CACA,IAAA6B,EAAAvS,KAAA4B,OAAA6O,OAAA8B,eACA,IAAAA,EACA,KAAA,cAAAvS,KAAA4B,OAAAM,GAAA,+BAGA,OAAAlC,KAAA+I,KAAAwB,IAAA,SAAA6W,EAAAjY,GACA,MAAA,CACAgD,EAAAhD,EAAA,EACAC,KAAAgY,EAAA7O,MAIA,MAAA,IAIAmG,uBAAA,WAGA,IAAA2I,EAAArhB,KAAA4B,OAAA6O,OAAAD,MACA,IAAA6Q,EACA,KAAA,cAAArhB,KAAA4B,OAAAM,GAAA,4BAUA,OAPAlC,KAAA+I,KAAA/I,KAAA+I,KAAAwB,IAAA,SAAA6W,EAAAjY,GAEA,OADAiY,EAAAC,GAAAlY,EAAA,EACAiY,IAGAphB,KAAA4B,OAAA6O,OAAA9L,MAAA,EACA3E,KAAA4B,OAAA6O,OAAAE,QAAA3Q,KAAA+I,KAAAzF,OAAA,EACAtD,QClPAyB,EAAAqd,WAAA3P,IAAA,QAAA,SAAAvN,GAgfA,OA1eA5B,KAAA0W,cAAA,CAEArG,OAAA,mBACAc,MAAA,UACAmQ,gBAAA,GACAC,mBAAA,EACAC,YAAA,GACAC,qBAAA,EACAC,uBAAA,IAEA9f,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,eAGAjV,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WAOAvN,KAAAoY,uBAAA,SAAA1J,GACA,OAAA1O,KAAAkY,aAAAxJ,GAAA,eAOA1O,KAAA2hB,eAAA,WACA,OAAA,EAAA3hB,KAAA4B,OAAA6f,qBACAzhB,KAAA4B,OAAA0f,gBACAthB,KAAA4B,OAAA2f,mBACAvhB,KAAA4B,OAAA4f,YACAxhB,KAAA4B,OAAA8f,wBASA1hB,KAAA4hB,eAAA,EAQA5hB,KAAA6hB,OAAA,EAMA7hB,KAAA8hB,iBAAA,CAAAC,EAAA,IAOA/hB,KAAAgiB,aAAA,WA8HA,OAtHAhiB,KAAAiiB,cAAA,SAAAC,EAAAC,GACA,IACA,IAAAC,EAAApiB,KAAAgD,IAAA4U,MAAA3U,OAAA,QACAZ,KAAA,IAAA,GAAAA,KAAA,IAAA,GAAAA,KAAA,QAAA,gCACAa,MAAA,YAAAif,GACA/Y,KAAA8Y,EAAA,KACAG,EAAAD,EAAAngB,OAAAqgB,UAAAjW,MAEA,OADA+V,EAAA1V,SACA2V,EACA,MAAAjE,GACA,OAAA,IAKApe,KAAA6hB,OAAA,EACA7hB,KAAA8hB,iBAAA,CAAAC,EAAA,IAEA/hB,KAAA+I,KAAAwB,IAAA,SAAAlJ,EAAAkhB,GAIA,GAAAviB,KAAA+I,KAAAwZ,GAAAC,SAAAxiB,KAAA+I,KAAAwZ,GAAAC,QAAAxb,QAAA,KAAA,CACA,IAAA/F,EAAAjB,KAAA+I,KAAAwZ,GAAAC,QAAAvhB,MAAA,KACAjB,KAAA+I,KAAAwZ,GAAAC,QAAAvhB,EAAA,GACAjB,KAAA+I,KAAAwZ,GAAAE,aAAAxhB,EAAA,GAgBA,GAZAjB,KAAA+I,KAAAwZ,GAAAG,cAAA1iB,KAAA+I,KAAAwZ,GAAAI,YAAA3iB,KAAA4hB,gBAAAc,cAIA1iB,KAAA+I,KAAAwZ,GAAAK,cAAA,CACA7c,MAAA/F,KAAA+K,OAAAkV,QAAA3b,KAAAG,IAAApD,EAAA0E,MAAA/F,KAAA+C,MAAAgD,QACAC,IAAAhG,KAAA+K,OAAAkV,QAAA3b,KAAAE,IAAAnD,EAAA2E,IAAAhG,KAAA+C,MAAAiD,OAEAhG,KAAA+I,KAAAwZ,GAAAK,cAAAP,YAAAriB,KAAAiiB,cAAAjiB,KAAA+I,KAAAwZ,GAAAL,UAAAliB,KAAA4B,OAAA0f,iBACAthB,KAAA+I,KAAAwZ,GAAAK,cAAAvW,MAAArM,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IAAAhG,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MAEA/F,KAAA+I,KAAAwZ,GAAAK,cAAAC,YAAA,SACA7iB,KAAA+I,KAAAwZ,GAAAK,cAAAvW,MAAArM,KAAA+I,KAAAwZ,GAAAK,cAAAP,YAAA,CACA,GAAAhhB,EAAA0E,MAAA/F,KAAA+C,MAAAgD,MACA/F,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IAAAhG,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MACA/F,KAAA+I,KAAAwZ,GAAAK,cAAAP,YACAriB,KAAA4B,OAAA0f,gBACAthB,KAAA+I,KAAAwZ,GAAAK,cAAAC,YAAA,aACA,GAAAxhB,EAAA2E,IAAAhG,KAAA+C,MAAAiD,IACAhG,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MAAA/F,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IACAhG,KAAA+I,KAAAwZ,GAAAK,cAAAP,YACAriB,KAAA4B,OAAA0f,gBACAthB,KAAA+I,KAAAwZ,GAAAK,cAAAC,YAAA,UACA,CACA,IAAAC,GAAA9iB,KAAA+I,KAAAwZ,GAAAK,cAAAP,YAAAriB,KAAA+I,KAAAwZ,GAAAK,cAAAvW,OAAA,EACArM,KAAA4B,OAAA0f,gBACAthB,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MAAA+c,EAAA9iB,KAAA+K,OAAAkV,QAAAjgB,KAAA+C,MAAAgD,QACA/F,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MAAA/F,KAAA+K,OAAAkV,QAAAjgB,KAAA+C,MAAAgD,OACA/F,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IAAAhG,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MAAA/F,KAAA+I,KAAAwZ,GAAAK,cAAAP,YACAriB,KAAA+I,KAAAwZ,GAAAK,cAAAC,YAAA,SACA7iB,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IAAA8c,EAAA9iB,KAAA+K,OAAAkV,QAAAjgB,KAAA+C,MAAAiD,MACAhG,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IAAAhG,KAAA+K,OAAAkV,QAAAjgB,KAAA+C,MAAAiD,KACAhG,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MAAA/F,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IAAAhG,KAAA+I,KAAAwZ,GAAAK,cAAAP,YACAriB,KAAA+I,KAAAwZ,GAAAK,cAAAC,YAAA,QAEA7iB,KAAA+I,KAAAwZ,GAAAK,cAAA7c,OAAA+c,EACA9iB,KAAA+I,KAAAwZ,GAAAK,cAAA5c,KAAA8c,GAGA9iB,KAAA+I,KAAAwZ,GAAAK,cAAAvW,MAAArM,KAAA+I,KAAAwZ,GAAAK,cAAA5c,IAAAhG,KAAA+I,KAAAwZ,GAAAK,cAAA7c,MAGA/F,KAAA+I,KAAAwZ,GAAAK,cAAA7c,OAAA/F,KAAA4B,OAAA6f,qBACAzhB,KAAA+I,KAAAwZ,GAAAK,cAAA5c,KAAAhG,KAAA4B,OAAA6f,qBACAzhB,KAAA+I,KAAAwZ,GAAAK,cAAAvW,OAAA,EAAArM,KAAA4B,OAAA6f,qBAGAzhB,KAAA+I,KAAAwZ,GAAAQ,eAAA,CACAhd,MAAA/F,KAAA+K,OAAAkV,QAAA+C,OAAAhjB,KAAA+I,KAAAwZ,GAAAK,cAAA7c,OACAC,IAAAhG,KAAA+K,OAAAkV,QAAA+C,OAAAhjB,KAAA+I,KAAAwZ,GAAAK,cAAA5c,MAEAhG,KAAA+I,KAAAwZ,GAAAQ,eAAA1W,MAAArM,KAAA+I,KAAAwZ,GAAAQ,eAAA/c,IAAAhG,KAAA+I,KAAAwZ,GAAAQ,eAAAhd,MAGA/F,KAAA+I,KAAAwZ,GAAAU,MAAA,KAEA,IADA,IAAAC,EAAA,EACA,OAAAljB,KAAA+I,KAAAwZ,GAAAU,OAAA,CACA,IAAAE,GAAA,EACAnjB,KAAA8hB,iBAAAoB,GAAA3Y,IAAA,SAAA6Y,GACA,IAAAD,EAAA,CACA,IAAAE,EAAA/e,KAAAE,IAAA4e,EAAAR,cAAA7c,MAAA/F,KAAA4iB,cAAA7c,OACAzB,KAAAG,IAAA2e,EAAAR,cAAA5c,IAAAhG,KAAA4iB,cAAA5c,KACAqd,EAAAD,EAAAR,cAAAvW,MAAArM,KAAA4iB,cAAAvW,QACA8W,GAAA,KAGAtX,KAAA7L,KAAA+I,KAAAwZ,KACAY,IAIAD,EACAljB,KAAA6hB,SACA7hB,KAAA6hB,OAAAqB,EACAljB,KAAA8hB,iBAAAoB,GAAA,KANAljB,KAAA+I,KAAAwZ,GAAAU,MAAAC,EACAljB,KAAA8hB,iBAAAoB,GAAAnc,KAAA/G,KAAA+I,KAAAwZ,MAWAviB,KAAA+I,KAAAwZ,GAAAxX,OAAA/K,MACA+I,KAAAwZ,GAAAI,YAAApY,IAAA,SAAAlJ,EAAAiiB,GACAtjB,KAAA+I,KAAAwZ,GAAAI,YAAAW,GAAAvY,OAAA/K,KAAA+I,KAAAwZ,GACAviB,KAAA+I,KAAAwZ,GAAAI,YAAAW,GAAAC,MAAAhZ,IAAA,SAAAlJ,EAAA+c,GACApe,KAAA+I,KAAAwZ,GAAAI,YAAAW,GAAAC,MAAAnF,GAAArT,OAAA/K,KAAA+I,KAAAwZ,GAAAI,YAAAW,IACAzX,KAAA7L,QACA6L,KAAA7L,QAEA6L,KAAA7L,OACAA,MAMAA,KAAAqf,OAAA,WAEA,IAGAhT,EAAAC,EAAA7G,EAAA0G,EAHAmT,EAAAtf,KACAA,KAAAgiB,eAKA,IAAA7E,EAAAnd,KAAAgD,IAAA4U,MAAAnU,UAAA,yBACAsF,KAAA/I,KAAA+I,KAAA,SAAA1H,GAAA,OAAAA,EAAA6gB,YAEA/E,EAAAqC,QAAAvc,OAAA,KACAZ,KAAA,QAAA,uBAEA8a,EAAA9a,KAAA,KAAA,SAAAhB,GAAA,OAAArB,KAAAkY,aAAA7W,IAAAwK,KAAA7L,OACA0D,KAAA,SAAA0P,GAEA,IAAAvI,EAAAuI,EAAArI,OAGAyY,EAAAvjB,EAAA6B,OAAA9B,MAAAyD,UAAA,2DACAsF,KAAA,CAAAqK,GAAA,SAAA/R,GAAA,OAAAwJ,EAAAuN,uBAAA/W,KAEAmiB,EAAAhE,QAAAvc,OAAA,QACAZ,KAAA,QAAA,sDAEAmhB,EACAnhB,KAAA,KAAA,SAAAhB,GACA,OAAAwJ,EAAAuN,uBAAA/W,KAEAgB,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAEApf,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAGApV,EAAA,SAAAhL,GACA,OAAAA,EAAAuhB,cAAAvW,OAEAC,EAAA,WACA,OAAAzB,EAAA8W,iBAAA9W,EAAAjJ,OAAA8f,wBAEAjc,EAAA,SAAApE,GACA,OAAAA,EAAAuhB,cAAA7c,OAEAoG,EAAA,SAAA9K,GACA,OAAAA,EAAA4hB,MAAA,GAAApY,EAAA8W,kBAEA9W,EAAAgN,gBACA2L,EACA1L,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEAqX,EACAnhB,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAGAqX,EAAA/D,OAAA/S,SAGA,IAEA+W,EAAAxjB,EAAA6B,OAAA9B,MAAAyD,UAAA,wCACAsF,KAAA,CAAAqK,GAAA,SAAA/R,GAAA,OAAAA,EAAA6gB,UAAA,cACAhf,MAAA,CAAAiQ,KAJA,SAAA9R,GAAA,OAAAie,EAAAtG,yBAAAsG,EAAA1d,OAAAuP,MAAA9P,IAIAgP,OAHA,SAAAhP,GAAA,OAAAie,EAAAtG,yBAAAsG,EAAA1d,OAAAyO,OAAAhP,MAKAoiB,EAAAjE,QAAAvc,OAAA,QACAZ,KAAA,QAAA,mCAEAgK,EAAA,SAAAhL,GACA,OAAAwJ,EAAAE,OAAAkV,QAAA5e,EAAA2E,KAAA6E,EAAAE,OAAAkV,QAAA5e,EAAA0E,QAEAuG,EAAA,WACA,OAAA,GAEA7G,EAAA,SAAApE,GACA,OAAAwJ,EAAAE,OAAAkV,QAAA5e,EAAA0E,QAEAoG,EAAA,SAAA9K,GACA,OAAAA,EAAA4hB,MAAA,GAAApY,EAAA8W,iBACA9W,EAAAjJ,OAAA6f,qBACA5W,EAAAjJ,OAAA0f,gBACAzW,EAAAjJ,OAAA2f,mBACAjd,KAAAG,IAAAoG,EAAAjJ,OAAA4f,YAAA,GAAA,GAEA3W,EAAAgN,gBACA4L,EACA3L,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEAsX,EACAphB,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAGAsX,EAAAhE,OAAA/S,SAGA,IAAAgX,EAAAzjB,EAAA6B,OAAA9B,MAAAyD,UAAA,qCACAsF,KAAA,CAAAqK,GAAA,SAAA/R,GAAA,OAAAA,EAAA6gB,UAAA,WAEAwB,EAAAlE,QAAAvc,OAAA,QACAZ,KAAA,QAAA,gCAEAqhB,EACArhB,KAAA,cAAA,SAAAhB,GACA,OAAAA,EAAAuhB,cAAAC,cAEAzZ,KAAA,SAAA/H,GACA,MAAA,MAAAA,EAAAsiB,OAAAtiB,EAAA6gB,UAAA,IAAA,IAAA7gB,EAAA6gB,YAEAhf,MAAA,YAAAkQ,EAAArI,OAAAnJ,OAAA0f,iBAEA7b,EAAA,SAAApE,GACA,MAAA,WAAAA,EAAAuhB,cAAAC,YACAxhB,EAAAuhB,cAAA7c,MAAA1E,EAAAuhB,cAAAvW,MAAA,EACA,UAAAhL,EAAAuhB,cAAAC,YACAxhB,EAAAuhB,cAAA7c,MAAA8E,EAAAjJ,OAAA6f,qBACA,QAAApgB,EAAAuhB,cAAAC,YACAxhB,EAAAuhB,cAAA5c,IAAA6E,EAAAjJ,OAAA6f,0BADA,GAIAtV,EAAA,SAAA9K,GACA,OAAAA,EAAA4hB,MAAA,GAAApY,EAAA8W,iBACA9W,EAAAjJ,OAAA6f,qBACA5W,EAAAjJ,OAAA0f,iBAEAzW,EAAAgN,gBACA6L,EACA5L,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEAuX,EACArhB,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAGAuX,EAAAjE,OAAA/S,SAIA,IAGA6W,EAAAtjB,EAAA6B,OAAA9B,MAAAyD,UAAA,oCACAsF,KAAAqK,EAAAuP,YAAAvP,EAAArI,OAAA6W,gBAAA2B,MAAA,SAAAliB,GAAA,OAAAA,EAAAuiB,UAEAL,EAAA/D,QAAAvc,OAAA,QACAZ,KAAA,QAAA,+BAEAkhB,EACArgB,MAAA,CAAAiQ,KAVA,SAAA9R,GAAA,OAAAie,EAAAtG,yBAAAsG,EAAA1d,OAAAuP,MAAA9P,EAAA0J,OAAAA,SAUAsF,OATA,SAAAhP,GAAA,OAAAie,EAAAtG,yBAAAsG,EAAA1d,OAAAyO,OAAAhP,EAAA0J,OAAAA,WAWAsB,EAAA,SAAAhL,GACA,OAAAwJ,EAAAE,OAAAkV,QAAA5e,EAAA2E,KAAA6E,EAAAE,OAAAkV,QAAA5e,EAAA0E,QAEAuG,EAAA,WACA,OAAAzB,EAAAjJ,OAAA4f,aAEA/b,EAAA,SAAApE,GACA,OAAAwJ,EAAAE,OAAAkV,QAAA5e,EAAA0E,QAEAoG,EAAA,WACA,OAAAiH,EAAA6P,MAAA,GAAApY,EAAA8W,iBACA9W,EAAAjJ,OAAA6f,qBACA5W,EAAAjJ,OAAA0f,gBACAzW,EAAAjJ,OAAA2f,oBAEA1W,EAAAgN,gBACA0L,EACAzL,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEAoX,EACAlhB,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAGAoX,EAAA9D,OAAA/S,SAGA,IAAAmX,EAAA5jB,EAAA6B,OAAA9B,MAAAyD,UAAA,yCACAsF,KAAA,CAAAqK,GAAA,SAAA/R,GAAA,OAAAA,EAAA6gB,UAAA,eAEA2B,EAAArE,QAAAvc,OAAA,QACAZ,KAAA,QAAA,oCAEAwhB,EACAxhB,KAAA,KAAA,SAAAhB,GACA,OAAAwJ,EAAAqN,aAAA7W,GAAA,eAEAgB,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAEApf,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAGApV,EAAA,SAAAhL,GACA,OAAAA,EAAAuhB,cAAAvW,OAEAC,EAAA,WACA,OAAAzB,EAAA8W,iBAAA9W,EAAAjJ,OAAA8f,wBAEAjc,EAAA,SAAApE,GACA,OAAAA,EAAAuhB,cAAA7c,OAEAoG,EAAA,SAAA9K,GACA,OAAAA,EAAA4hB,MAAA,GAAApY,EAAA8W,kBAEA9W,EAAAgN,gBACAgM,EACA/L,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEA0X,EACAxhB,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAIA0X,EAAApE,OAAA/S,SAGAmX,EAAAlY,GAAA,sBAAA,SAAA+C,GACAA,EAAA3D,OAAAA,OAAAiS,KAAA,kBAAAtO,GAAA,KAIA7D,EAAAqS,eAAA2G,KAKA1G,EAAAsC,OAAA/S,UAQA1M,KAAAia,gBAAA,SAAA/X,GACA,GAAA,iBAAAA,EACA,KAAA,iDAEA,IAAAlC,KAAA8W,SAAA5U,GACA,KAAA,mEAEA,IAiBAgK,EAAAwT,EAAAC,EAjBA9R,EAAA7N,KAAA8W,SAAA5U,GAGA8J,EAAAhM,KAAAiM,gBACA4T,EAAAhS,EAAAnM,SAAAO,OAAA+K,wBACA8W,EAAA9jB,KAAAoY,uBAAAvK,EAAA9E,MACAgb,EAAA9jB,EAAA6B,OAAA,IAAAgiB,GAAA7hB,OAAAqgB,UACAxC,EAAA9f,KAAA+K,OAAAnJ,OAAA0K,QAAAtM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,IAAAlM,KAAA+K,OAAAnJ,OAAA6S,OAAAE,QACAoL,EAAA/f,KAAA+K,OAAAnJ,OAAAyK,OAAArM,KAAA+K,OAAAnJ,OAAA6S,OAAArI,KAAApM,KAAA+K,OAAAnJ,OAAA6S,OAAAC,OAGAsP,GAAAnW,EAAA9E,KAAA6Z,cAAA7c,MAAA8H,EAAA9E,KAAA6Z,cAAA5c,KAAA,EAAAhG,KAAA4B,OAAA6f,qBAAA,EACAtB,EAAA7b,KAAAG,IAAAob,EAAAxT,MAAA,EAAA2X,EAAA,GACA5D,EAAA9b,KAAAG,IAAAob,EAAAxT,MAAA,EAAA2X,EAAAjE,EAAA,GACA3T,EAAAJ,EAAAvG,EAAAue,EAAAnE,EAAAxT,MAAA,EAAA+T,EAAAD,EACAP,EAAAC,EAAAxT,MAAA,EAAA4X,IAAA7D,EAAAD,EAGAN,EAAAvT,OAhBA,EADA,EAiBAwT,GAAAiE,EAAA5X,EAAA4X,EAAAzX,SACAJ,EAAAF,EAAAG,EAAA4X,EAAA5X,GAAA0T,EAAAvT,OAjBA,EADA,GAmBAoT,EAAA,OACAC,EAAAE,EAAAvT,OAnBA,IAqBAJ,EAAAF,EAAAG,EAAA4X,EAAA5X,EAAA4X,EAAAzX,OArBA,EADA,EAuBAoT,EAAA,KACAC,GAAA,GAGA9R,EAAAnM,SAAAwB,MAAA,OAAAkJ,EAAA,MAAAlJ,MAAA,MAAAgJ,EAAA,MAEA2B,EAAAkM,QACAlM,EAAAkM,MAAAlM,EAAAnM,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA2K,EAAAkM,MACA1X,KAAA,QAAA,+BAAAqd,GACAxc,MAAA,OAAA0c,EAAA,MACA1c,MAAA,MAAAyc,EAAA,OAGA3f,OChfAyB,EAAAqd,WAAA3P,IAAA,gBAAA,SAAAvN,GAyFA,OAtFA5B,KAAA0W,cAAA,CACAwN,uBAAA,CACAC,MAAA,qBACAC,KAAA,oBAEAC,wBAAA,CACAF,MAAA,qBACAC,KAAA,kBAGAxiB,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,eAGAjV,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WAGAvN,KAAAqf,OAAA,WAGA,IAAApZ,EAAA,EACAjG,KAAA+I,KAAA3H,QAAA,SAAAC,EAAAC,GACAtB,KAAA+I,KAAAzH,GAAAgjB,aAAAre,EACAjG,KAAA+I,KAAAzH,GAAAijB,WAAAte,EAAA5E,EAAA,qBACA4E,GAAA5E,EAAA,sBACAwK,KAAA7L,OAEA,IAAAwkB,EAAAxkB,KAAAgD,IAAA4U,MACAnU,UAAA,oCACAsF,KAAA/I,KAAA+I,KAAA,SAAA1H,GAAA,OAAAA,EAAA,gBAGAmjB,EAAAhF,QACAvc,OAAA,QACAZ,KAAA,QAAA,+BAGA,IAAAwI,EAAA7K,KACAgL,EAAAhL,KAAA+K,OAEAyZ,EACAniB,KAAA,OAAA,SAAAhB,GAAA,OAAAA,EAAA,cAAA,EAAAwJ,EAAAjJ,OAAAsiB,uBAAAC,MAAAtZ,EAAAjJ,OAAAsiB,uBAAAE,OACA/hB,KAAA,IAAA,SAAAhB,GAAA,OAAA2J,EAAAiV,QAAA5e,EAAAijB,gBACAjiB,KAAA,IAAA,GACAA,KAAA,QAAA,SAAAhB,GAAA,OAAA2J,EAAAiV,QAAA5e,EAAA,wBACAgB,KAAA,SAAA2I,EAAApJ,OAAA6c,SAAAnS,QAGAkY,EAAA/E,OAAA/S,SAIA,IAAA+X,EAAA,wBAAAnf,KAAAtF,KAAA+C,MAAA2hB,SACA,IAAAD,EACA,KAAA,iEAEA,IAAA3e,EAAA2e,EAAA,GACA5e,EAAA4e,EAAA,GAEAxe,GAAAjG,KAAA+I,KAAAjD,EAAA,GAAAwe,eAAAze,EAGA,IAAApD,EAAAzC,KAAAgD,IAAA4U,MACAnU,UAAA,2CACAsF,KAAA,CAAA,CAAAhD,MAAAE,EAAAD,IAAAC,EAAA,KAEAxD,EAAA+c,QACAvc,OAAA,QACAZ,KAAA,QAAA,sCAEAI,EACAqV,aACAgJ,SAAA,KACA5d,MAAA,CACAiQ,KAAA,0BACA9C,OAAA,0BACAC,eAAA,QAEAjO,KAAA,IAAA,SAAAhB,GAAA,OAAA2J,EAAAiV,QAAA5e,EAAA0E,SACA1D,KAAA,IAAA,GACAA,KAAA,QAAA,SAAAhB,GAAA,OAAA2J,EAAAiV,QAAA5e,EAAA2E,IAAA3E,EAAA0E,SACA1D,KAAA,SAAA2I,EAAApJ,OAAA6c,SAAAnS,QAEA7J,EAAAgd,OAAA/S,UAIA1M,OCzFAyB,EAAAqd,WAAA3P,IAAA,YAAA,SAAAvN,GAwbA,OArbA5B,KAAA0W,cAAA,CACAnD,YAAA,QACAC,UAAA,MACAC,kBAAA,WACAkR,kBAAA,OACAC,6BAAA,EACAlR,cAAA,EACAmR,aAAA,GACAnD,uBAAA,EACAD,qBAAA,EACA9N,oBAAA,EACAxC,MAAA,UACAwB,aAAA,GAEA/Q,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,eAGAjV,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WAQAvN,KAAAoY,uBAAA,SAAA1J,GACA,OAAA1O,KAAA4B,OAAA8R,cACA1T,KAAA0X,YAAA,eAAAhJ,EAAA1O,KAAA4B,OAAA6R,oBAAArO,QAAA,YAAA,KAEApF,KAAAkY,aAAAxJ,GAAA,eACA7C,KAAA7L,MAGAA,KAAA2hB,eAAA,WACA,OAAA3hB,KAAA4B,OAAAijB,aACA7kB,KAAA4B,OAAA8f,uBACA,EAAA1hB,KAAA4B,OAAA6f,sBAGAzhB,KAAA6hB,OAAA,EACA7hB,KAAA8kB,gBAAA,EAGA9kB,KAAA+kB,qBAAA,CAAAhD,EAAA,IAIA/hB,KAAAgiB,aAAA,WAUA,GAPAhiB,KAAA8kB,gBAAA9kB,KAAA6hB,OACA7hB,KAAA6hB,OAAA,EACA7hB,KAAA+kB,qBAAA,CAAAhD,EAAA,IACA/hB,KAAAglB,wBAAA,GAIAhlB,KAAA4B,OAAA6R,mBAAAzT,KAAA4B,OAAA8R,aAAA,CACA1T,KAAA+I,KAAAwB,IAAA,SAAAlJ,GACArB,KAAAglB,wBAAA3jB,EAAArB,KAAA4B,OAAA6R,oBAAA,MACA5H,KAAA7L,OACA,IAAAmJ,EAAAvG,OAAAC,KAAA7C,KAAAglB,yBACA,SAAAhlB,KAAA4B,OAAA+iB,mBAAAxb,EAAA8b,UACA9b,EAAA/H,QAAA,SAAA8D,GACAlF,KAAAglB,wBAAA9f,GAAAlF,KAAA6hB,OAAA,EACA7hB,KAAA+kB,qBAAA/kB,KAAA6hB,OAAA,GAAA,GACA7hB,KAAA6hB,UACAhW,KAAA7L,OAiEA,OA9DAA,KAAA+I,KAAAwB,IAAA,SAAAlJ,EAAAC,GAwBA,IArBAtB,KAAA+I,KAAAzH,GAAAyJ,OAAA/K,MAIA+I,KAAAzH,GAAAshB,cAAA,CACA7c,MAAA/F,KAAA+K,OAAAkV,QAAA3b,KAAAG,IAAApD,EAAArB,KAAA4B,OAAA2R,aAAAvT,KAAA+C,MAAAgD,QACAC,IAAAhG,KAAA+K,OAAAkV,QAAA3b,KAAAE,IAAAnD,EAAArB,KAAA4B,OAAA4R,WAAAxT,KAAA+C,MAAAiD,OAEAhG,KAAA+I,KAAAzH,GAAAshB,cAAAvW,MAAArM,KAAA+I,KAAAzH,GAAAshB,cAAA5c,IAAAhG,KAAA+I,KAAAzH,GAAAshB,cAAA7c,MAIA/F,KAAA+I,KAAAzH,GAAAyhB,eAAA,CACAhd,MAAA/F,KAAA+K,OAAAkV,QAAA+C,OAAAhjB,KAAA+I,KAAAzH,GAAAshB,cAAA7c,OACAC,IAAAhG,KAAA+K,OAAAkV,QAAA+C,OAAAhjB,KAAA+I,KAAAzH,GAAAshB,cAAA5c,MAEAhG,KAAA+I,KAAAzH,GAAAyhB,eAAA1W,MAAArM,KAAA+I,KAAAzH,GAAAyhB,eAAA/c,IAAAhG,KAAA+I,KAAAzH,GAAAyhB,eAAAhd,MAKA/F,KAAA4B,OAAA6R,mBAAAzT,KAAA4B,OAAA8R,aAAA,CACA,IAAAxO,EAAAlF,KAAA+I,KAAAzH,GAAAtB,KAAA4B,OAAA6R,mBACAzT,KAAA+I,KAAAzH,GAAA2hB,MAAAjjB,KAAAglB,wBAAA9f,GACAlF,KAAA+kB,qBAAA/kB,KAAA+I,KAAAzH,GAAA2hB,OAAAlc,KAAAzF,OACA,CAIAtB,KAAA6hB,OAAA,EACA7hB,KAAA+I,KAAAzH,GAAA2hB,MAAA,KAEA,IADA,IAAAC,EAAA,EACA,OAAAljB,KAAA+I,KAAAzH,GAAA2hB,OAAA,CACA,IAAAE,GAAA,EACAnjB,KAAA+kB,qBAAA7B,GAAA3Y,IAAA,SAAA2a,GACA,IAAA/B,EAAA,CACA,IAAAE,EAAA/e,KAAAE,IAAA0gB,EAAAtC,cAAA7c,MAAA/F,KAAA4iB,cAAA7c,OACAzB,KAAAG,IAAAygB,EAAAtC,cAAA5c,IAAAhG,KAAA4iB,cAAA5c,KACAqd,EAAA6B,EAAAtC,cAAAvW,MAAArM,KAAA4iB,cAAAvW,QACA8W,GAAA,KAGAtX,KAAA7L,KAAA+I,KAAAzH,KACA6hB,IAIAD,EACAljB,KAAA6hB,SACA7hB,KAAA6hB,OAAAqB,EACAljB,KAAA+kB,qBAAA7B,GAAA,KANAljB,KAAA+I,KAAAzH,GAAA2hB,MAAAC,EACAljB,KAAA+kB,qBAAA7B,GAAAnc,KAAA/G,KAAA+I,KAAAzH,QAYAuK,KAAA7L,OAEAA,MAIAA,KAAAqf,OAAA,WAyBA,IAAAhT,EAAAC,EAAA7G,EAAA0G,EAAAgH,EAAAR,EAvBA3S,KAAAgiB,eAKAhiB,KAAAgD,IAAA4U,MAAAnU,UAAA,sEAAAiJ,SACA9J,OAAAC,KAAA7C,KAAAglB,yBAAA5jB,QAAA,SAAA0B,GAEA,IAAAqiB,EAAA,GACAA,EAAAnlB,KAAA4B,OAAA6R,mBAAA3Q,EAEA,IAAAsiB,EAAA,CAAAC,QAAArlB,KAAA4B,OAAA8R,aAAA,KAAA,QACA1T,KAAAgD,IAAA4U,MAAAlM,OAAA,OAAA,gBACArJ,KAAA,KAAArC,KAAAoY,uBAAA+M,IACA9iB,KAAA,QAAA,6FACAA,KAAA,KAAArC,KAAA4B,OAAA6f,sBAAApf,KAAA,KAAArC,KAAA4B,OAAA6f,sBACApf,KAAA,QAAArC,KAAA+K,OAAAnJ,OAAA6c,SAAApS,OACAhK,KAAA,SAAArC,KAAA2hB,iBAAA3hB,KAAA4B,OAAA8f,wBACArf,KAAA,IAAA,GACAA,KAAA,KAAArC,KAAAglB,wBAAAliB,GAAA,GAAA9C,KAAA2hB,kBACAze,MAAAkiB,IACAvZ,KAAA7L,OAKA,IAAAmd,EAAAnd,KAAAgD,IAAA4U,MAAAnU,UAAA,6BACAsF,KAAA/I,KAAA+I,KAAA,SAAA1H,GAAA,OAAAA,EAAArB,KAAA4B,OAAA+P,WAAA9F,KAAA7L,OA+JA,OA7JAmd,EAAAqC,QAAAvc,OAAA,KACAZ,KAAA,QAAA,2BAEA8a,EAAA9a,KAAA,KAAA,SAAAhB,GAAA,OAAArB,KAAAkY,aAAA7W,IAAAwK,KAAA7L,OACA0D,KAAA,SAAA4hB,GAEA,IAAAza,EAAAya,EAAAva,OAIAwa,EAAA,CAAAF,QAAAxa,EAAAjJ,OAAA8R,aAAA,OAAA,MACA8R,EAAAvlB,EAAA6B,OAAA9B,MAAAyD,UAAA,+GACAsF,KAAA,CAAAuc,GAAA,SAAAjkB,GAAA,OAAAwJ,EAAAqN,aAAA7W,GAAA,gBACAmkB,EAAAhG,QAAA9T,OAAA,OAAA,gBACArJ,KAAA,QAAA,0GACAmjB,EACAnjB,KAAA,KAAA,SAAAhB,GACA,OAAAwJ,EAAAqN,aAAA7W,GAAA,gBAEAgB,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAEApf,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAEAve,MAAAqiB,GACAlZ,EAAA,SAAAhL,GACA,OAAAA,EAAAuhB,cAAAvW,MAAA,EAAAxB,EAAAjJ,OAAA6f,sBAEAnV,EAAA,WACA,OAAAzB,EAAA8W,iBAAA9W,EAAAjJ,OAAA8f,wBAEAjc,EAAA,SAAApE,GACA,OAAAA,EAAAuhB,cAAA7c,MAAA8E,EAAAjJ,OAAA6f,sBAEAtV,EAAA,SAAA9K,GACA,OAAAA,EAAA4hB,MAAA,GAAApY,EAAA8W,kBAEA9W,EAAAgN,gBACA2N,EACA1N,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEAqZ,EACAnjB,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEAqZ,EAAA/F,OAAA/S,SAGA,IAAA+Y,EAAAxlB,EAAA6B,OAAA9B,MAAAyD,UAAA,iDACAsF,KAAA,CAAAuc,GAAA,SAAAjkB,GAAA,OAAAA,EAAAwJ,EAAAjJ,OAAA+P,UAAA,mBAEA8T,EAAAjG,QAAAvc,OAAA,QACAZ,KAAA,QAAA,4CAEAiK,EAAAzB,EAAAjJ,OAAAijB,aACAxY,EAAA,SAAAhL,GACA,OAAAA,EAAAuhB,cAAAvW,OAEA5G,EAAA,SAAApE,GACA,OAAAA,EAAAuhB,cAAA7c,OAEAoG,EAAA,SAAA9K,GACA,OAAAA,EAAA4hB,MAAA,GAAApY,EAAA8W,iBACA9W,EAAAjJ,OAAA6f,sBAEAtO,EAAA,SAAA9R,GACA,OAAAwJ,EAAAmO,yBAAAnO,EAAAjJ,OAAAuP,MAAA9P,IAEAsR,EAAA,SAAAtR,GACA,OAAAwJ,EAAAmO,yBAAAnO,EAAAjJ,OAAA+Q,aAAAtR,IAIAwJ,EAAAgN,gBACA4N,EACA3N,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GACAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GACA9J,KAAA,OAAA8Q,GACA9Q,KAAA,eAAAsQ,GAEA8S,EACApjB,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GACAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GACA9J,KAAA,OAAA8Q,GACA9Q,KAAA,eAAAsQ,GAGA8S,EAAAhG,OAAA/S,SAGA,IAAAmX,EAAA5jB,EAAA6B,OAAA9B,MAAAyD,UAAA,6CACAsF,KAAA,CAAAuc,GAAA,SAAAjkB,GAAA,OAAAA,EAAAqkB,cAAA,eAEA7B,EAAArE,QAAAvc,OAAA,QACAZ,KAAA,QAAA,wCAEAwhB,EACAxhB,KAAA,KAAA,SAAAhB,GACA,OAAAwJ,EAAAqN,aAAA7W,GAAA,eAEAgB,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAEApf,KAAA,KAAA,WACA,OAAAwI,EAAAjJ,OAAA6f,uBAGApV,EAAA,SAAAhL,GACA,OAAAA,EAAAuhB,cAAAvW,OAEAC,EAAA,WACA,OAAAzB,EAAA8W,iBAAA9W,EAAAjJ,OAAA8f,wBAEAjc,EAAA,SAAApE,GACA,OAAAA,EAAAuhB,cAAA7c,OAEAoG,EAAA,SAAA9K,GACA,OAAAA,EAAA4hB,MAAA,GAAApY,EAAA8W,kBAEA9W,EAAAgN,gBACAgM,EACA/L,aACAgJ,SAAAjW,EAAAjJ,OAAAkW,WAAAgJ,UAAA,GACAC,KAAAlW,EAAAjJ,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAEA0X,EACAxhB,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GAAAjK,KAAA,IAAAoD,GAAApD,KAAA,IAAA8J,GAIA0X,EAAApE,OAAA/S,SAGAmX,EAAAlY,GAAA,QAAA,SAAAwV,GACAA,EAAApW,OAAAA,OAAAiS,KAAA,kBAAAmE,GAAA,IACAtV,KAAA7L,OAGA6K,EAAAqS,eAAA2G,KAKA1G,EAAAsC,OAAA/S,SAGA1M,KAAA8kB,kBAAA9kB,KAAA6hB,QACA7hB,KAAA2lB,uBAGA3lB,MAKAA,KAAAia,gBAAA,SAAA/X,GACA,GAAA,iBAAAA,EACA,KAAA,iDAEA,IAAAlC,KAAA8W,SAAA5U,GACA,KAAA,mEAEA,IAgBAgK,EAAAwT,EAAAC,EAhBA9R,EAAA7N,KAAA8W,SAAA5U,GAGA8J,EAAAhM,KAAAiM,gBACA4T,EAAAhS,EAAAnM,SAAAO,OAAA+K,wBACA4Y,EAAA3lB,EAAA6B,OAAA,IAAA9B,KAAAoY,uBAAAvK,EAAA9E,OAAA9G,OAAAqgB,UACAxC,EAAA9f,KAAA+K,OAAAnJ,OAAA0K,QAAAtM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,IAAAlM,KAAA+K,OAAAnJ,OAAA6S,OAAAE,QACAoL,EAAA/f,KAAA+K,OAAAnJ,OAAAyK,OAAArM,KAAA+K,OAAAnJ,OAAA6S,OAAArI,KAAApM,KAAA+K,OAAAnJ,OAAA6S,OAAAC,OAGAmR,GAAAhY,EAAA9E,KAAA6Z,cAAA7c,MAAA8H,EAAA9E,KAAA6Z,cAAA5c,KAAA,EAAAhG,KAAA4B,OAAA6f,qBAAA,EACAtB,EAAA7b,KAAAG,IAAAob,EAAAxT,MAAA,EAAAwZ,EAAA,GACAzF,EAAA9b,KAAAG,IAAAob,EAAAxT,MAAA,EAAAwZ,EAAA9F,EAAA,GACA3T,EAAAJ,EAAAvG,EAAAogB,EAAAhG,EAAAxT,MAAA,EAAA+T,EAAAD,EACAP,EAAAC,EAAAxT,MAAA,EAAA4X,IAAA7D,EAAAD,EAGAN,EAAAvT,OAfA,EADA,EAgBAwT,GAAA8F,EAAAzZ,EAAAyZ,EAAAtZ,SACAJ,EAAAF,EAAAG,EAAAyZ,EAAAzZ,GAAA0T,EAAAvT,OAhBA,EADA,GAkBAoT,EAAA,OACAC,EAAAE,EAAAvT,OAlBA,IAoBAJ,EAAAF,EAAAG,EAAAyZ,EAAAzZ,EAAAyZ,EAAAtZ,OApBA,EADA,EAsBAoT,EAAA,KACAC,GAAA,GAGA9R,EAAAnM,SAAAwB,MAAA,OAAAkJ,EAAA,MAAAlJ,MAAA,MAAAgJ,EAAA,MAEA2B,EAAAkM,QACAlM,EAAAkM,MAAAlM,EAAAnM,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA2K,EAAAkM,MACA1X,KAAA,QAAA,+BAAAqd,GACAxc,MAAA,OAAA0c,EAAA,MACA1c,MAAA,MAAAyc,EAAA,OAKA3f,KAAA2lB,qBAAA,WACA,IAAAG,IAAA9lB,KAAA4B,OAAAgjB,8BAAA,IAAA5kB,KAAA4B,OAAAgjB,6BACA,GAAA5kB,KAAA4B,OAAA8R,aAAA,CACA,IAAAmO,GAAA7hB,KAAA6hB,QAAA,EACAgD,GAAA7kB,KAAA4B,OAAAijB,cAAA,EACAkB,EAAA,IAAA/lB,KAAA4B,OAAA6f,sBAAA,KAAAzhB,KAAA4B,OAAA8f,wBAAA,GACAsE,EAAAnE,EAAAgD,GAAAhD,EAAA,GAAAkE,EACA/lB,KAAA+K,OAAAkb,kBAAAD,GACAF,GAAA9lB,KAAA+K,OAAAuG,SACAtR,KAAA+K,OAAAuG,OAAA1F,OACA5L,KAAA+K,OAAAnJ,OAAAiT,KAAAiR,GAAA,CACAzG,QAAA,EACAxY,MAAA,GACAX,MAAA,CACAH,MAAAigB,EAAAhmB,KAAA4B,OAAAijB,aAAA,EACA7e,IAAAhG,KAAA4B,OAAAijB,aAAA,IAGA7kB,KAAA4B,OAAA0P,OAAAlQ,QAAA,SAAAsN,GACA,IAAA5L,EAAA4L,EAAA1O,KAAA4B,OAAA6R,mBACAwP,EAAAjjB,KAAAglB,wBAAAliB,GACAmgB,IACA,SAAAjjB,KAAA4B,OAAA+iB,oBACA1B,EAAA3e,KAAAiC,IAAA0c,EAAApB,EAAA,IAEA7hB,KAAA+K,OAAAnJ,OAAAiT,KAAAiR,GAAAjf,MAAAE,KAAA,CACAoF,EAAA8W,EACA7Z,KAAAsF,EAAA+C,UAGA5F,KAAA7L,OACAA,KAAA4B,OAAA6O,OAAA,CACAC,KAAA1Q,KAAA4B,OAAAgjB,6BACAjgB,MAAA,EACAgM,QAAAkR,GAEA7hB,KAAA+K,OAAAsU,UAEArf,KAAAyL,YAAArI,sBAEA0iB,GAAA9lB,KAAA+K,OAAAuG,SACAtR,KAAA4B,OAAA+R,oBAAA3T,KAAA+K,OAAAuG,OAAAjG,OACArL,KAAA+K,OAAAnJ,OAAAiT,KAAAiR,GAAA,CAAAzG,QAAA,GACArf,KAAA+K,OAAAsU,UAGA,OAAArf,MAKAA,KAAAkmB,kBAAA,WAOA,OANAlmB,KAAA4B,OAAA8R,cAAA1T,KAAA4B,OAAA8R,aACA1T,KAAA+K,OAAAuG,SAAAtR,KAAA4B,OAAA+R,qBACA3T,KAAA+K,OAAAnJ,OAAA6S,OAAAE,OAAA,GAAA3U,KAAA4B,OAAA8R,aAAA,EAAA1T,KAAA+K,OAAAuG,OAAA1P,OAAA0K,OAAA,IAEAtM,KAAAqf,SACArf,KAAA2lB,uBACA3lB,MAGAA,OCxbAyB,EAAAqd,WAAA3P,IAAA,OAAA,SAAAvN,GA4RA,OAxRA5B,KAAA0W,cAAA,CACAxT,MAAA,CACAiQ,KAAA,OACA7C,eAAA,OAEA6V,YAAA,SACA5V,OAAA,CAAAC,MAAA,KACAC,OAAA,CAAAD,MAAA,IAAAE,KAAA,GACA0V,cAAA,GAEAxkB,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,eAIA1W,KAAAqmB,YAAA,KAMArmB,KAAAsmB,KAAA,KAMAtmB,KAAAumB,gBAAA,KAGA9kB,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WASAvN,KAAAwmB,uBAAA,WACA,IAAAzhB,EAAA,CACAsgB,QAAA,CACA5f,EAAAxF,EAAAwmB,MAAAzmB,KAAAqmB,aAAA,GACAla,EAAA,MAEApD,KAAA,GACA2d,MAAA,MAEAC,EAAA3mB,KAAA4B,OAAA2O,OAAAC,MACAoW,EAAA5mB,KAAA4B,OAAA6O,OAAAD,MACAyP,EAAA,UACAO,EAAA,IAAAxgB,KAAA4B,OAAA6O,OAAAC,KAAA,SACA3L,EAAAgE,KAAA4d,GAAA3mB,KAAA+K,OAAAkV,GAAA+C,OAAAje,EAAAsgB,QAAA5f,GACA,IACA0D,GAAA0d,EADA5mB,EAAA6mB,SAAA,SAAAC,GAAA,OAAAA,EAAAJ,KAAAva,MACApM,KAAA+I,KAAAhE,EAAAgE,KAAA4d,IAAA,EACAK,EAAAhnB,KAAA+I,KAAAI,GACA8d,EAAAjnB,KAAA+I,KAAAI,EAAA,GACAgd,EAAAlmB,EAAAinB,mBAAAF,EAAAJ,IAAAK,EAAAL,IACA1gB,GAAA+gB,EAAAN,IAAAK,EAAAL,GAWA,OAVA5hB,EAAAgE,KAAA6d,GAAAT,EAAAphB,EAAAgE,KAAA4d,GAAAzgB,EAAAA,GACAnB,EAAAsgB,QAAAlZ,EAAAnM,KAAA+K,OAAAyV,GAAAzb,EAAAgE,KAAA6d,IACA5mB,KAAA4B,OAAAiM,QAAAsZ,cACApiB,EAAAgE,KAAA4d,GAAA5hB,EAAAgE,KAAA4d,GAAAS,YAAApnB,KAAA4B,OAAAiM,QAAAsZ,cAEAnnB,KAAA4B,OAAAiM,QAAAwZ,cACAtiB,EAAAgE,KAAA6d,GAAA7hB,EAAAgE,KAAA6d,GAAAQ,YAAApnB,KAAA4B,OAAAiM,QAAAwZ,cAEAtiB,EAAA2hB,OAAA1mB,KAAA+K,OAAAyV,GAAAyG,EAAAL,IAAA5mB,KAAA+K,OAAAyV,GAAAwG,EAAAJ,MACA5mB,KAAA+K,OAAAkV,GAAAgH,EAAAN,IAAA3mB,KAAA+K,OAAAkV,GAAA+G,EAAAL,KACA5hB,GAOA/E,KAAAia,gBAAA,SAAA/X,GACA,GAAA,iBAAAA,EACA,KAAA,iDAEA,IAAAlC,KAAA8W,SAAA5U,GACA,KAAA,mEAEA,IAQAgK,EAAAE,EAAAuT,EAAAC,EAAAF,EARA7R,EAAA7N,KAAA8W,SAAA5U,GACA2d,EAAAhS,EAAAnM,SAAAO,OAAA+K,wBAGAqT,EAAAvZ,WAAA9G,KAAA4B,OAAAsB,MAAA,kBAAA,EACA8I,EAAAhM,KAAAiM,gBACA6T,EAAA9f,KAAA+K,OAAAnJ,OAAA0K,QAAAtM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,IAAAlM,KAAA+K,OAAAnJ,OAAA6S,OAAAE,QACAoL,EAAA/f,KAAA+K,OAAAnJ,OAAAyK,OAAArM,KAAA+K,OAAAnJ,OAAA6S,OAAArI,KAAApM,KAAA+K,OAAAnJ,OAAA6S,OAAAC,OAIA4S,EAAAtnB,KAAAwmB,yBAIA,GAAA,EAAAliB,KAAAiC,IAAA+gB,EAAAZ,OAGAY,EAAAjC,QAAA5f,GAAAzF,KAAA+K,OAAAnJ,OAAAyK,MAAA,GACAD,EAAAJ,EAAAvG,EAAA6hB,EAAAjC,QAAA5f,EAAA4a,EAjBA,EAiBAA,EACAX,EAAA,OACAE,GAAA,GAnBA,EAmBAS,KAEAjU,EAAAJ,EAAAvG,EAAA6hB,EAAAjC,QAAA5f,EAAAoa,EAAAxT,MAAAgU,EArBA,EAqBAA,EACAX,EAAA,QACAE,EAAAC,EAAAxT,MAAAgU,GAGAiH,EAAAjC,QAAAlZ,EAAA0T,EAAAvT,OAAA,GAAA,GACAJ,EAAAF,EAAAG,EAAAmb,EAAAjC,QAAAlZ,EAAA,KA1BA,EA2BAwT,EA3BA,GA4BA2H,EAAAjC,QAAAlZ,EAAA0T,EAAAvT,OAAA,GAAAwT,GACA5T,EAAAF,EAAAG,EAAAmb,EAAAjC,QAAAlZ,EA9BA,EACA,EA6BA0T,EAAAvT,OACAqT,EAAAE,EAAAvT,OAAA,GA9BA,IAgCAJ,EAAAF,EAAAG,EAAAmb,EAAAjC,QAAAlZ,EAAA0T,EAAAvT,OAAA,EACAqT,EAAAE,EAAAvT,OAAA,EAlCA,OAqCA,CAIA,IAAA6T,EAAA7b,KAAAG,IAAAob,EAAAxT,MAAA,EAAAib,EAAAjC,QAAA5f,EAAA,GACA2a,EAAA9b,KAAAG,IAAAob,EAAAxT,MAAA,EAAAib,EAAAjC,QAAA5f,EAAAsa,EAAA,GACA3T,EAAAJ,EAAAvG,EAAA6hB,EAAAjC,QAAA5f,EAAAoa,EAAAxT,MAAA,EAAA+T,EAAAD,EACA,IACAoH,EAAA1H,EAAAxT,MAAA,KACAuT,EAAAC,EAAAxT,MAAA,EA9CA,EA8CA+T,EAAAD,EACAP,EAAAtb,KAAAE,IAAAF,KAAAG,IAAAmb,EAHAqE,KAGAsD,GAGA1H,EAAAvT,OAAA+T,EAlDA,EAkDAiH,EAAAjC,QAAAlZ,GACAD,EAAAF,EAAAG,EAAAmb,EAAAjC,QAAAlZ,EAAAkU,EAnDA,EAoDAX,EAAA,KACAC,EAAA,EAAAU,EArDA,IAuDAnU,EAAAF,EAAAG,EAAAmb,EAAAjC,QAAAlZ,GAAA0T,EAAAvT,OAAA+T,EAvDA,GAwDAX,EAAA,OACAC,EAAAE,EAAAvT,OAAA+T,GAKAxS,EAAAnM,SAAAwB,MAAA,CAAAkJ,KAAAA,EAAA,KAAAF,IAAAA,EAAA,OAEA2B,EAAAkM,QACAlM,EAAAkM,MAAAlM,EAAAnM,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA2K,EAAAkM,MACA1X,KAAA,QAAA,+BAAAqd,GACAxc,MAAA,CAAAkJ,KAAAwT,EAAA,KAAA1T,IAAAyT,EAAA,QAOA3f,KAAAqf,OAAA,WAGA,IAAAxU,EAAA7K,KACAgL,EAAAhL,KAAA+K,OACA4b,EAAA3mB,KAAA4B,OAAA2O,OAAAC,MACAoW,EAAA5mB,KAAA4B,OAAA6O,OAAAD,MACAyP,EAAA,UACAO,EAAA,IAAAxgB,KAAA4B,OAAA6O,OAAAC,KAAA,SAGAyM,EAAAnd,KAAAgD,IAAA4U,MACAnU,UAAA,2BACAsF,KAAA,CAAA/I,KAAA+I,OA4BA,GAzBA/I,KAAAwnB,KAAArK,EAAAqC,QACAvc,OAAA,QACAZ,KAAA,QAAA,sBAGArC,KAAAsmB,KAAArmB,EAAA+C,IAAAsjB,OACA7gB,EAAA,SAAApE,GAAA,OAAAyF,WAAAkE,EAAAiV,GAAA5e,EAAAslB,OACAxa,EAAA,SAAA9K,GAAA,OAAAyF,WAAAkE,EAAAwV,GAAAnf,EAAAulB,OACAT,YAAAnmB,KAAA4B,OAAAukB,aAGAnmB,KAAA6X,gBACAsF,EACArF,aACAgJ,SAAA9gB,KAAA4B,OAAAkW,WAAAgJ,UAAA,GACAC,KAAA/gB,KAAA4B,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,IAAArC,KAAAsmB,MACApjB,MAAAlD,KAAA4B,OAAAsB,OAEAia,EACA9a,KAAA,IAAArC,KAAAsmB,MACApjB,MAAAlD,KAAA4B,OAAAsB,OAIAlD,KAAA4B,OAAAiM,QAAA,CAEA,IAAAuY,EAAAtf,WAAA9G,KAAA4B,OAAAwkB,eAAA5X,WAAA,KACAiZ,EAAAznB,KAAAgD,IAAA4U,MACAnU,UAAA,mCACAsF,KAAA,CAAA/I,KAAA+I,OACA0e,EAAAjI,QACAvc,OAAA,QACAZ,KAAA,QAAA,8BACAa,MAAA,eAAAkjB,GACA,IAAAsB,EAAAznB,EAAA+C,IAAAsjB,OACA7gB,EAAA,SAAApE,GAAA,OAAAyF,WAAAkE,EAAAiV,GAAA5e,EAAAslB,OACAxa,EAAA,SAAA9K,GAAA,OAAAyF,WAAAkE,EAAAwV,GAAAnf,EAAAulB,OACAT,YAAAnmB,KAAA4B,OAAAukB,aACAsB,EACAplB,KAAA,IAAAqlB,GACA/b,GAAA,YAAA,WACAI,aAAAlB,EAAA0b,iBACA1b,EAAAwb,YAAArmB,KACA,IAAAsnB,EAAAzc,EAAA2b,yBACA3b,EAAAiP,cAAAwN,EAAAve,QAEA4C,GAAA,YAAA,WACAI,aAAAlB,EAAA0b,iBACA1b,EAAAwb,YAAArmB,KACA,IAAAsnB,EAAAzc,EAAA2b,yBACA3b,EAAAmP,cAAAsN,EAAAve,MACA8B,EAAAoP,gBAAApP,EAAAqN,kBAEAvM,GAAA,WAAA,WACAd,EAAA0b,gBAAApe,WAAA,WACA0C,EAAAwb,YAAA,KACAxb,EAAAsP,eAAAtP,EAAAqN,iBACA,OAEAuP,EAAAhI,OAAA/S,SAIAyQ,EAAAsC,OAAA/S,UAWA1M,KAAAwc,iBAAA,SAAAxU,EAAA0G,EAAAiO,GACA,OAAA3c,KAAA0c,oBAAA1U,EAAA2U,IAEA3c,KAAAyc,0BAAA,SAAAzU,EAAA2U,GACA,OAAA3c,KAAA0c,oBAAA1U,EAAA2U,IAEA3c,KAAA0c,oBAAA,SAAA1U,EAAA2U,GAEA,QAAA,IAAA3U,IAAA,IAAAvG,EAAA6U,UAAAgB,SAAAC,WAAAvQ,QAAAgB,GACA,KAAA,2DAEA,QAAA,IAAAhI,KAAA+C,MAAA/C,KAAA4W,UAAA5O,GAAA,OAAAhI,UACA,IAAA2c,IAAAA,GAAA,GAGA3c,KAAA+W,gBAAA/O,GAAA2U,EAGA,IAAAgL,EAAA,qBAQA,OAPA/kB,OAAAC,KAAA7C,KAAA+W,iBAAA3V,QAAA,SAAAwmB,GACA5nB,KAAA+W,gBAAA6Q,KAAAD,GAAA,uBAAAC,IACA/b,KAAA7L,OACAA,KAAAwnB,KAAAnlB,KAAA,QAAAslB,GAGA3nB,KAAA+K,OAAAiS,KAAA,kBAAA,GACAhd,MAGAA,OAYAyB,EAAAqd,WAAA3P,IAAA,kBAAA,SAAAvN,GAwGA,OArGA5B,KAAA0W,cAAA,CACAxT,MAAA,CACAmN,OAAA,UACAC,eAAA,MACAwC,mBAAA,aAEA7C,YAAA,aACAM,OAAA,CACAG,KAAA,EACAmX,WAAA,GAEApX,OAAA,CACAC,KAAA,EACAmX,WAAA,GAEAhiB,OAAA,GAEAjE,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,gBAGA,IAAA,CAAA,aAAA,YAAA1P,QAAApF,EAAAqO,eACArO,EAAAqO,YAAA,cAKAjQ,KAAA+I,KAAA,GAEA/I,KAAAsmB,KAAA,KAGA7kB,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WAKAvN,KAAAqf,OAAA,WAGA,IAAArU,EAAAhL,KAAA+K,OAEAyV,EAAA,IAAAxgB,KAAA4B,OAAA6O,OAAAC,KAAA,SACAoX,EAAA,WACAC,EAAA,IAAA/nB,KAAA4B,OAAA6O,OAAAC,KAAA,UAEAsX,EAAA,IAAAhoB,KAAA4B,OAAA6O,OAAAC,KAAA,SAGA,eAAA1Q,KAAA4B,OAAAqO,YACAjQ,KAAA+I,KAAA,CACA,CAAAtD,EAAAuF,EAAA8c,GAAA,GAAA3b,EAAAnM,KAAA4B,OAAAiE,QACA,CAAAJ,EAAAuF,EAAA8c,GAAA,GAAA3b,EAAAnM,KAAA4B,OAAAiE,SAGA7F,KAAA+I,KAAA,CACA,CAAAtD,EAAAzF,KAAA4B,OAAAiE,OAAAsG,EAAAnB,EAAA+c,GAAA,IACA,CAAAtiB,EAAAzF,KAAA4B,OAAAiE,OAAAsG,EAAAnB,EAAA+c,GAAA,KAKA,IAAA5K,EAAAnd,KAAAgD,IAAA4U,MACAnU,UAAA,2BACAsF,KAAA,CAAA/I,KAAA+I,OAGA/I,KAAAwnB,KAAArK,EAAAqC,QACAvc,OAAA,QACAZ,KAAA,QAAA,sBAGArC,KAAAsmB,KAAArmB,EAAA+C,IAAAsjB,OACA7gB,EAAA,SAAApE,EAAAC,GACA,IAAAmE,EAAAqB,WAAAkE,EAAAA,QAAA3J,EAAAA,IACA,OAAA+C,MAAAqB,GAAAuF,EAAAA,QAAA1J,GAAAmE,IAEA0G,EAAA,SAAA9K,EAAAC,GACA,IAAA6K,EAAArF,WAAAkE,EAAAwV,GAAAnf,EAAAA,IACA,OAAA+C,MAAA+H,GAAAnB,EAAAgd,GAAA1mB,GAAA6K,IAEAga,YAAA,UAGAnmB,KAAA6X,gBACAsF,EACArF,aACAgJ,SAAA9gB,KAAA4B,OAAAkW,WAAAgJ,UAAA,GACAC,KAAA/gB,KAAA4B,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,IAAArC,KAAAsmB,MACApjB,MAAAlD,KAAA4B,OAAAsB,OAEAia,EACA9a,KAAA,IAAArC,KAAAsmB,MACApjB,MAAAlD,KAAA4B,OAAAsB,OAIAia,EAAAsC,OAAA/S,UAIA1M,OCjZAyB,EAAAqd,WAAA3P,IAAA,UAAA,SAAAvN,GAycA,OAvcA5B,KAAA0W,cAAA,CACAxF,WAAA,GACAL,YAAA,SACAyB,oBAAA,aACAnB,MAAA,UACAwB,aAAA,EACAlC,OAAA,CACAC,KAAA,GAEAiB,SAAA,OAEA/P,EAAAH,EAAAkM,QAAAO,MAAAtM,EAAA5B,KAAA0W,gBAIAjF,OAAArN,MAAAxC,EAAA6P,MAAAmB,WACAhR,EAAA6P,MAAAmB,QAAA,GAIAnR,EAAA6U,UAAAhJ,MAAAtN,KAAAuN,WAGAvN,KAAAia,gBAAA,SAAA/X,GACA,GAAA,iBAAAA,EACA,KAAA,iDAEA,IAAAlC,KAAA8W,SAAA5U,GACA,KAAA,mEAEA,IAAAgK,EAAAE,EAAAsT,EAAAC,EAAAC,EACA/R,EAAA7N,KAAA8W,SAAA5U,GACAgP,EAAAlR,KAAAgZ,yBAAAhZ,KAAA4B,OAAAsP,WAAArD,EAAA9E,MACAlD,EAAAvB,KAAAmc,KAAAvP,EAAA5M,KAAAoc,IAIA1U,EAAAhM,KAAAiM,gBACA+T,EAAAhgB,KAAA+K,OAAAkV,QAAApS,EAAA9E,KAAA/I,KAAA4B,OAAA2O,OAAAC,QACAgQ,EAAA,IAAAxgB,KAAA4B,OAAA6O,OAAAC,KAAA,SACAwP,EAAAlgB,KAAA+K,OAAAyV,GAAA3S,EAAA9E,KAAA/I,KAAA4B,OAAA6O,OAAAD,QACAqP,EAAAhS,EAAAnM,SAAAO,OAAA+K,wBACA8S,EAAA9f,KAAA+K,OAAAnJ,OAAA0K,QAAAtM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,IAAAlM,KAAA+K,OAAAnJ,OAAA6S,OAAAE,QACAoL,EAAA/f,KAAA+K,OAAAnJ,OAAAyK,OAAArM,KAAA+K,OAAAnJ,OAAA6S,OAAArI,KAAApM,KAAA+K,OAAAnJ,OAAA6S,OAAAC,OACA,GAAA,aAAA1U,KAAA4B,OAAA0Q,oBAAA,CAEA,IAAA6N,EAAA7b,KAAAG,IAAAob,EAAAxT,MAAA,EAAA2T,EAAA,GACAI,EAAA9b,KAAAG,IAAAob,EAAAxT,MAAA,EAAA2T,EAAAD,EAAA,GACA3T,EAAAJ,EAAAvG,EAAAua,EAAAH,EAAAxT,MAAA,EAAA+T,EAAAD,EACAP,EAAAC,EAAAxT,MAAA,EAAA4X,IAAA7D,EAAAD,EAAAta,EAEAga,EAAAvT,OAhBA,EADA,EAiBAwT,GAAAI,EAAAra,IACAqG,EAAAF,EAAAG,EAAA+T,GAAAra,EAAAga,EAAAvT,OAjBA,EADA,GAmBAoT,EAAA,OACAC,EAAAE,EAAAvT,OAnBA,IAqBAJ,EAAAF,EAAAG,EAAA+T,EAAAra,EArBA,EADA,EAuBA6Z,EAAA,KACAC,GAAA,QAIAK,GAAAhgB,KAAA+K,OAAAnJ,OAAAyK,MAAA,GACAD,EAAAJ,EAAAvG,EAAAua,EAAAna,EA7BA,EACA,EA6BA6Z,EAAA,OACAE,GAAA,IAEAxT,EAAAJ,EAAAvG,EAAAua,EAAAH,EAAAxT,MAAAxG,EAjCA,EACA,EAiCA6Z,EAAA,QACAE,EAAAC,EAAAxT,MAlCA,GAqCAyT,EAAA9f,KAAA+K,OAAAnJ,OAAA0K,QAAAtM,KAAA+K,OAAAnJ,OAAA6S,OAAAvI,IAAAlM,KAAA+K,OAAAnJ,OAAA6S,OAAAE,QACAuL,EAAAL,EAAAvT,OAAA,GAAA,GACAJ,EAAAF,EAAAG,EAAA+T,EAAA,KAtCA,EAuCAP,EAvCA,GAwCAO,EAAAL,EAAAvT,OAAA,GAAAwT,GACA5T,EAAAF,EAAAG,EAAA+T,EA3CA,EAEA,EAyCAL,EAAAvT,OACAqT,EAAAE,EAAAvT,OAAA,GA1CA,IA4CAJ,EAAAF,EAAAG,EAAA+T,EAAAL,EAAAvT,OAAA,EACAqT,EAAAE,EAAAvT,OAAA,EA/CA,GAmDAuB,EAAAnM,SAAAwB,MAAA,OAAAkJ,EAAA,MAAAlJ,MAAA,MAAAgJ,EAAA,MAEA2B,EAAAkM,QACAlM,EAAAkM,MAAAlM,EAAAnM,SAAAuB,OAAA,OAAAC,MAAA,WAAA,aAEA2K,EAAAkM,MACA1X,KAAA,QAAA,+BAAAqd,GACAxc,MAAA,OAAA0c,EAAA,MACA1c,MAAA,MAAAyc,EAAA,OAMA3f,KAAAioB,YAAA,WACA,IAAApd,EAAA7K,KACAkR,EAAArG,EAAAmO,yBAAAnO,EAAAjJ,OAAAsP,WAAA,IACA0B,EAAA/H,EAAAjJ,OAAA6P,MAAAmB,QACAsV,EAAAC,QAAAtd,EAAAjJ,OAAA6P,MAAAoB,OACAuV,EAAA,EAAAxV,EACAyV,EAAAxd,EAAAE,OAAAnJ,OAAAyK,MAAAxB,EAAAE,OAAAnJ,OAAA6S,OAAArI,KAAAvB,EAAAE,OAAAnJ,OAAA6S,OAAAC,MAAA,EAAA9B,EACA0V,EAAA,SAAAC,EAAAC,GACA,IAAAC,GAAAF,EAAAlmB,KAAA,KACAqmB,EAAA,EAAA9V,EAAA,EAAAtO,KAAAmc,KAAAvP,GACA,GAAAgX,EACA,IAAAS,GAAAH,EAAAnmB,KAAA,MACAumB,EAAAhW,EAAA,EAAAtO,KAAAmc,KAAAvP,GAEA,UAAAqX,EAAArlB,MAAA,gBACAqlB,EAAArlB,MAAA,cAAA,OACAqlB,EAAAlmB,KAAA,IAAAomB,EAAAC,GACAR,GAAAM,EAAAnmB,KAAA,KAAAsmB,EAAAC,KAEAL,EAAArlB,MAAA,cAAA,SACAqlB,EAAAlmB,KAAA,IAAAomB,EAAAC,GACAR,GAAAM,EAAAnmB,KAAA,KAAAsmB,EAAAC,KAKA/d,EAAAge,YAAAnlB,KAAA,SAAArC,EAAAC,GACA,IACAwnB,EAAA7oB,EAAA6B,OADA9B,MAIA,IAFA8oB,EAAAzmB,KAAA,KACAymB,EAAA7mB,OAAA+K,wBACAX,MAAAuG,EAAAyV,EAAA,CACA,IAAAU,EAAAb,EAAAjoB,EAAA6B,OAAA+I,EAAAme,YAAA,GAAA1nB,IAAA,KACAgnB,EAAAQ,EAAAC,MAIAle,EAAAge,YAAAnlB,KAAA,SAAArC,EAAAC,GACA,IACAwnB,EAAA7oB,EAAA6B,OADA9B,MAEA,GAAA,QAAA8oB,EAAA5lB,MAAA,eAAA,CACA4lB,EAAAzmB,KAAA,KAAA,IACA4mB,EAAAH,EAAA7mB,OAAA+K,wBACA+b,EAAAb,EAAAjoB,EAAA6B,OAAA+I,EAAAme,YAAA,GAAA1nB,IAAA,KACAuJ,EAAAge,YAAAnlB,KAAA,WACA,IAEAwlB,EADAjpB,EAAA6B,OADA9B,MAEAiC,OAAA+K,wBACAic,EAAA7c,KAAA8c,EAAA9c,KAAA8c,EAAA7c,MAAA,EAAAuG,GACAqW,EAAA7c,KAAA6c,EAAA5c,MAAA,EAAAuG,EAAAsW,EAAA9c,MACA6c,EAAA/c,IAAAgd,EAAAhd,IAAAgd,EAAA5c,OAAA,EAAAsG,GACAqW,EAAA3c,OAAA2c,EAAA/c,IAAA,EAAA0G,EAAAsW,EAAAhd,MAEAoc,EAAAQ,EAAAC,IAEAD,EAAAzmB,KAAA,KACA4mB,EAAA5c,MAAAuG,EAAAwV,GACAE,EAAAQ,EAAAC,UAWA/oB,KAAAmpB,gBAAA,WACAnpB,KAAAopB,sBACA,IAAAve,EAAA7K,KAEA4S,EAAA5S,KAAA4B,OAAA6P,MAAAmB,QACAyW,GAAA,EAuDA,GAtDAxe,EAAAge,YAAAnlB,KAAA,WACA,IAAAkY,EAAA5b,KACA8oB,EAAA7oB,EAAA6B,OAAA8Z,GACA3G,EAAA6T,EAAAzmB,KAAA,KACAwI,EAAAge,YAAAnlB,KAAA,WAGA,GAAAkY,IAFA5b,KAEA,CACA,IAAAspB,EAAArpB,EAAA6B,OAHA9B,MAMA,GAAA8oB,EAAAzmB,KAAA,iBAAAinB,EAAAjnB,KAAA,eAAA,CAEA,IAAA4mB,EAAAH,EAAA7mB,OAAA+K,wBACAkc,EAAAI,EAAArnB,OAAA+K,wBAKA,GAJAic,EAAA7c,KAAA8c,EAAA9c,KAAA8c,EAAA7c,MAAA,EAAAuG,GACAqW,EAAA7c,KAAA6c,EAAA5c,MAAA,EAAAuG,EAAAsW,EAAA9c,MACA6c,EAAA/c,IAAAgd,EAAAhd,IAAAgd,EAAA5c,OAAA,EAAAsG,GACAqW,EAAA3c,OAAA2c,EAAA/c,IAAA,EAAA0G,EAAAsW,EAAAhd,IACA,CACAmd,GAAA,EAGA,IAQAE,EARArU,EAAAoU,EAAAjnB,KAAA,KAEAmnB,EA5BA,IA2BAP,EAAA/c,IAAAgd,EAAAhd,IAAA,GAAA,GAEAud,GAAAxU,EAAAuU,EACAE,GAAAxU,EAAAsU,EAEAG,EAAA,EAAA/W,EACAgX,EAAA/e,EAAAE,OAAAnJ,OAAA0K,OAAAzB,EAAAE,OAAAnJ,OAAA6S,OAAAvI,IAAArB,EAAAE,OAAAnJ,OAAA6S,OAAAE,OAAA,EAAA/B,EAEA6W,EAAAR,EAAA3c,OAAA,EAAAqd,GACAJ,GAAAtU,EAAAwU,EACAA,GAAAxU,EACAyU,GAAAH,GACAG,EAAAR,EAAA5c,OAAA,EAAAqd,IACAJ,GAAArU,EAAAwU,EACAA,GAAAxU,EACAuU,GAAAF,GAEAE,EAAAR,EAAA3c,OAAA,EAAAsd,GACAL,EAAAE,GAAAxU,EACAwU,GAAAxU,EACAyU,GAAAH,GACAG,EAAAR,EAAA5c,OAAA,EAAAsd,IACAL,EAAAG,GAAAxU,EACAwU,GAAAxU,EACAuU,GAAAF,GAEAT,EAAAzmB,KAAA,IAAAonB,GACAH,EAAAjnB,KAAA,IAAAqnB,UAGAL,EAAA,CAEA,GAAAxe,EAAAjJ,OAAA6P,MAAAoB,MAAA,CACA,IAAAgX,EAAAhf,EAAAge,YAAA,GACAhe,EAAAme,YAAA3mB,KAAA,KAAA,SAAAhB,EAAAC,GAEA,OADArB,EAAA6B,OAAA+nB,EAAAvoB,IACAe,KAAA,OAIArC,KAAAopB,oBAAA,KACAjhB,WAAA,WACAnI,KAAAmpB,mBACAtd,KAAA7L,MAAA,KAMAA,KAAAqf,OAAA,WAEA,IAAAxU,EAAA7K,KACAigB,EAAA,UACAO,EAAA,IAAAxgB,KAAA4B,OAAA6O,OAAAC,KAAA,SAGA,GAAA1Q,KAAA4B,OAAA6P,MAAA,CAEA,IAAAqY,EAAA9pB,KAAA+I,KAAAwS,OAAA,SAAAla,GACA,GAAAwJ,EAAAjJ,OAAA6P,MAAAsB,QAEA,CAEA,IAAArN,GAAA,EA6BA,OA5BAmF,EAAAjJ,OAAA6P,MAAAsB,QAAA3R,QAAA,SAAAma,GACA,IAAAvK,EAAA,IAAAvP,EAAA0I,KAAAC,MAAAmR,EAAA/K,OAAAvI,QAAA5G,GACA,GAAA+C,MAAA4M,GACAtL,GAAA,OAEA,OAAA6V,EAAAvI,UACA,IAAA,IACAhC,EAAAuK,EAAAjR,QAAA5E,GAAA,GACA,MACA,IAAA,KACAsL,GAAAuK,EAAAjR,QAAA5E,GAAA,GACA,MACA,IAAA,IACAsL,EAAAuK,EAAAjR,QAAA5E,GAAA,GACA,MACA,IAAA,KACAsL,GAAAuK,EAAAjR,QAAA5E,GAAA,GACA,MACA,IAAA,IACAsL,IAAAuK,EAAAjR,QAAA5E,GAAA,GACA,MACA,QAEAA,GAAA,KAKAA,EAhCA,OAAA,IAoCA4Z,EAAAtf,KACAA,KAAA+pB,aAAA/pB,KAAAgD,IAAA4U,MACAnU,UAAA,mBAAAzD,KAAA4B,OAAAmM,KAAA,UACAhF,KAAA+gB,EAAA,SAAAzoB,GAAA,OAAAA,EAAAie,EAAA1d,OAAA+P,UAAA,WACA3R,KAAA+pB,aAAAvK,QACAvc,OAAA,KACAZ,KAAA,QAAA,iBAAArC,KAAA4B,OAAAmM,KAAA,UAEA/N,KAAA6oB,aAAA7oB,KAAA6oB,YAAAnc,SACA1M,KAAA6oB,YAAA7oB,KAAA+pB,aAAA9mB,OAAA,QACAZ,KAAA,QAAA,iBAAArC,KAAA4B,OAAAmM,KAAA,UACA/N,KAAA6oB,YACAzf,KAAA,SAAA/H,GACA,OAAAI,EAAAyY,YAAA7Y,EAAAwJ,EAAAjJ,OAAA6P,MAAArI,MAAA,MAEAlG,MAAA2H,EAAAjJ,OAAA6P,MAAAvO,OAAA,IACAb,KAAA,CACAoD,EAAA,SAAApE,GACA,IAAAoE,EAAAoF,EAAAE,OAAAkV,GAAA5e,EAAAwJ,EAAAjJ,OAAA2O,OAAAC,QACAlM,KAAAmc,KAAA5V,EAAAmO,yBAAAnO,EAAAjJ,OAAAsP,WAAA7P,IACAwJ,EAAAjJ,OAAA6P,MAAAmB,QAEA,OADAxO,MAAAqB,KAAAA,GAAA,KACAA,GAEA0G,EAAA,SAAA9K,GACA,IAAA8K,EAAAtB,EAAAE,OAAAyV,GAAAnf,EAAAwJ,EAAAjJ,OAAA6O,OAAAD,QAEA,OADApM,MAAA+H,KAAAA,GAAA,KACAA,GAEA0J,cAAA,WACA,MAAA,WAIAhL,EAAAjJ,OAAA6P,MAAAoB,QACA7S,KAAAgpB,aAAAhpB,KAAAgpB,YAAAtc,SACA1M,KAAAgpB,YAAAhpB,KAAA+pB,aAAA9mB,OAAA,QACAZ,KAAA,QAAA,iBAAArC,KAAA4B,OAAAmM,KAAA,UACA/N,KAAAgpB,YACA9lB,MAAA2H,EAAAjJ,OAAA6P,MAAAoB,MAAA3P,OAAA,IACAb,KAAA,CACA2nB,GAAA,SAAA3oB,GACA,IAAAoE,EAAAoF,EAAAE,OAAAkV,GAAA5e,EAAAwJ,EAAAjJ,OAAA2O,OAAAC,QAEA,OADApM,MAAAqB,KAAAA,GAAA,KACAA,GAEAwP,GAAA,SAAA5T,GACA,IAAA8K,EAAAtB,EAAAE,OAAAyV,GAAAnf,EAAAwJ,EAAAjJ,OAAA6O,OAAAD,QAEA,OADApM,MAAA+H,KAAAA,GAAA,KACAA,GAEA8d,GAAA,SAAA5oB,GACA,IAAAoE,EAAAoF,EAAAE,OAAAkV,GAAA5e,EAAAwJ,EAAAjJ,OAAA2O,OAAAC,QACAlM,KAAAmc,KAAA5V,EAAAmO,yBAAAnO,EAAAjJ,OAAAsP,WAAA7P,IACAwJ,EAAAjJ,OAAA6P,MAAAmB,QAAA,EAEA,OADAxO,MAAAqB,KAAAA,GAAA,KACAA,GAEAyP,GAAA,SAAA7T,GACA,IAAA8K,EAAAtB,EAAAE,OAAAyV,GAAAnf,EAAAwJ,EAAAjJ,OAAA6O,OAAAD,QAEA,OADApM,MAAA+H,KAAAA,GAAA,KACAA,MAKAnM,KAAA+pB,aAAAtK,OAAA/S,SAIA,IAAAyQ,EAAAnd,KAAAgD,IAAA4U,MACAnU,UAAA,sBAAAzD,KAAA4B,OAAAmM,MACAhF,KAAA/I,KAAA+I,KAAA,SAAA1H,GAAA,OAAAA,EAAArB,KAAA4B,OAAA+P,WAAA9F,KAAA7L,OAGAihB,EAAA7c,MAAApE,KAAA+K,OAAAnJ,OAAA0K,QAAA,EAAAtM,KAAA+K,OAAAnJ,OAAA0K,OACA6Q,EAAAqC,QACAvc,OAAA,QACAZ,KAAA,QAAA,iBAAArC,KAAA4B,OAAAmM,MACA1L,KAAA,KAAA,SAAAhB,GAAA,OAAArB,KAAAkY,aAAA7W,IAAAwK,KAAA7L,OACAqC,KAAA,YAAA,eAAA4e,EAAA,KAGA,IAAAnL,EAAA,SAAAzU,GACA,IAAAoE,EAAAzF,KAAA+K,OAAAkV,GAAA5e,EAAArB,KAAA4B,OAAA2O,OAAAC,QACArE,EAAAnM,KAAA+K,OAAAyV,GAAAnf,EAAArB,KAAA4B,OAAA6O,OAAAD,QAGA,OAFApM,MAAAqB,KAAAA,GAAA,KACArB,MAAA+H,KAAAA,GAAA,KACA,aAAA1G,EAAA,IAAA0G,EAAA,KACAN,KAAA7L,MAEAmT,EAAA,SAAA9R,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAAuP,MAAA9P,IAAAwK,KAAA7L,MACA2S,EAAA,SAAAtR,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAA+Q,aAAAtR,IAAAwK,KAAA7L,MAEAuR,EAAAtR,EAAA+C,IAAAke,SACA1P,KAAA,SAAAnQ,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAAsP,WAAA7P,IAAAwK,KAAA7L,OACA+N,KAAA,SAAA1M,GAAA,OAAArB,KAAAgZ,yBAAAhZ,KAAA4B,OAAAiP,YAAAxP,IAAAwK,KAAA7L,OAIAA,KAAA6X,gBACAsF,EACArF,aACAgJ,SAAA9gB,KAAA4B,OAAAkW,WAAAgJ,UAAA,GACAC,KAAA/gB,KAAA4B,OAAAkW,WAAAiJ,MAAA,gBACA1e,KAAA,YAAAyT,GACAzT,KAAA,OAAA8Q,GACA9Q,KAAA,eAAAsQ,GACAtQ,KAAA,IAAAkP,GAEA4L,EACA9a,KAAA,YAAAyT,GACAzT,KAAA,OAAA8Q,GACA9Q,KAAA,eAAAsQ,GACAtQ,KAAA,IAAAkP,GAIA4L,EAAAsC,OAAA/S,SAGAyQ,EAAAxR,GAAA,sBAAA,SAAA+C,GACA1O,KAAA+K,OAAAiS,KAAA,kBAAAtO,GAAA,IACA7C,KAAA7L,OAGAA,KAAAkd,eAAAC,GAGAnd,KAAA4B,OAAA6P,QACAzR,KAAAioB,cACAjoB,KAAAopB,oBAAA,EACAppB,KAAAmpB,kBAEAnpB,KAAA6oB,YAAAld,GAAA,sBAAA,SAAA+C,GACA1O,KAAA+K,OAAAiS,KAAA,kBAAAtO,GAAA,IACA7C,KAAA7L,OAEAA,KAAAkd,eAAAld,KAAA6oB,eAMA7oB,KAAAkqB,gBAAA,SAAAxb,GACA,IAAAyb,EAAA,KACA,QAAA,IAAAzb,EACA,KAAA,oDAGAyb,EAFA,iBAAAzb,EACA1O,KAAA4B,OAAA+P,eAAA,IAAAjD,EAAA1O,KAAA4B,OAAA+P,UACAjD,EAAA1O,KAAA4B,OAAA+P,UAAAnD,gBACA,IAAAE,EAAAA,GACAA,EAAAA,GAAAF,WAEAE,EAAAF,WAGAE,EAAAF,WAEAxO,KAAAyL,YAAA2e,WAAA,CAAAC,SAAAF,KAGAnqB,OAYAyB,EAAAqd,WAAAE,OAAA,UAAA,mBAAA,CAQAsL,aAAA,WACA,IAAAC,EAAAvqB,KAAA4B,OAAA2O,OAAAC,OAAA,IAEA+B,EAAAvS,KAAA4B,OAAA2O,OAAAgC,eACA,IAAAA,EACA,KAAA,cAAAvS,KAAA4B,OAAAM,GAAA,+BAGA,IAAAsoB,EAAAxqB,KAAA+I,KACA0hB,KAAA,SAAA7O,EAAAC,GACA,IAAA6O,EAAA9O,EAAArJ,GACAoY,EAAA9O,EAAAtJ,GACAqY,EAAAF,EAAAlc,SAAAkc,EAAAlc,WAAA2P,cAAAuM,EACAG,EAAAF,EAAAnc,SAAAmc,EAAAnc,WAAA2P,cAAAwM,EACA,OAAAC,IAAAC,EAAA,EAAAD,EAAAC,GAAA,EAAA,IAMA,OALAL,EAAAppB,QAAA,SAAAC,EAAAC,GAGAD,EAAAkpB,GAAAlpB,EAAAkpB,IAAAjpB,IAEAkpB,GASAM,wBAAA,WAGA,IAAAvY,EAAAvS,KAAA4B,OAAA2O,OAAAgC,eACAgY,EAAAvqB,KAAA4B,OAAA2O,OAAAC,OAAA,IACAua,EAAA,GACA/qB,KAAA+I,KAAA3H,QAAA,SAAAggB,GACA,IAAA4J,EAAA5J,EAAA7O,GACA9M,EAAA2b,EAAAmJ,GACAU,EAAAF,EAAAC,IAAA,CAAAvlB,EAAAA,GACAslB,EAAAC,GAAA,CAAA1mB,KAAAE,IAAAymB,EAAA,GAAAxlB,GAAAnB,KAAAG,IAAAwmB,EAAA,GAAAxlB,MAGA,IAAAylB,EAAAtoB,OAAAC,KAAAkoB,GAGA,OAFA/qB,KAAAmrB,uBAAAD,GAEAH,GAwBAI,uBAAA,SAAAD,GACA,IAsBAE,EAtBAC,EAAArrB,KAAA4B,OAAAuP,MAAAJ,WACAua,EAAAtrB,KAAA2W,aAAAxF,MAAAJ,WAGA,GAAA,oBAAA/Q,KAAA4B,OAAAuP,MAAAL,eACA,KAAA,wEAGA,GAAAwa,EAAA7Y,WAAAnP,QAAAgoB,EAAAja,OAAA/N,OAAA,CAEA,IAAAioB,EAAA,GACAD,EAAA7Y,WAAArR,QAAA,SAAA4pB,GAAAO,EAAAP,GAAA,IACAE,EAAAM,MAAA,SAAAxd,GAAA,OAAAud,EAAArhB,eAAA8D,KAEAqd,EAAA5Y,WAAA6Y,EAAA7Y,WAEA4Y,EAAA5Y,WAAAyY,OAGAG,EAAA5Y,WAAAyY,EAIAI,EAAAja,OAAA/N,OACA8nB,EAAAE,EAAAja,OAGA+Z,GADAF,EAAA5nB,QAAA,GAAArD,EAAAwrB,MAAAC,WAAAzrB,EAAAwrB,MAAAE,cACAzlB,QAEA,KAAAklB,EAAA9nB,OAAA4nB,EAAA5nB,QAAA8nB,EAAAA,EAAAQ,OAAAR,GACAA,EAAAA,EAAAnkB,MAAA,EAAAikB,EAAA5nB,QACA+nB,EAAAha,OAAA+Z,GAUAxR,SAAA,SAAAP,EAAAQ,GACA,IAAA,IAAA,CAAA,IAAA,KAAA,MAAA7S,QAAAqS,GACA,KAAA,+BAEA,IAAApT,EAAA4T,EAAA5T,UAAA,OACA,IAAA,IAAA,CAAA,OAAA,SAAA,SAAAe,QAAAf,GACA,KAAA,wBAGA,IAAA4lB,EAAA7rB,KAAA8rB,YACA,IAAAD,IAAAjpB,OAAAC,KAAAgpB,GAAAvoB,OACA,MAAA,GAGA,GAAA,MAAA+V,EACA,MAAA,GAGA,GAAA,MAAAA,EAAA,CAEA,IAAA0S,EAAA/rB,KAAA4B,OAAAuP,MAAAJ,WAAA0B,YAAA,GACAuZ,EAAAhsB,KAAA4B,OAAAuP,MAAAJ,WAAAM,QAAA,GAEA,OAAAzO,OAAAC,KAAAgpB,GAAAthB,IAAA,SAAAygB,EAAA7hB,GACA,IACA8iB,EADAhB,EAAAY,EAAAb,GAGA,OAAA/kB,GACA,IAAA,OACAgmB,EAAAhB,EAAA,GACA,MACA,IAAA,SAEA,IAAAiB,EAAAjB,EAAA,GAAAA,EAAA,GACAgB,EAAAhB,EAAA,IAAA,IAAAiB,EAAAA,EAAAjB,EAAA,IAAA,EACA,MACA,IAAA,QACAgB,EAAAhB,EAAA,GAGA,MAAA,CACAxlB,EAAAwmB,EACA7iB,KAAA4hB,EACA9nB,MAAA,CACAiQ,KAAA6Y,EAAAD,EAAA/kB,QAAAgkB,KAAA,gBAOAtS,uBAAA,WAOA,OANA1Y,KAAA+I,KAAA/I,KAAAsqB,eAKAtqB,KAAA8rB,YAAA9rB,KAAA8qB,0BACA9qB,QV3nBAyB,EAAA0qB,kBAIA3rB,EAAA,GAEAC,EAAA,SAAAgF,GACA,IAAA,IAAAnE,EAAA,EAAAA,EAAAd,EAAA8C,OAAAhC,IAAA,CACA,IAAAd,EAAAc,GAAA8qB,YACA,KAAA,gCAAA9qB,EAAA,iDAEA,GAAAd,EAAAc,GAAA8qB,cAAA3mB,EACA,OAAAjF,EAAAc,GAGA,OAAA,OAbAnB,EAAA,IAqBA2N,IAAA,SAAAE,GACA,OAAAvN,EAAAuN,IAQA7N,EAAAgP,IAAA,SAAAkd,GACAA,EAAAD,aACA5iB,QAAA8iB,KAAA,iDAEA9rB,EAAAuG,KAAAslB,IAWAlsB,EAAA6e,OAAA,SAAAC,EAAAsN,EAAArN,GACA,IAAAnU,EAAAtK,EAAAwe,GACA,IAAAlU,EACA,KAAA,+DAEA,IAAAwhB,EACA,KAAA,8CAEA,GAAA,iBAAArN,EACA,KAAA,mDAEA,IAAAC,EAAA1d,EAAA2d,SAAArU,EAAAmU,GAGA,OAFAC,EAAAiN,YAAAG,EACA/rB,EAAAuG,KAAAoY,GACAA,GAIAhf,EAAA4G,KAAA,SAAAslB,GACA7iB,QAAA8iB,KAAA,sEACAnsB,EAAAgP,IAAAkd,IAOAlsB,EAAAiP,KAAA,WACA,OAAA5O,EAAA+J,IAAA,SAAA9E,GAAA,OAAAA,EAAA2mB,eAQAjsB,EAAAsN,OAAA,SAAAO,GAEA,IAAAwe,EAAA/rB,EAAAuN,GACA,GAAAwe,EAAA,CACA,IAAAC,EAAAlf,UAEA,OADAkf,EAAA,GAAA,KACA,IAAAC,SAAAlf,UAAA3B,KAAAyB,MAAAkf,EAAAC,IAEA,KAAA,wCAAAze,GAUA7N,EAAAwsB,OAAA,WACA,OAAAnsB,GASAL,EAAAysB,OAAA,SAAAnnB,GACAjF,EAAAiF,GAQAtF,EAAA0sB,MAAA,WACArsB,EAAA,IAGAL,GAcAsB,EAAAqrB,yBAGAxsB,EAAA,GAgBAC,EAAA,SAAAyN,GACA,OAfA,SAAAA,GACA,IAAAA,EACA,OAAA,KAEA,IAAA+e,EAAAzsB,EAAA0N,GACA,GAAA+e,EACA,OAAAA,EAEA,KAAA,kBAAA/e,EAAA,aAOAgf,CAAAhf,KAlBA7N,EAAA,IAkDA2N,IAAA,SAAAE,GACA,OAAAA,GAAA,MAAAA,EAAAif,UAAA,EAAA,GA5BA,SAAAxnB,GAIA,IAHA,IAEAynB,EAFAC,EAAA,GACAve,EAAA,aAEA,QAAAse,EAAAte,EAAAtJ,KAAAG,KACA0nB,EAAApmB,KAAAmmB,EAAA,IAEA,OAAA,IAAAC,EAAA7pB,OACA/C,EAAA4sB,EAAA,IACA,EAAAA,EAAA7pB,OACA,SAAAmC,GAEA,IADA,IAAAP,EAAAO,EACAnE,EAAA,EAAAA,EAAA6rB,EAAA7pB,OAAAhC,IACA4D,EAAA3E,EAAA4sB,EAAA7rB,GAAAf,CAAA2E,GAEA,OAAAA,GAGA,KAWAkoB,CAAApf,GAEAzN,EAAAyN,IASA7N,EAAA+O,IAAA,SAAAlB,EAAAqf,GACA,GAAA,MAAArf,EAAAif,UAAA,EAAA,GACA,KAAA,mDAEAI,EACA/sB,EAAA0N,GAAAqf,SAEA/sB,EAAA0N,IAUA7N,EAAAgP,IAAA,SAAAnB,EAAAqf,GACA,GAAA/sB,EAAA0N,GACA,KAAA,4CAAAA,EAEA7N,EAAA+O,IAAAlB,EAAAqf,IAOAltB,EAAAiP,KAAA,WACA,OAAAxM,OAAAC,KAAAvC,IAGAH,GAOAsB,EAAAqrB,wBAAA3d,IAAA,WAAA,SAAA1J,GACA,OAAArB,MAAAqB,IAAAA,GAAA,EAAA,MACAnB,KAAAD,IAAAoB,GAAAnB,KAAAC,OAOA9C,EAAAqrB,wBAAA3d,IAAA,mBAAA,SAAA1J,GACA,GAAArB,MAAAqB,GAAA,MAAA,MACA,GAAA,IAAAA,EAAA,MAAA,IACA,IAAA5B,EAAAS,KAAAgpB,KAAA7nB,GACAymB,EAAAroB,EAAA4B,EACAgB,EAAAnC,KAAAU,IAAA,GAAAknB,GACA,OAAA,IAAAroB,GACA4C,EAAA,IAAA7B,QAAA,GACA,IAAAf,GACA4C,EAAA,KAAA7B,QAAA,GAEA6B,EAAA7B,QAAA,GAAA,UAAAf,IAUApC,EAAAqrB,wBAAA3d,IAAA,cAAA,SAAA1J,GACA,GAAArB,MAAAqB,GAAA,MAAA,MACA,GAAA,IAAAA,EAAA,MAAA,IAEA,IACApB,EADAkC,EAAAjC,KAAAiC,IAAAd,GAOA,OAJApB,EADA,EAAAkC,EACAjC,KAAAgpB,KAAAhpB,KAAAD,IAAAkC,GAAAjC,KAAAC,MAEAD,KAAAK,MAAAL,KAAAD,IAAAkC,GAAAjC,KAAAC,MAEAD,KAAAiC,IAAAlC,IAAA,EACAoB,EAAAb,QAAA,GAEAa,EAAA8nB,cAAA,GAAAnoB,QAAA,IAAA,IAAAA,QAAA,IAAA,YASA3D,EAAAqrB,wBAAA3d,IAAA,YAAA,SAAAqe,GACA,OAAAC,mBAAAD,KAUA/rB,EAAAqrB,wBAAA3d,IAAA,aAAA,SAAAqe,GACA,OAAAA,GAGAA,GAAA,IAEApoB,QAAA,YAAA,SAAAsoB,GACA,OAAAA,GACA,IAAA,IACA,MAAA,SACA,IAAA,IACA,MAAA,SACA,IAAA,IACA,MAAA,OACA,IAAA,IACA,MAAA,OACA,IAAA,IACA,MAAA,QACA,IAAA,IACA,MAAA,YAjBA,KAiCAjsB,EAAA0X,gBAGA9Y,EAAA,IADAF,EAAA,IAWA2N,IAAA,SAAAE,EAAA+C,EAAAzG,GACA,GAAA0D,EAEA,CAAA,GAAA3N,EAAA2N,GACA,YAAA,IAAA+C,QAAA,IAAAzG,EACAjK,EAAA2N,GAEA3N,EAAA2N,GAAA+C,EAAAzG,GAGA,KAAA,mBAAA0D,EAAA,cARA,OAAA,MAiBA7N,EAAA+O,IAAA,SAAAlB,EAAAqf,GACAA,EACAhtB,EAAA2N,GAAAqf,SAEAhtB,EAAA2N,IASA7N,EAAAgP,IAAA,SAAAnB,EAAAqf,GACA,GAAAhtB,EAAA2N,GACA,KAAA,4CAAAA,EAEA7N,EAAA+O,IAAAlB,EAAAqf,IAQAltB,EAAAiP,KAAA,WACA,OAAAxM,OAAAC,KAAAxC,IAGAF,GAaAsB,EAAA0X,eAAAhK,IAAA,KAAA,SAAA4B,EAAA4c,GACA,YAAA,IAAAA,GAAA5c,EAAAC,cAAA2c,OACA,IAAA5c,EAAAE,KACAF,EAAAE,KAEA,KAGAF,EAAAhH,OAmBAtI,EAAA0X,eAAAhK,IAAA,gBAAA,SAAA4B,EAAA4c,GACA,IAAAvc,EAAAL,EAAAK,QAAA,GACAC,EAAAN,EAAAM,QAAA,GACA,GAAA,MAAAsc,GAAAvpB,OAAAupB,GACA,OAAA5c,EAAA2B,WAAA3B,EAAA2B,WAAA,KAEA,IAAAkb,EAAAxc,EAAAyJ,OAAA,SAAAgT,EAAAC,GACA,OAAAH,EAAAE,GAAAA,IAAAF,IAAAA,EAAAG,EACAD,EAEAC,IAGA,OAAAzc,EAAAD,EAAApK,QAAA4mB,MAgBAnsB,EAAA0X,eAAAhK,IAAA,kBAAA,SAAA4B,EAAAzG,GACA,YAAA,IAAAA,IAAA,IAAAyG,EAAA0B,WAAAzL,QAAAsD,GACAyG,EAAA2B,WAAA3B,EAAA2B,WAAA,KAEA3B,EAAAM,OAAAN,EAAA0B,WAAAzL,QAAAsD,MAmBA7I,EAAA0X,eAAAhK,IAAA,cAAA,SAAA4B,EAAA4c,GACA,IAAAvc,EAAAL,EAAAK,QAAA,GACAC,EAAAN,EAAAM,QAAA,GACA0c,EAAAhd,EAAA2B,WAAA3B,EAAA2B,WAAA,KACA,GAAAtB,EAAA9N,OAAA,GAAA8N,EAAA9N,SAAA+N,EAAA/N,OAAA,OAAAyqB,EACA,GAAA,MAAAJ,GAAAvpB,OAAAupB,GAAA,OAAAI,EACA,IAAAJ,GAAA5c,EAAAK,OAAA,GACA,OAAAC,EAAA,GACA,IAAAsc,GAAA5c,EAAAK,OAAAL,EAAAK,OAAA9N,OAAA,GACA,OAAA+N,EAAAD,EAAA9N,OAAA,GAEA,IAAA0qB,EAAA,KAKA,GAJA5c,EAAAhQ,QAAA,SAAA6sB,EAAAhV,GACAA,GACA7H,EAAA6H,EAAA,KAAA0U,GAAAvc,EAAA6H,KAAA0U,IAAAK,EAAA/U,KAEA,OAAA+U,EAAA,OAAAD,EACA,IAAAG,IAAAP,EAAAvc,EAAA4c,EAAA,KAAA5c,EAAA4c,GAAA5c,EAAA4c,EAAA,IACA,OAAAG,SAAAD,GACAjuB,EAAAkmB,YAAA9U,EAAA2c,EAAA,GAAA3c,EAAA2c,GAAA/tB,CAAAiuB,GADAH,IDrgBAtsB,EAAA2sB,UAAA,SAAArjB,GAEA,KAAAA,aAAAtJ,EAAAa,MAAAyI,aAAAtJ,EAAAgV,OACA,KAAA,uEA4BA,OAzBAzW,KAAA+K,OAAAA,EAEA/K,KAAAkC,GAAAlC,KAAA+K,OAAA2M,YAAA,aAEA1X,KAAA+N,KAAA/N,KAAA+K,kBAAAtJ,EAAAa,KAAA,OAAA,QAEAtC,KAAAyL,YAAA,SAAAzL,KAAA+N,KAAA/N,KAAA+K,OAAA/K,KAAA+K,OAAAA,OAGA/K,KAAA0B,SAAA,KAEA1B,KAAAI,WAAA,GAKAJ,KAAAquB,aAAA,KAMAruB,KAAAsuB,SAAA,EAGAtuB,KAAAqD,cAQA5B,EAAA2sB,UAAA5gB,UAAAnK,WAAA,WAyBA,OAvBAoM,MAAAC,QAAA1P,KAAA+K,OAAAnJ,OAAAgM,UAAAxN,aACAJ,KAAA+K,OAAAnJ,OAAAgM,UAAAxN,WAAAgB,QAAA,SAAAQ,GACA,IACA,IAAA2sB,EAAA9sB,EAAA2sB,UAAAI,WAAA1gB,IAAAlM,EAAAmM,KAAAnM,EAAA5B,MACAA,KAAAI,WAAA2G,KAAAwnB,GACA,MAAAnQ,GACA5U,QAAA8iB,KAAAlO,KAEAvS,KAAA7L,OAIA,UAAAA,KAAA+N,OACA9N,EAAA6B,OAAA9B,KAAA+K,OAAAA,OAAA/H,IAAAf,OAAAwI,YAAAkB,GAAA,aAAA3L,KAAAkC,GAAA,WACA6J,aAAA/L,KAAAquB,cACAruB,KAAA0B,UAAA,WAAA1B,KAAA0B,SAAAwB,MAAA,eAAAlD,KAAAqL,QACAQ,KAAA7L,OACAC,EAAA6B,OAAA9B,KAAA+K,OAAAA,OAAA/H,IAAAf,OAAAwI,YAAAkB,GAAA,YAAA3L,KAAAkC,GAAA,WACA6J,aAAA/L,KAAAquB,cACAruB,KAAAquB,aAAAlmB,WAAA,WAAAnI,KAAA4L,QAAAC,KAAA7L,MAAA,MACA6L,KAAA7L,QAGAA,MASAyB,EAAA2sB,UAAA5gB,UAAAihB,cAAA,WACA,GAAAzuB,KAAAsuB,QAAA,OAAA,EACA,IAAAA,GAAA,EAOA,OALAtuB,KAAAI,WAAAgB,QAAA,SAAAmtB,GACAD,EAAAA,GAAAC,EAAAE,qBAGAH,EAAAA,GAAAtuB,KAAAyL,YAAAsM,iBAAAC,UAAAhY,KAAAyL,YAAA4J,YAAA2C,WAQAvW,EAAA2sB,UAAA5gB,UAAAnC,KAAA,WACA,IAAArL,KAAA0B,SAAA,CACA,OAAA1B,KAAA+N,MACA,IAAA,OACA/N,KAAA0B,SAAAzB,EAAA6B,OAAA9B,KAAA+K,OAAA/H,IAAAf,OAAAwI,YACAiB,OAAA,MAAA,gBACA,MACA,IAAA,QACA1L,KAAA0B,SAAAzB,EAAA6B,OAAA9B,KAAA+K,OAAAA,OAAA/H,IAAAf,OAAAwI,YACAiB,OAAA,MAAA,2DAAAhB,QAAA,sBAAA,GAGA1K,KAAA0B,SAAAgJ,QAAA,gBAAA,GAAAA,QAAA,MAAA1K,KAAA+N,KAAA,cAAA,GAAA1L,KAAA,KAAArC,KAAAkC,IAIA,OAFAlC,KAAAI,WAAAgB,QAAA,SAAAmtB,GAAAA,EAAAljB,SACArL,KAAA0B,SAAAwB,MAAA,CAAAwrB,WAAA,YACA1uB,KAAA8L,UAOArK,EAAA2sB,UAAA5gB,UAAA1B,OAAA,WACA,OAAA9L,KAAA0B,UACA1B,KAAAI,WAAAgB,QAAA,SAAAmtB,GAAAA,EAAAziB,WACA9L,KAAAiG,YAFAjG,MASAyB,EAAA2sB,UAAA5gB,UAAAvH,SAAA,WACA,IAAAjG,KAAA0B,SAAA,OAAA1B,KAEA,GAAA,UAAAA,KAAA+N,KAAA,CACA,IAAA/B,EAAAhM,KAAA+K,OAAAkB,gBACAC,GAAAF,EAAAG,EAAA,KAAAqC,WAAA,KACApC,EAAAJ,EAAAvG,EAAA+I,WAAA,KACAnC,GAAArM,KAAA+K,OAAAnJ,OAAAyK,MAAA,GAAAmC,WAAA,KACAxO,KAAA0B,SAAAwB,MAAA,CAAA+C,SAAA,WAAAiG,IAAAA,EAAAE,KAAAA,EAAAC,MAAAA,IAIA,OADArM,KAAAI,WAAAgB,QAAA,SAAAmtB,GAAAA,EAAAtoB,aACAjG,MAQAyB,EAAA2sB,UAAA5gB,UAAA5B,KAAA,WACA,OAAA5L,KAAA0B,UAAA1B,KAAAyuB,kBACAzuB,KAAAI,WAAAgB,QAAA,SAAAmtB,GAAAA,EAAA3iB,SACA5L,KAAA0B,SAAAwB,MAAA,CAAAwrB,WAAA,YAFA1uB,MAWAyB,EAAA2sB,UAAA5gB,UAAAmhB,QAAA,SAAAC,GAEA,YADA,IAAAA,IAAAA,GAAA,GACA5uB,KAAA0B,WACA1B,KAAAyuB,kBAAAG,IACA5uB,KAAAI,WAAAgB,QAAA,SAAAmtB,GAAAA,EAAAI,SAAA,KACA3uB,KAAAI,WAAA,GACAJ,KAAA0B,SAAAgL,SACA1M,KAAA0B,SAAA,OAJA1B,MAyBAyB,EAAA2sB,UAAAS,UAAA,SAAAjtB,EAAAmJ,GAiDA,OA/CA/K,KAAA4B,OAAAA,GAAA,GACA5B,KAAA4B,OAAAuP,QAAAnR,KAAA4B,OAAAuP,MAAA,QAGAnR,KAAA+K,OAAAA,GAAA,KAKA/K,KAAA8uB,aAAA,KAEA9uB,KAAAyL,YAAA,KAMAzL,KAAA+uB,WAAA,KACA/uB,KAAA+K,kBAAAtJ,EAAA2sB,YAEA,UAAApuB,KAAA+K,OAAAgD,MACA/N,KAAA8uB,aAAA9uB,KAAA+K,OAAAA,OACA/K,KAAAyL,YAAAzL,KAAA+K,OAAAA,OAAAA,OACA/K,KAAA+uB,WAAA/uB,KAAA8uB,eAEA9uB,KAAAyL,YAAAzL,KAAA+K,OAAAA,OACA/K,KAAA+uB,WAAA/uB,KAAAyL,cAIAzL,KAAA0B,SAAA,KAMA1B,KAAAgvB,OAAA,KAOAhvB,KAAAsuB,SAAA,EACAtuB,KAAA4B,OAAAqE,WAAAjG,KAAA4B,OAAAqE,SAAA,QAGAjG,MAMAyB,EAAA2sB,UAAAS,UAAArhB,UAAAnC,KAAA,WACA,GAAArL,KAAA+K,QAAA/K,KAAA+K,OAAArJ,SAAA,CACA,IAAA1B,KAAA0B,SAAA,CACA,IAAAmS,GAAA,IAAA,CAAA,QAAA,SAAA,OAAA7M,QAAAhH,KAAA4B,OAAAiS,gBAAA,uBAAA7T,KAAA4B,OAAAiS,eAAA,GACA7T,KAAA0B,SAAA1B,KAAA+K,OAAArJ,SAAAuB,OAAA,OACAZ,KAAA,QAAA,gBAAArC,KAAA4B,OAAAqE,SAAA4N,GACA7T,KAAA4B,OAAAsB,OAAAlD,KAAA0B,SAAAwB,MAAAlD,KAAA4B,OAAAsB,OACA,mBAAAlD,KAAAqD,YAAArD,KAAAqD,aAKA,OAHArD,KAAAgvB,QAAA,gBAAAhvB,KAAAgvB,OAAAhnB,QAAAhI,KAAAgvB,OAAAC,KAAA5jB,OACArL,KAAA0B,SAAAwB,MAAA,CAAAwrB,WAAA,YACA1uB,KAAA8L,SACA9L,KAAAiG,aAMAxE,EAAA2sB,UAAAS,UAAArhB,UAAA1B,OAAA,aAKArK,EAAA2sB,UAAAS,UAAArhB,UAAAvH,SAAA,WAEA,OADAjG,KAAAgvB,QAAAhvB,KAAAgvB,OAAAC,KAAAhpB,WACAjG,MAMAyB,EAAA2sB,UAAAS,UAAArhB,UAAAihB,cAAA,WACA,QAAAzuB,KAAAsuB,YACAtuB,KAAAgvB,SAAAhvB,KAAAgvB,OAAAV,UAOA7sB,EAAA2sB,UAAAS,UAAArhB,UAAA5B,KAAA,WACA,OAAA5L,KAAA0B,UAAA1B,KAAAyuB,kBACAzuB,KAAAgvB,QAAAhvB,KAAAgvB,OAAAC,KAAArjB,OACA5L,KAAA0B,SAAAwB,MAAA,CAAAwrB,WAAA,YAFA1uB,MAUAyB,EAAA2sB,UAAAS,UAAArhB,UAAAmhB,QAAA,SAAAC,GAEA,YADA,IAAAA,IAAAA,GAAA,GACA5uB,KAAA0B,WACA1B,KAAAyuB,kBAAAG,IACA5uB,KAAAgvB,QAAAhvB,KAAAgvB,OAAAC,MAAAjvB,KAAAgvB,OAAAC,KAAAN,UACA3uB,KAAA0B,SAAAgL,SACA1M,KAAA0B,SAAA,KACA1B,KAAAgvB,OAAA,OAJAhvB,MAaAyB,EAAA2sB,UAAAI,YAGApuB,EAAA,IADAD,EAAA,IAUA2N,IAAA,SAAAE,EAAApM,EAAAmJ,GACA,GAAAiD,EAEA,CAAA,GAAA5N,EAAA4N,GAAA,CACA,GAAA,iBAAApM,EACA,KAAA,oDAAAoM,EAAA,IAEA,OAAA,IAAA5N,EAAA4N,GAAApM,EAAAmJ,GAGA,KAAA,wBAAAiD,EAAA,cARA,OAAA,MAiBA7N,EAAA+O,IAAA,SAAAlB,EAAAugB,GACA,GAAAA,EAAA,CACA,GAAA,mBAAAA,EACA,KAAA,sCAAAvgB,EAAA,yCAEA5N,EAAA4N,GAAAugB,EACAnuB,EAAA4N,GAAAR,UAAA,IAAA/L,EAAA2sB,UAAAS,sBAGAzuB,EAAA4N,IASA7N,EAAAgP,IAAA,SAAAnB,EAAAugB,GACA,GAAAnuB,EAAA4N,GACA,KAAA,iDAAAA,EAEA7N,EAAA+O,IAAAlB,EAAAugB,IAQApuB,EAAAiP,KAAA,WACA,OAAAxM,OAAAC,KAAAzC,IAGAD,GAUAsB,EAAA2sB,UAAAS,UAAAK,OAAA,SAAAnkB,GAEA,KAAAA,aAAAtJ,EAAA2sB,UAAAS,WACA,KAAA,8DAGA7uB,KAAA+K,OAAAA,EAEA/K,KAAA8uB,aAAA9uB,KAAA+K,OAAA+jB,aAEA9uB,KAAAyL,YAAAzL,KAAA+K,OAAAU,YAEAzL,KAAA+uB,WAAA/uB,KAAA+K,OAAAgkB,WAGA/uB,KAAAmvB,iBAAAnvB,KAAA+K,OAAAA,OAEA/K,KAAA0B,SAAA,KAMA1B,KAAAovB,IAAA,IAOApvB,KAAAqvB,OAAA,SAAAD,GAEA,YADA,IAAAA,IAAApvB,KAAAovB,IAAAA,EAAA5gB,YACAxO,MAQAA,KAAA+B,KAAA,GAQA/B,KAAAsvB,QAAA,SAAAvtB,GAEA,YADA,IAAAA,IAAA/B,KAAA+B,KAAAA,EAAAyM,YACAxO,MAKAA,KAAAuvB,QAAAvvB,KAAAwvB,QAOAxvB,KAAA+T,MAAA,GAMA/T,KAAAyvB,SAAA,SAAA1b,GAEA,YADA,IAAAA,IAAA/T,KAAA+T,MAAAA,EAAAvF,YACAxO,MAOAA,KAAAmR,MAAA,OAQAnR,KAAA0vB,SAAA,SAAAve,GAKA,YAJA,IAAAA,KACA,IAAA,CAAA,OAAA,MAAA,SAAA,SAAA,QAAA,OAAA,UAAAnK,QAAAmK,GAAAnR,KAAAmR,MAAAA,EACAnR,KAAAmR,MAAA,QAEAnR,MAQAA,KAAAkD,MAAA,GAMAlD,KAAA2vB,SAAA,SAAAzsB,GAEA,YADA,IAAAA,IAAAlD,KAAAkD,MAAAA,GACAlD,MAQAA,KAAA4vB,SAAA,WACA,IAAA/b,GAAA,IAAA,CAAA,QAAA,SAAA,OAAA7M,QAAAhH,KAAA+K,OAAAnJ,OAAAiS,gBAAA,8BAAA7T,KAAA+K,OAAAnJ,OAAAiS,eAAA,GACA,MAAA,2CAAA7T,KAAAmR,OAAAnR,KAAAgI,OAAA,IAAAhI,KAAAgI,OAAA,IAAA6L,GASA7T,KAAAsuB,SAAA,EAOAtuB,KAAA6vB,WAAA,EAMA7vB,KAAA8vB,aAAA,SAAAC,GAIA,OAHAA,OAAA,IAAAA,GAAA5H,QAAA4H,GACA/vB,KAAA6vB,UAAAE,EACA/vB,KAAA6vB,YAAA7vB,KAAAsuB,SAAA,GACAtuB,MAMAA,KAAAyuB,cAAA,WACA,OAAAzuB,KAAA6vB,WAAA7vB,KAAAsuB,SAQAtuB,KAAAgI,OAAA,GAKAhI,KAAAgwB,UAAA,SAAAhoB,GAEA,YADA,IAAAA,IAAA,IAAA,CAAA,GAAA,cAAA,YAAAhB,QAAAgB,KAAAhI,KAAAgI,OAAAA,GACAhI,KAAA8L,UAOA9L,KAAAiwB,UAAA,SAAAF,GAEA,OADAA,OAAA,IAAAA,GAAA5H,QAAA4H,IACA/vB,KAAAgwB,UAAA,eACA,gBAAAhwB,KAAAgI,OAAAhI,KAAAgwB,UAAA,IACAhwB,MAOAA,KAAAkwB,QAAA,SAAAH,GAEA,OADAA,OAAA,IAAAA,GAAA5H,QAAA4H,IACA/vB,KAAAgwB,UAAA,YACA,aAAAhwB,KAAAgI,OAAAhI,KAAAgwB,UAAA,IACAhwB,MAKAA,KAAA+R,YAAA,aACA/R,KAAAmwB,eAAA,SAAApe,GAGA,OAFA/R,KAAA+R,YAAA,mBAAAA,EAAAA,EACA,aACA/R,MAGAA,KAAAiS,WAAA,aACAjS,KAAAowB,cAAA,SAAAne,GAGA,OAFAjS,KAAAiS,WAAA,mBAAAA,EAAAA,EACA,aACAjS,MAGAA,KAAAkS,QAAA,aACAlS,KAAAqwB,WAAA,SAAAne,GAGA,OAFAlS,KAAAkS,QAAA,mBAAAA,EAAAA,EACA,aACAlS,MAOAA,KAAAqL,KAAA,WACA,GAAArL,KAAA+K,OAIA,OAHA/K,KAAA0B,WACA1B,KAAA0B,SAAA1B,KAAA+K,OAAArJ,SAAAuB,OAAAjD,KAAAovB,KAAA/sB,KAAA,QAAArC,KAAA4vB,aAEA5vB,KAAA8L,UAMA9L,KAAAswB,UAAA,WAAA,OAAAtwB,MAKAA,KAAA8L,OAAA,WACA,OAAA9L,KAAA0B,WACA1B,KAAAswB,YACAtwB,KAAA0B,SACAW,KAAA,QAAArC,KAAA4vB,YACAvtB,KAAA,QAAArC,KAAA+T,OAAA7Q,MAAAlD,KAAAkD,OACAyI,GAAA,YAAA,aAAA3L,KAAAgI,OAAA,KAAAhI,KAAA+R,aACApG,GAAA,WAAA,aAAA3L,KAAAgI,OAAA,KAAAhI,KAAAiS,YACAtG,GAAA,QAAA,aAAA3L,KAAAgI,OAAA,KAAAhI,KAAAkS,SACAnQ,KAAA/B,KAAA+B,MACA/B,KAAAivB,KAAAnjB,SACA9L,KAAAuwB,cACAvwB,MAMAA,KAAAuwB,WAAA,WAAA,OAAAvwB,MAKAA,KAAA4L,KAAA,WAKA,OAJA5L,KAAA0B,WAAA1B,KAAAyuB,kBACAzuB,KAAA0B,SAAAgL,SACA1M,KAAA0B,SAAA,MAEA1B,MASAA,KAAAivB,KAAA,CACAuB,eAAA,KACAC,eAAA,KACAC,gBAAA,EACAtb,QAAA,EAIA/J,KAAA,WAaA,OAZArL,KAAAivB,KAAAuB,iBACAxwB,KAAAivB,KAAAuB,eAAAvwB,EAAA6B,OAAA9B,KAAAyL,YAAAzI,IAAAf,OAAAwI,YAAAxH,OAAA,OACAZ,KAAA,QAAA,uCAAArC,KAAAmR,OACA9O,KAAA,KAAArC,KAAA+uB,WAAArX,YAAA,mBACA1X,KAAAivB,KAAAwB,eAAAzwB,KAAAivB,KAAAuB,eAAAvtB,OAAA,OACAZ,KAAA,QAAA,6BACArC,KAAAivB,KAAAwB,eAAA9kB,GAAA,SAAA,WACA3L,KAAAivB,KAAAyB,gBAAA1wB,KAAAivB,KAAAwB,eAAAxuB,OAAA0uB,WACA9kB,KAAA7L,QAEAA,KAAAivB,KAAAuB,eAAAttB,MAAA,CAAAwrB,WAAA,YACA1uB,KAAAivB,KAAA7Z,QAAA,EACApV,KAAAivB,KAAAnjB,UACAD,KAAA7L,MAIA8L,OAAA,WACA,OAAA9L,KAAAivB,KAAAuB,gBACAxwB,KAAAivB,KAAAtrB,WACA3D,KAAAivB,KAAAwB,iBAAAzwB,KAAAivB,KAAAwB,eAAAxuB,OAAA0uB,UAAA3wB,KAAAivB,KAAAyB,iBACA1wB,KAAAivB,KAAAhpB,YAHAjG,KAAAivB,MAIApjB,KAAA7L,MACAiG,SAAA,WACA,IAAAjG,KAAAivB,KAAAuB,eAAA,OAAAxwB,KAAAivB,KAEAjvB,KAAAivB,KAAAuB,eAAAttB,MAAA,CAAAoJ,OAAA,OACA,IAGAN,EAAAhM,KAAA+uB,WAAA9iB,gBACA2kB,EAAAC,SAAAC,gBAAAH,WAAAE,SAAAxpB,KAAAspB,UACAI,EAAA/wB,KAAAyL,YAAAulB,qBACAC,EAAAjxB,KAAAmvB,iBAAAztB,SAAAO,OAAA+K,wBACAkkB,EAAAlxB,KAAA0B,SAAAO,OAAA+K,wBACAmkB,EAAAnxB,KAAAivB,KAAAuB,eAAAvuB,OAAA+K,wBACAokB,EAAApxB,KAAAivB,KAAAwB,eAAAxuB,OAAAovB,aACAnlB,EAAA,EAAAE,EAAA,EACA,UAAApM,KAAAmvB,iBAAAphB,MACA7B,EAAAF,EAAAG,EAAA8kB,EAAA3kB,OAAA,EACAF,EAAA9H,KAAAG,IAAAuH,EAAAvG,EAAAzF,KAAA+uB,WAAAntB,OAAAyK,MAAA8kB,EAAA9kB,MAbA,EAaAL,EAAAvG,EAbA,KAeAyG,EAAAglB,EAAAvc,OAAAic,EAfA,EAeAG,EAAA7kB,IACAE,EAAA9H,KAAAG,IAAAysB,EAAA9kB,KAAA8kB,EAAA7kB,MAAA8kB,EAAA9kB,MAAA0kB,EAAA3kB,KAAAJ,EAAAvG,EAhBA,IAkBA,IAAA6rB,EAAAhtB,KAAAG,IAAAzE,KAAA+uB,WAAAntB,OAAAyK,MAAA,EAjBA,GAAA,IAkBAklB,EAAAD,EACAE,EAAAF,EAAA,GACAG,EAAAntB,KAAAG,IAAAzE,KAAA+uB,WAAAntB,OAAA0K,OAAA,GAnBA,GAAA,IAoBAA,EAAAhI,KAAAE,IAAA4sB,EAAAK,GACAC,EAAAD,EAUA,OATAzxB,KAAAivB,KAAAuB,eAAAttB,MAAA,CACAgJ,IAAAA,EAAAsC,WAAA,KACApC,KAAAA,EAAAoC,WAAA,KACAjC,YAAAglB,EAAA/iB,WAAA,KACAhC,aAAAklB,EAAAljB,WAAA,KACAlC,OAAAA,EAAAkC,WAAA,OAEAxO,KAAAivB,KAAAwB,eAAAvtB,MAAA,CAAAqJ,YAAAilB,EAAAhjB,WAAA,OACAxO,KAAAivB,KAAAwB,eAAAxuB,OAAA0uB,UAAA3wB,KAAAivB,KAAAyB,gBACA1wB,KAAAivB,MACApjB,KAAA7L,MACA4L,KAAA,WACA,OAAA5L,KAAAivB,KAAAuB,iBACAxwB,KAAAivB,KAAAuB,eAAAttB,MAAA,CAAAwrB,WAAA,WACA1uB,KAAAivB,KAAA7Z,QAAA,GACApV,KAAAivB,MACApjB,KAAA7L,MACA2uB,QAAA,WACA,OAAA3uB,KAAAivB,KAAAuB,iBACAxwB,KAAAivB,KAAAwB,eAAA/jB,SACA1M,KAAAivB,KAAAuB,eAAA9jB,SACA1M,KAAAivB,KAAAwB,eAAA,KACAzwB,KAAAivB,KAAAuB,eAAA,MACAxwB,KAAAivB,MACApjB,KAAA7L,MAQA2D,SAAA,aAAAkI,KAAA7L,MAKA2xB,YAAA,SAAAC,GAiBA,MAhBA,mBAAAA,GACA5xB,KAAAivB,KAAAtrB,SAAAiuB,EACA5xB,KAAAqwB,WAAA,WACArwB,KAAAivB,KAAA7Z,QACApV,KAAAivB,KAAA5jB,OACArL,KAAAiwB,YAAAnkB,SACA9L,KAAAsuB,SAAA,IAEAtuB,KAAAivB,KAAArjB,OACA5L,KAAAiwB,WAAA,GAAAnkB,SACA9L,KAAA6vB,YAAA7vB,KAAAsuB,SAAA,KAEAziB,KAAA7L,QAEAA,KAAAqwB,aAEArwB,MACA6L,KAAA7L,QAYAyB,EAAA2sB,UAAAI,WAAArf,IAAA,QAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAAqL,KAAA,WAIA,OAHArL,KAAA6xB,aAAA7xB,KAAA+K,OAAArJ,SAAAuB,OAAA,OACAZ,KAAA,QAAA,mCAAArC,KAAA4B,OAAAqE,UACAjG,KAAA8xB,eAAA9xB,KAAA6xB,aAAA5uB,OAAA,MACAjD,KAAA8L,UAEA9L,KAAA8L,OAAA,WACA,IAAAiI,EAAAnS,EAAAmS,MAAAvF,WAGA,OAFAxO,KAAA4B,OAAAoS,WAAAD,GAAA,WAAA/T,KAAA4B,OAAAoS,SAAA,YACAhU,KAAA8xB,eAAA/vB,KAAAgS,GACA/T,QASAyB,EAAA2sB,UAAAI,WAAArf,IAAA,aAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,IAAAimB,GAAA,IAAA/xB,KAAAyL,YAAA7J,OAAAyK,MAAAmC,WAAAxH,QAAA,KAAAhH,KAAAyL,YAAA7J,OAAAyK,MAAArM,KAAAyL,YAAA7J,OAAAyK,MAAAzH,QAAA,GACAotB,GAAA,IAAAhyB,KAAAyL,YAAA7J,OAAA0K,OAAAkC,WAAAxH,QAAA,KAAAhH,KAAAyL,YAAA7J,OAAA0K,OAAAtM,KAAAyL,YAAA7J,OAAA0K,OAAA1H,QAAA,GAIA,OAHA5E,KAAA0B,SAAAK,KAAAgwB,EAAA,QAAAC,EAAA,MACApwB,EAAA8P,OAAA1R,KAAA0B,SAAAW,KAAA,QAAAT,EAAA8P,OACA9P,EAAAsB,OAAAlD,KAAA0B,SAAAwB,MAAAtB,EAAAsB,OACAlD,QAUAyB,EAAA2sB,UAAAI,WAAArf,IAAA,eAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WAUA,OATA1H,MAAApE,KAAAyL,YAAA1I,MAAAgD,QAAA3B,MAAApE,KAAAyL,YAAA1I,MAAAiD,MACA,OAAAhG,KAAAyL,YAAA1I,MAAAgD,OAAA,OAAA/F,KAAAyL,YAAA1I,MAAAiD,IAIAhG,KAAA0B,SAAAwB,MAAA,UAAA,SAHAlD,KAAA0B,SAAAwB,MAAA,UAAA,MACAlD,KAAA0B,SAAAK,KAAAN,EAAAwwB,oBAAAjyB,KAAAyL,YAAA1I,MAAAiD,IAAAhG,KAAAyL,YAAA1I,MAAAgD,MAAA,MAAA,KAIAnE,EAAA8P,OAAA1R,KAAA0B,SAAAW,KAAA,QAAAT,EAAA8P,OACA9P,EAAAsB,OAAAlD,KAAA0B,SAAAwB,MAAAtB,EAAAsB,OACAlD,QASAyB,EAAA2sB,UAAAI,WAAArf,IAAA,WAAA,SAAAvN,GA0BA,IAAA,IAAAswB,KAzBAzwB,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,OAAA9L,KAAAgvB,SACAhvB,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA,kBAAAG,SAAA,uDACAU,eAAA,WACAnwB,KAAAgvB,OAAAttB,SACAgJ,QAAA,qCAAA,GACA3I,KAAA,mBACA/B,KAAAmyB,oBAAApoB,KAAA,SAAAqoB,GACApyB,KAAAgvB,OAAAttB,SACAW,KAAA,OAAA,+BAAA+vB,GACA1nB,QAAA,qCAAA,GACAA,QAAA,wCAAA,GACA3I,KAAA,mBACA8J,KAAA7L,QACA6L,KAAA7L,OACAowB,cAAA,WACApwB,KAAAgvB,OAAAttB,SAAAgJ,QAAA,wCAAA,IACAmB,KAAA7L,OACAA,KAAAgvB,OAAA3jB,OACArL,KAAAgvB,OAAAttB,SAAAW,KAAA,YAAA,iBAAAA,KAAA,WAAA,kBAnBArC,MAsBAA,KAAAqyB,WAAA,GACAzvB,OAAAC,KAAAguB,SAAAyB,aACA,GAAA,OAAAzB,SAAAyB,YAAAJ,GAAAvU,OACA,IAAAkT,SAAAyB,YAAAJ,GAAAvU,KAAA3W,QAAA,iBAAA,CAEAvF,EAAA8wB,kBAAA,MAAA1B,SAAAyB,YAAAJ,GAAAvU,MACA5T,KAAA,SAAAvC,GACAxH,KAAAqyB,WAAA7qB,EAAApC,QAAA,UAAA,KAAAA,QAAA,OAAA,KACApF,KAAAqyB,WAAArrB,QAAA,mCACAhH,KAAAqyB,WAAAryB,KAAAqyB,WAAApF,UAAA,EAAAjtB,KAAAqyB,WAAArrB,QAAA,oCAEA6E,KAAA7L,OACA,MAGAA,KAAAmyB,kBAAA,WACA,OAAAjyB,EAAAsyB,MAAA,WAEA,IAAAjwB,EAAAvC,KAAA+K,OAAArJ,SAAAuB,OAAA,OAAAC,MAAA,UAAA,QACAnB,KAAA/B,KAAAyL,YAAAzI,IAAAf,OAAAwwB,WAEAlwB,EAAAkB,UAAA,gBAAAiJ,SACAnK,EAAAkB,UAAA,oBAAAiJ,SAEAnK,EAAAkB,UAAA,eAAAC,KAAA,WACA,IAAAgvB,EAAA,IAAAzyB,EAAA6B,OAAA9B,MAAAqC,KAAA,MAAA4qB,WAAA,GAAAhmB,MAAA,GAAA,GACAhH,EAAA6B,OAAA9B,MAAAqC,KAAA,KAAAqwB,KAIA,IAAAC,EAAA1yB,EAAA6B,OAAAS,EAAAT,OAAA,OAAAG,OAAAwI,YAAA1I,OACA6wB,EAAA,oCAAA5yB,KAAAqyB,WAAA,eACAQ,EAAAF,EAAA3rB,QAAA,KAAA,EAKA,OAJA2rB,EAAAA,EAAA1rB,MAAA,EAAA4rB,GAAAD,EAAAD,EAAA1rB,MAAA4rB,GAEAtwB,EAAAmK,SAEAomB,KAAArF,mBAAAkF,GAAAvtB,QAAA,kBAAA,SAAAM,EAAAqtB,GACA,OAAAC,OAAAC,aAAA,KAAAF,OAEAlnB,KAAA7L,UAWAyB,EAAA2sB,UAAAI,WAAArf,IAAA,eAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,OAAA9L,KAAAgvB,SACAhvB,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA,KAAAG,SAAA,gBACAY,WAAA,WACA,IAAAzuB,EAAAsxB,mBAAAC,QAAA,sEACA,OAAA,EAEA,IAAAnoB,EAAAhL,KAAA8uB,aAIA,OAHA9jB,EAAA4C,UAAAhC,MAAA,GACA3L,EAAA6B,OAAAkJ,EAAAD,OAAA/H,IAAAf,OAAAwI,YAAAkB,GAAA,aAAAX,EAAA0M,YAAA,aAAA,MACAzX,EAAA6B,OAAAkJ,EAAAD,OAAA/H,IAAAf,OAAAwI,YAAAkB,GAAA,YAAAX,EAAA0M,YAAA,aAAA,MACA1M,EAAAD,OAAAqoB,YAAApoB,EAAA9I,KACA2J,KAAA7L,OACAA,KAAAgvB,OAAA3jB,QAbArL,QAwBAyB,EAAA2sB,UAAAI,WAAArf,IAAA,gBAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,GAAA9L,KAAAgvB,OAAA,CACA,IAAAqE,EAAA,IAAArzB,KAAA8uB,aAAAltB,OAAA0xB,QAEA,OADAtzB,KAAAgvB,OAAAkB,QAAAmD,GACArzB,KASA,OAPAA,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA,KAAAG,SAAA,iBACAY,WAAA,WACArwB,KAAA8uB,aAAAlW,SACA5Y,KAAA8L,UACAD,KAAA7L,OACAA,KAAAgvB,OAAA3jB,OACArL,KAAA8L,YAUArK,EAAA2sB,UAAAI,WAAArf,IAAA,kBAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,GAAA9L,KAAAgvB,OAAA,CACA,IAAAuE,EAAAvzB,KAAA8uB,aAAAltB,OAAA0xB,UAAAtzB,KAAAyL,YAAA+nB,qBAAAlwB,OAAA,EAEA,OADAtD,KAAAgvB,OAAAkB,QAAAqD,GACAvzB,KASA,OAPAA,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA,KAAAG,SAAA,mBACAY,WAAA,WACArwB,KAAA8uB,aAAA/V,WACA/Y,KAAA8L,UACAD,KAAA7L,OACAA,KAAAgvB,OAAA3jB,OACArL,KAAA8L,YAaArK,EAAA2sB,UAAAI,WAAArf,IAAA,eAAA,SAAAvN,GAEA,GADAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAnJ,MAAApE,KAAAyL,YAAA1I,MAAAgD,QAAA3B,MAAApE,KAAAyL,YAAA1I,MAAAiD,KAGA,OAFAhG,KAAA8L,OAAA,kBACAtC,QAAA8iB,KAAA,2FAGAloB,MAAAxC,EAAAyS,OAAA,IAAAzS,EAAAyS,QAAAzS,EAAAyS,KAAA,KACA,iBAAAzS,EAAAsS,cAAAtS,EAAAsS,YAAA,EAAAtS,EAAAyS,KAAA,IAAA,KACA,iBAAAzS,EAAAuS,eACAvS,EAAAuS,aAAA,oBAAA,EAAAvS,EAAAyS,KAAA,IAAA,KAAA5S,EAAAwwB,oBAAA3tB,KAAAiC,IAAA3E,EAAAyS,MAAA,MAAA,IAEArU,KAAA8L,OAAA,WACA,OAAA9L,KAAAgvB,SACAhvB,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA1tB,EAAAsS,aAAAub,SAAA7tB,EAAAuS,cACAkc,WAAA,WACArwB,KAAAyL,YAAA2e,WAAA,CACArkB,MAAAzB,KAAAG,IAAAzE,KAAAyL,YAAA1I,MAAAgD,MAAAnE,EAAAyS,KAAA,GACArO,IAAAhG,KAAAyL,YAAA1I,MAAAiD,IAAApE,EAAAyS,QAEAxI,KAAA7L,OACAA,KAAAgvB,OAAA3jB,QATArL,QAqBAyB,EAAA2sB,UAAAI,WAAArf,IAAA,cAAA,SAAAvN,GAEA,GADAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAnJ,MAAApE,KAAAyL,YAAA1I,MAAAgD,QAAA3B,MAAApE,KAAAyL,YAAA1I,MAAAiD,KAGA,OAFAhG,KAAA8L,OAAA,kBACAtC,QAAA8iB,KAAA,0FAGAloB,MAAAxC,EAAAyS,OAAA,IAAAzS,EAAAyS,QAAAzS,EAAAyS,KAAA,IACA,iBAAAzS,EAAAsS,cAAAtS,EAAAsS,YAAA,EAAAtS,EAAAyS,KAAA,KAAA,MACA,iBAAAzS,EAAAuS,eACAvS,EAAAuS,aAAA,gBAAA,EAAAvS,EAAAyS,KAAA,MAAA,MAAA,QAAA,IAAA/P,KAAAiC,IAAA3E,EAAAyS,OAAAzP,QAAA,GAAA,KAEA5E,KAAA8L,OAAA,WACA,GAAA9L,KAAAgvB,OAAA,CACA,IAAAyE,GAAA,EACAC,EAAA1zB,KAAAyL,YAAA1I,MAAAiD,IAAAhG,KAAAyL,YAAA1I,MAAAgD,MAQA,OAPA,EAAAnE,EAAAyS,OAAAjQ,MAAApE,KAAAyL,YAAA7J,OAAAkH,mBAAA4qB,GAAA1zB,KAAAyL,YAAA7J,OAAAkH,mBACA2qB,GAAA,GAEA7xB,EAAAyS,KAAA,IAAAjQ,MAAApE,KAAAyL,YAAA7J,OAAAiH,mBAAA6qB,GAAA1zB,KAAAyL,YAAA7J,OAAAiH,mBACA4qB,GAAA,GAEAzzB,KAAAgvB,OAAAkB,SAAAuD,GACAzzB,KAqBA,OAnBAA,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA1tB,EAAAsS,aAAAub,SAAA7tB,EAAAuS,cACAkc,WAAA,WACA,IAAAqD,EAAA1zB,KAAAyL,YAAA1I,MAAAiD,IAAAhG,KAAAyL,YAAA1I,MAAAgD,MAEA4tB,EAAAD,GADA,EAAA9xB,EAAAyS,MAEAjQ,MAAApE,KAAAyL,YAAA7J,OAAAkH,oBACA6qB,EAAArvB,KAAAE,IAAAmvB,EAAA3zB,KAAAyL,YAAA7J,OAAAkH,mBAEA1E,MAAApE,KAAAyL,YAAA7J,OAAAiH,oBACA8qB,EAAArvB,KAAAG,IAAAkvB,EAAA3zB,KAAAyL,YAAA7J,OAAAiH,mBAEA,IAAA0gB,EAAAjlB,KAAAK,OAAAgvB,EAAAD,GAAA,GACA1zB,KAAAyL,YAAA2e,WAAA,CACArkB,MAAAzB,KAAAG,IAAAzE,KAAAyL,YAAA1I,MAAAgD,MAAAwjB,EAAA,GACAvjB,IAAAhG,KAAAyL,YAAA1I,MAAAiD,IAAAujB,KAEA1d,KAAA7L,OACAA,KAAAgvB,OAAA3jB,OACArL,QAcAyB,EAAA2sB,UAAAI,WAAArf,IAAA,OAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,OAAA9L,KAAAgvB,SACAhvB,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA1tB,EAAAsS,aAAAub,SAAA7tB,EAAAuS,cACAnU,KAAAgvB,OAAAC,KAAA0C,YAAA,WACA3xB,KAAAgvB,OAAAC,KAAAwB,eAAA1uB,KAAAH,EAAAgyB,YACA/nB,KAAA7L,OACAA,KAAAgvB,OAAA3jB,QANArL,QAoBAyB,EAAA2sB,UAAAI,WAAArf,IAAA,mBAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WAEAvN,KAAAqD,WAAA,WAEArD,KAAAyL,YAAA1I,MAAA8wB,MAAA7zB,KAAAyL,YAAA1I,MAAA8wB,OAAA,GACA7zB,KAAAyL,YAAA1I,MAAA8wB,MAAAC,WAAA9zB,KAAAyL,YAAA1I,MAAA8wB,MAAAC,YAAA,GAOA9zB,KAAAyL,YAAAsoB,gBAAA,CAEA/E,OAAAhvB,KAQAmP,IAAA,SAAA6kB,GACA,IAAAtlB,EAAAhF,KAAA0E,MAAA1E,KAAAC,UAAAqqB,IACA,iBAAAA,GAAA,iBAAAtlB,EAAA3M,OACA2M,EAAA3M,KAAA,mBAAAiyB,EAAAzb,OAAAyb,EAAAzb,SAAAyb,EAAAxlB,YAGA,IAAA,IAAAlN,EAAA,EAAAA,EAAAtB,KAAA+C,MAAA8wB,MAAAC,WAAAxwB,OAAAhC,IACA,GAAAoI,KAAAC,UAAA3J,KAAA+C,MAAA8wB,MAAAC,WAAAxyB,MAAAoI,KAAAC,UAAA+E,GACA,OAAA1O,KAMA,OAHAA,KAAA+C,MAAA8wB,MAAAC,WAAA/sB,KAAA2H,GACA1O,KAAAoqB,aACApqB,KAAA+zB,gBAAAE,kBACAj0B,MACA6L,KAAA7L,KAAAyL,aAOAyoB,YAAA,SAAAjb,GACA,QAAA,IAAAjZ,KAAA+C,MAAA8wB,MAAAC,WAAA7a,GACA,KAAA,oDAAAA,EAAAzK,WAKA,OAHAxO,KAAA+C,MAAA8wB,MAAAC,WAAA/W,OAAA9D,EAAA,GACAjZ,KAAAoqB,aACApqB,KAAA+zB,gBAAAE,kBACAj0B,MACA6L,KAAA7L,KAAAyL,aAKA0oB,UAAA,WAIA,OAHAn0B,KAAA+C,MAAA8wB,MAAAC,WAAA,GACA9zB,KAAAoqB,aACApqB,KAAA+zB,gBAAAE,kBACAj0B,MACA6L,KAAA7L,KAAAyL,aAMAwoB,gBAAA,WACAj0B,KAAAgvB,OAAAljB,SACA9L,KAAAgvB,OAAAC,KAAAnjB,UACAD,KAAA7L,QAEA6L,KAAA7L,MAEAA,KAAA8L,OAAA,WAEA,OAAA9L,KAAAgvB,SAEAhvB,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA1tB,EAAAsS,aAAAub,SAAA7tB,EAAAuS,cACAkc,WAAA,WACArwB,KAAAgvB,OAAAC,KAAAtrB,YACAkI,KAAA7L,OAEAA,KAAAgvB,OAAAC,KAAA0C,YAAA,WACA,IAAAjwB,EAAA1B,KAAAgvB,OAAAC,KAAAwB,eAOA,GANA/uB,EAAAK,KAAA,SAEA,IAAA/B,KAAAyL,YAAA1I,MAAA8wB,MAAA9xB,MACAL,EAAAuB,OAAA,OAAAlB,KAAA/B,KAAAyL,YAAA1I,MAAA8wB,MAAA9xB,MAGA/B,KAAAyL,YAAA1I,MAAA8wB,MAAAC,WAAAxwB,OAEA,CACA5B,EAAAuB,OAAA,MAAAlB,KAAA,qBAAA/B,KAAAyL,YAAA1I,MAAA8wB,MAAAC,WAAAxwB,OAAA,KACA,IAAA8wB,EAAA1yB,EAAAuB,OAAA,SACAjD,KAAAyL,YAAA1I,MAAA8wB,MAAAC,WAAA1yB,QAAA,SAAAizB,EAAApb,GACA,IAAAlX,EAAA,iBAAAsyB,GAAA,iBAAAA,EAAAtyB,KAAAsyB,EAAAtyB,KAAAsyB,EAAA7lB,WACA8lB,EAAAF,EAAAnxB,OAAA,MACAqxB,EAAArxB,OAAA,MAAAA,OAAA,UACAZ,KAAA,QAAA,2CAAArC,KAAA4B,OAAAuP,OACAjO,MAAA,CAAA4Q,cAAA,QACAnI,GAAA,QAAA,WACA3L,KAAAyL,YAAAsoB,gBAAAG,YAAAjb,IACApN,KAAA7L,OACA+B,KAAA,KACAuyB,EAAArxB,OAAA,MAAAlB,KAAAA,IACA8J,KAAA7L,OACA0B,EAAAuB,OAAA,UACAZ,KAAA,QAAA,2CAAArC,KAAA4B,OAAAuP,OACAjO,MAAA,CAAA4Q,cAAA,QAAA/R,KAAA,2BACA4J,GAAA,QAAA,WACA3L,KAAAyL,YAAAsoB,gBAAAI,aACAtoB,KAAA7L,YArBA0B,EAAAuB,OAAA,KAAAlB,KAAA,2BAuBA8J,KAAA7L,OAEAA,KAAAgvB,OAAAsB,UAAA,WACA,IAAAvuB,EAAA,QACA,GAAA/B,KAAAyL,YAAA1I,MAAA8wB,MAAAC,WAAAxwB,OAAA,CACA,IAAAixB,EAAA,EAAAv0B,KAAAyL,YAAA1I,MAAA8wB,MAAAC,WAAAxwB,OAAA,aAAA,YACAvB,GAAA,KAAA/B,KAAAyL,YAAA1I,MAAA8wB,MAAAC,WAAAxwB,OAAA,IAAAixB,EAAA,IAEAv0B,KAAAgvB,OAAAM,QAAAvtB,GAAAmuB,SAAA,IACArkB,KAAA7L,MAEAA,KAAAgvB,OAAA3jB,QAnDArL,QA8DAyB,EAAA2sB,UAAAI,WAAArf,IAAA,sBAAA,SAAAvN,GAGA,GAFAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACA3L,EAAAmU,gBAAAnU,EAAAmU,cAAA,cACA/V,KAAA8uB,aAAAlZ,YAAAhU,EAAAmU,eACA,KAAA,sEAEA/V,KAAA8L,OAAA,WACA,IAAAjB,EAAA7K,KAAA8uB,aAAAlZ,YAAAhU,EAAAmU,eACAhU,EAAA8I,EAAAjJ,OAAA8R,aAAA,eAAA,eACA,OAAA1T,KAAAgvB,QACAhvB,KAAAgvB,OAAAM,QAAAvtB,GACA/B,KAAAgvB,OAAA3jB,OACArL,KAAA+K,OAAA9E,WACAjG,OAEAA,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAAvtB,GACA0tB,SAAA,4DACAY,WAAA,WACAxlB,EAAAqb,oBACAlmB,KAAAw0B,eAAAzoB,aAAA/L,KAAAw0B,eACA,IAAAjtB,EAAAsD,EAAAjJ,OAAAkW,aAAAjN,EAAAjJ,OAAAkW,WAAAgJ,UAAA,EACA9gB,KAAAw0B,cAAArsB,WAAA,WACAnI,KAAA8uB,aAAA7I,oBACAjmB,KAAAyL,YAAArI,kBACAyI,KAAA7L,MAAAuH,GACAvH,KAAA8L,UACAD,KAAA7L,OACAA,KAAA8L,aAUArK,EAAA2sB,UAAAI,WAAArf,IAAA,iBAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,OAAA9L,KAAAgvB,SACAhvB,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA,kBACAG,SAAA,yEACAY,WAAA,WACArwB,KAAA8uB,aAAA7I,oBACAjmB,KAAA8L,UACAD,KAAA7L,OACAA,KAAAgvB,OAAA3jB,QARArL,QAkBAyB,EAAA2sB,UAAAI,WAAArf,IAAA,gBAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WACAvN,KAAA8L,OAAA,WACA,IAAA/J,EAAA/B,KAAA8uB,aAAAxd,OAAA1P,OAAAwT,OAAA,cAAA,cACA,OAAApV,KAAAgvB,QACAhvB,KAAAgvB,OAAAM,QAAAvtB,GAAAsJ,OACArL,KAAA+K,OAAA9E,WACAjG,OAEAA,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OACAse,SAAA,0CACAY,WAAA,WACArwB,KAAA8uB,aAAAxd,OAAA1P,OAAAwT,QAAApV,KAAA8uB,aAAAxd,OAAA1P,OAAAwT,OACApV,KAAA8uB,aAAAxd,OAAA+N,SACArf,KAAA8L,UACAD,KAAA7L,OACAA,KAAA8L,aASArK,EAAA2sB,UAAAI,WAAArf,IAAA,cAAA,SAAAvN,GACAH,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WAEAvN,KAAA8L,OAAA,WAKA,MAHA,iBAAAlK,EAAAsS,cAAAtS,EAAAsS,YAAA,eACA,iBAAAtS,EAAAuS,eAAAvS,EAAAuS,aAAA,uDAEAnU,KAAAgvB,SAEAhvB,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAAlvB,MACA0vB,SAAA9tB,EAAAuP,OAAAme,QAAA1tB,EAAAsS,aAAAub,SAAA7tB,EAAAuS,cACAkc,WAAA,WACArwB,KAAAgvB,OAAAC,KAAAtrB,YACAkI,KAAA7L,OAEAA,KAAAgvB,OAAAC,KAAA0C,YAAA,WACA3xB,KAAAgvB,OAAAC,KAAAwB,eAAA1uB,KAAA,IACA,IAAAqyB,EAAAp0B,KAAAgvB,OAAAC,KAAAwB,eAAAxtB,OAAA,SAoDA,OAnDAjD,KAAA8uB,aAAAjW,0BAAA5R,QAAAge,UAAA7jB,QAAA,SAAAc,EAAA+W,GACA,IAAApO,EAAA7K,KAAA8uB,aAAAlZ,YAAA1T,GACA8L,EAAA,iBAAAnD,EAAAjJ,OAAAoM,KAAAnD,EAAA3I,GAAA2I,EAAAjJ,OAAAoM,KACAsmB,EAAAF,EAAAnxB,OAAA,MAEAqxB,EAAArxB,OAAA,MAAAlB,KAAAiM,GAEApM,EAAA+Y,SAAAvZ,QAAA,SAAAqzB,GACA,IAEA1yB,EAAAmQ,EAAA+d,EAFAyE,EAAAjzB,EAAA6U,UAAAgB,SAAAC,WAAAvQ,QAAAytB,GACAE,EAAAlzB,EAAA6U,UAAAgB,SAAAE,MAAAkd,GAEA7pB,EAAAkM,gBAAA0d,IACA1yB,EAAAN,EAAA6U,UAAAgB,SAAAG,eAAAid,GACAxiB,EAAA,KAAAyiB,EAAA,cACA1E,EAAA,iBAEAluB,EAAAN,EAAA6U,UAAAgB,SAAAE,MAAAkd,GACAxiB,EAAAyiB,EAAA,cACA1E,EAAA,IAEAqE,EAAArxB,OAAA,MAAAA,OAAA,KACAZ,KAAA,QAAA,2CAAArC,KAAA4B,OAAAuP,MAAA8e,GACA/sB,MAAA,CAAA4Q,cAAA,QACAnI,GAAA,QAAA,WAAAd,EAAAqH,KAAAlS,KAAAgvB,OAAAC,KAAAtrB,YAAAkI,KAAA7L,OACA+B,KAAAA,IACA8J,KAAA7L,OAEA,IAAA40B,EAAA,IAAA3b,EACA4b,EAAA5b,IAAAjZ,KAAA8uB,aAAAjW,0BAAAvV,OAAA,EACAwxB,EAAAR,EAAArxB,OAAA,MACA6xB,EAAA7xB,OAAA,KACAZ,KAAA,QAAA,2EAAArC,KAAA4B,OAAAuP,OAAA0jB,EAAA,YAAA,KACA3xB,MAAA,CAAA4Q,cAAA,QACAnI,GAAA,QAAA,WAAAd,EAAAkO,WAAA/Y,KAAAgvB,OAAAC,KAAAtrB,YAAAkI,KAAA7L,OACA+B,KAAA,KAAAM,KAAA,QAAA,kCACAyyB,EAAA7xB,OAAA,KACAZ,KAAA,QAAA,4EAAArC,KAAA4B,OAAAuP,OAAAyjB,EAAA,YAAA,KACA1xB,MAAA,CAAA4Q,cAAA,QACAnI,GAAA,QAAA,WAAAd,EAAA+N,SAAA5Y,KAAAgvB,OAAAC,KAAAtrB,YAAAkI,KAAA7L,OACA+B,KAAA,KAAAM,KAAA,QAAA,iCACAyyB,EAAA7xB,OAAA,KACAZ,KAAA,QAAA,6EACAa,MAAA,CAAA4Q,cAAA,QACAnI,GAAA,QAAA,WAIA,OAHAwnB,QAAA,uCAAAnlB,EAAA,mCACAnD,EAAAE,OAAAgqB,gBAAA7yB,GAEAlC,KAAAgvB,OAAAC,KAAAtrB,YACAkI,KAAA7L,OACA+B,KAAA,KAAAM,KAAA,QAAA,iBACAwJ,KAAA7L,OACAA,MACA6L,KAAA7L,OAEAA,KAAAgvB,OAAA3jB,QAjEArL,QAgGAyB,EAAA2sB,UAAAI,WAAArf,IAAA,kBAAA,SAAAvN,GACA,iBAAAA,EAAAsS,cAAAtS,EAAAsS,YAAA,mBACA,iBAAAtS,EAAAuS,eAAAvS,EAAAuS,aAAA,wCAGA1S,EAAA2sB,UAAAS,UAAAvhB,MAAAtN,KAAAuN,WAIA,IAAAynB,EAAApzB,EAAAqzB,kBAAA,CAAA,QAAA,eAAA,QAAA,SACA,cAAA,aAAA,UAAA,uBAEAC,EAAAl1B,KAAA8uB,aAAAlZ,YAAAhU,EAAAuzB,YACAC,EAAAF,EAAAtzB,OAGAyzB,EAAA,GACAL,EAAA5zB,QAAA,SAAA4M,GACA,IAAAsnB,EAAAF,EAAApnB,GACAsnB,IACAD,EAAArnB,GAAAtE,KAAA0E,MAAA1E,KAAAC,UAAA2rB,OASAt1B,KAAAu1B,eAAA,UAGA,IAAAjW,EAAAtf,KACAA,KAAAgvB,OAAA,IAAAvtB,EAAA2sB,UAAAS,UAAAK,OAAA5P,GACAoQ,SAAA9tB,EAAAuP,OAAAme,QAAA1tB,EAAAsS,aAAAub,SAAA7tB,EAAAuS,cACAkc,WAAA,WACA/Q,EAAA0P,OAAAC,KAAAtrB,aAEA3D,KAAAgvB,OAAAC,KAAA0C,YAAA,WAEA,IAAA6D,EAAAlxB,KAAAK,MAAA,IAAAL,KAAAmxB,UAAAjnB,WAEA8Q,EAAA0P,OAAAC,KAAAwB,eAAA1uB,KAAA,IACA,IAAAqyB,EAAA9U,EAAA0P,OAAAC,KAAAwB,eAAAxtB,OAAA,SAEAyyB,EAAApW,EAAA1d,OAEA+zB,EAAA,SAAAC,EAAAC,EAAAC,GACA,IAAAxB,EAAAF,EAAAnxB,OAAA,MACAqxB,EAAArxB,OAAA,MACAA,OAAA,SACAZ,KAAA,CAAA0L,KAAA,QAAAC,KAAA,gBAAAwnB,EAAAlrB,MAAAwrB,IACA7mB,SAAA,UAAA6mB,IAAAxW,EAAAiW,gBACA5pB,GAAA,QAAA,WACA/I,OAAAC,KAAAgzB,GAAAz0B,QAAA,SAAA20B,GACAb,EAAAtzB,OAAAm0B,GAAAF,EAAAE,KAEAzW,EAAAiW,eAAAO,EACAxW,EAAAwP,aAAAzP,SACA,IAAA/N,EAAAgO,EAAAwP,aAAAxd,OACAA,GAAAukB,EAAAvkB,QAEAA,EAAA+N,WAGAiV,EAAArxB,OAAA,MAAAmG,KAAAwsB,IAGAI,EAAAN,EAAAO,6BAAA,gBAKA,OAJAN,EAAAK,EAAAX,EAAA,WACAK,EAAAQ,QAAA90B,QAAA,SAAAggB,EAAAjY,GACAwsB,EAAAvU,EAAAwU,aAAAxU,EAAAiE,QAAAlc,KAEAmW,IAGAtf,KAAA8L,OAAA,WAEA,OADA9L,KAAAgvB,OAAA3jB,OACArL,QY3+CAyB,EAAA00B,OAAA,SAAAprB,GACA,KAAAA,aAAAtJ,EAAAgV,OACA,KAAA,4DAiCA,OA9BAzW,KAAA+K,OAAAA,EAEA/K,KAAAkC,GAAAlC,KAAA+K,OAAA2M,YAAA,UAEA1X,KAAA+K,OAAAnJ,OAAA0P,OAAA7P,EAAAkM,QAAAO,MAAAlO,KAAA+K,OAAAnJ,OAAA0P,QAAA,GAAA7P,EAAA00B,OAAAzf,eAEA1W,KAAA4B,OAAA5B,KAAA+K,OAAAnJ,OAAA0P,OAGAtR,KAAA0B,SAAA,KAEA1B,KAAAo2B,gBAAA,KAEAp2B,KAAAq2B,SAAA,GAMAr2B,KAAAs2B,eAAA,KAQAt2B,KAAAoV,QAAA,EAGApV,KAAAqf,UAQA5d,EAAA00B,OAAAzf,cAAA,CACAzG,YAAA,WACAkF,OAAA,CAAA1P,EAAA,EAAA0G,EAAA,GACAE,MAAA,GACAC,OAAA,GACAiqB,QAAA,EACAC,WAAA,GACAphB,QAAA,GAMA3T,EAAA00B,OAAA3oB,UAAA6R,OAAA,WAGArf,KAAA0B,WACA1B,KAAA0B,SAAA1B,KAAA+K,OAAA/H,IAAA4U,MAAA3U,OAAA,KACAZ,KAAA,KAAArC,KAAA+K,OAAA2M,YAAA,WAAArV,KAAA,QAAA,cAIArC,KAAAo2B,kBACAp2B,KAAAo2B,gBAAAp2B,KAAA0B,SAAAuB,OAAA,QACAZ,KAAA,QAAA,KAAAA,KAAA,SAAA,KAAAA,KAAA,QAAA,yBAIArC,KAAAs2B,iBACAt2B,KAAAs2B,eAAAt2B,KAAA0B,SAAAuB,OAAA,MAIAjD,KAAAq2B,SAAAj1B,QAAA,SAAAsN,GACAA,EAAAhC,WAEA1M,KAAAq2B,SAAA,GAGA,IAAAE,GAAAv2B,KAAA4B,OAAA20B,SAAA,EACA9wB,EAAA8wB,EACApqB,EAAAoqB,EACAE,EAAA,EACAz2B,KAAA+K,OAAA8N,0BAAA5R,QAAAge,UAAA7jB,QAAA,SAAAc,GACAuN,MAAAC,QAAA1P,KAAA+K,OAAA6K,YAAA1T,GAAAN,OAAA0P,SACAtR,KAAA+K,OAAA6K,YAAA1T,GAAAN,OAAA0P,OAAAlQ,QAAA,SAAAsN,GACA,IAAAhN,EAAA1B,KAAAs2B,eAAArzB,OAAA,KACAZ,KAAA,YAAA,aAAAoD,EAAA,IAAA0G,EAAA,KACAqqB,GAAA9nB,EAAA8nB,aAAAx2B,KAAA4B,OAAA40B,YAAA,GACAE,EAAA,EACAC,EAAAH,EAAA,EAAAD,EAAA,EAGA,GAFAE,EAAAnyB,KAAAG,IAAAgyB,EAAAD,EAAAD,GAEA,SAAA7nB,EAAA6C,MAAA,CAEA,IAAAjO,GAAAoL,EAAApL,QAAA,GACAszB,EAAAJ,EAAA,EAAAD,EAAA,EACA70B,EAAAuB,OAAA,QAAAZ,KAAA,QAAAqM,EAAAgD,OAAA,IACArP,KAAA,IAAA,MAAAu0B,EAAA,IAAAtzB,EAAA,IAAAszB,GACA1zB,MAAAwL,EAAAxL,OAAA,IACAwzB,EAAApzB,EAAAizB,OACA,GAAA,SAAA7nB,EAAA6C,MAAA,CAEA,IAAAlF,GAAAqC,EAAArC,OAAA,GACAC,GAAAoC,EAAApC,QAAAD,EACA3K,EAAAuB,OAAA,QAAAZ,KAAA,QAAAqM,EAAAgD,OAAA,IACArP,KAAA,QAAAgK,GAAAhK,KAAA,SAAAiK,GACAjK,KAAA,OAAAqM,EAAAyC,OAAA,IACAjO,MAAAwL,EAAAxL,OAAA,IACAwzB,EAAArqB,EAAAkqB,EACAE,EAAAnyB,KAAAG,IAAAgyB,EAAAnqB,EAAAiqB,QACA,IAAA,IAAAt2B,EAAA+C,IAAA6zB,YAAA7vB,QAAA0H,EAAA6C,OAAA,CAEA,IAAAC,GAAA9C,EAAA8C,MAAA,GACAslB,EAAAxyB,KAAAgpB,KAAAhpB,KAAAmc,KAAAjP,EAAAlN,KAAAoc,KACAhf,EAAAuB,OAAA,QAAAZ,KAAA,QAAAqM,EAAAgD,OAAA,IACArP,KAAA,IAAApC,EAAA+C,IAAAke,SAAA1P,KAAAA,GAAAzD,KAAAW,EAAA6C,QACAlP,KAAA,YAAA,aAAAy0B,EAAA,KAAAA,EAAAP,EAAA,GAAA,KACAl0B,KAAA,OAAAqM,EAAAyC,OAAA,IACAjO,MAAAwL,EAAAxL,OAAA,IACAwzB,EAAA,EAAAI,EAAAP,EACAI,EAAAryB,KAAAG,IAAA,EAAAqyB,EAAAP,EAAA,EAAAI,GACAF,EAAAnyB,KAAAG,IAAAgyB,EAAA,EAAAK,EAAAP,GAGA70B,EAAAuB,OAAA,QAAAZ,KAAA,cAAA,QAAAA,KAAA,QAAA,YACAA,KAAA,IAAAq0B,GAAAr0B,KAAA,IAAAs0B,GAAAzzB,MAAA,CAAA+P,YAAAujB,IAAAptB,KAAAsF,EAAA+C,OAEA,IAAAslB,EAAAr1B,EAAAO,OAAA+K,wBACA,GAAA,aAAAhN,KAAA4B,OAAAqO,YACA9D,GAAA4qB,EAAAzqB,OAAAiqB,EACAE,EAAA,MACA,CAGA,IAAAO,EAAAh3B,KAAA4B,OAAAuT,OAAA1P,EAAAA,EAAAsxB,EAAA1qB,MACAkqB,EAAA9wB,GAAAuxB,EAAAh3B,KAAA+K,OAAAnJ,OAAAyK,QACAF,GAAAsqB,EACAhxB,EAAA8wB,EACA70B,EAAAW,KAAA,YAAA,aAAAoD,EAAA,IAAA0G,EAAA,MAEA1G,GAAAsxB,EAAA1qB,MAAA,EAAAkqB,EAGAv2B,KAAAq2B,SAAAtvB,KAAArF,IACAmK,KAAA7L,QAEA6L,KAAA7L,OAGA,IAAA+2B,EAAA/2B,KAAAs2B,eAAAr0B,OAAA+K,wBAYA,OAXAhN,KAAA4B,OAAAyK,MAAA0qB,EAAA1qB,MAAA,EAAArM,KAAA4B,OAAA20B,QACAv2B,KAAA4B,OAAA0K,OAAAyqB,EAAAzqB,OAAA,EAAAtM,KAAA4B,OAAA20B,QACAv2B,KAAAo2B,gBACA/zB,KAAA,QAAArC,KAAA4B,OAAAyK,OACAhK,KAAA,SAAArC,KAAA4B,OAAA0K,QAIAtM,KAAA0B,SAAAwB,MAAA,CAAAwrB,WAAA1uB,KAAA4B,OAAAwT,OAAA,SAAA,YAGApV,KAAAiG,YAQAxE,EAAA00B,OAAA3oB,UAAAvH,SAAA,WACA,IAAAjG,KAAA0B,SAAA,OAAA1B,KACA,IAAA+2B,EAAA/2B,KAAA0B,SAAAO,OAAA+K,wBACA5I,OAAApE,KAAA4B,OAAAoU,mBACAhW,KAAA4B,OAAAuT,OAAAhJ,EAAAnM,KAAA+K,OAAAnJ,OAAA0K,OAAAyqB,EAAAzqB,QAAAtM,KAAA4B,OAAAoU,iBAEA5R,OAAApE,KAAA4B,OAAAq1B,kBACAj3B,KAAA4B,OAAAuT,OAAA1P,EAAAzF,KAAA+K,OAAAnJ,OAAAyK,MAAA0qB,EAAA1qB,OAAArM,KAAA4B,OAAAq1B,gBAEAj3B,KAAA0B,SAAAW,KAAA,YAAA,aAAArC,KAAA4B,OAAAuT,OAAA1P,EAAA,IAAAzF,KAAA4B,OAAAuT,OAAAhJ,EAAA,MAOA1K,EAAA00B,OAAA3oB,UAAA5B,KAAA,WACA5L,KAAA4B,OAAAwT,QAAA,EACApV,KAAAqf,UAOA5d,EAAA00B,OAAA3oB,UAAAnC,KAAA,WACArL,KAAA4B,OAAAwT,QAAA,EACApV,KAAAqf,UC3MA5d,EAAA0I,KAAA1I,EAAA0I,MAAA,GAOA1I,EAAAy1B,YAAA,WAEAl3B,KAAAQ,QAAA,IAIAiB,EAAAy1B,YAAA1pB,UAAA2pB,UAAA,SAAAC,EAAA3xB,GAEA,OADA+D,QAAA8iB,KAAA,2DACAtsB,KAAAmP,IAAAioB,EAAA3xB,IAUAhE,EAAAy1B,YAAA1pB,UAAA2B,IAAA,SAAAioB,EAAA3xB,GACA,OAAAzF,KAAAkP,IAAAkoB,EAAA3xB,IAIAhE,EAAAy1B,YAAA1pB,UAAA0B,IAAA,SAAAkoB,EAAA3xB,GACA,GAAAgK,MAAAC,QAAAjK,GAAA,CAEA,IAAA4xB,EAAA51B,EAAA0qB,iBAAA1e,OAAAH,MAAA,KAAA7H,GAEA4xB,EAAAC,UAAAF,EACAp3B,KAAAQ,QAAA42B,GAAAC,OAGA,OAAA5xB,GACAA,EAAA6xB,UAAAF,EACAp3B,KAAAQ,QAAA42B,GAAA3xB,UAEAzF,KAAAQ,QAAA42B,GAGA,OAAAp3B,MAIAyB,EAAAy1B,YAAA1pB,UAAA+pB,UAAA,SAAAH,GAEA,OADA5tB,QAAA8iB,KAAA,2DACAtsB,KAAA8N,IAAAspB,IASA31B,EAAAy1B,YAAA1pB,UAAAM,IAAA,SAAAspB,GACA,OAAAp3B,KAAAQ,QAAA42B,IAIA31B,EAAAy1B,YAAA1pB,UAAAgqB,aAAA,SAAAJ,GAEA,OADA5tB,QAAA8iB,KAAA,iEACAtsB,KAAA0M,OAAA0qB,IAQA31B,EAAAy1B,YAAA1pB,UAAAd,OAAA,SAAA0qB,GACA,OAAAp3B,KAAAkP,IAAAkoB,EAAA,OASA31B,EAAAy1B,YAAA1pB,UAAAiqB,SAAA,SAAAhyB,GACA,iBAAAA,IACAA,EAAAiE,KAAA0E,MAAA3I,IAEA,IAAAiyB,EAAA13B,KAIA,OAHA4C,OAAAC,KAAA4C,GAAArE,QAAA,SAAAg2B,GACAM,EAAAxoB,IAAAkoB,EAAA3xB,EAAA2xB,MAEAM,GAQAj2B,EAAAy1B,YAAA1pB,UAAA3K,KAAA,WACA,OAAAD,OAAAC,KAAA7C,KAAAQ,UAQAiB,EAAAy1B,YAAA1pB,UAAAmqB,OAAA,WACA,OAAA33B,KAAAQ,SAgBAiB,EAAA0I,KAAAC,MAAA,SAAAoG,GAEA,IAAAonB,EAAA,iCAAAtyB,KAAAkL,GAEAxQ,KAAA63B,UAAArnB,EAEAxQ,KAAAsO,UAAAspB,EAAA,IAAA,KAEA53B,KAAAgO,KAAA4pB,EAAA,IAAA,KAEA53B,KAAAM,gBAAA,GAEA,iBAAAs3B,EAAA,IAAA,EAAAA,EAAA,GAAAt0B,SACAtD,KAAAM,gBAAAs3B,EAAA,GAAA3K,UAAA,GAAAhsB,MAAA,KACAjB,KAAAM,gBAAAc,QAAA,SAAA0U,EAAAxU,GACAtB,KAAAM,gBAAAgB,GAAAG,EAAAqrB,wBAAAhf,IAAAgI,IACAjK,KAAA7L,QAGAA,KAAA83B,qBAAA,SAAA5yB,GAIA,OAHAlF,KAAAM,gBAAAc,QAAA,SAAA0U,GACA5Q,EAAA4Q,EAAA5Q,KAEAA,GAMAlF,KAAAiI,QAAA,SAAA5G,GACA,QAAA,IAAAA,EAAArB,KAAA63B,WAAA,CACA,IAAA3yB,EAAA,UACA,IAAA7D,EAAArB,KAAAsO,UAAA,IAAAtO,KAAAgO,MAAA9I,EAAA7D,EAAArB,KAAAsO,UAAA,IAAAtO,KAAAgO,WACA,IAAA3M,EAAArB,KAAAgO,QAAA9I,EAAA7D,EAAArB,KAAAgO,OACA3M,EAAArB,KAAA63B,WAAA73B,KAAA83B,qBAAA5yB,GAEA,OAAA7D,EAAArB,KAAA63B,aAeAp2B,EAAA0I,KAAA4tB,UAAA,SAAAv3B,GA6BAR,KAAA4e,QAAA,SAAA7b,EAAAoN,GAaA,IAZA,IAzBA6nB,EAEAppB,EAuBAopB,GAzBAA,EAAA,GAEAppB,EAAA,iCAuBAuB,EAtBA/O,QAAA,SAAA62B,GACA,IAAAL,EAAAhpB,EAAAtJ,KAAA2yB,GACAb,EAAAQ,EAAA,IAAA,OACApnB,EAAAonB,EAAA,GACAM,EAAAz2B,EAAAqrB,wBAAAhf,IAAA8pB,EAAA,SACA,IAAAI,EAAAZ,KACAY,EAAAZ,GAAA,CAAAe,SAAA,GAAAhoB,OAAA,GAAA+nB,MAAA,KAEAF,EAAAZ,GAAAe,SAAApxB,KAAAkxB,GACAD,EAAAZ,GAAAjnB,OAAApJ,KAAAyJ,GACAwnB,EAAAZ,GAAAc,MAAAnxB,KAAAmxB,KAEAF,GAYAI,EAAAx1B,OAAAC,KAAAm1B,GAAAztB,IAAA,SAAAzH,GACA,IAAAtC,EAAAsN,IAAAhL,GACA,KAAA,4BAAAA,EAAA,aAEA,OAAAtC,EAAAsN,IAAAhL,GAAA8b,QAAA7b,EAAAi1B,EAAAl1B,GAAAqN,OACA6nB,EAAAl1B,GAAAq1B,SAAAH,EAAAl1B,GAAAo1B,SAIAnzB,EAAA7E,EAAAm4B,KAAA,CAAAjwB,OAAA,GAAAf,KAAA,GAAAixB,SAAA,KACAh3B,EAAA,EAAAA,EAAA82B,EAAA90B,OAAAhC,IAEAyD,EAAAA,EAAAgF,KAAAquB,EAAA92B,IAEA,OAAAyD,IAUAtD,EAAA0I,KAAAouB,OAAA,WAKAv4B,KAAAw4B,aAAA,EAMAx4B,KAAAy4B,iBAAA,GASAh3B,EAAA0I,KAAAouB,OAAA/qB,UAAAkrB,UAAA,SAAAC,GAUA,GATA,iBAAAA,GAEA34B,KAAAoH,IAAAuxB,EAEA34B,KAAAysB,OAAA,KAEAzsB,KAAAoH,IAAAuxB,EAAAvxB,IACApH,KAAAysB,OAAAkM,EAAAlM,QAAA,KAEAzsB,KAAAoH,IACA,KAAA,4CAaA3F,EAAA0I,KAAAouB,OAAA/qB,UAAAorB,YAAA,SAAA71B,EAAA81B,EAAA1oB,GACA,OAAAnQ,KAAA84B,QAAA94B,KAAA84B,OAAA/1B,EAAA81B,EAAA1oB,IAMA1O,EAAA0I,KAAAouB,OAAA/qB,UAAAsrB,OAAA,SAAA/1B,EAAA81B,EAAA1oB,GAAA,OAAAnQ,KAAAoH,KASA3F,EAAA0I,KAAAouB,OAAA/qB,UAAAurB,aAAA,SAAAh2B,EAAA81B,EAAA1oB,GACA,IAAA/I,EAAApH,KAAA84B,OAAA/1B,EAAA81B,EAAA1oB,GACA,OAAA1O,EAAA8wB,kBAAA,MAAAnrB,IAOA3F,EAAA0I,KAAAouB,OAAA/qB,UAAAwrB,WAAA,SAAAj2B,EAAA81B,EAAA1oB,GACA,IAAA8oB,EACAC,EAAAl5B,KAAA44B,YAAA71B,EAAA81B,EAAA1oB,GAYA,OAXAnQ,KAAAw4B,kBAAA,IAAAU,GAAAA,IAAAl5B,KAAAm5B,WACAF,EAAA/4B,EAAAm4B,KAAAr4B,KAAAo5B,kBAEAH,EAAAj5B,KAAA+4B,aAAAh2B,EAAA81B,EAAA1oB,GACAnQ,KAAAw4B,cACAS,EAAAA,EAAAlvB,KAAA,SAAAtE,GAEA,OADAzF,KAAAm5B,WAAAD,EACAl5B,KAAAo5B,gBAAA3zB,GACAoG,KAAA7L,SAGAi5B,GAgBAx3B,EAAA0I,KAAAouB,OAAA/qB,UAAAoR,QAAA,SAAA7b,EAAAoN,EAAAgoB,EAAAD,GACA,GAAAl4B,KAAAq5B,WAAA,CACA,IAAAC,EAAAt5B,KAAAq5B,WAAAt2B,EAAAoN,EAAAgoB,EAAAD,GACAl4B,KAAAs5B,MACAv2B,EAAAu2B,EAAAv2B,OAAAA,EACAoN,EAAAmpB,EAAAnpB,QAAAA,EACAgoB,EAAAmB,EAAAnB,UAAAA,EACAD,EAAAoB,EAAApB,OAAAA,GAIA,IAAA5Y,EAAAtf,KACA,OAAA,SAAA64B,GACA,OAAAvZ,EAAAmZ,iBAAAI,GAAAA,EAAAxxB,OAAAwxB,EAAAxxB,KAAA/D,OAGApD,EAAAm4B,KAAAQ,GAGAvZ,EAAA0Z,WAAAj2B,EAAA81B,EAAA1oB,GAAApG,KAAA,SAAAwvB,GACA,OAAAja,EAAAka,cAAAD,EAAAV,EAAA1oB,EAAAgoB,EAAAD,OAiBAz2B,EAAA0I,KAAAouB,OAAA/qB,UAAAisB,kBAAA,SAAA1wB,GACA,GAAA0G,MAAAC,QAAA3G,GAEA,OAAAA,EAKA,IAAAlG,EAAAD,OAAAC,KAAAkG,GACA2wB,EAAA3wB,EAAAlG,EAAA,IAAAS,OAKA,IAJAT,EAAA2oB,MAAA,SAAA1oB,GAEA,OADAiG,EAAAjG,GACAQ,SAAAo2B,IAGA,MAAA15B,KAAAqN,YAAA+e,YAAA,sEAMA,IAFA,IAAAuN,EAAA,GACAxpB,EAAAvN,OAAAC,KAAAkG,GACAzH,EAAA,EAAAA,EAAAo4B,EAAAp4B,IAAA,CAEA,IADA,IAAAid,EAAA,GACAqb,EAAA,EAAAA,EAAAzpB,EAAA7M,OAAAs2B,IACArb,EAAApO,EAAAypB,IAAA7wB,EAAAoH,EAAAypB,IAAAt4B,GAEAq4B,EAAA5yB,KAAAwX,GAEA,OAAAob,GAIAl4B,EAAA0I,KAAAouB,OAAA/qB,UAAAqsB,YAAA,SAAAF,GAEA,OADAnwB,QAAA8iB,KAAA,sEACAtsB,KAAA85B,aAAAH,IAWAl4B,EAAA0I,KAAAouB,OAAA/qB,UAAAssB,aAAA,SAAAH,EAAAd,GAEA,OAAAc,GAiBAl4B,EAAA0I,KAAAouB,OAAA/qB,UAAAusB,cAAA,SAAAhxB,EAAAoH,EAAAgoB,EAAAD,GAIA,IAAAzoB,MAAAC,QAAA3G,GACA,OAAAA,EAIA,IADA,IAAAixB,EAAA,GACAtsB,EAAA,EAAAA,EAAAyC,EAAA7M,OAAAoK,IACAssB,EAAAtsB,GAAA,EAGA,IAAAisB,EAAA5wB,EAAAwB,IAAA,SAAA6W,GAEA,IADA,IAAA6Y,EAAA,GACAL,EAAA,EAAAA,EAAAzpB,EAAA7M,OAAAs2B,IAAA,CACA,IAAA10B,EAAAkc,EAAAjR,EAAAypB,SACA,IAAA10B,IACA80B,EAAAJ,GAAA,GAEA1B,GAAAA,EAAA0B,KACA10B,EAAAgzB,EAAA0B,GAAA10B,IAEA+0B,EAAA9B,EAAAyB,IAAA10B,EAEA,OAAA+0B,IAKA,OAHAD,EAAA54B,QAAA,SAAA84B,EAAA54B,GACA,IAAA44B,EAAA,KAAA,SAAA/pB,EAAA7O,GAAA,8BAAA62B,EAAA72B,KAEAq4B,GAcAl4B,EAAA0I,KAAAouB,OAAA/qB,UAAA2sB,iBAAA,SAAApxB,EAAA8vB,EAAA1oB,EAAAgoB,GACA,OAAApvB,GAmBAtH,EAAA0I,KAAAouB,OAAA/qB,UAAAgsB,cAAA,SAAAD,EAAAV,EAAA1oB,EAAAgoB,EAAAD,GACA,IAAAZ,EAAAt3B,KAAAs3B,WAAAt3B,KAAAqN,YAAA+e,YAKA,GAJAyM,EAAAP,WACAO,EAAAP,SAAA,KAGAiB,EAMA,OADA/vB,QAAAC,MAAA,gDAAA6tB,EAAA,+BACAp3B,EAAAm4B,KAAAQ,GAGA,IAAAuB,EAAA,iBAAAb,EAAA7vB,KAAA0E,MAAAmrB,GAAAA,EAEAja,EAAAtf,KAEA,OAAAE,EAAAm4B,KAAA/Y,EAAAma,kBAAAW,EAAArxB,MAAAqxB,IACArwB,KAAA,SAAAswB,GAEA,OAAAn6B,EAAAm4B,KAAA/Y,EAAAwa,aAAAO,EAAAxB,MACA9uB,KAAA,SAAAhB,GACA,OAAA7I,EAAAm4B,KAAA/Y,EAAAya,cAAAhxB,EAAAoH,EAAAgoB,EAAAD,MACAnuB,KAAA,SAAAuwB,GAIA,OADAzB,EAAAP,SAAAhB,GAAAgD,EACAp6B,EAAAm4B,KAAA/Y,EAAA6a,iBAAAG,EAAAzB,EAAA1oB,EAAAgoB,MACApuB,KAAA,SAAAwwB,GACA,MAAA,CAAAnyB,OAAAywB,EAAAzwB,QAAA,GAAAkwB,SAAAO,EAAAP,SAAAjxB,KAAAkzB,MAKA94B,EAAA0I,KAAAouB,OAAA/qB,UAAAgtB,qBAAA,SAAAzxB,EAAAoH,EAAAgoB,EAAAD,GACA1uB,QAAA8iB,KAAA,yFACA,IAAAmO,EAAAz6B,KAAAy5B,kBAAA1wB,GACA,OAAA/I,KAAA+5B,cAAAU,EAAAtqB,EAAAgoB,EAAAD,IAIAz2B,EAAA0I,KAAAouB,OAAA/qB,UAAAktB,sBAAA,SAAA3xB,EAAAoH,EAAAgoB,EAAAD,GAEA,OADA1uB,QAAA8iB,KAAA,iFACAtsB,KAAA+5B,cAAAhxB,EAAAoH,EAAAgoB,EAAAD,IAIAz2B,EAAA0I,KAAAouB,OAAA/qB,UAAAmtB,UAAA,SAAA5xB,EAAAoH,EAAAgoB,EAAAD,GACA1uB,QAAA8iB,KAAA,8EACA,IAAAmO,EAAAz6B,KAAAy5B,kBAAA1wB,GACA,OAAA/I,KAAA+5B,cAAAU,EAAAtqB,EAAAgoB,EAAAD,IAWAz2B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA4b,EAAAC,EAAAp0B,GAoBA,OAnBAA,EACAgJ,MAAAC,QAAAjJ,GACAA,EAAAhF,EAAA0qB,iBAAA1e,OAAAH,MAAA,KAAA7G,GACA,iBAAAA,EACAA,EAAAhF,EAAA0qB,iBAAAre,IAAArH,GAAA+G,UACA,mBAAA/G,IACAA,EAAAA,EAAA+G,WAGA/G,EAAA,IAAAhF,EAAA0I,KAAAouB,QAEAqC,EAAAA,GAAA,cACAptB,UAAA/G,EACAm0B,EAAAptB,UAAAH,YAAAutB,EACAC,IAEAD,EAAAxO,YAAAyO,EACAp5B,EAAA0qB,iBAAAhd,IAAAyrB,IAEAA,GAYAn5B,EAAA0I,KAAAouB,OAAA/qB,UAAAmqB,OAAA,WACA,MAAA,CAAA/0B,OAAAk4B,eAAA96B,MAAAqN,YAAA+e,YACA,CAAAhlB,IAAApH,KAAAoH,IAAAqlB,OAAAzsB,KAAAysB,UASAhrB,EAAA0I,KAAA4wB,kBAAAt5B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA34B,KAAA04B,UAAAC,IACA,iBAEAl3B,EAAA0I,KAAA4wB,kBAAAvtB,UAAA6rB,WAAA,SAAAt2B,EAAAoN,EAAAgoB,EAAAD,GASA,MAPA,CADAl4B,KAAAysB,OAAA9a,UAAA,KACA,YAAAvQ,QAAA,SAAAqE,IACA,IAAA0K,EAAAnJ,QAAAvB,KACA0K,EAAA6qB,QAAAv1B,GACA0yB,EAAA6C,QAAAv1B,GACAyyB,EAAA8C,QAAA,SAGA,CAAA7qB,OAAAA,EAAAgoB,SAAAA,EAAAD,MAAAA,IAGAz2B,EAAA0I,KAAA4wB,kBAAAvtB,UAAAsrB,OAAA,SAAA/1B,EAAA81B,EAAA1oB,GACA,IAAA8qB,EAAAl4B,EAAAk4B,UAAApC,EAAAzwB,OAAA6yB,UAAAj7B,KAAAysB,OAAAwO,SACA,QAAA,IAAAA,EACA,KAAA,yDAEA,OAAAj7B,KAAAoH,IAAA,+BAAA6zB,EACA,wBAAAl4B,EAAA+C,IAAA,qBACA/C,EAAAgD,MACA,oBAAAhD,EAAAiD,KAGAvE,EAAA0I,KAAA4wB,kBAAAvtB,UAAAisB,kBAAA,SAAA1wB,GAQA,OAJAA,EAAAtH,EAAA0I,KAAAouB,OAAA/qB,UAAAisB,kBAAAz3B,KAAAhC,KAAA+I,GACA/I,KAAAysB,QAAAzsB,KAAAysB,OAAAhC,MAAA1hB,EAAAzF,QAAAyF,EAAA,GAAAA,UACAA,EAAA0hB,KAAA,SAAA7O,EAAAC,GAAA,OAAAD,EAAAA,SAAAC,EAAAA,WAEA9S,GAWAtH,EAAA0I,KAAA+wB,SAAAz5B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA34B,KAAA04B,UAAAC,GACA34B,KAAAy4B,iBAAA,GACA,QAEAh3B,EAAA0I,KAAA+wB,SAAA1tB,UAAA6rB,WAAA,SAAAt2B,EAAAoN,GACA,GAAA,EAAAA,EAAA7M,SACA,IAAA6M,EAAA7M,SAAA,IAAA6M,EAAAnJ,QAAA,aACA,KAAA,2CAAAmJ,EAAA3F,KAAA,OAKA/I,EAAA0I,KAAA+wB,SAAA1tB,UAAA2tB,gBAAA,SAAAtC,GAIA,IAAAuC,EAWAC,EAAA,CACAn5B,GAAAlC,KAAAysB,OAAA9a,SACA1L,SAAAjG,KAAAysB,OAAA6O,eACAC,OAAAv7B,KAAAysB,OAAA+O,aACAC,QAAA,MAEA,GAAA5C,GAAAA,EAAAxxB,MAAA,EAAAwxB,EAAAxxB,KAAA/D,OAAA,CACA,IAAAo4B,EAAA94B,OAAAC,KAAAg2B,EAAAxxB,KAAA,IACAs0B,GAnBAP,EAmBAM,EAnBA,WAEA,IADA,IAAAE,EAAAruB,UACAjM,EAAA,EAAAA,EAAAs6B,EAAAt4B,OAAAhC,IAAA,CACA,IAAA2H,EAAA2yB,EAAAt6B,GACA4H,EAAAkyB,EAAA7f,OAAA,SAAA9V,GAAA,OAAAA,EAAAC,MAAAuD,KACA,GAAAC,EAAA5F,OACA,OAAA4F,EAAA,GAGA,OAAA,OAWAmyB,EAAAn5B,GAAAm5B,EAAAn5B,IAAAy5B,EAAA,gBAAAA,EAAA,UACAN,EAAAp1B,SAAAo1B,EAAAp1B,UAAA01B,EAAA,gBAAA,YACAN,EAAAE,OAAAF,EAAAE,QAAAI,EAAA,cAAA,mBACAN,EAAAI,QAAAC,EAEA,OAAAL,GAGA55B,EAAA0I,KAAA+wB,SAAA1tB,UAAAquB,oBAAA,SAAA1rB,EAAAgoB,GAEA,IADA,IAAAh4B,EAAA,GACAmB,EAAA,EAAAA,EAAA6O,EAAA7M,OAAAhC,IACA,aAAA6O,EAAA7O,IACAnB,EAAA27B,WAAA3rB,EAAA7O,GACAnB,EAAA47B,YAAA5D,GAAAA,EAAA72B,KAEAnB,EAAA67B,KAAA7rB,EAAA7O,GACAnB,EAAA87B,MAAA9D,GAAAA,EAAA72B,IAGA,OAAAnB,GAGAsB,EAAA0I,KAAA+wB,SAAA1tB,UAAAisB,kBAAA,SAAA1wB,GAAA,OAAAA,GAEAtH,EAAA0I,KAAA+wB,SAAA1tB,UAAAsrB,OAAA,SAAA/1B,EAAA81B,EAAA1oB,GACA,IAaA+rB,EAAAn5B,EAAAo5B,aAAAtD,EAAAzwB,OAAA+zB,aAAA,EAEAC,EADAp8B,KAAA67B,oBAAA1rB,GACA6rB,KAIA,GAHA,UAAAI,IACAA,EAAAr5B,EAAAsnB,UAAAwO,EAAAzwB,OAAAiiB,UAAA,QAEA,SAAA+R,EAAA,CACA,IAAAvD,EAAAxxB,KACA,KAAA,gDAEA,IAAAxE,EAAA7C,KAAAm7B,gBAAAtC,GACA,IAAAh2B,EAAA04B,SAAA14B,EAAAX,GAAA,CACA,IAAAm6B,EAAA,GAGA,MAFAx5B,EAAAX,KAAAm6B,IAAAA,EAAA/4B,OAAA,KAAA,IAAA,MACAT,EAAA04B,SAAAc,IAAAA,EAAA/4B,OAAA,KAAA,IAAA,UACA,iDAAA+4B,EAAA,gBAAAx5B,EAAA44B,QAAA,IAEAW,EAAAvD,EAAAxxB,KA9BA,SAAA5B,EAAA62B,EAAAC,GACAD,EAAAA,GAAA,SACAC,EAAAA,GAAA,EAEA,IADA,IAAAC,EAAA/2B,EAAA,GAAA62B,GAAAG,EAAA,EACAn7B,EAAA,EAAAA,EAAAmE,EAAAnC,OAAAhC,IACAmE,EAAAnE,GAAAg7B,GAAAC,EAAAC,IACAA,EAAA/2B,EAAAnE,GAAAg7B,GAAAC,EACAE,EAAAn7B,GAGA,OAAAm7B,EAoBAC,CAAA7D,EAAAxxB,KAAAxE,EAAA04B,SAAA14B,EAAAX,IAIA,OAFA22B,EAAAzwB,SAAAywB,EAAAzwB,OAAA,IACAywB,EAAAzwB,OAAAiiB,SAAA+R,EACAp8B,KAAAoH,IAAA,gCAAA80B,EACA,wBAAAn5B,EAAA+C,IAAA,sBACA/C,EAAAgD,MACA,qBAAAhD,EAAAiD,IACA,qBAAAo2B,EAAA,4BAIA36B,EAAA0I,KAAA+wB,SAAA1tB,UAAA2sB,iBAAA,SAAApxB,EAAA8vB,EAAA1oB,EAAAgoB,GACA,IAAAt1B,EAAA7C,KAAAm7B,gBAAAtC,GACA8D,EAAA38B,KAAA67B,oBAAA1rB,EAAAgoB,GACA,IAAAt1B,EAAAoD,SACA,KAAA,4CAAApD,EAAA44B,QA8BA,OA5BA,SAAArvB,EAAAsI,EAAAkoB,EAAAC,GAEA,IADA,IAAAv7B,EAAA,EAAAs4B,EAAA,EACAt4B,EAAA8K,EAAA9I,QAAAs2B,EAAAllB,EAAAooB,UAAAx5B,QACA8I,EAAA9K,GAAAuB,EAAAoD,YAAAyO,EAAAooB,UAAAlD,IACAxtB,EAAA9K,GAAAs7B,GAAAloB,EAAAmoB,GAAAjD,GACAt4B,IACAs4B,KACAxtB,EAAA9K,GAAAuB,EAAAoD,UAAAyO,EAAAooB,UAAAlD,GACAt4B,IAEAs4B,IAcAmD,CAAAlE,EAAAxxB,KAAA0B,EAAA4zB,EAAAV,MAAA,WACAU,EAAAb,YAAAjD,EAAAzwB,OAAAiiB,UAXA,SAAAthB,EAAAi0B,EAAAC,EAAAC,GACA,IAAA,IAAA57B,EAAA,EAAAA,EAAAyH,EAAAzF,OAAAhC,IACAyH,EAAAzH,GAAA27B,IAAAl0B,EAAAzH,GAAA27B,KAAAD,EACAj0B,EAAAzH,GAAA47B,GAAA,EAEAn0B,EAAAzH,GAAA47B,GAAA,EAOAC,CAAAtE,EAAAxxB,KAAAwxB,EAAAzwB,OAAAiiB,SAAAxnB,EAAAX,GAAAy6B,EAAAZ,aAEAlD,EAAAxxB,MAUA5F,EAAA0I,KAAAizB,WAAA37B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA34B,KAAA04B,UAAAC,IACA,UAEAl3B,EAAA0I,KAAAizB,WAAA5vB,UAAAsrB,OAAA,SAAA/1B,EAAA81B,EAAA1oB,GACA,IAAAkc,EAAAtpB,EAAAspB,QAAAwM,EAAAzwB,OAAAikB,QAAArsB,KAAAysB,OAAAJ,QAAA,EACA,OAAArsB,KAAAoH,IAAA,qBAAAilB,EACA,kBAAAtpB,EAAA+C,IAAA,kBACA/C,EAAAiD,IACA,eAAAjD,EAAAgD,OAKAtE,EAAA0I,KAAAizB,WAAA5vB,UAAAisB,kBAAA,SAAA1wB,GAAA,OAAAA,GACAtH,EAAA0I,KAAAizB,WAAA5vB,UAAAusB,cAAA,SAAAhxB,EAAAoH,EAAAgoB,EAAAD,GAAA,OAAAnvB,GAQAtH,EAAA0I,KAAAkzB,qBAAA57B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA34B,KAAA04B,UAAAC,IACA,oBAEAl3B,EAAA0I,KAAAkzB,qBAAA7vB,UAAAsrB,OAAA,WACA,OAAA94B,KAAAoH,KAGA3F,EAAA0I,KAAAkzB,qBAAA7vB,UAAAisB,kBAAA,SAAA1wB,GAAA,OAAAA,GAEAtH,EAAA0I,KAAAkzB,qBAAA7vB,UAAAorB,YAAA,SAAA71B,EAAA81B,EAAA1oB,GACA,OAAAnQ,KAAAoH,IAAAsC,KAAAC,UAAA5G,IAGAtB,EAAA0I,KAAAkzB,qBAAA7vB,UAAAurB,aAAA,SAAAh2B,EAAA81B,EAAA1oB,GACA,IAAAmtB,EAAA,GACAzE,EAAAxxB,KAAAjG,QAAA,SAAAgS,GACA,IAAAoP,EAAApP,EAAAoP,QACAA,EAAAxb,QAAA,OACAwb,EAAAA,EAAA+a,OAAA,EAAA/a,EAAAxb,QAAA,OAEAs2B,EAAAv2B,KAAAyb,KAEA,IAAApb,EAAApH,KAAA84B,OAAA/1B,EAAA81B,EAAA1oB,GACA9I,EAAA,WAAAomB,mBAAA/jB,KAAAC,UAAA2zB,IAIA,OAAA77B,EAAA8wB,kBAAA,OAAAnrB,EAAAC,EAHA,CACAm2B,eAAA,uCAKA/7B,EAAA0I,KAAAkzB,qBAAA7vB,UAAA2sB,iBAAA,SAAApxB,EAAA8vB,EAAA1oB,EAAAgoB,GACA,IAAApvB,EACA,OAAA8vB,EAEA,IAAA4E,EAAA,CAAA,KAAA,UAAA,UAAA,UAAA,QAAA,QAAA,SAAA,SAAA,SAAA,UAAA,QAAA,QAAA,QAAA,MAAA,SAqBA,OApBA5E,EAAAxxB,KAAAjG,QAAA,SAAAgS,EAAA9R,GACA,IAAAkhB,EAAApP,EAAAoP,QACAA,EAAAxb,QAAA,OACAwb,EAAAA,EAAA+a,OAAA,EAAA/a,EAAAxb,QAAA,OAEAy2B,EAAAr8B,QAAA,SAAAoP,GAEA,QAAA,IAAAqoB,EAAAxxB,KAAA/F,GAAAkP,GACA,GAAAzH,EAAAyZ,GAAA,CACA,IAAAtd,EAAA6D,EAAAyZ,GAAAhS,GACA,iBAAAtL,IAAA,IAAAA,EAAAsJ,WAAAxH,QAAA,OACA9B,EAAA4B,WAAA5B,EAAAN,QAAA,KAEAi0B,EAAAxxB,KAAA/F,GAAAkP,GAAAtL,OAGA2zB,EAAAxxB,KAAA/F,GAAAkP,GAAA,SAIAqoB,EAAAxxB,MASA5F,EAAA0I,KAAAuzB,wBAAAj8B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA34B,KAAA04B,UAAAC,IACA,YAEAl3B,EAAA0I,KAAAuzB,wBAAAlwB,UAAAsrB,OAAA,SAAA/1B,EAAA81B,EAAA1oB,GACA,IAAAkc,EAAAtpB,EAAA46B,cAAA9E,EAAAzwB,OAAAu1B,cAAA39B,KAAAysB,OAAAJ,QAAA,GACA,OAAArsB,KAAAoH,IAAA,iBAAAilB,EACA,uBAAAtpB,EAAA+C,IAAA,qBACA/C,EAAAiD,IACA,oBAAAjD,EAAAgD,OASAtE,EAAA0I,KAAAyzB,eAAAn8B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA34B,KAAA04B,UAAAC,IACA,cAEAl3B,EAAA0I,KAAAyzB,eAAApwB,UAAAsrB,OAAA,SAAA/1B,EAAA81B,EAAA1oB,GACA,IAAAkc,EAAAtpB,EAAA86B,gBAAAhF,EAAAzwB,OAAAy1B,gBAAA79B,KAAAysB,OAAAJ,QAAA,GACA,OAAArsB,KAAAoH,IAAA,iBAAAilB,EACA,uBAAAtpB,EAAA+C,IAAA,kBACA/C,EAAAiD,IACA,eAAAjD,EAAAgD,OAUAtE,EAAA0I,KAAA2zB,aAAAr8B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAAjW,GAEA/I,KAAA+9B,MAAAh1B,GACA,cAEAtH,EAAA0I,KAAA2zB,aAAAtwB,UAAAwrB,WAAA,SAAAj2B,EAAA81B,EAAA1oB,GACA,OAAAjQ,EAAAsyB,MAAA,WAAA,OAAAxyB,KAAA+9B,OAAAlyB,KAAA7L,QAGAyB,EAAA0I,KAAA2zB,aAAAtwB,UAAAmqB,OAAA,WACA,MAAA,CAAA/0B,OAAAk4B,eAAA96B,MAAAqN,YAAA+e,YAAApsB,KAAA+9B,QAWAt8B,EAAA0I,KAAA6zB,aAAAv8B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA34B,KAAA04B,UAAAC,IACA,YACAl3B,EAAA0I,KAAA6zB,aAAAxwB,UAAAsrB,OAAA,SAAA/1B,EAAA81B,EAAA1oB,GACA,IAAA8tB,EAAAj+B,KAAAysB,OAAAwR,MACA,IAAAA,IAAAxuB,MAAAC,QAAAuuB,KAAAA,EAAA36B,OACA,KAAA,CAAA,cAAAtD,KAAAqN,YAAA+e,YAAA,6EAAA5hB,KAAA,KAOA,MALA,CACAxK,KAAAoH,IACA,uBAAAqmB,mBAAA1qB,EAAA2hB,SAAA,oBACAuZ,EAAA1zB,IAAA,SAAA6W,GAAA,MAAA,SAAAqM,mBAAArM,KAAA5W,KAAA,MAEAA,KAAA,KAqBA/I,EAAA0I,KAAA+zB,gBAAAz8B,EAAA0I,KAAAouB,OAAAvZ,OAAA,SAAA2Z,GACA,IAAAA,IAAAA,EAAAn4B,QACA,KAAA,0GAWAR,KAAAm+B,qBAAAxF,EAAAn4B,QAGA,IAAA49B,EAAAx7B,OAAAC,KAAA81B,EAAAn4B,SACA8e,EAAAtf,KACAA,KAAAq+B,iBAAAj9B,QAAA,SAAAsM,GACA,IAAA,IAAA0wB,EAAAp3B,QAAA0G,GACA,KAAA,qBAAA4R,EAAAjS,YAAA+e,YAAA,8CAAA1e,IAGA1N,KAAA04B,UAAAC,IACA,mBAGAl3B,EAAA0I,KAAA+zB,gBAAA1wB,UAAA6wB,iBAAA,GAEA58B,EAAA0I,KAAA+zB,gBAAA1wB,UAAAkrB,UAAA,SAAAC,KAEAl3B,EAAA0I,KAAA+zB,gBAAA1wB,UAAAwrB,WAAA,SAAAj2B,EAAA81B,EAAA1oB,GAGA,IAAAmP,EAAAtf,KAOA,OANA4C,OAAAC,KAAA7C,KAAAm+B,sBAAA/8B,QAAA,SAAAg2B,GACA,IAAAkH,EAAAhf,EAAA6e,qBAAA/G,GACA,GAAAyB,EAAAP,WAAAO,EAAAP,SAAAgG,GACA,MAAAhf,EAAAjS,YAAA+e,YAAA,qDAAAkS,IAGAp+B,EAAAm4B,KAAAQ,EAAAxxB,MAAA,KAGA5F,EAAA0I,KAAA+zB,gBAAA1wB,UAAAgsB,cAAA,SAAAzwB,EAAA8vB,EAAA1oB,EAAAgoB,GAMA,OAAAj4B,EAAAm4B,KAAAr4B,KAAAm6B,iBAAApxB,EAAA8vB,EAAA1oB,EAAAgoB,IACApuB,KAAA,SAAAwwB,GACA,MAAA,CAAAnyB,OAAAywB,EAAAzwB,QAAA,GAAAkwB,SAAAO,EAAAP,UAAA,GAAAjxB,KAAAkzB,MAIA94B,EAAA0I,KAAA+zB,gBAAA1wB,UAAA2sB,iBAAA,SAAAR,EAAAd,GAEA,KAAA,iDCrgCAp3B,EAAAa,KAAA,SAAAJ,EAAAP,EAAAC,GAiRA,OA/QA5B,KAAAuW,aAAA,GAEAvW,KAAAyL,YAAAzL,MAGAkC,GAAAA,EAGAlC,KAAAuC,UAAA,KAKAvC,KAAAgD,IAAA,KAGAhD,KAAAkW,OAAA,GAMAlW,KAAAwzB,qBAAA,GAKAxzB,KAAAu+B,iCAAA,WACAv+B,KAAAwzB,qBAAApyB,QAAA,SAAAo9B,EAAAvlB,GACAjZ,KAAAkW,OAAAsoB,GAAA58B,OAAA0xB,QAAAra,GACApN,KAAA7L,QAOAA,KAAA0X,UAAA,WACA,OAAA1X,KAAAkC,IASAlC,KAAAy+B,eAAA,GAUAz+B,KAAA4B,YARA,IAAAA,EAQAH,EAAAkM,QAAAO,MAAA,GAAAzM,EAAAkM,QAAAG,IAAA,OAAA,yBAEAlM,EAEAH,EAAAkM,QAAAO,MAAAlO,KAAA4B,OAAAH,EAAAa,KAAAoU,eAMA1W,KAAA2W,aAAAjN,KAAA0E,MAAA1E,KAAAC,UAAA3J,KAAA4B,SAUA5B,KAAA+C,MAAA/C,KAAA4B,OAAAmB,MAGA/C,KAAA2e,IAAA,IAAAld,EAAA0I,KAAA4tB,UAAAp2B,GASA3B,KAAA0+B,gBAAA,KAOA1+B,KAAA2+B,YAAA,CACAC,eAAA,GACAC,eAAA,GACAC,cAAA,GACAC,gBAAA,GACAC,kBAAA,GACAC,cAAA,IAoCAj/B,KAAA2L,GAAA,SAAA0O,EAAA6kB,GACA,IAAAzvB,MAAAC,QAAA1P,KAAA2+B,YAAAtkB,IACA,KAAA,iDAAAA,EAAA7L,WAEA,GAAA,mBAAA0wB,EACA,KAAA,8DAGA,OADAl/B,KAAA2+B,YAAAtkB,GAAAtT,KAAAm4B,GACAA,GAQAl/B,KAAAm/B,IAAA,SAAA9kB,EAAA6kB,GACA,IAAAE,EAAAp/B,KAAA2+B,YAAAtkB,GACA,IAAA5K,MAAAC,QAAA0vB,GACA,KAAA,+CAAA/kB,EAAA7L,WAEA,QAAA6wB,IAAAH,EAGAl/B,KAAA2+B,YAAAtkB,GAAA,OACA,CACA,IAAAilB,EAAAF,EAAAp4B,QAAAk4B,GACA,IAAA,IAAAI,EAGA,KAAA,iFAFAF,EAAAriB,OAAAuiB,EAAA,GAKA,OAAAt/B,MAQAA,KAAAgd,KAAA,SAAA3C,EAAAklB,GAGA,IAAA9vB,MAAAC,QAAA1P,KAAA2+B,YAAAtkB,IACA,KAAA,kDAAAA,EAAA7L,WAEA,IAAAgxB,EAAAx/B,KAAA0X,YACA4H,EAAAtf,KAeA,OAdAA,KAAA2+B,YAAAtkB,GAAAjZ,QAAA,SAAAq+B,GACA,IAAAC,EAIAA,EAHAH,GAAAA,EAAAC,SAGAD,EAEA,CAAAC,SAAAA,EAAAz2B,KAAAw2B,GAAA,MAKAE,EAAAz9B,KAAAsd,EAAAogB,KAEA1/B,MAQAA,KAAAiM,cAAA,WAKA,IAJA,IAAA0zB,EAAA3/B,KAAAgD,IAAAf,OAAA+K,wBACA4yB,EAAA/O,SAAAC,gBAAA+O,YAAAhP,SAAAxpB,KAAAw4B,WACAC,EAAAjP,SAAAC,gBAAAH,WAAAE,SAAAxpB,KAAAspB,UACApuB,EAAAvC,KAAAgD,IAAAf,OACA,OAAAM,EAAAkI,YAEA,IADAlI,EAAAA,EAAAkI,cACAomB,UAAA,WAAA5wB,EAAA6B,OAAAS,GAAAW,MAAA,YAAA,CACA08B,GAAA,EAAAr9B,EAAAyK,wBAAAZ,KACA0zB,GAAA,EAAAv9B,EAAAyK,wBAAAd,IACA,MAGA,MAAA,CACAzG,EAAAm6B,EAAAD,EAAAvzB,KACAD,EAAA2zB,EAAAH,EAAAzzB,IACAG,MAAAszB,EAAAtzB,MACAC,OAAAqzB,EAAArzB,SAQAtM,KAAAgxB,mBAAA,WAGA,IAFA,IAAAnrB,EAAA,CAAAqG,IAAA,EAAAE,KAAA,GACA7J,EAAAvC,KAAAuC,UAAAw9B,cAAA,KACA,OAAAx9B,GACAsD,EAAAqG,KAAA3J,EAAAy9B,UACAn6B,EAAAuG,MAAA7J,EAAA09B,WACA19B,EAAAA,EAAAw9B,cAAA,KAEA,OAAAl6B,GAUA7F,KAAAqV,YAAA,GAOArV,KAAAkgC,YAAA,SAAAjoB,GAEA,OADAA,EAAAA,GAAA,YAEA,IAAAjY,KAAAqV,YAAA4C,UAAAjY,KAAAqV,YAAA4C,WAAAA,KAAAjY,KAAAmgC,eAEAngC,KAAAqV,YAAA2C,UAAAhY,KAAAqV,YAAA+qB,SAAApgC,KAAAmgC,eAKAngC,KAAAqgC,mBAEArgC,MAUAyB,EAAAa,KAAAoU,cAAA,CACA3T,MAAA,GACAsJ,MAAA,EACAC,OAAA,EACAgI,UAAA,EACAC,WAAA,EACA0B,mBAAA,EACAqqB,aAAA,EACApqB,OAAA,GACAtI,UAAA,CACAxN,WAAA,IAEA2X,kBAAA,EACA1B,aAAA,GAQA5U,EAAAa,KAAAkL,UAAA+yB,gBAAA,SAAAlnB,GACA,GAAA,WAAAA,GAAA,UAAAA,EACA,KAAA,yEAEA,IAAAmnB,EAAA,EACA,IAAA,IAAAt+B,KAAAlC,KAAAkW,OAEAlW,KAAAkW,OAAAhU,GAAAN,OAAA,gBAAAyX,KACArZ,KAAAkW,OAAAhU,GAAAN,OAAA,gBAAAyX,GAAA,EAAAzW,OAAAC,KAAA7C,KAAAkW,QAAA5S,QAEAk9B,GAAAxgC,KAAAkW,OAAAhU,GAAAN,OAAA,gBAAAyX,GAEA,OAAAmnB,GAOA/+B,EAAAa,KAAAkL,UAAAizB,WAAA,WACA,IAAAC,EAAA1gC,KAAAgD,IAAAf,OAAA+K,wBAEA,OADAhN,KAAAmD,cAAAu9B,EAAAr0B,MAAAq0B,EAAAp0B,QACAtM,MAOAyB,EAAAa,KAAAkL,UAAA6yB,iBAAA,WAIA,GAAAj8B,MAAApE,KAAA4B,OAAAyK,QAAArM,KAAA4B,OAAAyK,OAAA,EACA,KAAA,0DAEA,GAAAjI,MAAApE,KAAA4B,OAAA0K,SAAAtM,KAAA4B,OAAA0K,QAAA,EACA,KAAA,0DAEA,GAAAlI,MAAApE,KAAA4B,OAAA0+B,eAAAtgC,KAAA4B,OAAA0+B,cAAA,EACA,KAAA,iEAoBA,OAhBAtgC,KAAA4B,OAAAqU,oBACAjW,KAAA0+B,gBAAAz+B,EAAA6B,OAAA+b,QAAAlS,GAAA,aAAA3L,KAAAkC,GAAA,WACAlC,KAAAygC,cACA50B,KAAA7L,OAGAC,EAAA6B,OAAA+b,QAAAlS,GAAA,WAAA3L,KAAAkC,GAAA,WACAlC,KAAAmD,iBACA0I,KAAA7L,QAIAA,KAAA4B,OAAAsU,OAAA9U,QAAA,SAAAu/B,GACA3gC,KAAA4gC,SAAAD,IACA90B,KAAA7L,OAEAA,MAYAyB,EAAAa,KAAAkL,UAAArK,cAAA,SAAAkJ,EAAAC,GAEA,IAAApK,EAGAoS,EAAAxN,WAAA9G,KAAA4B,OAAA0S,YAAA,EACAC,EAAAzN,WAAA9G,KAAA4B,OAAA2S,aAAA,EACA,IAAArS,KAAAlC,KAAAkW,OACA5B,EAAAhQ,KAAAG,IAAA6P,EAAAtU,KAAAkW,OAAAhU,GAAAN,OAAA0S,WACA,EAAAxN,WAAA9G,KAAAkW,OAAAhU,GAAAN,OAAA2S,aAAA,EAAAzN,WAAA9G,KAAAkW,OAAAhU,GAAAN,OAAAuU,uBACA5B,EAAAjQ,KAAAG,IAAA8P,EAAAvU,KAAAkW,OAAAhU,GAAAN,OAAA2S,WAAAvU,KAAAkW,OAAAhU,GAAAN,OAAAuU,sBAYA,GATAnW,KAAA4B,OAAA0S,UAAAhQ,KAAAG,IAAA6P,EAAA,GACAtU,KAAA4B,OAAA2S,WAAAjQ,KAAAG,IAAA8P,EAAA,GACAtU,EAAA6B,OAAA9B,KAAAgD,IAAAf,OAAAwI,YAAAvH,MAAA,CACA29B,YAAA7gC,KAAA4B,OAAA0S,UAAA,KACAwsB,aAAA9gC,KAAA4B,OAAA2S,WAAA,QAKAnQ,MAAAiI,IAAA,GAAAA,IAAAjI,MAAAkI,IAAA,GAAAA,EAAA,CACAtM,KAAA4B,OAAAyK,MAAA/H,KAAAG,IAAAH,KAAAqC,OAAA0F,GAAArM,KAAA4B,OAAA0S,WACAtU,KAAA4B,OAAA0K,OAAAhI,KAAAG,IAAAH,KAAAqC,OAAA2F,GAAAtM,KAAA4B,OAAA2S,YACAvU,KAAA4B,OAAA0+B,aAAAtgC,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA0K,OAEAtM,KAAA4B,OAAAqU,oBACAjW,KAAAgD,MACAhD,KAAA4B,OAAAyK,MAAA/H,KAAAG,IAAAzE,KAAAgD,IAAAf,OAAAwI,WAAAuC,wBAAAX,MAAArM,KAAA4B,OAAA0S,YAEAtU,KAAA4B,OAAA0K,OAAAtM,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA0+B,aACAtgC,KAAA4B,OAAA0K,OAAAtM,KAAA4B,OAAA2S,aACAvU,KAAA4B,OAAA0K,OAAAtM,KAAA4B,OAAA2S,WACAvU,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA0K,OAAAtM,KAAA4B,OAAA0+B,eAIA,IAAAR,EAAA,EACA9/B,KAAAwzB,qBAAApyB,QAAA,SAAA6W,GACA,IAAA8oB,EAAA/gC,KAAA4B,OAAAyK,MACA20B,EAAAhhC,KAAAkW,OAAA+B,GAAArW,OAAAuU,oBAAAnW,KAAA4B,OAAA0K,OACAtM,KAAAkW,OAAA+B,GAAA9U,cAAA49B,EAAAC,GACAhhC,KAAAkW,OAAA+B,GAAAgpB,UAAA,EAAAnB,GACA9/B,KAAAkW,OAAA+B,GAAArW,OAAAs/B,oBAAAz7B,EAAA,EACAzF,KAAAkW,OAAA+B,GAAArW,OAAAs/B,oBAAA/0B,EAAA2zB,EAAA9/B,KAAA4B,OAAA0K,OACAwzB,GAAAkB,EACAhhC,KAAAkW,OAAA+B,GAAArK,UAAA9B,UACAD,KAAA7L,YAKA,GAAA4C,OAAAC,KAAA7C,KAAAkW,QAAA5S,OAAA,CAGA,IAAApB,KAFAlC,KAAA4B,OAAAyK,MAAA,EACArM,KAAA4B,OAAA0K,OAAA,EACAtM,KAAAkW,OACAlW,KAAA4B,OAAAyK,MAAA/H,KAAAG,IAAAzE,KAAAkW,OAAAhU,GAAAN,OAAAyK,MAAArM,KAAA4B,OAAAyK,OACArM,KAAA4B,OAAA0K,QAAAtM,KAAAkW,OAAAhU,GAAAN,OAAA0K,OAEAtM,KAAA4B,OAAAyK,MAAA/H,KAAAG,IAAAzE,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA0S,WACAtU,KAAA4B,OAAA0K,OAAAhI,KAAAG,IAAAzE,KAAA4B,OAAA0K,OAAAtM,KAAA4B,OAAA2S,YAyBA,OArBAvU,KAAA4B,OAAA0+B,aAAAtgC,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA0K,OAGA,OAAAtM,KAAAgD,MACAhD,KAAA4B,OAAAqU,kBACAjW,KAAAgD,IACAX,KAAA,UAAA,OAAArC,KAAA4B,OAAAyK,MAAA,IAAArM,KAAA4B,OAAA0K,QACAjK,KAAA,sBAAA,iBAEArC,KAAAgD,IAAAX,KAAA,QAAArC,KAAA4B,OAAAyK,OAAAhK,KAAA,SAAArC,KAAA4B,OAAA0K,SAKAtM,KAAAuW,cACAvW,KAAA+X,iBAAA9R,WACAjG,KAAA4N,UAAA9B,SACA9L,KAAAwL,QAAAM,SACA9L,KAAA6M,OAAAf,UAGA9L,KAAAgd,KAAA,mBAQAvb,EAAAa,KAAAkL,UAAAozB,SAAA,SAAAh/B,GAGA,GAAA,iBAAAA,EACA,KAAA,qEAIA,IAAAoJ,EAAA,IAAAvJ,EAAAgV,MAAA7U,EAAA5B,MAMA,GAAA,QAHAA,KAAAkW,OAAAlL,EAAA9I,IAAA8I,GAGApJ,OAAA0xB,UAAAlvB,MAAA4G,EAAApJ,OAAA0xB,UACA,EAAAtzB,KAAAwzB,qBAAAlwB,OAEA0H,EAAApJ,OAAA0xB,QAAA,IACAtoB,EAAApJ,OAAA0xB,QAAAhvB,KAAAG,IAAAzE,KAAAwzB,qBAAAlwB,OAAA0H,EAAApJ,OAAA0xB,QAAA,IAEAtzB,KAAAwzB,qBAAAzW,OAAA/R,EAAApJ,OAAA0xB,QAAA,EAAAtoB,EAAA9I,IACAlC,KAAAu+B,uCACA,CACA,IAAAj7B,EAAAtD,KAAAwzB,qBAAAzsB,KAAAiE,EAAA9I,IACAlC,KAAAkW,OAAAlL,EAAA9I,IAAAN,OAAA0xB,QAAAhwB,EAAA,EAKA,IAAAkT,EAAA,KAoBA,OAnBAxW,KAAA4B,OAAAsU,OAAA9U,QAAA,SAAAu/B,EAAA1nB,GACA0nB,EAAAz+B,KAAA8I,EAAA9I,KAAAsU,EAAAyC,KAEA,OAAAzC,IACAA,EAAAxW,KAAA4B,OAAAsU,OAAAnP,KAAA/G,KAAAkW,OAAAlL,EAAA9I,IAAAN,QAAA,GAEA5B,KAAAkW,OAAAlL,EAAA9I,IAAAsU,WAAAA,EAGAxW,KAAAuW,cACAvW,KAAAoD,iBAEApD,KAAAkW,OAAAlL,EAAA9I,IAAAmB,aACArD,KAAAkW,OAAAlL,EAAA9I,IAAAwc,QAGA1e,KAAAmD,cAAAnD,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA0K,SAGAtM,KAAAkW,OAAAlL,EAAA9I,KAcAT,EAAAa,KAAAkL,UAAA2zB,eAAA,SAAAC,EAAAC,GAIA,IAAAC,EAHAD,EAAAA,GAAA,OAKAC,EADAF,EACA,CAAAA,GAEAx+B,OAAAC,KAAA7C,KAAAkW,QAEA,IAAAoJ,EAAAtf,KAYA,OAXAshC,EAAAlgC,QAAA,SAAAo9B,GACAlf,EAAApJ,OAAAsoB,GAAA3lB,0BAAAzX,QAAA,SAAAmgC,GACA,IAAAC,EAAAliB,EAAApJ,OAAAsoB,GAAA5oB,YAAA2rB,GACAC,EAAApnB,4BAEAkF,EAAA1d,OAAAmB,MAAAy7B,EAAA,IAAA+C,GACA,UAAAF,GACAG,EAAA3qB,sBAIA7W,MAQAyB,EAAAa,KAAAkL,UAAA4lB,YAAA,SAAAlxB,GACA,IAAAlC,KAAAkW,OAAAhU,GACA,KAAA,yCAAAA,EA6CA,OAzCAlC,KAAA+X,iBAAAnM,OAGA5L,KAAAmhC,eAAAj/B,GAGAlC,KAAAkW,OAAAhU,GAAA2K,OAAAjB,OACA5L,KAAAkW,OAAAhU,GAAA0L,UAAA+gB,SAAA,GACA3uB,KAAAkW,OAAAhU,GAAAsJ,QAAAI,OAGA5L,KAAAkW,OAAAhU,GAAAc,IAAAT,WACAvC,KAAAkW,OAAAhU,GAAAc,IAAAT,UAAAmK,SAIA1M,KAAA4B,OAAAsU,OAAA6G,OAAA/c,KAAAkW,OAAAhU,GAAAsU,WAAA,UACAxW,KAAAkW,OAAAhU,UACAlC,KAAA4B,OAAAmB,MAAAb,GAGAlC,KAAA4B,OAAAsU,OAAA9U,QAAA,SAAAu/B,EAAA1nB,GACAjZ,KAAAkW,OAAAyqB,EAAAz+B,IAAAsU,WAAAyC,GACApN,KAAA7L,OAGAA,KAAAwzB,qBAAAzW,OAAA/c,KAAAwzB,qBAAAxsB,QAAA9E,GAAA,GACAlC,KAAAu+B,mCAGAv+B,KAAAuW,cAEAvW,KAAA4B,OAAA2S,WAAAvU,KAAA2W,aAAApC,WACAvU,KAAA4B,OAAA0S,UAAAtU,KAAA2W,aAAArC,UAEAtU,KAAAoD,iBAGApD,KAAAmD,cAAAnD,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA0K,SAGAtM,MAaAyB,EAAAa,KAAAkL,UAAApK,eAAA,WAEA,IAAAlB,EAKAu/B,EAAA,CAAAr1B,KAAA,EAAAsI,MAAA,GAKA,IAAAxS,KAAAlC,KAAAkW,OACA,OAAAlW,KAAAkW,OAAAhU,GAAAN,OAAAuU,sBACAnW,KAAAkW,OAAAhU,GAAAN,OAAAuU,oBAAAnW,KAAAkW,OAAAhU,GAAAN,OAAA0K,OAAAtM,KAAA4B,OAAA0K,QAEA,OAAAtM,KAAAkW,OAAAhU,GAAAN,OAAA4S,qBACAxU,KAAAkW,OAAAhU,GAAAN,OAAA4S,mBAAA,GAEAxU,KAAAkW,OAAAhU,GAAAN,OAAAyT,YAAAM,WACA8rB,EAAAr1B,KAAA9H,KAAAG,IAAAg9B,EAAAr1B,KAAApM,KAAAkW,OAAAhU,GAAAN,OAAA6S,OAAArI,MACAq1B,EAAA/sB,MAAApQ,KAAAG,IAAAg9B,EAAA/sB,MAAA1U,KAAAkW,OAAAhU,GAAAN,OAAA6S,OAAAC,QAKA,IAAAgtB,EAAA1hC,KAAAugC,gBAAA,UACA,IAAAmB,EACA,OAAA1hC,KAEA,IAAA2hC,EAAA,EAAAD,EACA,IAAAx/B,KAAAlC,KAAAkW,OACAlW,KAAAkW,OAAAhU,GAAAN,OAAAuU,qBAAAwrB,EAKA,IAAA7B,EAAA,EACA9/B,KAAAwzB,qBAAApyB,QAAA,SAAA6W,GAIA,GAHAjY,KAAAkW,OAAA+B,GAAAgpB,UAAA,EAAAnB,GACA9/B,KAAAkW,OAAA+B,GAAArW,OAAAs/B,oBAAAz7B,EAAA,EACAq6B,GAAA9/B,KAAAkW,OAAA+B,GAAArW,OAAA0K,OACAtM,KAAAkW,OAAA+B,GAAArW,OAAAyT,YAAAM,SAAA,CACA,IAAA4T,EAAAjlB,KAAAG,IAAAg9B,EAAAr1B,KAAApM,KAAAkW,OAAA+B,GAAArW,OAAA6S,OAAArI,KAAA,GACA9H,KAAAG,IAAAg9B,EAAA/sB,MAAA1U,KAAAkW,OAAA+B,GAAArW,OAAA6S,OAAAC,MAAA,GACA1U,KAAAkW,OAAA+B,GAAArW,OAAAyK,OAAAkd,EACAvpB,KAAAkW,OAAA+B,GAAArW,OAAA6S,OAAArI,KAAAq1B,EAAAr1B,KACApM,KAAAkW,OAAA+B,GAAArW,OAAA6S,OAAAC,MAAA+sB,EAAA/sB,MACA1U,KAAAkW,OAAA+B,GAAArW,OAAA6c,SAAAtJ,OAAA1P,EAAAg8B,EAAAr1B,OAEAP,KAAA7L,OACA,IAAA4hC,EAAA9B,EAcA,OAbA9/B,KAAAwzB,qBAAApyB,QAAA,SAAA6W,GACAjY,KAAAkW,OAAA+B,GAAArW,OAAAs/B,oBAAA/0B,EAAAnM,KAAAkW,OAAA+B,GAAArW,OAAAuT,OAAAhJ,EAAAy1B,GACA/1B,KAAA7L,OAGAA,KAAAmD,gBAGAnD,KAAAwzB,qBAAApyB,QAAA,SAAA6W,GACAjY,KAAAkW,OAAA+B,GAAA9U,cAAAnD,KAAA4B,OAAAyK,MAAArM,KAAAkW,OAAA+B,GAAArW,OAAA4S,mBACAxU,KAAA4B,OAAA0K,OAAAtM,KAAAkW,OAAA+B,GAAArW,OAAAuU,sBACAtK,KAAA7L,OAEAA,MAUAyB,EAAAa,KAAAkL,UAAAnK,WAAA,WAQA,GALArD,KAAA4B,OAAAqU,mBACAhW,EAAA6B,OAAA9B,KAAAuC,WAAAmI,QAAA,2BAAA,GAIA1K,KAAA4B,OAAAyU,YAAA,CACA,IAAAwrB,EAAA7hC,KAAAgD,IAAAC,OAAA,KACAZ,KAAA,QAAA,kBAAAA,KAAA,KAAArC,KAAAkC,GAAA,gBACA4/B,EAAAD,EAAA5+B,OAAA,QACAZ,KAAA,QAAA,2BAAAA,KAAA,KAAA,GACA0/B,EAAAF,EAAA5+B,OAAA,QACAZ,KAAA,QAAA,6BAAAA,KAAA,KAAA,GACArC,KAAAqW,YAAA,CACArT,IAAA6+B,EACAG,SAAAF,EACAG,WAAAF,GAgIA,IAAA,IAAA7/B,KA3HAlC,KAAAwL,QAAA/J,EAAAygC,gBAAAlgC,KAAAhC,MACAA,KAAA6M,OAAApL,EAAA0gC,eAAAngC,KAAAhC,MAGAA,KAAA+X,iBAAA,CACAhN,OAAA/K,KACAquB,aAAA,KACAnjB,SAAA,EACA8M,UAAA,EACAoqB,UAAA,GACAC,gBAAA,KACAh3B,KAAA,WAEA,IAAArL,KAAAkL,UAAAlL,KAAA+K,OAAAS,QAAAN,QAAA,CACAlL,KAAAkL,SAAA,EAEAlL,KAAA+K,OAAAyoB,qBAAApyB,QAAA,SAAA6W,EAAAqqB,GACA,IAAA5gC,EAAAzB,EAAA6B,OAAA9B,KAAA+K,OAAA/H,IAAAf,OAAAwI,YAAAiB,OAAA,MAAA,0BACArJ,KAAA,QAAA,qBACAA,KAAA,QAAA,gBACAX,EAAAuB,OAAA,QACA,IAAAs/B,EAAAtiC,EAAAwd,SAAA+kB,OACAD,EAAA52B,GAAA,YAAA,WAAA3L,KAAAgY,UAAA,GAAAnM,KAAA7L,OACAuiC,EAAA52B,GAAA,UAAA,WAAA3L,KAAAgY,UAAA,GAAAnM,KAAA7L,OACAuiC,EAAA52B,GAAA,OAAA,WAEA,IAAA82B,EAAAziC,KAAA+K,OAAAmL,OAAAlW,KAAA+K,OAAAyoB,qBAAA8O,IACAI,EAAAD,EAAA7gC,OAAA0K,OACAm2B,EAAAt/B,cAAAs/B,EAAA7gC,OAAAyK,MAAAo2B,EAAA7gC,OAAA0K,OAAArM,EAAAoa,MAAAqY,IACA,IAAAiQ,EAAAF,EAAA7gC,OAAA0K,OAAAo2B,EACAE,EAAA5iC,KAAA+K,OAAAnJ,OAAA0K,OAAAq2B,EAIA3iC,KAAA+K,OAAAyoB,qBAAApyB,QAAA,SAAAyhC,EAAAC,GACA,IAAAC,EAAA/iC,KAAA+K,OAAAmL,OAAAlW,KAAA+K,OAAAyoB,qBAAAsP,IACAC,EAAAnhC,OAAAuU,oBAAA4sB,EAAAnhC,OAAA0K,OAAAs2B,EACAN,EAAAQ,IACAC,EAAA9B,UAAA8B,EAAAnhC,OAAAuT,OAAA1P,EAAAs9B,EAAAnhC,OAAAuT,OAAAhJ,EAAAw2B,GACAI,EAAAn1B,UAAA3H,aAEA4F,KAAA7L,OAEAA,KAAA+K,OAAA3H,iBACApD,KAAAiG,YACA4F,KAAA7L,OACA0B,EAAAM,KAAAugC,GACAviC,KAAA+K,OAAAgN,iBAAAqqB,UAAAr7B,KAAArF,IACAmK,KAAA7L,OAEA,IAAAqiC,EAAApiC,EAAA6B,OAAA9B,KAAA+K,OAAA/H,IAAAf,OAAAwI,YAAAiB,OAAA,MAAA,0BACArJ,KAAA,QAAA,4BACAA,KAAA,QAAA,eACAggC,EAAAp/B,OAAA,QAAAZ,KAAA,QAAA,kCACAggC,EAAAp/B,OAAA,QAAAZ,KAAA,QAAA,kCACA,IAAA2gC,EAAA/iC,EAAAwd,SAAA+kB,OACAQ,EAAAr3B,GAAA,YAAA,WAAA3L,KAAAgY,UAAA,GAAAnM,KAAA7L,OACAgjC,EAAAr3B,GAAA,UAAA,WAAA3L,KAAAgY,UAAA,GAAAnM,KAAA7L,OACAgjC,EAAAr3B,GAAA,OAAA,WACA3L,KAAAmD,cAAAnD,KAAA4B,OAAAyK,MAAApM,EAAAoa,MAAA4oB,GAAAjjC,KAAA4B,OAAA0K,OAAArM,EAAAoa,MAAAqY,KACA7mB,KAAA7L,KAAA+K,SACAs3B,EAAArgC,KAAAghC,GACAhjC,KAAA+K,OAAAgN,iBAAAsqB,gBAAAA,EAEA,OAAAriC,KAAAiG,YAEAA,SAAA,WACA,IAAAjG,KAAAkL,QAAA,OAAAlL,KAEA,IAAAkjC,EAAAljC,KAAA+K,OAAAkB,gBACAjM,KAAAoiC,UAAAhhC,QAAA,SAAAM,EAAA4gC,GACA,IAAAa,EAAAnjC,KAAA+K,OAAAmL,OAAAlW,KAAA+K,OAAAyoB,qBAAA8O,IAAAr2B,gBACAG,EAAA82B,EAAAz9B,EACAyG,EAAAi3B,EAAAh3B,EAAAnM,KAAA+K,OAAAmL,OAAAlW,KAAA+K,OAAAyoB,qBAAA8O,IAAA1gC,OAAA0K,OAAA,GACAD,EAAArM,KAAA+K,OAAAnJ,OAAAyK,MAAA,EACA3K,EAAAwB,MAAA,CACAgJ,IAAAA,EAAA,KACAE,KAAAA,EAAA,KACAC,MAAAA,EAAA,OAEA3K,EAAAI,OAAA,QAAAoB,MAAA,CACAmJ,MAAAA,EAAA,QAEAR,KAAA7L,OAQA,OAJAA,KAAAqiC,gBAAAn/B,MAAA,CACAgJ,IAAAg3B,EAAA/2B,EAAAnM,KAAA+K,OAAAnJ,OAAA0K,OAHA,GACA,GAEA,KACAF,KAAA82B,EAAAz9B,EAAAzF,KAAA+K,OAAAnJ,OAAAyK,MAJA,GACA,GAGA,OAEArM,MAEA4L,KAAA,WACA,OAAA5L,KAAAkL,UACAlL,KAAAkL,SAAA,EAEAlL,KAAAoiC,UAAAhhC,QAAA,SAAAM,GAAAA,EAAAgL,WACA1M,KAAAoiC,UAAA,GAEApiC,KAAAqiC,gBAAA31B,SACA1M,KAAAqiC,gBAAA,MACAriC,OAKAA,KAAA4B,OAAAmW,mBACA9X,EAAA6B,OAAA9B,KAAAgD,IAAAf,OAAAwI,YAAAkB,GAAA,aAAA3L,KAAAkC,GAAA,oBAAA,WACA6J,aAAA/L,KAAA+X,iBAAAsW,cACAruB,KAAA+X,iBAAA1M,QACAQ,KAAA7L,OACAC,EAAA6B,OAAA9B,KAAAgD,IAAAf,OAAAwI,YAAAkB,GAAA,YAAA3L,KAAAkC,GAAA,oBAAA,WACAlC,KAAA+X,iBAAAsW,aAAAlmB,WAAA,WACAnI,KAAA+X,iBAAAnM,QACAC,KAAA7L,MAAA,MACA6L,KAAA7L,QAIAA,KAAA4N,UAAA,IAAAnM,EAAA2sB,UAAApuB,MAAAqL,OAGArL,KAAAkW,OACAlW,KAAAkW,OAAAhU,GAAAmB,aAIA,IAAAiL,EAAA,IAAAtO,KAAAkC,GACA,GAAAlC,KAAA4B,OAAAyU,YAAA,CACA,IAAA+sB,EAAA,WACApjC,KAAAqW,YAAA2rB,SAAA3/B,KAAA,KAAA,GACArC,KAAAqW,YAAA4rB,WAAA5/B,KAAA,KAAA,IACAwJ,KAAA7L,MACAqjC,EAAA,WACA,IAAAC,EAAArjC,EAAAwmB,MAAAzmB,KAAAgD,IAAAf,QACAjC,KAAAqW,YAAA2rB,SAAA3/B,KAAA,IAAAihC,EAAA,IACAtjC,KAAAqW,YAAA4rB,WAAA5/B,KAAA,IAAAihC,EAAA,KACAz3B,KAAA7L,MACAA,KAAAgD,IACA2I,GAAA,WAAA2C,EAAA,eAAA80B,GACAz3B,GAAA,aAAA2C,EAAA,eAAA80B,GACAz3B,GAAA,YAAA2C,EAAA,eAAA+0B,GAEA,IAAAE,EAAA,WACAvjC,KAAAwjC,YACA33B,KAAA7L,MACAyjC,EAAA,WACA,GAAAzjC,KAAAqV,YAAA2C,SAAA,CACA,IAAAsrB,EAAArjC,EAAAwmB,MAAAzmB,KAAAgD,IAAAf,QACAhC,EAAAoa,OAAApa,EAAAoa,MAAAqpB,iBACA1jC,KAAAqV,YAAA2C,SAAA2rB,UAAAL,EAAA,GAAAtjC,KAAAqV,YAAA2C,SAAA4rB,QACA5jC,KAAAqV,YAAA2C,SAAA6rB,UAAAP,EAAA,GAAAtjC,KAAAqV,YAAA2C,SAAA8rB,QACA9jC,KAAAkW,OAAAlW,KAAAqV,YAAA4C,UAAAoH,SACArf,KAAAqV,YAAA0uB,iBAAA3iC,QAAA,SAAA6W,GACAjY,KAAAkW,OAAA+B,GAAAoH,UACAxT,KAAA7L,SAEA6L,KAAA7L,MACAA,KAAAgD,IACA2I,GAAA,UAAA2C,EAAAi1B,GACA53B,GAAA,WAAA2C,EAAAi1B,GACA53B,GAAA,YAAA2C,EAAAm1B,GACA93B,GAAA,YAAA2C,EAAAm1B,GAIAxjC,EAAA6B,OAAA,QAAAM,SACAnC,EAAA6B,OAAA,QACA6J,GAAA,UAAA2C,EAAAi1B,GACA53B,GAAA,WAAA2C,EAAAi1B,GAGAvjC,KAAAuW,aAAA,EAIA,IAAAytB,EAAAhkC,KAAAgD,IAAAf,OAAA+K,wBACAX,EAAA23B,EAAA33B,MAAA23B,EAAA33B,MAAArM,KAAA4B,OAAAyK,MACAC,EAAA03B,EAAA13B,OAAA03B,EAAA13B,OAAAtM,KAAA4B,OAAA0K,OAGA,OAFAtM,KAAAmD,cAAAkJ,EAAAC,GAEAtM,MAQAyB,EAAAa,KAAAkL,UAAAjK,QAAA,WACA,OAAAvD,KAAAoqB,cAoCA3oB,EAAAa,KAAAkL,UAAAy2B,gBAAA,SAAA9zB,EAAA+zB,EAAAC,GAIA,IAAAC,GAHAD,EAAAA,GAAA,IAGAE,SAAA,SAAAC,GACA96B,QAAAnF,IAAA,yDAAAigC,IAEAhlB,EAAAtf,KAEAukC,EAAA,WACA,IACAjlB,EAAAX,IAAAC,QAAAU,EAAAvc,MAAAoN,GACApG,KAAA,SAAA8U,GACAqlB,EAAAC,EAAA7L,SAAAzZ,EAAAyZ,SAAAzZ,EAAAxX,QACAm9B,MAAAJ,GACA,MAAA36B,GAEA26B,EAAA36B,KAIA,OADAzJ,KAAA2L,GAAA,gBAAA44B,GACAA,GAQA9iC,EAAAa,KAAAkL,UAAA4c,WAAA,SAAAqa,GAEA,GAAA,iBADAA,EAAAA,GAAA,IAEA,KAAA,uDAAAA,EAAA,SAIA,IAAAj8B,EAAAkB,KAAA0E,MAAA1E,KAAAC,UAAA3J,KAAA+C,QAGA,IAAA,IAAAkM,KAAAw1B,EACAj8B,EAAAyG,GAAAw1B,EAAAx1B,GAOA,IAAAA,KAHAzG,EAAA/G,EAAAijC,cAAAl8B,EAAAxI,KAAA4B,QAIA5B,KAAA+C,MAAAkM,GAAAzG,EAAAyG,GAOA,IAAA,IAAA/M,KAHAlC,KAAAgd,KAAA,kBACAhd,KAAAy+B,eAAA,GACAz+B,KAAAmgC,cAAA,EACAngC,KAAAkW,OACAlW,KAAAy+B,eAAA13B,KAAA/G,KAAAkW,OAAAhU,GAAAwc,SAGA,OAAAxe,EAAAykC,IAAA3kC,KAAAy+B,gBACA+F,MAAA,SAAA/6B,GACAD,QAAAC,MAAAA,GACAzJ,KAAAwL,QAAAo5B,KAAAn7B,GACAzJ,KAAAmgC,cAAA,GACAt0B,KAAA7L,OACA+J,KAAA,WAGA/J,KAAA4N,UAAA9B,SAGA9L,KAAAwzB,qBAAApyB,QAAA,SAAA6W,GACA,IAAAjN,EAAAhL,KAAAkW,OAAA+B,GACAjN,EAAA4C,UAAA9B,SAEAd,EAAA6N,0BAAAzX,QAAA,SAAA2U,GACA,IAAAlL,EAAA7K,KAAA4V,YAAAG,GACAa,EAAAqB,EAAA,IAAAlC,EACA,IAAA,IAAA9G,KAAAjP,KAAA+C,MAAA6T,GACA5W,KAAA+C,MAAA6T,GAAA1M,eAAA+E,IACAQ,MAAAC,QAAA1P,KAAA+C,MAAA6T,GAAA3H,KACAjP,KAAA+C,MAAA6T,GAAA3H,GAAA7N,QAAA,SAAA+W,GACA,IACAnY,KAAAwc,iBAAAvN,EAAAjP,KAAAqY,eAAAF,IAAA,GACA,MAAAiG,GACA5U,QAAAC,MAAA,0BAAAmN,EAAA,KAAA3H,KAEApD,KAAAhB,KAGAgB,KAAAb,KACAa,KAAA7L,OAGAA,KAAAgd,KAAA,kBACAhd,KAAAgd,KAAA,iBACAhd,KAAAgd,KAAA,gBAAAynB,GAEAzkC,KAAAmgC,cAAA,GAEAt0B,KAAA7L,QAUAyB,EAAAa,KAAAkL,UAAAq3B,UAAA,SAAA75B,EAAA7D,GAEA6D,EAAAA,GAAA,KAGA,IAAA0F,EAAA,KACA,OAHAvJ,EAAAA,GAAA,MAIA,IAAA,aACA,IAAA,SACAuJ,EAAA,IACA,MACA,IAAA,UACAA,EAAA,KACA,MACA,IAAA,UACAA,EAAA,KAIA,KAAA1F,aAAAvJ,EAAAgV,OAAA/F,GAAA1Q,KAAAkgC,eAAA,OAAAlgC,KAAAwjC,WAEA,IAAAF,EAAArjC,EAAAwmB,MAAAzmB,KAAAgD,IAAAf,QAgBA,OAfAjC,KAAAqV,YAAA,CACA4C,SAAAjN,EAAA9I,GACA6hC,iBAAA/4B,EAAA85B,kBAAAp0B,GACAsH,SAAA,CACA7Q,OAAAA,EACAy8B,QAAAN,EAAA,GACAQ,QAAAR,EAAA,GACAK,UAAA,EACAE,UAAA,EACAnzB,KAAAA,IAIA1Q,KAAAgD,IAAAE,MAAA,SAAA,cAEAlD,MASAyB,EAAAa,KAAAkL,UAAAg2B,SAAA,WAEA,IAAAxjC,KAAAqV,YAAA2C,SAAA,OAAAhY,KAEA,GAAA,iBAAAA,KAAAkW,OAAAlW,KAAAqV,YAAA4C,UAEA,OADAjY,KAAAqV,YAAA,GACArV,KAEA,IAAAgL,EAAAhL,KAAAkW,OAAAlW,KAAAqV,YAAA4C,UAKA8sB,EAAA,SAAAr0B,EAAAs0B,EAAAhwB,GACAhK,EAAA6N,0BAAAzX,QAAA,SAAAc,GACA8I,EAAA4K,YAAA1T,GAAAN,OAAA8O,EAAA,SAAAA,OAAAs0B,IACAh6B,EAAA4K,YAAA1T,GAAAN,OAAA8O,EAAA,SAAA/L,MAAAqQ,EAAA,GACAhK,EAAA4K,YAAA1T,GAAAN,OAAA8O,EAAA,SAAAC,QAAAqE,EAAA,UACAhK,EAAA4K,YAAA1T,GAAAN,OAAA8O,EAAA,SAAA8B,oBACAxH,EAAA4K,YAAA1T,GAAAN,OAAA8O,EAAA,SAAAkB,oBACA5G,EAAA4K,YAAA1T,GAAAN,OAAA8O,EAAA,SAAAmB,kBACA7G,EAAA4K,YAAA1T,GAAAN,OAAA8O,EAAA,SAAA7J,UAKA,OAAA7G,KAAAqV,YAAA2C,SAAA7Q,QACA,IAAA,aACA,IAAA,SACA,IAAAnH,KAAAqV,YAAA2C,SAAA2rB,YACAoB,EAAA,IAAA,EAAA/5B,EAAA8c,UACA9nB,KAAAoqB,WAAA,CAAArkB,MAAAiF,EAAA8c,SAAA,GAAA9hB,IAAAgF,EAAA8c,SAAA,MAEA,MACA,IAAA,UACA,IAAA,UACA,GAAA,IAAA9nB,KAAAqV,YAAA2C,SAAA6rB,UAAA,CAEA,IAAAoB,EAAA5+B,SAAArG,KAAAqV,YAAA2C,SAAA7Q,OAAA,IACA49B,EAAA,IAAAE,EAAAj6B,EAAA,IAAAi6B,EAAA,aAQA,OAHAjlC,KAAAqV,YAAA,GACArV,KAAAgD,IAAAE,MAAA,SAAA,MAEAlD,MCroCAyB,EAAAgV,MAAA,SAAA7U,EAAAmJ,GAEA,GAAA,iBAAAnJ,EACA,KAAA,yCASA,GALA5B,KAAA+K,OAAAA,GAAA,KAEA/K,KAAAyL,YAAAV,EAGA,iBAAAnJ,EAAAM,IAAAN,EAAAM,GAAAoB,QAaA,GAAAtD,KAAA+K,aACA,IAAA/K,KAAA+K,OAAAmL,OAAAtU,EAAAM,IACA,KAAA,gCAAAN,EAAAM,GAAA,4CAdA,GAAAlC,KAAA+K,OAEA,CACA,IAAA7I,EAAA,KACAgjC,EAAA,WAEA,OADAhjC,EAAA,IAAAoC,KAAAK,MAAAL,KAAAmxB,SAAAnxB,KAAAU,IAAA,GAAA,WACA,IAAAhF,KAAA+K,OAAAmL,OAAAhU,KACAA,EAAAgjC,MAEAr5B,KAAA7L,MACA4B,EAAAM,GAAAA,OATAN,EAAAM,GAAA,IAAAoC,KAAAK,MAAAL,KAAAmxB,SAAAnxB,KAAAU,IAAA,GAAA,IAkOA,OAjNAhF,KAAAkC,GAAAN,EAAAM,GAGAlC,KAAAuW,aAAA,EAKAvW,KAAAwW,WAAA,KAEAxW,KAAAgD,IAAA,GAMAhD,KAAA4B,OAAAH,EAAAkM,QAAAO,MAAAtM,GAAA,GAAAH,EAAAgV,MAAAC,eAGA1W,KAAA+K,QAEA/K,KAAA+C,MAAA/C,KAAA+K,OAAAhI,MAGA/C,KAAA4W,SAAA5W,KAAAkC,GACAlC,KAAA+C,MAAA/C,KAAA4W,UAAA5W,KAAA+C,MAAA/C,KAAA4W,WAAA,KAEA5W,KAAA+C,MAAA,KACA/C,KAAA4W,SAAA,MAIA5W,KAAA4V,YAAA,GAEA5V,KAAA6Y,0BAAA,GAGA7Y,KAAAmlC,yCAAA,WACAnlC,KAAA6Y,0BAAAzX,QAAA,SAAAmgC,EAAAtoB,GACAjZ,KAAA4V,YAAA2rB,GAAA3/B,OAAAwO,QAAA6I,GACApN,KAAA7L,QACA6L,KAAA7L,MAOAA,KAAAolC,cAAA,GAGAplC,KAAAigB,QAAA,KAEAjgB,KAAAqlC,SAAA,KAEArlC,KAAAslC,SAAA,KAGAtlC,KAAA8nB,SAAA,KAEA9nB,KAAAulC,UAAA,KAEAvlC,KAAAwlC,UAAA,KAGAxlC,KAAAylC,QAAA,GAEAzlC,KAAA0lC,SAAA,GAEA1lC,KAAA2lC,SAAA,GAOA3lC,KAAA4lC,aAAA,KAGA5lC,KAAA0X,UAAA,WACA,OAAA1X,KAAA+K,OAAA7I,GAAA,IAAAlC,KAAAkC,IAQAlC,KAAA2+B,YAAA,CACAC,eAAA,GACAC,eAAA,GACAC,cAAA,GACAC,gBAAA,GACAC,kBAAA,IA0BAh/B,KAAA2L,GAAA,SAAA0O,EAAA6kB,GAEA,IAAAzvB,MAAAC,QAAA1P,KAAA2+B,YAAAtkB,IACA,KAAA,iDAAAA,EAAA7L,WAEA,GAAA,mBAAA0wB,EACA,KAAA,8DAGA,OADAl/B,KAAA2+B,YAAAtkB,GAAAtT,KAAAm4B,GACAA,GAQAl/B,KAAAm/B,IAAA,SAAA9kB,EAAA6kB,GACA,IAAAE,EAAAp/B,KAAA2+B,YAAAtkB,GACA,IAAA5K,MAAAC,QAAA0vB,GACA,KAAA,+CAAA/kB,EAAA7L,WAEA,QAAA6wB,IAAAH,EAGAl/B,KAAA2+B,YAAAtkB,GAAA,OACA,CACA,IAAAilB,EAAAF,EAAAp4B,QAAAk4B,GACA,IAAA,IAAAI,EAGA,KAAA,iFAFAF,EAAAriB,OAAAuiB,EAAA,GAKA,OAAAt/B,MAaAA,KAAAgd,KAAA,SAAA3C,EAAAklB,EAAAsG,GAKA,GAJAA,EAAAA,IAAA,GAIAp2B,MAAAC,QAAA1P,KAAA2+B,YAAAtkB,IACA,KAAA,kDAAAA,EAAA7L,WAEA,kBAAA+wB,GAAA,IAAAhyB,UAAAjK,SAEAuiC,EAAAtG,EACAA,EAAA,MAEA,IAAAC,EAAAx/B,KAAA0X,YACA4H,EAAAtf,KACA0/B,EAAA,CAAAF,SAAAA,EAAAz2B,KAAAw2B,GAAA,MASA,OARAv/B,KAAA2+B,YAAAtkB,GAAAjZ,QAAA,SAAAq+B,GAGAA,EAAAz9B,KAAAsd,EAAAogB,KAEAmG,GAAA7lC,KAAA+K,QACA/K,KAAA+K,OAAAiS,KAAA3C,EAAAqlB,GAEA1/B,MAQAA,KAAAiM,cAAA,WACA,IAAA65B,EAAA9lC,KAAA+K,OAAAkB,gBACA,MAAA,CACAxG,EAAAqgC,EAAArgC,EAAAzF,KAAA4B,OAAAuT,OAAA1P,EACA0G,EAAA25B,EAAA35B,EAAAnM,KAAA4B,OAAAuT,OAAAhJ,IAKAnM,KAAAqgC,mBAEArgC,MASAyB,EAAAgV,MAAAC,cAAA,CACA3C,MAAA,CAAA3K,KAAA,GAAAlG,MAAA,GAAAuC,EAAA,GAAA0G,EAAA,IACAmnB,QAAA,KACAjnB,MAAA,EACAC,OAAA,EACA6I,OAAA,CAAA1P,EAAA,EAAA0G,EAAA,MACAmI,UAAA,EACAC,WAAA,EACAC,mBAAA,KACA2B,oBAAA,KACA+qB,oBAAA,CAAAz7B,EAAA,EAAA0G,EAAA,MACAsI,OAAA,CAAAvI,IAAA,EAAAwI,MAAA,EAAAC,OAAA,EAAAvI,KAAA,GACA25B,iBAAA,mBACAn4B,UAAA,CACAxN,WAAA,IAEAqe,SAAA,CACAnS,OAAA,EACAD,MAAA,EACA8I,OAAA,CAAA1P,EAAA,EAAA0G,EAAA,IAEA0I,KAAA,CACApP,EAAA,GACAwP,GAAA,GACAC,GAAA,IAEA5D,OAAA,KACA+D,YAAA,CACAC,wBAAA,EACAC,uBAAA,EACAC,wBAAA,EACAC,wBAAA,EACAC,gBAAA,EACAC,UAAA,EACAqwB,WAAA,EACAC,WAAA,GAEArwB,YAAA,IAQAnU,EAAAgV,MAAAjJ,UAAA6yB,iBAAA,WAUA,GANA,IAAArgC,KAAA4B,OAAAyK,OAAA,OAAArM,KAAA4B,OAAA4S,qBACAxU,KAAA4B,OAAA4S,mBAAA,GAKA,IAAAxU,KAAA4B,OAAA0K,QAAA,OAAAtM,KAAA4B,OAAAuU,oBAAA,CACA,IAAA+vB,EAAAtjC,OAAAC,KAAA7C,KAAA+K,OAAAmL,QAAA5S,OAEAtD,KAAA4B,OAAAuU,oBADA,EAAA+vB,EACA,EAAAA,EAEA,EAgCA,OA3BAlmC,KAAAmD,gBACAnD,KAAAihC,YACAjhC,KAAAmmC,YAIAnmC,KAAAomC,QAAA,CAAA,EAAApmC,KAAA4B,OAAA6c,SAAApS,OACArM,KAAAqmC,SAAA,CAAArmC,KAAA4B,OAAA6c,SAAAnS,OAAA,GACAtM,KAAAsmC,SAAA,CAAAtmC,KAAA4B,OAAA6c,SAAAnS,OAAA,GAGA,CAAA,IAAA,KAAA,MAAAlL,QAAA,SAAAsP,GACA9N,OAAAC,KAAA7C,KAAA4B,OAAAiT,KAAAnE,IAAApN,SAAA,IAAAtD,KAAA4B,OAAAiT,KAAAnE,GAAA2O,QAIArf,KAAA4B,OAAAiT,KAAAnE,GAAA2O,QAAA,EACArf,KAAA4B,OAAAiT,KAAAnE,GAAAe,MAAAzR,KAAA4B,OAAAiT,KAAAnE,GAAAe,OAAA,KACAzR,KAAA4B,OAAAiT,KAAAnE,GAAA61B,eAAAvmC,KAAA4B,OAAAiT,KAAAnE,GAAA61B,gBAAA,MAJAvmC,KAAA4B,OAAAiT,KAAAnE,GAAA2O,QAAA,GAMAxT,KAAA7L,OAGAA,KAAA4B,OAAAgU,YAAAxU,QAAA,SAAAolC,GACAxmC,KAAAymC,aAAAD,IACA36B,KAAA7L,OAEAA,MAcAyB,EAAAgV,MAAAjJ,UAAArK,cAAA,SAAAkJ,EAAAC,GA0BA,YAzBA,IAAAD,QAAA,IAAAC,GACAlI,MAAAiI,IAAA,GAAAA,IAAAjI,MAAAkI,IAAA,GAAAA,IACAtM,KAAA4B,OAAAyK,MAAA/H,KAAAG,IAAAH,KAAAqC,OAAA0F,GAAArM,KAAA4B,OAAA0S,WACAtU,KAAA4B,OAAA0K,OAAAhI,KAAAG,IAAAH,KAAAqC,OAAA2F,GAAAtM,KAAA4B,OAAA2S,cAGA,OAAAvU,KAAA4B,OAAA4S,qBACAxU,KAAA4B,OAAAyK,MAAA/H,KAAAG,IAAAzE,KAAA4B,OAAA4S,mBAAAxU,KAAA+K,OAAAnJ,OAAAyK,MAAArM,KAAA4B,OAAA0S,YAEA,OAAAtU,KAAA4B,OAAAuU,sBACAnW,KAAA4B,OAAA0K,OAAAhI,KAAAG,IAAAzE,KAAA4B,OAAAuU,oBAAAnW,KAAA+K,OAAAnJ,OAAA0K,OAAAtM,KAAA4B,OAAA2S,cAGAvU,KAAA4B,OAAA6c,SAAApS,MAAA/H,KAAAG,IAAAzE,KAAA4B,OAAAyK,OAAArM,KAAA4B,OAAA6S,OAAArI,KAAApM,KAAA4B,OAAA6S,OAAAC,OAAA,GACA1U,KAAA4B,OAAA6c,SAAAnS,OAAAhI,KAAAG,IAAAzE,KAAA4B,OAAA0K,QAAAtM,KAAA4B,OAAA6S,OAAAvI,IAAAlM,KAAA4B,OAAA6S,OAAAE,QAAA,GACA3U,KAAAgD,IAAA2V,UACA3Y,KAAAgD,IAAA2V,SAAAtW,KAAA,QAAArC,KAAA4B,OAAAyK,OAAAhK,KAAA,SAAArC,KAAA4B,OAAA0K,QAEAtM,KAAAuW,cACAvW,KAAAqf,SACArf,KAAAwL,QAAAM,SACA9L,KAAA6M,OAAAf,SACA9L,KAAA4N,UAAA9B,SACA9L,KAAAsR,QAAAtR,KAAAsR,OAAArL,YAEAjG,MAWAyB,EAAAgV,MAAAjJ,UAAAyzB,UAAA,SAAAx7B,EAAA0G,GAIA,OAHA/H,MAAAqB,IAAA,GAAAA,IAAAzF,KAAA4B,OAAAuT,OAAA1P,EAAAnB,KAAAG,IAAAH,KAAAqC,OAAAlB,GAAA,KACArB,MAAA+H,IAAA,GAAAA,IAAAnM,KAAA4B,OAAAuT,OAAAhJ,EAAA7H,KAAAG,IAAAH,KAAAqC,OAAAwF,GAAA,IACAnM,KAAAuW,aAAAvW,KAAAqf,SACArf,MAYAyB,EAAAgV,MAAAjJ,UAAA24B,UAAA,SAAAj6B,EAAAwI,EAAAC,EAAAvI,GACA,IAAAe,EAwBA,OAvBA/I,MAAA8H,IAAA,GAAAA,IAAAlM,KAAA4B,OAAA6S,OAAAvI,IAAA5H,KAAAG,IAAAH,KAAAqC,OAAAuF,GAAA,KACA9H,MAAAsQ,IAAA,GAAAA,IAAA1U,KAAA4B,OAAA6S,OAAAC,MAAApQ,KAAAG,IAAAH,KAAAqC,OAAA+N,GAAA,KACAtQ,MAAAuQ,IAAA,GAAAA,IAAA3U,KAAA4B,OAAA6S,OAAAE,OAAArQ,KAAAG,IAAAH,KAAAqC,OAAAgO,GAAA,KACAvQ,MAAAgI,IAAA,GAAAA,IAAApM,KAAA4B,OAAA6S,OAAArI,KAAA9H,KAAAG,IAAAH,KAAAqC,OAAAyF,GAAA,IACApM,KAAA4B,OAAA6S,OAAAvI,IAAAlM,KAAA4B,OAAA6S,OAAAE,OAAA3U,KAAA4B,OAAA0K,SACAa,EAAA7I,KAAAK,OAAA3E,KAAA4B,OAAA6S,OAAAvI,IAAAlM,KAAA4B,OAAA6S,OAAAE,OAAA3U,KAAA4B,OAAA0K,QAAA,GACAtM,KAAA4B,OAAA6S,OAAAvI,KAAAiB,EACAnN,KAAA4B,OAAA6S,OAAAE,QAAAxH,GAEAnN,KAAA4B,OAAA6S,OAAArI,KAAApM,KAAA4B,OAAA6S,OAAAC,MAAA1U,KAAA4B,OAAAyK,QACAc,EAAA7I,KAAAK,OAAA3E,KAAA4B,OAAA6S,OAAArI,KAAApM,KAAA4B,OAAA6S,OAAAC,MAAA1U,KAAA4B,OAAAyK,OAAA,GACArM,KAAA4B,OAAA6S,OAAArI,MAAAe,EACAnN,KAAA4B,OAAA6S,OAAAC,OAAAvH,GAEA,CAAA,MAAA,QAAA,SAAA,QAAA/L,QAAA,SAAA8H,GACAlJ,KAAA4B,OAAA6S,OAAAvL,GAAA5E,KAAAG,IAAAzE,KAAA4B,OAAA6S,OAAAvL,GAAA,IACA2C,KAAA7L,OACAA,KAAA4B,OAAA6c,SAAApS,MAAA/H,KAAAG,IAAAzE,KAAA4B,OAAAyK,OAAArM,KAAA4B,OAAA6S,OAAArI,KAAApM,KAAA4B,OAAA6S,OAAAC,OAAA,GACA1U,KAAA4B,OAAA6c,SAAAnS,OAAAhI,KAAAG,IAAAzE,KAAA4B,OAAA0K,QAAAtM,KAAA4B,OAAA6S,OAAAvI,IAAAlM,KAAA4B,OAAA6S,OAAAE,QAAA,GACA3U,KAAA4B,OAAA6c,SAAAtJ,OAAA1P,EAAAzF,KAAA4B,OAAA6S,OAAArI,KACApM,KAAA4B,OAAA6c,SAAAtJ,OAAAhJ,EAAAnM,KAAA4B,OAAA6S,OAAAvI,IAEAlM,KAAAuW,aAAAvW,KAAAqf,SACArf,MAgBAyB,EAAAgV,MAAAjJ,UAAAiiB,SAAA,SAAA1b,GACA,GAAA,iBAAA/T,KAAA4B,OAAAmS,MAAA,CACA,IAAA3K,EAAApJ,KAAA4B,OAAAmS,MACA/T,KAAA4B,OAAAmS,MAAA,CAAA3K,KAAAA,EAAA3D,EAAA,EAAA0G,EAAA,EAAAjJ,MAAA,IAgBA,MAdA,iBAAA6Q,EACA/T,KAAA4B,OAAAmS,MAAA3K,KAAA2K,EACA,iBAAAA,GAAA,OAAAA,IACA/T,KAAA4B,OAAAmS,MAAAtS,EAAAkM,QAAAO,MAAA6F,EAAA/T,KAAA4B,OAAAmS,QAEA/T,KAAA4B,OAAAmS,MAAA3K,KAAA9F,OACAtD,KAAA+T,MAAA1R,KAAA,UAAA,MACAA,KAAA,IAAAyE,WAAA9G,KAAA4B,OAAAmS,MAAAtO,IACApD,KAAA,IAAAyE,WAAA9G,KAAA4B,OAAAmS,MAAA5H,IACAjJ,MAAAlD,KAAA4B,OAAAmS,MAAA7Q,OACAkG,KAAApJ,KAAA4B,OAAAmS,MAAA3K,MAEApJ,KAAA+T,MAAA1R,KAAA,UAAA,QAEArC,MASAyB,EAAAgV,MAAAjJ,UAAAnK,WAAA,WAIArD,KAAAgD,IAAAT,UAAAvC,KAAA+K,OAAA/H,IAAAC,OAAA,KACAZ,KAAA,KAAArC,KAAA0X,YAAA,oBACArV,KAAA,YAAA,cAAArC,KAAA4B,OAAAuT,OAAA1P,GAAA,GAAA,KAAAzF,KAAA4B,OAAAuT,OAAAhJ,GAAA,GAAA,KAGA,IAAAu6B,EAAA1mC,KAAAgD,IAAAT,UAAAU,OAAA,YACAZ,KAAA,KAAArC,KAAA0X,YAAA,SAuEA,GAtEA1X,KAAAgD,IAAA2V,SAAA+tB,EAAAzjC,OAAA,QACAZ,KAAA,QAAArC,KAAA4B,OAAAyK,OAAAhK,KAAA,SAAArC,KAAA4B,OAAA0K,QAGAtM,KAAAgD,IAAA4U,MAAA5X,KAAAgD,IAAAT,UAAAU,OAAA,KACAZ,KAAA,KAAArC,KAAA0X,YAAA,UACArV,KAAA,YAAA,QAAArC,KAAA0X,YAAA,UAIA1X,KAAAwL,QAAA/J,EAAAygC,gBAAAlgC,KAAAhC,MAEAA,KAAA6M,OAAApL,EAAA0gC,eAAAngC,KAAAhC,MAMAA,KAAA4N,UAAA,IAAAnM,EAAA2sB,UAAApuB,MAGAA,KAAA4U,aAAA5U,KAAAgD,IAAA4U,MAAA3U,OAAA,QACAZ,KAAA,QAAA,uBACAsJ,GAAA,QAAA,WACA,qBAAA3L,KAAA4B,OAAAmkC,kBAAA/lC,KAAA2mC,mBACA96B,KAAA7L,OAIAA,KAAA+T,MAAA/T,KAAAgD,IAAA4U,MAAA3U,OAAA,QAAAZ,KAAA,QAAA,uBACA,IAAArC,KAAA4B,OAAAmS,OAAA/T,KAAAyvB,WAGAzvB,KAAAgD,IAAAuN,OAAAvQ,KAAAgD,IAAA4U,MAAA3U,OAAA,KACAZ,KAAA,KAAArC,KAAA0X,YAAA,WAAArV,KAAA,QAAA,gBACArC,KAAA4B,OAAAiT,KAAApP,EAAA4Z,SACArf,KAAAgD,IAAA4jC,aAAA5mC,KAAAgD,IAAAuN,OAAAtN,OAAA,QACAZ,KAAA,QAAA,yBACAA,KAAA,cAAA,WAEArC,KAAAgD,IAAA6jC,QAAA7mC,KAAAgD,IAAA4U,MAAA3U,OAAA,KACAZ,KAAA,KAAArC,KAAA0X,YAAA,YAAArV,KAAA,QAAA,sBACArC,KAAA4B,OAAAiT,KAAAI,GAAAoK,SACArf,KAAAgD,IAAA8jC,cAAA9mC,KAAAgD,IAAA6jC,QAAA5jC,OAAA,QACAZ,KAAA,QAAA,0BACAA,KAAA,cAAA,WAEArC,KAAAgD,IAAA+jC,QAAA/mC,KAAAgD,IAAA4U,MAAA3U,OAAA,KACAZ,KAAA,KAAArC,KAAA0X,YAAA,YAAArV,KAAA,QAAA,sBACArC,KAAA4B,OAAAiT,KAAAK,GAAAmK,SACArf,KAAAgD,IAAAgkC,cAAAhnC,KAAAgD,IAAA+jC,QAAA9jC,OAAA,QACAZ,KAAA,QAAA,0BACAA,KAAA,cAAA,WAIArC,KAAA6Y,0BAAAzX,QAAA,SAAAc,GACAlC,KAAA4V,YAAA1T,GAAAmB,cACAwI,KAAA7L,OAMAA,KAAAsR,OAAA,KACAtR,KAAA4B,OAAA0P,SACAtR,KAAAsR,OAAA,IAAA7P,EAAA00B,OAAAn2B,OAIAA,KAAA4B,OAAAyT,YAAAC,uBAAA,CACA,IAAAhH,EAAA,IAAAtO,KAAA+K,OAAA7I,GAAA,IAAAlC,KAAAkC,GAAA,oBACA+kC,EAAA,WACAjnC,KAAA+K,OAAA85B,UAAA7kC,KAAA,eACA6L,KAAA7L,MACAA,KAAAgD,IAAAT,UAAAT,OAAA,wBACA6J,GAAA,YAAA2C,EAAA,cAAA24B,GACAt7B,GAAA,aAAA2C,EAAA,cAAA24B,GAGA,OAAAjnC,MAOAyB,EAAAgV,MAAAjJ,UAAAsL,iBAAA,WACA,IAAA2R,EAAA,GACAzqB,KAAA6Y,0BAAAzX,QAAA,SAAAc,GACAuoB,EAAA1jB,KAAA/G,KAAA4V,YAAA1T,GAAAN,OAAAwO,UACAvE,KAAA7L,OACAA,KAAAgD,IAAA4U,MAAAnU,UAAA,6BAAAsF,KAAA0hB,GAAAA,KAAAxqB,EAAAinC,WACAlnC,KAAAmlC,4CAQA1jC,EAAAgV,MAAAjJ,UAAAs3B,kBAAA,SAAAp0B,GAEA,IAAAqzB,EAAA,GACA,OAAA,IAAA,CAAA,IAAA,KAAA,MAAA/8B,QAFA0J,EAAAA,GAAA,OAGA1Q,KAAA4B,OAAAyT,YAAA3E,EAAA,YACA1Q,KAAA+K,OAAAyoB,qBAAApyB,QAAA,SAAA6W,GACAA,IAAAjY,KAAAkC,IAAAlC,KAAA+K,OAAAmL,OAAA+B,GAAArW,OAAAyT,YAAA3E,EAAA,YACAqzB,EAAAh9B,KAAAkR,IAEApM,KAAA7L,OANA+jC,GAcAtiC,EAAAgV,MAAAjJ,UAAAoL,OAAA,WAOA,OANA5Y,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,QAAA,KACAtzB,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,SAAAtzB,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,QAAA,GACAtzB,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,QAAA,GAAAtzB,KAAAkC,GACAlC,KAAA+K,OAAAwzB,mCACAv+B,KAAA+K,OAAA3H,kBAEApD,MAOAyB,EAAAgV,MAAAjJ,UAAAuL,SAAA,WAOA,OANA/Y,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,QAAA,KACAtzB,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,SAAAtzB,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,QAAA,GACAtzB,KAAA+K,OAAAyoB,qBAAAxzB,KAAA4B,OAAA0xB,QAAA,GAAAtzB,KAAAkC,GACAlC,KAAA+K,OAAAwzB,mCACAv+B,KAAA+K,OAAA3H,kBAEApD,MAUAyB,EAAAgV,MAAAjJ,UAAAi5B,aAAA,SAAA7kC,GAGA,GAAA,iBAAAA,GAAA,iBAAAA,EAAAM,KAAAN,EAAAM,GAAAoB,OACA,KAAA,+EAEA,QAAA,IAAAtD,KAAA4V,YAAAhU,EAAAM,IACA,KAAA,qCAAAN,EAAAM,GAAA,yDAEA,GAAA,iBAAAN,EAAAmM,KACA,KAAA,uFAIA,iBAAAnM,EAAA6O,aAAA,IAAA7O,EAAA6O,OAAAC,OAAA,IAAA,CAAA,EAAA,GAAA1J,QAAApF,EAAA6O,OAAAC,QACA9O,EAAA6O,OAAAC,KAAA,GAIA,IAAA7F,EAAApJ,EAAAqd,WAAAhR,IAAAlM,EAAAmM,KAAAnM,EAAA5B,MAMA,GAAA,QAHAA,KAAA4V,YAAA/K,EAAA3I,IAAA2I,GAGAjJ,OAAAwO,UAAAhM,MAAAyG,EAAAjJ,OAAAwO,UACA,EAAApQ,KAAA6Y,0BAAAvV,OAEAuH,EAAAjJ,OAAAwO,QAAA,IACAvF,EAAAjJ,OAAAwO,QAAA9L,KAAAG,IAAAzE,KAAA6Y,0BAAAvV,OAAAuH,EAAAjJ,OAAAwO,QAAA,IAEApQ,KAAA6Y,0BAAAkE,OAAAlS,EAAAjJ,OAAAwO,QAAA,EAAAvF,EAAA3I,IACAlC,KAAA6Y,0BAAAzX,QAAA,SAAAmgC,EAAAtoB,GACAjZ,KAAA4V,YAAA2rB,GAAA3/B,OAAAwO,QAAA6I,GACApN,KAAA7L,WACA,CACA,IAAAsD,EAAAtD,KAAA6Y,0BAAA9R,KAAA8D,EAAA3I,IACAlC,KAAA4V,YAAA/K,EAAA3I,IAAAN,OAAAwO,QAAA9M,EAAA,EAKA,IAAAkT,EAAA,KASA,OARAxW,KAAA4B,OAAAgU,YAAAxU,QAAA,SAAAolC,EAAAvtB,GACAutB,EAAAtkC,KAAA2I,EAAA3I,KAAAsU,EAAAyC,KAEA,OAAAzC,IACAA,EAAAxW,KAAA4B,OAAAgU,YAAA7O,KAAA/G,KAAA4V,YAAA/K,EAAA3I,IAAAN,QAAA,GAEA5B,KAAA4V,YAAA/K,EAAA3I,IAAAsU,WAAAA,EAEAxW,KAAA4V,YAAA/K,EAAA3I,KAQAT,EAAAgV,MAAAjJ,UAAAunB,gBAAA,SAAA7yB,GACA,IAAAlC,KAAA4V,YAAA1T,GACA,KAAA,8CAAAA,EAyBA,OArBAlC,KAAA4V,YAAA1T,GAAAkY,qBAGApa,KAAA4V,YAAA1T,GAAAc,IAAAT,WACAvC,KAAA4V,YAAA1T,GAAAc,IAAAT,UAAAmK,SAIA1M,KAAA4B,OAAAgU,YAAAmH,OAAA/c,KAAA4V,YAAA1T,GAAAsU,WAAA,UACAxW,KAAA+C,MAAA/C,KAAA4V,YAAA1T,GAAA0U,iBACA5W,KAAA4V,YAAA1T,GAGAlC,KAAA6Y,0BAAAkE,OAAA/c,KAAA6Y,0BAAA7R,QAAA9E,GAAA,GAGAlC,KAAAmlC,2CACAnlC,KAAA4B,OAAAgU,YAAAxU,QAAA,SAAAolC,EAAAvtB,GACAjZ,KAAA4V,YAAA4wB,EAAAtkC,IAAAsU,WAAAyC,GACApN,KAAA7L,OAEAA,MAOAyB,EAAAgV,MAAAjJ,UAAAm5B,gBAAA,WAIA,OAHA3mC,KAAA6Y,0BAAAzX,QAAA,SAAAc,GACAlC,KAAA4V,YAAA1T,GAAAwa,oBAAA,YAAA,IACA7Q,KAAA7L,OACAA,MAQAyB,EAAAgV,MAAAjJ,UAAAkR,MAAA,WAOA,IAAA,IAAAxc,KANAlC,KAAAgd,KAAA,kBACAhd,KAAAolC,cAAA,GAGAplC,KAAAwL,QAAAI,OAEA5L,KAAA4V,YACA,IACA5V,KAAAolC,cAAAr+B,KAAA/G,KAAA4V,YAAA1T,GAAAwc,SACA,MAAAjV,GACAD,QAAA8iB,KAAA7iB,GACAzJ,KAAAwL,QAAAH,KAAA5B,GAIA,OAAAvJ,EAAAykC,IAAA3kC,KAAAolC,eACAr7B,KAAA,WACA/J,KAAAuW,aAAA,EACAvW,KAAAqf,SACArf,KAAAgd,KAAA,kBAAA,GACAhd,KAAAgd,KAAA,kBACAnR,KAAA7L,OACAwkC,MAAA,SAAA/6B,GACAD,QAAA8iB,KAAA7iB,GACAzJ,KAAAwL,QAAAH,KAAA5B,IACAoC,KAAA7L,QAOAyB,EAAAgV,MAAAjJ,UAAA25B,gBAAA,WAQA,IAAA,IAAAjlC,IALA,CAAA,IAAA,KAAA,MAAAd,QAAA,SAAAsP,GACA1Q,KAAA0Q,EAAA,WAAA,MACA7E,KAAA7L,OAGAA,KAAA4V,YAAA,CAEA,IAAA/K,EAAA7K,KAAA4V,YAAA1T,GAQA,GALA2I,EAAAjJ,OAAA2O,SAAA1F,EAAAjJ,OAAA2O,OAAAsX,YACA7nB,KAAA8nB,SAAA7nB,EAAA+U,QAAAhV,KAAA8nB,UAAA,IAAA8D,OAAA/gB,EAAAuO,cAAA,QAIAvO,EAAAjJ,OAAA6O,SAAA5F,EAAAjJ,OAAA6O,OAAAoX,UAAA,CACA,IAAApX,EAAA,IAAA5F,EAAAjJ,OAAA6O,OAAAC,KACA1Q,KAAAyQ,EAAA,WAAAxQ,EAAA+U,QAAAhV,KAAAyQ,EAAA,YAAA,IAAAmb,OAAA/gB,EAAAuO,cAAA,QAUA,OAJApZ,KAAA4B,OAAAiT,KAAApP,GAAA,UAAAzF,KAAA4B,OAAAiT,KAAApP,EAAAuP,SACAhV,KAAA8nB,SAAA,CAAA9nB,KAAA+C,MAAAgD,MAAA/F,KAAA+C,MAAAiD,MAGAhG,MAoBAyB,EAAAgV,MAAAjJ,UAAA45B,cAAA,SAAA12B,GAGA,GAAA1Q,KAAA4B,OAAAiT,KAAAnE,GAAA7J,MAAA,CACA,IAEAwgC,EAFArnC,KAAA4B,OAAAiT,KAAAnE,GAEA7J,MACA,GAAA4I,MAAAC,QAAA23B,GAEA,OAAAA,EAGA,GAAA,iBAAAA,EAAA,CAIA,IAAA/nB,EAAAtf,KAGA6Z,EAAA,CAAA5T,SAAAohC,EAAAphC,UAOA,OALAjG,KAAA6Y,0BAAAgC,OAAA,SAAAysB,EAAAvxB,GACA,IAAAwxB,EAAAjoB,EAAA1J,YAAAG,GACA,OAAAuxB,EAAA1b,OAAA2b,EAAA3tB,SAAAlJ,EAAAmJ,KACA,IAEAtP,IAAA,SAAA6W,GAEA,IAAAomB,EAAA,GAEA,OADAA,EAAA/lC,EAAAkM,QAAAO,MAAAs5B,EAAAH,GACA5lC,EAAAkM,QAAAO,MAAAs5B,EAAApmB,MAMA,OAAAphB,KAAA0Q,EAAA,WACAjP,EAAAgmC,YAAAznC,KAAA0Q,EAAA,WAAA,QAEA,IAQAjP,EAAAgV,MAAAjJ,UAAA6R,OAAA,WAGArf,KAAAgD,IAAAT,UAAAF,KAAA,YAAA,aAAArC,KAAA4B,OAAAuT,OAAA1P,EAAA,IAAAzF,KAAA4B,OAAAuT,OAAAhJ,EAAA,KAGAnM,KAAAgD,IAAA2V,SAAAtW,KAAA,QAAArC,KAAA4B,OAAAyK,OAAAhK,KAAA,SAAArC,KAAA4B,OAAA0K,QAGAtM,KAAA4U,aACAvS,KAAA,IAAArC,KAAA4B,OAAA6S,OAAArI,MAAA/J,KAAA,IAAArC,KAAA4B,OAAA6S,OAAAvI,KACA7J,KAAA,QAAArC,KAAA4B,OAAAyK,OAAArM,KAAA4B,OAAA6S,OAAArI,KAAApM,KAAA4B,OAAA6S,OAAAC,QACArS,KAAA,SAAArC,KAAA4B,OAAA0K,QAAAtM,KAAA4B,OAAA6S,OAAAvI,IAAAlM,KAAA4B,OAAA6S,OAAAE,SACA3U,KAAA4B,OAAAgT,cACA5U,KAAA4U,aAAA1R,MAAA,CAAAoN,eAAA,EAAAD,OAAArQ,KAAA4B,OAAAgT,eAIA5U,KAAAyvB,WAGAzvB,KAAAmnC,kBAIA,IAAAO,EAAA,SAAAp9B,EAAAq9B,GACA,IAAAC,EAAAtjC,KAAAU,KAAA,GAAA2iC,GACAE,EAAAvjC,KAAAU,KAAA,IAAA2iC,GACAG,EAAAxjC,KAAAU,IAAA,IAAA2iC,GACAI,EAAAzjC,KAAAU,IAAA,GAAA2iC,GAMA,OALAr9B,IAAA09B,EAAAA,IAAA19B,EAAAy9B,GACAz9B,KAAA09B,EAAAA,IAAA19B,EAAAs9B,GACA,IAAAt9B,IAAAA,EAAAw9B,GACA,EAAAx9B,IAAAA,EAAAhG,KAAAG,IAAAH,KAAAE,IAAA8F,EAAAy9B,GAAAD,IACAx9B,EAAA,IAAAA,EAAAhG,KAAAG,IAAAH,KAAAE,IAAA8F,EAAAu9B,GAAAD,IACAt9B,GAIA29B,EAAA,GACA,GAAAjoC,KAAA8nB,SAAA,CACA,IAAAogB,EAAA,CAAAniC,MAAA,EAAAC,IAAAhG,KAAA4B,OAAA6c,SAAApS,OACArM,KAAA4B,OAAAiT,KAAApP,EAAAS,QACAgiC,EAAAniC,MAAA/F,KAAA4B,OAAAiT,KAAApP,EAAAS,MAAAH,OAAAmiC,EAAAniC,MACAmiC,EAAAliC,IAAAhG,KAAA4B,OAAAiT,KAAApP,EAAAS,MAAAF,KAAAkiC,EAAAliC,KAEAiiC,EAAAxiC,EAAA,CAAAyiC,EAAAniC,MAAAmiC,EAAAliC,KACAiiC,EAAAE,UAAA,CAAAD,EAAAniC,MAAAmiC,EAAAliC,KAEA,GAAAhG,KAAAulC,UAAA,CACA,IAAA6C,EAAA,CAAAriC,MAAA/F,KAAA4B,OAAA6c,SAAAnS,OAAAtG,IAAA,GACAhG,KAAA4B,OAAAiT,KAAAI,GAAA/O,QACAkiC,EAAAriC,MAAA/F,KAAA4B,OAAAiT,KAAAI,GAAA/O,MAAAH,OAAAqiC,EAAAriC,MACAqiC,EAAApiC,IAAAhG,KAAA4B,OAAAiT,KAAAI,GAAA/O,MAAAF,KAAAoiC,EAAApiC,KAEAiiC,EAAAhzB,GAAA,CAAAmzB,EAAAriC,MAAAqiC,EAAApiC,KACAiiC,EAAAI,WAAA,CAAAD,EAAAriC,MAAAqiC,EAAApiC,KAEA,GAAAhG,KAAAwlC,UAAA,CACA,IAAA8C,EAAA,CAAAviC,MAAA/F,KAAA4B,OAAA6c,SAAAnS,OAAAtG,IAAA,GACAhG,KAAA4B,OAAAiT,KAAAK,GAAAhP,QACAoiC,EAAAviC,MAAA/F,KAAA4B,OAAAiT,KAAAK,GAAAhP,MAAAH,OAAAuiC,EAAAviC,MACAuiC,EAAAtiC,IAAAhG,KAAA4B,OAAAiT,KAAAK,GAAAhP,MAAAF,KAAAsiC,EAAAtiC,KAEAiiC,EAAA/yB,GAAA,CAAAozB,EAAAviC,MAAAuiC,EAAAtiC,KACAiiC,EAAAM,WAAA,CAAAD,EAAAviC,MAAAuiC,EAAAtiC,KAIA,GAAAhG,KAAA+K,OAAAsK,YAAA4C,WAAAjY,KAAA+K,OAAAsK,YAAA4C,WAAAjY,KAAAkC,KAAA,IAAAlC,KAAA+K,OAAAsK,YAAA0uB,iBAAA/8B,QAAAhH,KAAAkC,KAAA,CACA,IAAAsmC,EAAAC,EAAA,KACA,GAAAzoC,KAAA+K,OAAAsK,YAAA+qB,SAAA,mBAAApgC,KAAAigB,QAAA,CACA,IAAAyoB,EAAApkC,KAAAiC,IAAAvG,KAAA8nB,SAAA,GAAA9nB,KAAA8nB,SAAA,IACA6gB,EAAArkC,KAAAqC,MAAA3G,KAAAigB,QAAA+C,OAAAilB,EAAAE,UAAA,KAAA7jC,KAAAqC,MAAA3G,KAAAigB,QAAA+C,OAAAilB,EAAAE,UAAA,KACAS,EAAA5oC,KAAA+K,OAAAsK,YAAA+qB,QAAA3U,MACAod,EAAAvkC,KAAAK,MAAAgkC,GAAA,EAAAC,IACAA,EAAA,IAAAxkC,MAAApE,KAAA+K,OAAAnJ,OAAAkH,kBACA8/B,EAAA,GAAAtkC,KAAAE,IAAAqkC,EAAA7oC,KAAA+K,OAAAnJ,OAAAkH,kBAAA6/B,GACA,EAAAC,IAAAxkC,MAAApE,KAAA+K,OAAAnJ,OAAAiH,oBACA+/B,EAAA,GAAAtkC,KAAAG,IAAAokC,EAAA7oC,KAAA+K,OAAAnJ,OAAAiH,kBAAA8/B,IAEA,IAAAG,EAAAxkC,KAAAK,MAAA+jC,EAAAE,GAEAG,GADAP,EAAAxoC,KAAA+K,OAAAsK,YAAA+qB,QAAAz6B,OAAA3F,KAAA4B,OAAA6S,OAAArI,KAAApM,KAAA4B,OAAAuT,OAAA1P,GACAzF,KAAA4B,OAAA6c,SAAApS,MACA28B,EAAA1kC,KAAAG,IAAAH,KAAAK,MAAA3E,KAAAigB,QAAA+C,OAAAilB,EAAAE,UAAA,KAAAW,EAAAH,GAAAI,GAAA,GACAd,EAAAE,UAAA,CAAAnoC,KAAAigB,QAAA+oB,GAAAhpC,KAAAigB,QAAA+oB,EAAAF,SACA,GAAA9oC,KAAA+K,OAAAsK,YAAA2C,SACA,OAAAhY,KAAA+K,OAAAsK,YAAA2C,SAAA7Q,QACA,IAAA,aACA8gC,EAAAE,UAAA,IAAAnoC,KAAA+K,OAAAsK,YAAA2C,SAAA2rB,UACAsE,EAAAE,UAAA,GAAAnoC,KAAA4B,OAAA6c,SAAApS,MAAArM,KAAA+K,OAAAsK,YAAA2C,SAAA2rB,UACA,MACA,IAAA,SACA1jC,EAAAoa,OAAApa,EAAAoa,MAAAmD,UACAyqB,EAAAE,UAAA,IAAAnoC,KAAA+K,OAAAsK,YAAA2C,SAAA2rB,UACAsE,EAAAE,UAAA,GAAAnoC,KAAA4B,OAAA6c,SAAApS,MAAArM,KAAA+K,OAAAsK,YAAA2C,SAAA2rB,YAGA8E,EAAAf,GADAc,EAAAxoC,KAAA+K,OAAAsK,YAAA2C,SAAA4rB,QAAA5jC,KAAA4B,OAAA6S,OAAArI,KAAApM,KAAA4B,OAAAuT,OAAA1P,IACA+iC,EAAAxoC,KAAA+K,OAAAsK,YAAA2C,SAAA2rB,WAAA,GACAsE,EAAAE,UAAA,GAAA,EACAF,EAAAE,UAAA,GAAA7jC,KAAAG,IAAAzE,KAAA4B,OAAA6c,SAAApS,OAAA,EAAAo8B,GAAA,IAEA,MACA,IAAA,UACA,IAAA,UACA,IAAAQ,EAAA,IAAAjpC,KAAA+K,OAAAsK,YAAA2C,SAAA7Q,OAAA,GAAA,WACAlH,EAAAoa,OAAApa,EAAAoa,MAAAmD,UACAyqB,EAAAgB,GAAA,GAAAjpC,KAAA4B,OAAA6c,SAAAnS,OAAAtM,KAAA+K,OAAAsK,YAAA2C,SAAA6rB,UACAoE,EAAAgB,GAAA,IAAAjpC,KAAA+K,OAAAsK,YAAA2C,SAAA6rB,YAGA4E,EAAAf,GADAc,EAAAxoC,KAAA4B,OAAA6c,SAAAnS,QAAAtM,KAAA+K,OAAAsK,YAAA2C,SAAA8rB,QAAA9jC,KAAA4B,OAAA6S,OAAAvI,IAAAlM,KAAA4B,OAAAuT,OAAAhJ,KACAq8B,EAAAxoC,KAAA+K,OAAAsK,YAAA2C,SAAA6rB,WAAA,GACAoE,EAAAgB,GAAA,GAAAjpC,KAAA4B,OAAA6c,SAAAnS,OACA27B,EAAAgB,GAAA,GAAAjpC,KAAA4B,OAAA6c,SAAAnS,OAAAtM,KAAA4B,OAAA6c,SAAAnS,QAAA,EAAAm8B,KA8BA,GAvBA,CAAA,IAAA,KAAA,MAAArnC,QAAA,SAAAsP,GACA1Q,KAAA0Q,EAAA,aAGA1Q,KAAA0Q,EAAA,UAAAzQ,EAAAwrB,MAAAyd,SACAC,OAAAnpC,KAAA0Q,EAAA,YACAxK,MAAA+hC,EAAAv3B,EAAA,aAGA1Q,KAAA0Q,EAAA,WAAA,CACA1Q,KAAA0Q,EAAA,UAAAsS,OAAAilB,EAAAv3B,GAAA,IACA1Q,KAAA0Q,EAAA,UAAAsS,OAAAilB,EAAAv3B,GAAA,KAIA1Q,KAAA0Q,EAAA,UAAAzQ,EAAAwrB,MAAAyd,SACAC,OAAAnpC,KAAA0Q,EAAA,YAAAxK,MAAA+hC,EAAAv3B,IAGA1Q,KAAAopC,WAAA14B,KACA7E,KAAA7L,OAGAA,KAAA4B,OAAAyT,YAAAK,eAAA,CACA,IAAA2zB,EAAA,WAGA,GAAAppC,EAAAoa,MAAAmD,UAOA,GADAvd,EAAAoa,MAAAqpB,iBACA1jC,KAAA+K,OAAAm1B,YAAAlgC,KAAAkC,IAAA,CACA,IAAAohC,EAAArjC,EAAAwmB,MAAAzmB,KAAAgD,IAAAT,UAAAN,QACAsnB,EAAAjlB,KAAAG,KAAA,EAAAH,KAAAE,IAAA,EAAAvE,EAAAoa,MAAAivB,aAAArpC,EAAAoa,MAAAkvB,SAAAtpC,EAAAoa,MAAAmvB,SACA,IAAAjgB,IACAvpB,KAAA+K,OAAAsK,YAAA,CACA4C,SAAAjY,KAAAkC,GACA6hC,iBAAA/jC,KAAA8kC,kBAAA,KACA1E,QAAA,CACA3U,MAAAlC,EAAA,EAAA,GAAA,IACA5jB,OAAA29B,EAAA,KAGAtjC,KAAAqf,SACArf,KAAA+K,OAAAsK,YAAA0uB,iBAAA3iC,QAAA,SAAA6W,GACAjY,KAAA+K,OAAAmL,OAAA+B,GAAAoH,UACAxT,KAAA7L,OACA,OAAAA,KAAA4lC,cAAA75B,aAAA/L,KAAA4lC,cACA5lC,KAAA4lC,aAAAz9B,WAAA,WACAnI,KAAA+K,OAAAsK,YAAA,GACArV,KAAA+K,OAAAqf,WAAA,CAAArkB,MAAA/F,KAAA8nB,SAAA,GAAA9hB,IAAAhG,KAAA8nB,SAAA,MACAjc,KAAA7L,MAAA,YA1BAA,KAAA+K,OAAAm1B,YAAAlgC,KAAAkC,KACAlC,KAAA6M,OAAAxB,KAAA,kDAAAO,KAAA,MA0BAC,KAAA7L,MACAA,KAAAypC,cAAAxpC,EAAAwd,SAAAisB,OACA1pC,KAAAgD,IAAAT,UAAAP,KAAAhC,KAAAypC,eACA99B,GAAA,aAAA09B,GACA19B,GAAA,kBAAA09B,GACA19B,GAAA,sBAAA09B,GAQA,OAJArpC,KAAA6Y,0BAAAzX,QAAA,SAAA2U,GACA/V,KAAA4V,YAAAG,GAAAyI,OAAAa,UACAxT,KAAA7L,OAEAA,MASAyB,EAAAgV,MAAAjJ,UAAA47B,WAAA,SAAA14B,GAEA,IAAA,IAAA,CAAA,IAAA,KAAA,MAAA1J,QAAA0J,GACA,KAAA,mDAAAA,EAGA,IAAAi5B,EAAA3pC,KAAA4B,OAAAiT,KAAAnE,GAAA2O,QACA,mBAAArf,KAAA0Q,EAAA,YACAtM,MAAApE,KAAA0Q,EAAA,UAAA,IAQA,GAJA1Q,KAAA0Q,EAAA,UACA1Q,KAAAgD,IAAAT,UAAAT,OAAA,gBAAA4O,GAAAxN,MAAA,UAAAymC,EAAA,KAAA,SAGAA,EAAA,OAAA3pC,KAGA,IAAA4pC,EAAA,CACAnkC,EAAA,CACAQ,SAAA,aAAAjG,KAAA4B,OAAA6S,OAAArI,KAAA,KAAApM,KAAA4B,OAAA0K,OAAAtM,KAAA4B,OAAA6S,OAAAE,QAAA,IACA1E,YAAA,SACAymB,QAAA12B,KAAA4B,OAAA6c,SAAApS,MAAA,EACAsqB,QAAA32B,KAAA4B,OAAAiT,KAAAnE,GAAAoE,cAAA,EACA+0B,aAAA,MAEA50B,GAAA,CACAhP,SAAA,aAAAjG,KAAA4B,OAAA6S,OAAArI,KAAA,IAAApM,KAAA4B,OAAA6S,OAAAvI,IAAA,IACA+D,YAAA,OACAymB,SAAA,GAAA12B,KAAA4B,OAAAiT,KAAAnE,GAAAoE,cAAA,GACA6hB,QAAA32B,KAAA4B,OAAA6c,SAAAnS,OAAA,EACAu9B,cAAA,IAEA30B,GAAA,CACAjP,SAAA,cAAAjG,KAAA4B,OAAAyK,MAAArM,KAAA4B,OAAA6S,OAAAC,OAAA,IAAA1U,KAAA4B,OAAA6S,OAAAvI,IAAA,IACA+D,YAAA,QACAymB,QAAA12B,KAAA4B,OAAAiT,KAAAnE,GAAAoE,cAAA,EACA6hB,QAAA32B,KAAA4B,OAAA6c,SAAAnS,OAAA,EACAu9B,cAAA,KAKA7pC,KAAA0Q,EAAA,UAAA1Q,KAAAonC,cAAA12B,GAGA,IAAAo5B,EAAA,SAAAjjC,GACA,IAAA,IAAAvF,EAAA,EAAAA,EAAAuF,EAAAvD,OAAAhC,IACA,GAAA8C,MAAAyC,EAAAvF,IACA,OAAA,EAGA,OAAA,EANA,CAOAtB,KAAA0Q,EAAA,WAMA,GAHA1Q,KAAA0Q,EAAA,SAAAzQ,EAAA+C,IAAA0N,OAAA+a,MAAAzrB,KAAA0Q,EAAA,WAAAq5B,OAAAH,EAAAl5B,GAAAT,aAAA+5B,YAAA,GAGAF,EACA9pC,KAAA0Q,EAAA,SAAAu5B,WAAAjqC,KAAA0Q,EAAA,WACA,WAAA1Q,KAAA4B,OAAAiT,KAAAnE,GAAAqE,aACA/U,KAAA0Q,EAAA,SAAAw5B,WAAA,SAAA7oC,GAAA,OAAAI,EAAAwwB,oBAAA5wB,EAAA,SAEA,CACA,IAAAwF,EAAA7G,KAAA0Q,EAAA,UAAAnG,IAAA,SAAA+Y,GACA,OAAAA,EAAA5S,EAAA6sB,OAAA,EAAA,MAEAv9B,KAAA0Q,EAAA,SAAAu5B,WAAApjC,GACAqjC,WAAA,SAAA5mB,EAAAhiB,GAAA,OAAAtB,KAAA0Q,EAAA,UAAApP,GAAA8H,MAAAyC,KAAA7L,OASA,GALAA,KAAAgD,IAAA0N,EAAA,SACArO,KAAA,YAAAunC,EAAAl5B,GAAAzK,UACAjE,KAAAhC,KAAA0Q,EAAA,WAGAo5B,EAAA,CACA,IAAAK,EAAAlqC,EAAAwD,UAAA,KAAAzD,KAAA0X,YAAAtS,QAAA,IAAA,OAAA,MAAAsL,EAAA,gBACA1F,EAAAhL,KACAmqC,EAAAzmC,KAAA,SAAArC,EAAAC,GACA,IAAAI,EAAAzB,EAAA6B,OAAA9B,MAAA8B,OAAA,QACAkJ,EAAA0F,EAAA,UAAApP,GAAA4B,OACAxB,EAAAwB,MAAA8H,EAAA0F,EAAA,UAAApP,GAAA4B,OAEA8H,EAAA0F,EAAA,UAAApP,GAAAwU,WACApU,EAAAW,KAAA,YAAA2I,EAAA0F,EAAA,UAAApP,GAAAwU,aAMA,IAAArE,EAAAzR,KAAA4B,OAAAiT,KAAAnE,GAAAe,OAAA,KAqCA,OApCA,OAAAA,IACAzR,KAAAgD,IAAA0N,EAAA,eACArO,KAAA,IAAAunC,EAAAl5B,GAAAgmB,SAAAr0B,KAAA,IAAAunC,EAAAl5B,GAAAimB,SACAvtB,KAAA3H,EAAAyY,YAAAla,KAAA+C,MAAA0O,IACA,OAAAm4B,EAAAl5B,GAAAm5B,cACA7pC,KAAAgD,IAAA0N,EAAA,eACArO,KAAA,YAAA,UAAAunC,EAAAl5B,GAAAm5B,aAAA,IAAAD,EAAAl5B,GAAAgmB,QAAA,IAAAkT,EAAAl5B,GAAAimB,QAAA,MAKA,CAAA,IAAA,KAAA,MAAAv1B,QAAA,SAAAsP,GACA,GAAA1Q,KAAA4B,OAAAyT,YAAA,QAAA3E,EAAA,mBAAA,CACA,IAAApC,EAAA,IAAAtO,KAAA+K,OAAA7I,GAAA,IAAAlC,KAAAkC,GAAA,oBACAkoC,EAAA,WACA,mBAAAnqC,EAAA6B,OAAA9B,MAAAiC,OAAAooC,OAAApqC,EAAA6B,OAAA9B,MAAAiC,OAAAooC,QACA,IAAAC,EAAA,MAAA55B,EAAA,YAAA,YACAzQ,EAAAoa,OAAApa,EAAAoa,MAAAmD,WAAA8sB,EAAA,QACArqC,EAAA6B,OAAA9B,MACAkD,MAAA,CAAAgQ,cAAA,OAAAo3B,OAAAA,IACA3+B,GAAA,UAAA2C,EAAA87B,GACAz+B,GAAA,QAAA2C,EAAA87B,IAEApqC,KAAAgD,IAAAT,UAAAkB,UAAA,eAAAiN,EAAA,eACArO,KAAA,WAAA,GACAsJ,GAAA,YAAA2C,EAAA87B,GACAz+B,GAAA,WAAA2C,EAAA,WACArO,EAAA6B,OAAA9B,MAAAkD,MAAA,CAAAgQ,cAAA,WACAjT,EAAA6B,OAAA9B,MAAA2L,GAAA,UAAA2C,EAAA,MAAA3C,GAAA,QAAA2C,EAAA,QAEA3C,GAAA,YAAA2C,EAAA,WACAtO,KAAA+K,OAAA85B,UAAA7kC,KAAA0Q,EAAA,UACA7E,KAAA7L,SAEA6L,KAAA7L,OAEAA,MAUAyB,EAAAgV,MAAAjJ,UAAAyY,kBAAA,SAAAD,GAEA,QADAA,GAAAA,GAAA,OAEAhmB,KAAA6Y,0BAAAzX,QAAA,SAAAc,GACA,IAAAqoC,EAAAvqC,KAAA4V,YAAA1T,GAAAyV,yBACA4yB,IACAvkB,EAAA,OAAAA,GAAAukB,EACAjmC,KAAAG,IAAAuhB,GAAAukB,KAEA1+B,KAAA7L,QAEAgmB,IACAA,IAAAhmB,KAAA4B,OAAA6S,OAAAvI,MAAAlM,KAAA4B,OAAA6S,OAAAE,OACA3U,KAAAmD,cAAAnD,KAAA4B,OAAAyK,MAAA2Z,GACAhmB,KAAA+K,OAAA5H,gBACAnD,KAAA+K,OAAAyoB,qBAAApyB,QAAA,SAAAc,GACAlC,KAAA+K,OAAAmL,OAAAhU,GAAAN,OAAAuU,oBAAA,MACAtK,KAAA7L,OACAA,KAAA+K,OAAA3H,mBAWA3B,EAAAgV,MAAAjJ,UAAAiP,0BAAA,SAAAzU,EAAA2U,EAAA5J,EAAAZ,GACAnS,KAAA6Y,0BAAAzX,QAAA,SAAAc,GACAlC,KAAA4V,YAAA1T,GAAAua,0BAAAzU,EAAA2U,EAAA5J,EAAAZ,IACAtG,KAAA7L,QAOAyB,EAAAgV,MAAAjJ,UAAAkP,oBAAA,SAAA1U,EAAA2U,GACA3c,KAAA6Y,0BAAAzX,QAAA,SAAAc,GACAlC,KAAA4V,YAAA1T,GAAAwa,oBAAA1U,EAAA2U,IACA9Q,KAAA7L,QAGAyB,EAAA6U,UAAAgB,SAAAE,MAAApW,QAAA,SAAAib,EAAApD,GACA,IAAAqD,EAAA7a,EAAA6U,UAAAgB,SAAAC,WAAA0B,GACAsD,EAAA,KAAAF,EAEA5a,EAAAgV,MAAAjJ,UAAA6O,EAAA,qBAAA,SAAAtJ,EAAAZ,GAEA,OADAA,OAAA,IAAAA,KAAAA,EACAnS,KAAAyc,0BAAAH,GAAA,EAAAvJ,EAAAZ,IAEA1Q,EAAAgV,MAAAjJ,UAAA+O,EAAA,qBAAA,SAAAxJ,EAAAZ,GAEA,OADAA,OAAA,IAAAA,KAAAA,EACAnS,KAAAyc,0BAAAH,GAAA,EAAAvJ,EAAAZ,IAGA1Q,EAAAgV,MAAAjJ,UAAA6O,EAAA,eAAA,WAEA,OADArc,KAAA0c,oBAAAJ,GAAA,GACAtc,MAEAyB,EAAAgV,MAAAjJ,UAAA+O,EAAA,eAAA,WAEA,OADAvc,KAAA0c,oBAAAJ,GAAA,GACAtc,QAeAyB,EAAAgV,MAAAjJ,UAAAg9B,eAAA,SAAAC,GAWA,YAVA,IAAAA,IAAAA,GAAA,GACAA,GACAzqC,KAAA6M,OAAAxB,KAAA,cAAA4B,UAEAjN,KAAA2L,GAAA,iBAAA,WACA3L,KAAA6M,OAAAxB,KAAA,cAAA4B,WACApB,KAAA7L,OACAA,KAAA2L,GAAA,gBAAA,WACA3L,KAAA6M,OAAAjB,QACAC,KAAA7L,OACAA,MAzCAyB,MAAAA,GAAA+H,QAAAC,MAAA,2BACAihC,GAAA,OAAAjpC,GhBrvC0B,mBAAXkpC,QAAyBA,OAAOC,IACvCD,OAAO,CACH,KACA,KACD,SAAU1qC,EAAIC,GAEb,OAAOJ,EAAK2B,UAAY1B,EAAQE,EAAIC,KAEf,iBAAX2qC,QAAuBA,OAAOC,QAE5CD,OAAOC,QAAUhrC,EAAK2B,UAAY1B,EAAQgrC,QAAQ,MAAOA,QAAQ,MAGjEjrC,EAAK2B,UAAY1B,EAAQD,EAAKG,GAAIH,EAAKI","file":"locuszoom.app.min.js","sourcesContent":["(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define([\n            'd3',\n            'Q'\n        ], function (d3, Q) {\n            // amd\n            return root.LocusZoom = factory(d3, Q);\n        });\n    } else if (typeof module === 'object' && module.exports) {\n        // commonJS\n        module.exports = root.LocusZoom = factory(require('d3'), require('Q'));\n    } else {\n        // globals\n        root.LocusZoom = factory(root.d3, root.Q);\n    }\n}(this, function (d3, Q) {\n    var semanticVersionIsOk = function (minimum_version, current_version) {\n        // handle the trivial case\n        if (current_version == minimum_version) {\n            return true;\n        }    // compare semantic versions by component as integers\n        // compare semantic versions by component as integers\n        var minimum_version_array = minimum_version.split('.');\n        var current_version_array = current_version.split('.');\n        var version_is_ok = false;\n        minimum_version_array.forEach(function (d, i) {\n            if (!version_is_ok && +current_version_array[i] > +minimum_version_array[i]) {\n                version_is_ok = true;\n            }\n        });\n        return version_is_ok;\n    };\n    try {\n        // Verify dependency: d3.js\n        var minimum_d3_version = '3.5.6';\n        if (typeof d3 != 'object') {\n            throw 'd3 dependency not met. Library missing.';\n        }\n        if (!semanticVersionIsOk(minimum_d3_version, d3.version)) {\n            throw 'd3 dependency not met. Outdated version detected.\\nRequired d3 version: ' + minimum_d3_version + ' or higher (found: ' + d3.version + ').';\n        }    // Verify dependency: Q.js\n        // Verify dependency: Q.js\n        if (typeof Q != 'function') {\n            throw 'Q dependency not met. Library missing.';\n        }    // ESTemplate: module content goes here\n        // ESTemplate: module content goes here\n        ;\n        (function (root, factory) {\n            if (typeof define === 'function' && define.amd) {\n                define([\n                    'd3',\n                    'Q'\n                ], function (d3, Q) {\n                    // amd\n                    return root.LocusZoom = factory(d3, Q);\n                });\n            } else if (typeof module === 'object' && module.exports) {\n                // commonJS\n                module.exports = root.LocusZoom = factory(require('d3'), require('Q'));\n            } else {\n                // globals\n                root.LocusZoom = factory(root.d3, root.Q);\n            }\n        }(this, function (d3, Q) {\n            var semanticVersionIsOk = function (minimum_version, current_version) {\n                // handle the trivial case\n                if (current_version == minimum_version) {\n                    return true;\n                }\n                // compare semantic versions by component as integers\n                // compare semantic versions by component as integers\n                var minimum_version_array = minimum_version.split('.');\n                var current_version_array = current_version.split('.');\n                var version_is_ok = false;\n                minimum_version_array.forEach(function (d, i) {\n                    if (!version_is_ok && +current_version_array[i] > +minimum_version_array[i]) {\n                        version_is_ok = true;\n                    }\n                });\n                return version_is_ok;\n            };\n            try {\n                // Verify dependency: d3.js\n                var minimum_d3_version = '3.5.6';\n                if (typeof d3 != 'object') {\n                    throw 'd3 dependency not met. Library missing.';\n                }\n                if (!semanticVersionIsOk(minimum_d3_version, d3.version)) {\n                    throw 'd3 dependency not met. Outdated version detected.\\nRequired d3 version: ' + minimum_d3_version + ' or higher (found: ' + d3.version + ').';\n                }\n                // Verify dependency: Q.js\n                // Verify dependency: Q.js\n                if (typeof Q != 'function') {\n                    throw 'Q dependency not met. Library missing.';\n                }\n                // ESTemplate: module content goes here\n                // ESTemplate: module content goes here\n                ;\n                var LocusZoom = { version: '0.8.2' };\n                /**\n * Populate a single element with a LocusZoom plot.\n * selector can be a string for a DOM Query or a d3 selector.\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot} The newly created plot instance\n */\n                LocusZoom.populate = function (selector, datasource, layout) {\n                    if (typeof selector == 'undefined') {\n                        throw 'LocusZoom.populate selector not defined';\n                    }\n                    // Empty the selector of any existing content\n                    d3.select(selector).html('');\n                    var plot;\n                    d3.select(selector).call(function () {\n                        // Require each containing element have an ID. If one isn't present, create one.\n                        if (typeof this.node().id == 'undefined') {\n                            var iterator = 0;\n                            while (!d3.select('#lz-' + iterator).empty()) {\n                                iterator++;\n                            }\n                            this.attr('id', '#lz-' + iterator);\n                        }\n                        // Create the plot\n                        plot = new LocusZoom.Plot(this.node().id, datasource, layout);\n                        plot.container = this.node();\n                        // Detect data-region and fill in state values if present\n                        if (typeof this.node().dataset !== 'undefined' && typeof this.node().dataset.region !== 'undefined') {\n                            var parsed_state = LocusZoom.parsePositionQuery(this.node().dataset.region);\n                            Object.keys(parsed_state).forEach(function (key) {\n                                plot.state[key] = parsed_state[key];\n                            });\n                        }\n                        // Add an SVG to the div and set its dimensions\n                        plot.svg = d3.select('div#' + plot.id).append('svg').attr('version', '1.1').attr('xmlns', 'http://www.w3.org/2000/svg').attr('id', plot.id + '_svg').attr('class', 'lz-locuszoom').style(plot.layout.style);\n                        plot.setDimensions();\n                        plot.positionPanels();\n                        // Initialize the plot\n                        plot.initialize();\n                        // If the plot has defined data sources then trigger its first mapping based on state values\n                        if (typeof datasource == 'object' && Object.keys(datasource).length) {\n                            plot.refresh();\n                        }\n                    });\n                    return plot;\n                };\n                /**\n * Populate arbitrarily many elements each with a LocusZoom plot\n *   using a common datasource and layout\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot[]}\n */\n                LocusZoom.populateAll = function (selector, datasource, layout) {\n                    var plots = [];\n                    d3.selectAll(selector).each(function (d, i) {\n                        plots[i] = LocusZoom.populate(this, datasource, layout);\n                    });\n                    return plots;\n                };\n                /**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {String} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\n                LocusZoom.positionIntToString = function (pos, exp, suffix) {\n                    var exp_symbols = {\n                        0: '',\n                        3: 'K',\n                        6: 'M',\n                        9: 'G'\n                    };\n                    suffix = suffix || false;\n                    if (isNaN(exp) || exp === null) {\n                        var log = Math.log(pos) / Math.LN10;\n                        exp = Math.min(Math.max(log - log % 3, 0), 9);\n                    }\n                    var places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n                    var min_exp = Math.min(Math.max(exp, 0), 2);\n                    var places = Math.min(Math.max(places_exp, min_exp), 12);\n                    var ret = '' + (pos / Math.pow(10, exp)).toFixed(places);\n                    if (suffix && typeof exp_symbols[exp] !== 'undefined') {\n                        ret += ' ' + exp_symbols[exp] + 'b';\n                    }\n                    return ret;\n                };\n                /**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\n                LocusZoom.positionStringToInt = function (p) {\n                    var val = p.toUpperCase();\n                    val = val.replace(/,/g, '');\n                    var suffixre = /([KMG])[B]*$/;\n                    var suffix = suffixre.exec(val);\n                    var mult = 1;\n                    if (suffix) {\n                        if (suffix[1] === 'M') {\n                            mult = 1000000;\n                        } else if (suffix[1] === 'G') {\n                            mult = 1000000000;\n                        } else {\n                            mult = 1000;    //K\n                        }\n                        val = val.replace(suffixre, '');\n                    }\n                    val = Number(val) * mult;\n                    return val;\n                };\n                /**\n * Parse region queries into their constituent parts\n * TODO: handle genes (or send off to API)\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\n                LocusZoom.parsePositionQuery = function (x) {\n                    var chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n                    var chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n                    var match = chrposoff.exec(x);\n                    if (match) {\n                        if (match[3] === '+') {\n                            var center = LocusZoom.positionStringToInt(match[2]);\n                            var offset = LocusZoom.positionStringToInt(match[4]);\n                            return {\n                                chr: match[1],\n                                start: center - offset,\n                                end: center + offset\n                            };\n                        } else {\n                            return {\n                                chr: match[1],\n                                start: LocusZoom.positionStringToInt(match[2]),\n                                end: LocusZoom.positionStringToInt(match[4])\n                            };\n                        }\n                    }\n                    match = chrpos.exec(x);\n                    if (match) {\n                        return {\n                            chr: match[1],\n                            position: LocusZoom.positionStringToInt(match[2])\n                        };\n                    }\n                    return null;\n                };\n                /**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\n                LocusZoom.prettyTicks = function (range, clip_range, target_tick_count) {\n                    if (typeof target_tick_count == 'undefined' || isNaN(parseInt(target_tick_count))) {\n                        target_tick_count = 5;\n                    }\n                    target_tick_count = parseInt(target_tick_count);\n                    var min_n = target_tick_count / 3;\n                    var shrink_sml = 0.75;\n                    var high_u_bias = 1.5;\n                    var u5_bias = 0.5 + 1.5 * high_u_bias;\n                    var d = Math.abs(range[0] - range[1]);\n                    var c = d / target_tick_count;\n                    if (Math.log(d) / Math.LN10 < -2) {\n                        c = Math.max(Math.abs(d)) * shrink_sml / min_n;\n                    }\n                    var base = Math.pow(10, Math.floor(Math.log(c) / Math.LN10));\n                    var base_toFixed = 0;\n                    if (base < 1 && base !== 0) {\n                        base_toFixed = Math.abs(Math.round(Math.log(base) / Math.LN10));\n                    }\n                    var unit = base;\n                    if (2 * base - c < high_u_bias * (c - unit)) {\n                        unit = 2 * base;\n                        if (5 * base - c < u5_bias * (c - unit)) {\n                            unit = 5 * base;\n                            if (10 * base - c < high_u_bias * (c - unit)) {\n                                unit = 10 * base;\n                            }\n                        }\n                    }\n                    var ticks = [];\n                    var i = parseFloat((Math.floor(range[0] / unit) * unit).toFixed(base_toFixed));\n                    while (i < range[1]) {\n                        ticks.push(i);\n                        i += unit;\n                        if (base_toFixed > 0) {\n                            i = parseFloat(i.toFixed(base_toFixed));\n                        }\n                    }\n                    ticks.push(i);\n                    if (typeof clip_range == 'undefined' || [\n                            'low',\n                            'high',\n                            'both',\n                            'neither'\n                        ].indexOf(clip_range) === -1) {\n                        clip_range = 'neither';\n                    }\n                    if (clip_range === 'low' || clip_range === 'both') {\n                        if (ticks[0] < range[0]) {\n                            ticks = ticks.slice(1);\n                        }\n                    }\n                    if (clip_range === 'high' || clip_range === 'both') {\n                        if (ticks[ticks.length - 1] > range[1]) {\n                            ticks.pop();\n                        }\n                    }\n                    return ticks;\n                };\n                /**\n * Make an AJAX request and return a promise.\n * From http://www.html5rocks.com/en/tutorials/cors/\n *   and with promises from https://gist.github.com/kriskowal/593076\n *\n * @param {String} method The HTTP verb\n * @param {String} url\n * @param {String} body The request body to send to the server\n * @param {Object} headers Object of custom request headers\n * @param {Number} [timeout] If provided, wait this long (in ms) before timing out\n * @returns {Promise}\n */\n                LocusZoom.createCORSPromise = function (method, url, body, headers, timeout) {\n                    var response = Q.defer();\n                    var xhr = new XMLHttpRequest();\n                    if ('withCredentials' in xhr) {\n                        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n                        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n                        xhr.open(method, url, true);\n                    } else if (typeof XDomainRequest != 'undefined') {\n                        // Otherwise, check if XDomainRequest.\n                        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n                        xhr = new XDomainRequest();\n                        xhr.open(method, url);\n                    } else {\n                        // Otherwise, CORS is not supported by the browser.\n                        xhr = null;\n                    }\n                    if (xhr) {\n                        xhr.onreadystatechange = function () {\n                            if (xhr.readyState === 4) {\n                                if (xhr.status === 200 || xhr.status === 0) {\n                                    response.resolve(xhr.response);\n                                } else {\n                                    response.reject('HTTP ' + xhr.status + ' for ' + url);\n                                }\n                            }\n                        };\n                        timeout && setTimeout(response.reject, timeout);\n                        body = typeof body !== 'undefined' ? body : '';\n                        if (typeof headers !== 'undefined') {\n                            for (var header in headers) {\n                                xhr.setRequestHeader(header, headers[header]);\n                            }\n                        }\n                        // Send the request\n                        xhr.send(body);\n                    }\n                    return response.promise;\n                };\n                /**\n * Validate a (presumed complete) plot state object against internal rules for consistency, and ensure the plot fits\n *   within any constraints imposed by the layout.\n * @param {Object} new_state\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\n                LocusZoom.validateState = function (new_state, layout) {\n                    new_state = new_state || {};\n                    layout = layout || {};\n                    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n                    // to numeric values that are not decimal, negative, or flipped\n                    var validated_region = false;\n                    if (typeof new_state.chr != 'undefined' && typeof new_state.start != 'undefined' && typeof new_state.end != 'undefined') {\n                        // Determine a numeric scale and midpoint for the attempted region,\n                        var attempted_midpoint = null;\n                        var attempted_scale;\n                        new_state.start = Math.max(parseInt(new_state.start), 1);\n                        new_state.end = Math.max(parseInt(new_state.end), 1);\n                        if (isNaN(new_state.start) && isNaN(new_state.end)) {\n                            new_state.start = 1;\n                            new_state.end = 1;\n                            attempted_midpoint = 0.5;\n                            attempted_scale = 0;\n                        } else if (isNaN(new_state.start) || isNaN(new_state.end)) {\n                            attempted_midpoint = new_state.start || new_state.end;\n                            attempted_scale = 0;\n                            new_state.start = isNaN(new_state.start) ? new_state.end : new_state.start;\n                            new_state.end = isNaN(new_state.end) ? new_state.start : new_state.end;\n                        } else {\n                            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n                            attempted_scale = new_state.end - new_state.start;\n                            if (attempted_scale < 0) {\n                                var temp = new_state.start;\n                                new_state.end = new_state.start;\n                                new_state.start = temp;\n                                attempted_scale = new_state.end - new_state.start;\n                            }\n                            if (attempted_midpoint < 0) {\n                                new_state.start = 1;\n                                new_state.end = 1;\n                                attempted_scale = 0;\n                            }\n                        }\n                        validated_region = true;\n                    }\n                    // Constrain w/r/t layout-defined minimum region scale\n                    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale) {\n                        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n                        new_state.end = new_state.start + layout.min_region_scale;\n                    }\n                    // Constrain w/r/t layout-defined maximum region scale\n                    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale) {\n                        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n                        new_state.end = new_state.start + layout.max_region_scale;\n                    }\n                    return new_state;\n                };\n                //\n                /**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values! Will ignore non-scalars.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if {{field_name}} }} Conditional text {{/if}} will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n * @returns {string}\n */\n                LocusZoom.parseFields = function (data, html) {\n                    if (typeof data != 'object') {\n                        throw 'LocusZoom.parseFields invalid arguments: data is not an object';\n                    }\n                    if (typeof html != 'string') {\n                        throw 'LocusZoom.parseFields invalid arguments: html is not a string';\n                    }\n                    // `tokens` is like [token,...]\n                    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n                    var tokens = [];\n                    var regex = /\\{\\{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))\\}\\}/;\n                    while (html.length > 0) {\n                        var m = regex.exec(html);\n                        if (!m) {\n                            tokens.push({ text: html });\n                            html = '';\n                        } else if (m.index !== 0) {\n                            tokens.push({ text: html.slice(0, m.index) });\n                            html = html.slice(m.index);\n                        } else if (m[1] === '#if ') {\n                            tokens.push({ condition: m[2] });\n                            html = html.slice(m[0].length);\n                        } else if (m[2]) {\n                            tokens.push({ variable: m[2] });\n                            html = html.slice(m[0].length);\n                        } else if (m[3] === '/if') {\n                            tokens.push({ close: 'if' });\n                            html = html.slice(m[0].length);\n                        } else {\n                            console.error('Error tokenizing tooltip when remaining template is ' + JSON.stringify(html) + ' and previous tokens are ' + JSON.stringify(tokens) + ' and current regex match is ' + JSON.stringify([\n                                m[1],\n                                m[2],\n                                m[3]\n                            ]));\n                            html = html.slice(m[0].length);\n                        }\n                    }\n                    var astify = function () {\n                        var token = tokens.shift();\n                        if (typeof token.text !== 'undefined' || token.variable) {\n                            return token;\n                        } else if (token.condition) {\n                            token.then = [];\n                            while (tokens.length > 0) {\n                                if (tokens[0].close === 'if') {\n                                    tokens.shift();\n                                    break;\n                                }\n                                token.then.push(astify());\n                            }\n                            return token;\n                        } else {\n                            console.error('Error making tooltip AST due to unknown token ' + JSON.stringify(token));\n                            return { text: '' };\n                        }\n                    };\n                    // `ast` is like [thing,...]\n                    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n                    var ast = [];\n                    while (tokens.length > 0)\n                        ast.push(astify());\n                    var resolve = function (variable) {\n                        if (!resolve.cache.hasOwnProperty(variable)) {\n                            resolve.cache[variable] = new LocusZoom.Data.Field(variable).resolve(data);\n                        }\n                        return resolve.cache[variable];\n                    };\n                    resolve.cache = {};\n                    var render_node = function (node) {\n                        if (typeof node.text !== 'undefined') {\n                            return node.text;\n                        } else if (node.variable) {\n                            try {\n                                var value = resolve(node.variable);\n                                if ([\n                                        'string',\n                                        'number',\n                                        'boolean'\n                                    ].indexOf(typeof value) !== -1) {\n                                    return value;\n                                }\n                                if (value === null) {\n                                    return '';\n                                }\n                            } catch (error) {\n                                console.error('Error while processing variable ' + JSON.stringify(node.variable));\n                            }\n                            return '{{' + node.variable + '}}';\n                        } else if (node.condition) {\n                            try {\n                                var condition = resolve(node.condition);\n                                if (condition || condition === 0) {\n                                    return node.then.map(render_node).join('');\n                                }\n                            } catch (error) {\n                                console.error('Error while processing condition ' + JSON.stringify(node.variable));\n                            }\n                            return '';\n                        } else {\n                            console.error('Error rendering tooltip due to unknown AST node ' + JSON.stringify(node));\n                        }\n                    };\n                    return ast.map(render_node).join('');\n                };\n                /**\n * Shortcut method for getting the data bound to a tool tip.\n * @param {Element} node\n * @returns {*} The first element of data bound to the tooltip\n */\n                LocusZoom.getToolTipData = function (node) {\n                    if (typeof node != 'object' || typeof node.parentNode == 'undefined') {\n                        throw 'Invalid node object';\n                    }\n                    // If this node is a locuszoom tool tip then return its data\n                    var selector = d3.select(node);\n                    if (selector.classed('lz-data_layer-tooltip') && typeof selector.data()[0] != 'undefined') {\n                        return selector.data()[0];\n                    } else {\n                        return LocusZoom.getToolTipData(node.parentNode);\n                    }\n                };\n                /**\n * Shortcut method for getting a reference to the data layer that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.getToolTipDataLayer = function (node) {\n                    var data = LocusZoom.getToolTipData(node);\n                    if (data.getDataLayer) {\n                        return data.getDataLayer();\n                    }\n                    return null;\n                };\n                /**\n * Shortcut method for getting a reference to the panel that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.getToolTipPanel = function (node) {\n                    var data_layer = LocusZoom.getToolTipDataLayer(node);\n                    if (data_layer) {\n                        return data_layer.parent;\n                    }\n                    return null;\n                };\n                /**\n * Shortcut method for getting a reference to the plot that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.getToolTipPlot = function (node) {\n                    var panel = LocusZoom.getToolTipPanel(node);\n                    if (panel) {\n                        return panel.parent;\n                    }\n                    return null;\n                };\n                /**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\n                LocusZoom.generateCurtain = function () {\n                    var curtain = {\n                        showing: false,\n                        selector: null,\n                        content_selector: null,\n                        hide_delay: null,\n                        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n                        show: function (content, css) {\n                            if (!this.curtain.showing) {\n                                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div').attr('class', 'lz-curtain').attr('id', this.id + '.curtain');\n                                this.curtain.content_selector = this.curtain.selector.append('div').attr('class', 'lz-curtain-content');\n                                this.curtain.selector.append('div').attr('class', 'lz-curtain-dismiss').html('Dismiss').on('click', function () {\n                                    this.curtain.hide();\n                                }.bind(this));\n                                this.curtain.showing = true;\n                            }\n                            return this.curtain.update(content, css);\n                        }.bind(this),\n                        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n                        update: function (content, css) {\n                            if (!this.curtain.showing) {\n                                return this.curtain;\n                            }\n                            clearTimeout(this.curtain.hide_delay);\n                            // Apply CSS if provided\n                            if (typeof css == 'object') {\n                                this.curtain.selector.style(css);\n                            }\n                            // Update size and position\n                            var page_origin = this.getPageOrigin();\n                            this.curtain.selector.style({\n                                top: page_origin.y + 'px',\n                                left: page_origin.x + 'px',\n                                width: this.layout.width + 'px',\n                                height: this.layout.height + 'px'\n                            });\n                            this.curtain.content_selector.style({\n                                'max-width': this.layout.width - 40 + 'px',\n                                'max-height': this.layout.height - 40 + 'px'\n                            });\n                            // Apply content if provided\n                            if (typeof content == 'string') {\n                                this.curtain.content_selector.html(content);\n                            }\n                            return this.curtain;\n                        }.bind(this),\n                        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n                        hide: function (delay) {\n                            if (!this.curtain.showing) {\n                                return this.curtain;\n                            }\n                            // If a delay was passed then defer to a timeout\n                            if (typeof delay == 'number') {\n                                clearTimeout(this.curtain.hide_delay);\n                                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                                return this.curtain;\n                            }\n                            // Remove curtain\n                            this.curtain.selector.remove();\n                            this.curtain.selector = null;\n                            this.curtain.content_selector = null;\n                            this.curtain.showing = false;\n                            return this.curtain;\n                        }.bind(this)\n                    };\n                    return curtain;\n                };\n                /**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\n                LocusZoom.generateLoader = function () {\n                    var loader = {\n                        showing: false,\n                        selector: null,\n                        content_selector: null,\n                        progress_selector: null,\n                        cancel_selector: null,\n                        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n                        show: function (content) {\n                            // Generate loader\n                            if (!this.loader.showing) {\n                                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert('div').attr('class', 'lz-loader').attr('id', this.id + '.loader');\n                                this.loader.content_selector = this.loader.selector.append('div').attr('class', 'lz-loader-content');\n                                this.loader.progress_selector = this.loader.selector.append('div').attr('class', 'lz-loader-progress-container').append('div').attr('class', 'lz-loader-progress');\n                                /* TODO: figure out how to make this cancel button work\n                this.loader.cancel_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-cancel\").html(\"Cancel\")\n                    .on(\"click\", function(){\n                        this.loader.hide();\n                    }.bind(this));\n                */\n                                this.loader.showing = true;\n                                if (typeof content == 'undefined') {\n                                    content = 'Loading...';\n                                }\n                            }\n                            return this.loader.update(content);\n                        }.bind(this),\n                        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n                        update: function (content, percent) {\n                            if (!this.loader.showing) {\n                                return this.loader;\n                            }\n                            clearTimeout(this.loader.hide_delay);\n                            // Apply content if provided\n                            if (typeof content == 'string') {\n                                this.loader.content_selector.html(content);\n                            }\n                            // Update size and position\n                            var padding = 6;\n                            // is there a better place to store/define this?\n                            var page_origin = this.getPageOrigin();\n                            var loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n                            this.loader.selector.style({\n                                top: page_origin.y + this.layout.height - loader_boundrect.height - padding + 'px',\n                                left: page_origin.x + padding + 'px'\n                            });\n                            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n                            // Apply percent if provided\n                            if (typeof percent == 'number') {\n                                this.loader.progress_selector.style({ width: Math.min(Math.max(percent, 1), 100) + '%' });\n                            }\n                            return this.loader;\n                        }.bind(this),\n                        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n                        animate: function () {\n                            this.loader.progress_selector.classed('lz-loader-progress-animated', true);\n                            return this.loader;\n                        }.bind(this),\n                        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n                        setPercentCompleted: function (percent) {\n                            this.loader.progress_selector.classed('lz-loader-progress-animated', false);\n                            return this.loader.update(null, percent);\n                        }.bind(this),\n                        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n                        hide: function (delay) {\n                            if (!this.loader.showing) {\n                                return this.loader;\n                            }\n                            // If a delay was passed then defer to a timeout\n                            if (typeof delay == 'number') {\n                                clearTimeout(this.loader.hide_delay);\n                                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                                return this.loader;\n                            }\n                            // Remove loader\n                            this.loader.selector.remove();\n                            this.loader.selector = null;\n                            this.loader.content_selector = null;\n                            this.loader.progress_selector = null;\n                            this.loader.cancel_selector = null;\n                            this.loader.showing = false;\n                            return this.loader;\n                        }.bind(this)\n                    };\n                    return loader;\n                };\n                /**\n * Create a new subclass following classical inheritance patterns. Some registry singletons use this internally to\n *   enable code reuse and customization of known LZ core functionality.\n *\n * @param {Function} parent A parent class constructor that will be extended by the child class\n * @param {Object} extra An object of additional properties and methods to add/override behavior for the child class.\n *   The special \"constructor\" property can be used to specify a custom constructor, or it will call parent by default.\n *   Implementer must manage super calls when overriding the constructor.\n * @returns {Function} The constructor for the new child class\n */\n                LocusZoom.subclass = function (parent, extra) {\n                    if (typeof parent !== 'function') {\n                        throw 'Parent must be a callable constructor';\n                    }\n                    extra = extra || {};\n                    var Sub = extra.hasOwnProperty('constructor') ? extra.constructor : function () {\n                        parent.apply(this, arguments);\n                    };\n                    Sub.prototype = Object.create(parent.prototype);\n                    Object.keys(extra).forEach(function (k) {\n                        Sub.prototype[k] = extra[k];\n                    });\n                    return Sub;\n                };\n                /**\n * LocusZoom optional extensions will live under this namespace.\n *\n * Extension code is not part of the core LocusZoom app.js bundle.\n * @namespace\n * @public\n */\n                LocusZoom.ext = {};\n                /* global LocusZoom */\n                'use strict';\n                /**\n * Manage known layouts for all parts of the LocusZoom plot\n *\n * This registry allows for layouts to be reused and customized many times on a page, using a common base pattern.\n *   It handles the work of ensuring that each new instance of the layout has no shared state with other copies.\n *\n * @class\n */\n                LocusZoom.Layouts = function () {\n                    var obj = {};\n                    var layouts = {\n                        'plot': {},\n                        'panel': {},\n                        'data_layer': {},\n                        'dashboard': {},\n                        'tooltip': {}\n                    };\n                    /**\n     * Generate a layout configuration object\n     * @param {('plot'|'panel'|'data_layer'|'dashboard'|'tooltip')} type The type of layout to retrieve\n     * @param {string} name Identifier of the predefined layout within the specified type\n     * @param {object} [modifications] Custom properties that override default settings for this layout\n     * @returns {object} A JSON-serializable object representation\n     */\n                    obj.get = function (type, name, modifications) {\n                        if (typeof type != 'string' || typeof name != 'string') {\n                            throw 'invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)';\n                        } else if (layouts[type][name]) {\n                            // Get the base layout\n                            var layout = LocusZoom.Layouts.merge(modifications || {}, layouts[type][name]);\n                            // If \"unnamespaced\" is true then strike that from the layout and return the layout without namespacing\n                            if (layout.unnamespaced) {\n                                delete layout.unnamespaced;\n                                return JSON.parse(JSON.stringify(layout));\n                            }\n                            // Determine the default namespace for namespaced values\n                            var default_namespace = '';\n                            if (typeof layout.namespace == 'string') {\n                                default_namespace = layout.namespace;\n                            } else if (typeof layout.namespace == 'object' && Object.keys(layout.namespace).length) {\n                                if (typeof layout.namespace.default != 'undefined') {\n                                    default_namespace = layout.namespace.default;\n                                } else {\n                                    default_namespace = layout.namespace[Object.keys(layout.namespace)[0]].toString();\n                                }\n                            }\n                            default_namespace += default_namespace.length ? ':' : '';\n                            // Apply namespaces to layout, recursively\n                            var applyNamespaces = function (element, namespace) {\n                                if (namespace) {\n                                    if (typeof namespace == 'string') {\n                                        namespace = { default: namespace };\n                                    }\n                                } else {\n                                    namespace = { default: '' };\n                                }\n                                if (typeof element == 'string') {\n                                    var re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n                                    var match, base, key, resolved_namespace;\n                                    var replace = [];\n                                    while ((match = re.exec(element)) !== null) {\n                                        base = match[0];\n                                        key = match[1].length ? match[1].replace(/(\\[|\\])/g, '') : null;\n                                        resolved_namespace = default_namespace;\n                                        if (namespace != null && typeof namespace == 'object' && typeof namespace[key] != 'undefined') {\n                                            resolved_namespace = namespace[key] + (namespace[key].length ? ':' : '');\n                                        }\n                                        replace.push({\n                                            base: base,\n                                            namespace: resolved_namespace\n                                        });\n                                    }\n                                    for (var r in replace) {\n                                        element = element.replace(replace[r].base, replace[r].namespace);\n                                    }\n                                } else if (typeof element == 'object' && element != null) {\n                                    if (typeof element.namespace != 'undefined') {\n                                        var merge_namespace = typeof element.namespace == 'string' ? { default: element.namespace } : element.namespace;\n                                        namespace = LocusZoom.Layouts.merge(namespace, merge_namespace);\n                                    }\n                                    var namespaced_element, namespaced_property;\n                                    for (var property in element) {\n                                        if (property === 'namespace') {\n                                            continue;\n                                        }\n                                        namespaced_element = applyNamespaces(element[property], namespace);\n                                        namespaced_property = applyNamespaces(property, namespace);\n                                        if (property !== namespaced_property) {\n                                            delete element[property];\n                                        }\n                                        element[namespaced_property] = namespaced_element;\n                                    }\n                                }\n                                return element;\n                            };\n                            layout = applyNamespaces(layout, layout.namespace);\n                            // Return the layout as valid JSON only\n                            return JSON.parse(JSON.stringify(layout));\n                        } else {\n                            throw 'layout type [' + type + '] name [' + name + '] not found';\n                        }\n                    };\n                    /** @private */\n                    obj.set = function (type, name, layout) {\n                        if (typeof type != 'string' || typeof name != 'string' || typeof layout != 'object') {\n                            throw 'unable to set new layout; bad arguments passed to set()';\n                        }\n                        if (!layouts[type]) {\n                            layouts[type] = {};\n                        }\n                        if (layout) {\n                            return layouts[type][name] = JSON.parse(JSON.stringify(layout));\n                        } else {\n                            delete layouts[type][name];\n                            return null;\n                        }\n                    };\n                    /**\n     * Register a new layout definition by name.\n     *\n     * @param {string} type The type of layout to add. Usually, this will be one of the predefined LocusZoom types,\n     *   but if you pass a different name, this method will automatically create the new `type` bucket\n     * @param {string} name The identifier of the newly added layout\n     * @param {object} [layout] A JSON-serializable object containing configuration properties for this layout\n     * @returns The JSON representation of the newly created layout\n     */\n                    obj.add = function (type, name, layout) {\n                        return obj.set(type, name, layout);\n                    };\n                    /**\n     * List all registered layouts\n     * @param [type] Optionally narrow the list to only layouts of a specific type; else return all known layouts\n     * @returns {*}\n     */\n                    obj.list = function (type) {\n                        if (!layouts[type]) {\n                            var list = {};\n                            Object.keys(layouts).forEach(function (type) {\n                                list[type] = Object.keys(layouts[type]);\n                            });\n                            return list;\n                        } else {\n                            return Object.keys(layouts[type]);\n                        }\n                    };\n                    /**\n     * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n     *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n     *\n     * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n     *\n     * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n     * @param {object} default_layout An object containing default settings.\n     * @returns The custom layout is modified in place and also returned from this method.\n     */\n                    obj.merge = function (custom_layout, default_layout) {\n                        if (typeof custom_layout !== 'object' || typeof default_layout !== 'object') {\n                            throw 'LocusZoom.Layouts.merge only accepts two layout objects; ' + typeof custom_layout + ', ' + typeof default_layout + ' given';\n                        }\n                        for (var property in default_layout) {\n                            if (!default_layout.hasOwnProperty(property)) {\n                                continue;\n                            }\n                            // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n                            // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n                            // Also separate arrays from objects as a discrete type.\n                            var custom_type = custom_layout[property] === null ? 'undefined' : typeof custom_layout[property];\n                            var default_type = typeof default_layout[property];\n                            if (custom_type === 'object' && Array.isArray(custom_layout[property])) {\n                                custom_type = 'array';\n                            }\n                            if (default_type === 'object' && Array.isArray(default_layout[property])) {\n                                default_type = 'array';\n                            }\n                            // Unsupported property types: throw an exception\n                            if (custom_type === 'function' || default_type === 'function') {\n                                throw 'LocusZoom.Layouts.merge encountered an unsupported property type';\n                            }\n                            // Undefined custom value: pull the default value\n                            if (custom_type === 'undefined') {\n                                custom_layout[property] = JSON.parse(JSON.stringify(default_layout[property]));\n                                continue;\n                            }\n                            // Both values are objects: merge recursively\n                            if (custom_type === 'object' && default_type === 'object') {\n                                custom_layout[property] = LocusZoom.Layouts.merge(custom_layout[property], default_layout[property]);\n                                continue;\n                            }\n                        }\n                        return custom_layout;\n                    };\n                    return obj;\n                }();\n                /**\n * Tooltip Layouts\n * @namespace LocusZoom.Layouts.tooltips\n */\n                // TODO: Improve documentation of predefined types within layout namespaces\n                LocusZoom.Layouts.add('tooltip', 'standard_association', {\n                    namespace: { 'assoc': 'assoc' },\n                    closable: true,\n                    show: {\n                        or: [\n                            'highlighted',\n                            'selected'\n                        ]\n                    },\n                    hide: {\n                        and: [\n                            'unhighlighted',\n                            'unselected'\n                        ]\n                    },\n                    html: '<strong>{{{{namespace[assoc]}}variant}}</strong><br>' + 'P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation}}</strong><br>' + 'Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele}}</strong><br>' + '<a href=\"javascript:void(0);\" onclick=\"LocusZoom.getToolTipDataLayer(this).makeLDReference(LocusZoom.getToolTipData(this));\">Make LD Reference</a><br>'\n                });\n                var covariates_model_association = LocusZoom.Layouts.get('tooltip', 'standard_association', { unnamespaced: true });\n                covariates_model_association.html += '<a href=\"javascript:void(0);\" onclick=\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\">Condition on Variant</a><br>';\n                LocusZoom.Layouts.add('tooltip', 'covariates_model_association', covariates_model_association);\n                LocusZoom.Layouts.add('tooltip', 'standard_genes', {\n                    closable: true,\n                    show: {\n                        or: [\n                            'highlighted',\n                            'selected'\n                        ]\n                    },\n                    hide: {\n                        and: [\n                            'unhighlighted',\n                            'unselected'\n                        ]\n                    },\n                    html: '<h4><strong><i>{{gene_name}}</i></strong></h4>' + '<div style=\"float: left;\">Gene ID: <strong>{{gene_id}}</strong></div>' + '<div style=\"float: right;\">Transcript ID: <strong>{{transcript_id}}</strong></div>' + '<div style=\"clear: both;\"></div>' + '<table>' + '<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>' + '<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{n_syn}}</td><td>z = {{syn_z}}</td></tr>' + '<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{n_mis}}</td><td>z = {{mis_z}}</td></tr>' + '<tr><td>LoF</td><td>{{exp_lof}}</td><td>{{n_lof}}</td><td>pLI = {{pLI}}</td></tr>' + '</table>' + '<a href=\"http://exac.broadinstitute.org/gene/{{gene_id}}\" target=\"_new\">More data on ExAC</a>'\n                });\n                LocusZoom.Layouts.add('tooltip', 'standard_intervals', {\n                    namespace: { 'intervals': 'intervals' },\n                    closable: false,\n                    show: {\n                        or: [\n                            'highlighted',\n                            'selected'\n                        ]\n                    },\n                    hide: {\n                        and: [\n                            'unhighlighted',\n                            'unselected'\n                        ]\n                    },\n                    html: '{{{{namespace[intervals]}}state_name}}<br>{{{{namespace[intervals]}}start}}-{{{{namespace[intervals]}}end}}'\n                });\n                /**\n * Data Layer Layouts: represent specific information from a data source\n * @namespace Layouts.data_layer\n*/\n                LocusZoom.Layouts.add('data_layer', 'significance', {\n                    id: 'significance',\n                    type: 'orthogonal_line',\n                    orientation: 'horizontal',\n                    offset: 4.522\n                });\n                LocusZoom.Layouts.add('data_layer', 'recomb_rate', {\n                    namespace: { 'recomb': 'recomb' },\n                    id: 'recombrate',\n                    type: 'line',\n                    fields: [\n                        '{{namespace[recomb]}}position',\n                        '{{namespace[recomb]}}recomb_rate'\n                    ],\n                    z_index: 1,\n                    style: {\n                        'stroke': '#0000FF',\n                        'stroke-width': '1.5px'\n                    },\n                    x_axis: { field: '{{namespace[recomb]}}position' },\n                    y_axis: {\n                        axis: 2,\n                        field: '{{namespace[recomb]}}recomb_rate',\n                        floor: 0,\n                        ceiling: 100\n                    }\n                });\n                LocusZoom.Layouts.add('data_layer', 'association_pvalues', {\n                    namespace: {\n                        'assoc': 'assoc',\n                        'ld': 'ld'\n                    },\n                    id: 'associationpvalues',\n                    type: 'scatter',\n                    point_shape: {\n                        scale_function: 'if',\n                        field: '{{namespace[ld]}}isrefvar',\n                        parameters: {\n                            field_value: 1,\n                            then: 'diamond',\n                            else: 'circle'\n                        }\n                    },\n                    point_size: {\n                        scale_function: 'if',\n                        field: '{{namespace[ld]}}isrefvar',\n                        parameters: {\n                            field_value: 1,\n                            then: 80,\n                            else: 40\n                        }\n                    },\n                    color: [\n                        {\n                            scale_function: 'if',\n                            field: '{{namespace[ld]}}isrefvar',\n                            parameters: {\n                                field_value: 1,\n                                then: '#9632b8'\n                            }\n                        },\n                        {\n                            scale_function: 'numerical_bin',\n                            field: '{{namespace[ld]}}state',\n                            parameters: {\n                                breaks: [\n                                    0,\n                                    0.2,\n                                    0.4,\n                                    0.6,\n                                    0.8\n                                ],\n                                values: [\n                                    '#357ebd',\n                                    '#46b8da',\n                                    '#5cb85c',\n                                    '#eea236',\n                                    '#d43f3a'\n                                ]\n                            }\n                        },\n                        '#B8B8B8'\n                    ],\n                    legend: [\n                        {\n                            shape: 'diamond',\n                            color: '#9632b8',\n                            size: 40,\n                            label: 'LD Ref Var',\n                            class: 'lz-data_layer-scatter'\n                        },\n                        {\n                            shape: 'circle',\n                            color: '#d43f3a',\n                            size: 40,\n                            label: '1.0 > r\\xB2 \\u2265 0.8',\n                            class: 'lz-data_layer-scatter'\n                        },\n                        {\n                            shape: 'circle',\n                            color: '#eea236',\n                            size: 40,\n                            label: '0.8 > r\\xB2 \\u2265 0.6',\n                            class: 'lz-data_layer-scatter'\n                        },\n                        {\n                            shape: 'circle',\n                            color: '#5cb85c',\n                            size: 40,\n                            label: '0.6 > r\\xB2 \\u2265 0.4',\n                            class: 'lz-data_layer-scatter'\n                        },\n                        {\n                            shape: 'circle',\n                            color: '#46b8da',\n                            size: 40,\n                            label: '0.4 > r\\xB2 \\u2265 0.2',\n                            class: 'lz-data_layer-scatter'\n                        },\n                        {\n                            shape: 'circle',\n                            color: '#357ebd',\n                            size: 40,\n                            label: '0.2 > r\\xB2 \\u2265 0.0',\n                            class: 'lz-data_layer-scatter'\n                        },\n                        {\n                            shape: 'circle',\n                            color: '#B8B8B8',\n                            size: 40,\n                            label: 'no r\\xB2 data',\n                            class: 'lz-data_layer-scatter'\n                        }\n                    ],\n                    fields: [\n                        '{{namespace[assoc]}}variant',\n                        '{{namespace[assoc]}}position',\n                        '{{namespace[assoc]}}log_pvalue',\n                        '{{namespace[assoc]}}log_pvalue|logtoscinotation',\n                        '{{namespace[assoc]}}ref_allele',\n                        '{{namespace[ld]}}state',\n                        '{{namespace[ld]}}isrefvar'\n                    ],\n                    id_field: '{{namespace[assoc]}}variant',\n                    z_index: 2,\n                    x_axis: { field: '{{namespace[assoc]}}position' },\n                    y_axis: {\n                        axis: 1,\n                        field: '{{namespace[assoc]}}log_pvalue',\n                        floor: 0,\n                        upper_buffer: 0.1,\n                        min_extent: [\n                            0,\n                            10\n                        ]\n                    },\n                    behaviors: {\n                        onmouseover: [{\n                                action: 'set',\n                                status: 'highlighted'\n                            }],\n                        onmouseout: [{\n                                action: 'unset',\n                                status: 'highlighted'\n                            }],\n                        onclick: [{\n                                action: 'toggle',\n                                status: 'selected',\n                                exclusive: true\n                            }],\n                        onshiftclick: [{\n                                action: 'toggle',\n                                status: 'selected'\n                            }]\n                    },\n                    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_association', { unnamespaced: true })\n                });\n                LocusZoom.Layouts.add('data_layer', 'phewas_pvalues', {\n                    namespace: { 'phewas': 'phewas' },\n                    id: 'phewaspvalues',\n                    type: 'category_scatter',\n                    point_shape: 'circle',\n                    point_size: 70,\n                    tooltip_positioning: 'vertical',\n                    id_field: '{{namespace[phewas]}}id',\n                    fields: [\n                        '{{namespace[phewas]}}id',\n                        '{{namespace[phewas]}}log_pvalue',\n                        '{{namespace[phewas]}}trait_group',\n                        '{{namespace[phewas]}}trait_label'\n                    ],\n                    x_axis: {\n                        field: '{{namespace[phewas]}}x',\n                        // Synthetic/derived field added by `category_scatter` layer\n                        category_field: '{{namespace[phewas]}}trait_group',\n                        lower_buffer: 0.025,\n                        upper_buffer: 0.025\n                    },\n                    y_axis: {\n                        axis: 1,\n                        field: '{{namespace[phewas]}}log_pvalue',\n                        floor: 0,\n                        upper_buffer: 0.15\n                    },\n                    color: {\n                        field: '{{namespace[phewas]}}trait_group',\n                        scale_function: 'categorical_bin',\n                        parameters: {\n                            categories: [],\n                            values: [],\n                            null_value: '#B8B8B8'\n                        }\n                    },\n                    fill_opacity: 0.7,\n                    tooltip: {\n                        closable: true,\n                        show: {\n                            or: [\n                                'highlighted',\n                                'selected'\n                            ]\n                        },\n                        hide: {\n                            and: [\n                                'unhighlighted',\n                                'unselected'\n                            ]\n                        },\n                        html: [\n                            '<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>',\n                            '<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>',\n                            '<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>'\n                        ].join('')\n                    },\n                    behaviors: {\n                        onmouseover: [{\n                                action: 'set',\n                                status: 'highlighted'\n                            }],\n                        onmouseout: [{\n                                action: 'unset',\n                                status: 'highlighted'\n                            }],\n                        onclick: [{\n                                action: 'toggle',\n                                status: 'selected',\n                                exclusive: true\n                            }],\n                        onshiftclick: [{\n                                action: 'toggle',\n                                status: 'selected'\n                            }]\n                    },\n                    label: {\n                        text: '{{{{namespace[phewas]}}trait_label}}',\n                        spacing: 6,\n                        lines: {\n                            style: {\n                                'stroke-width': '2px',\n                                'stroke': '#333333',\n                                'stroke-dasharray': '2px 2px'\n                            }\n                        },\n                        filters: [{\n                                field: '{{namespace[phewas]}}log_pvalue',\n                                operator: '>=',\n                                value: 20\n                            }],\n                        style: {\n                            'font-size': '14px',\n                            'font-weight': 'bold',\n                            'fill': '#333333'\n                        }\n                    }\n                });\n                LocusZoom.Layouts.add('data_layer', 'genes', {\n                    namespace: {\n                        'gene': 'gene',\n                        'constraint': 'constraint'\n                    },\n                    id: 'genes',\n                    type: 'genes',\n                    fields: [\n                        '{{namespace[gene]}}all',\n                        '{{namespace[constraint]}}all'\n                    ],\n                    id_field: 'gene_id',\n                    behaviors: {\n                        onmouseover: [{\n                                action: 'set',\n                                status: 'highlighted'\n                            }],\n                        onmouseout: [{\n                                action: 'unset',\n                                status: 'highlighted'\n                            }],\n                        onclick: [{\n                                action: 'toggle',\n                                status: 'selected',\n                                exclusive: true\n                            }],\n                        onshiftclick: [{\n                                action: 'toggle',\n                                status: 'selected'\n                            }]\n                    },\n                    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_genes', { unnamespaced: true })\n                });\n                LocusZoom.Layouts.add('data_layer', 'genome_legend', {\n                    namespace: { 'genome': 'genome' },\n                    id: 'genome_legend',\n                    type: 'genome_legend',\n                    fields: [\n                        '{{namespace[genome]}}chr',\n                        '{{namespace[genome]}}base_pairs'\n                    ],\n                    x_axis: {\n                        floor: 0,\n                        ceiling: 2881033286\n                    }\n                });\n                LocusZoom.Layouts.add('data_layer', 'intervals', {\n                    namespace: { 'intervals': 'intervals' },\n                    id: 'intervals',\n                    type: 'intervals',\n                    fields: [\n                        '{{namespace[intervals]}}start',\n                        '{{namespace[intervals]}}end',\n                        '{{namespace[intervals]}}state_id',\n                        '{{namespace[intervals]}}state_name'\n                    ],\n                    id_field: '{{namespace[intervals]}}start',\n                    start_field: '{{namespace[intervals]}}start',\n                    end_field: '{{namespace[intervals]}}end',\n                    track_split_field: '{{namespace[intervals]}}state_id',\n                    split_tracks: true,\n                    always_hide_legend: false,\n                    color: {\n                        field: '{{namespace[intervals]}}state_id',\n                        scale_function: 'categorical_bin',\n                        parameters: {\n                            categories: [\n                                1,\n                                2,\n                                3,\n                                4,\n                                5,\n                                6,\n                                7,\n                                8,\n                                9,\n                                10,\n                                11,\n                                12,\n                                13\n                            ],\n                            values: [\n                                'rgb(212,63,58)',\n                                'rgb(250,120,105)',\n                                'rgb(252,168,139)',\n                                'rgb(240,189,66)',\n                                'rgb(250,224,105)',\n                                'rgb(240,238,84)',\n                                'rgb(244,252,23)',\n                                'rgb(23,232,252)',\n                                'rgb(32,191,17)',\n                                'rgb(23,166,77)',\n                                'rgb(32,191,17)',\n                                'rgb(162,133,166)',\n                                'rgb(212,212,212)'\n                            ],\n                            null_value: '#B8B8B8'\n                        }\n                    },\n                    legend: [\n                        {\n                            shape: 'rect',\n                            color: 'rgb(212,63,58)',\n                            width: 9,\n                            label: 'Active Promoter',\n                            '{{namespace[intervals]}}state_id': 1\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(250,120,105)',\n                            width: 9,\n                            label: 'Weak Promoter',\n                            '{{namespace[intervals]}}state_id': 2\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(252,168,139)',\n                            width: 9,\n                            label: 'Poised Promoter',\n                            '{{namespace[intervals]}}state_id': 3\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(240,189,66)',\n                            width: 9,\n                            label: 'Strong enhancer',\n                            '{{namespace[intervals]}}state_id': 4\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(250,224,105)',\n                            width: 9,\n                            label: 'Strong enhancer',\n                            '{{namespace[intervals]}}state_id': 5\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(240,238,84)',\n                            width: 9,\n                            label: 'Weak enhancer',\n                            '{{namespace[intervals]}}state_id': 6\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(244,252,23)',\n                            width: 9,\n                            label: 'Weak enhancer',\n                            '{{namespace[intervals]}}state_id': 7\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(23,232,252)',\n                            width: 9,\n                            label: 'Insulator',\n                            '{{namespace[intervals]}}state_id': 8\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(32,191,17)',\n                            width: 9,\n                            label: 'Transcriptional transition',\n                            '{{namespace[intervals]}}state_id': 9\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(23,166,77)',\n                            width: 9,\n                            label: 'Transcriptional elongation',\n                            '{{namespace[intervals]}}state_id': 10\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(136,240,129)',\n                            width: 9,\n                            label: 'Weak transcribed',\n                            '{{namespace[intervals]}}state_id': 11\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(162,133,166)',\n                            width: 9,\n                            label: 'Polycomb-repressed',\n                            '{{namespace[intervals]}}state_id': 12\n                        },\n                        {\n                            shape: 'rect',\n                            color: 'rgb(212,212,212)',\n                            width: 9,\n                            label: 'Heterochromatin / low signal',\n                            '{{namespace[intervals]}}state_id': 13\n                        }\n                    ],\n                    behaviors: {\n                        onmouseover: [{\n                                action: 'set',\n                                status: 'highlighted'\n                            }],\n                        onmouseout: [{\n                                action: 'unset',\n                                status: 'highlighted'\n                            }],\n                        onclick: [{\n                                action: 'toggle',\n                                status: 'selected',\n                                exclusive: true\n                            }],\n                        onshiftclick: [{\n                                action: 'toggle',\n                                status: 'selected'\n                            }]\n                    },\n                    tooltip: LocusZoom.Layouts.get('tooltip', 'standard_intervals', { unnamespaced: true })\n                });\n                /**\n * Dashboard Layouts: toolbar buttons etc\n  * @namespace Layouts.dashboard\n */\n                LocusZoom.Layouts.add('dashboard', 'standard_panel', {\n                    components: [\n                        {\n                            type: 'remove_panel',\n                            position: 'right',\n                            color: 'red',\n                            group_position: 'end'\n                        },\n                        {\n                            type: 'move_panel_up',\n                            position: 'right',\n                            group_position: 'middle'\n                        },\n                        {\n                            type: 'move_panel_down',\n                            position: 'right',\n                            group_position: 'start',\n                            style: { 'margin-left': '0.75em' }\n                        }\n                    ]\n                });\n                LocusZoom.Layouts.add('dashboard', 'standard_plot', {\n                    components: [\n                        {\n                            type: 'title',\n                            title: 'LocusZoom',\n                            subtitle: '<a href=\"https://statgen.github.io/locuszoom/\" target=\"_blank\">v' + LocusZoom.version + '</a>',\n                            position: 'left'\n                        },\n                        {\n                            type: 'download',\n                            position: 'right'\n                        }\n                    ]\n                });\n                var covariates_model_plot_dashboard = LocusZoom.Layouts.get('dashboard', 'standard_plot');\n                covariates_model_plot_dashboard.components.push({\n                    type: 'covariates_model',\n                    button_html: 'Model',\n                    button_title: 'Show and edit covariates currently in model',\n                    position: 'left'\n                });\n                LocusZoom.Layouts.add('dashboard', 'covariates_model_plot', covariates_model_plot_dashboard);\n                var region_nav_plot_dashboard = LocusZoom.Layouts.get('dashboard', 'standard_plot');\n                region_nav_plot_dashboard.components.push({\n                    type: 'shift_region',\n                    step: 500000,\n                    button_html: '>>',\n                    position: 'right',\n                    group_position: 'end'\n                });\n                region_nav_plot_dashboard.components.push({\n                    type: 'shift_region',\n                    step: 50000,\n                    button_html: '>',\n                    position: 'right',\n                    group_position: 'middle'\n                });\n                region_nav_plot_dashboard.components.push({\n                    type: 'zoom_region',\n                    step: 0.2,\n                    position: 'right',\n                    group_position: 'middle'\n                });\n                region_nav_plot_dashboard.components.push({\n                    type: 'zoom_region',\n                    step: -0.2,\n                    position: 'right',\n                    group_position: 'middle'\n                });\n                region_nav_plot_dashboard.components.push({\n                    type: 'shift_region',\n                    step: -50000,\n                    button_html: '<',\n                    position: 'right',\n                    group_position: 'middle'\n                });\n                region_nav_plot_dashboard.components.push({\n                    type: 'shift_region',\n                    step: -500000,\n                    button_html: '<<',\n                    position: 'right',\n                    group_position: 'start'\n                });\n                LocusZoom.Layouts.add('dashboard', 'region_nav_plot', region_nav_plot_dashboard);\n                /**\n * Panel Layouts\n * @namespace Layouts.panel\n */\n                LocusZoom.Layouts.add('panel', 'association', {\n                    id: 'association',\n                    width: 800,\n                    height: 225,\n                    min_width: 400,\n                    min_height: 200,\n                    proportional_width: 1,\n                    margin: {\n                        top: 35,\n                        right: 50,\n                        bottom: 40,\n                        left: 50\n                    },\n                    inner_border: 'rgb(210, 210, 210)',\n                    dashboard: function () {\n                        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n                        l.components.push({\n                            type: 'toggle_legend',\n                            position: 'right'\n                        });\n                        return l;\n                    }(),\n                    axes: {\n                        x: {\n                            label: 'Chromosome {{chr}} (Mb)',\n                            label_offset: 32,\n                            tick_format: 'region',\n                            extent: 'state'\n                        },\n                        y1: {\n                            label: '-log10 p-value',\n                            label_offset: 28\n                        },\n                        y2: {\n                            label: 'Recombination Rate (cM/Mb)',\n                            label_offset: 40\n                        }\n                    },\n                    legend: {\n                        orientation: 'vertical',\n                        origin: {\n                            x: 55,\n                            y: 40\n                        },\n                        hidden: true\n                    },\n                    interaction: {\n                        drag_background_to_pan: true,\n                        drag_x_ticks_to_scale: true,\n                        drag_y1_ticks_to_scale: true,\n                        drag_y2_ticks_to_scale: true,\n                        scroll_to_zoom: true,\n                        x_linked: true\n                    },\n                    data_layers: [\n                        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n                        LocusZoom.Layouts.get('data_layer', 'recomb_rate', { unnamespaced: true }),\n                        LocusZoom.Layouts.get('data_layer', 'association_pvalues', { unnamespaced: true })\n                    ]\n                });\n                LocusZoom.Layouts.add('panel', 'genes', {\n                    id: 'genes',\n                    width: 800,\n                    height: 225,\n                    min_width: 400,\n                    min_height: 112.5,\n                    proportional_width: 1,\n                    margin: {\n                        top: 20,\n                        right: 50,\n                        bottom: 20,\n                        left: 50\n                    },\n                    axes: {},\n                    interaction: {\n                        drag_background_to_pan: true,\n                        scroll_to_zoom: true,\n                        x_linked: true\n                    },\n                    dashboard: function () {\n                        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n                        l.components.push({\n                            type: 'resize_to_data',\n                            position: 'right'\n                        });\n                        return l;\n                    }(),\n                    data_layers: [LocusZoom.Layouts.get('data_layer', 'genes', { unnamespaced: true })]\n                });\n                LocusZoom.Layouts.add('panel', 'phewas', {\n                    id: 'phewas',\n                    width: 800,\n                    height: 300,\n                    min_width: 800,\n                    min_height: 300,\n                    proportional_width: 1,\n                    margin: {\n                        top: 20,\n                        right: 50,\n                        bottom: 120,\n                        left: 50\n                    },\n                    inner_border: 'rgb(210, 210, 210)',\n                    axes: {\n                        x: {\n                            ticks: {\n                                // Object based config (shared defaults; allow layers to specify ticks)\n                                style: {\n                                    'font-weight': 'bold',\n                                    'font-size': '11px',\n                                    'text-anchor': 'start'\n                                },\n                                transform: 'rotate(50)',\n                                position: 'left'    // Special param recognized by `category_scatter` layers\n                            }\n                        },\n                        y1: {\n                            label: '-log10 p-value',\n                            label_offset: 28\n                        }\n                    },\n                    data_layers: [\n                        LocusZoom.Layouts.get('data_layer', 'significance', { unnamespaced: true }),\n                        LocusZoom.Layouts.get('data_layer', 'phewas_pvalues', { unnamespaced: true })\n                    ]\n                });\n                LocusZoom.Layouts.add('panel', 'genome_legend', {\n                    id: 'genome_legend',\n                    width: 800,\n                    height: 50,\n                    origin: {\n                        x: 0,\n                        y: 300\n                    },\n                    min_width: 800,\n                    min_height: 50,\n                    proportional_width: 1,\n                    margin: {\n                        top: 0,\n                        right: 50,\n                        bottom: 35,\n                        left: 50\n                    },\n                    axes: {\n                        x: {\n                            label: 'Genomic Position (number denotes chromosome)',\n                            label_offset: 35,\n                            ticks: [\n                                {\n                                    x: 124625310,\n                                    text: '1',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 370850307,\n                                    text: '2',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 591461209,\n                                    text: '3',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 786049562,\n                                    text: '4',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 972084330,\n                                    text: '5',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 1148099493,\n                                    text: '6',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 1313226358,\n                                    text: '7',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 1465977701,\n                                    text: '8',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 1609766427,\n                                    text: '9',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 1748140516,\n                                    text: '10',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 1883411148,\n                                    text: '11',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2017840353,\n                                    text: '12',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2142351240,\n                                    text: '13',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2253610949,\n                                    text: '14',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2358551415,\n                                    text: '15',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2454994487,\n                                    text: '16',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2540769469,\n                                    text: '17',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2620405698,\n                                    text: '18',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2689008813,\n                                    text: '19',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2750086065,\n                                    text: '20',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2805663772,\n                                    text: '21',\n                                    style: {\n                                        'fill': 'rgb(120, 120, 186)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                },\n                                {\n                                    x: 2855381003,\n                                    text: '22',\n                                    style: {\n                                        'fill': 'rgb(0, 0, 66)',\n                                        'text-anchor': 'center',\n                                        'font-size': '13px',\n                                        'font-weight': 'bold'\n                                    },\n                                    transform: 'translate(0, 2)'\n                                }\n                            ]\n                        }\n                    },\n                    data_layers: [LocusZoom.Layouts.get('data_layer', 'genome_legend', { unnamespaced: true })]\n                });\n                LocusZoom.Layouts.add('panel', 'intervals', {\n                    id: 'intervals',\n                    width: 1000,\n                    height: 50,\n                    min_width: 500,\n                    min_height: 50,\n                    margin: {\n                        top: 25,\n                        right: 150,\n                        bottom: 5,\n                        left: 50\n                    },\n                    dashboard: function () {\n                        var l = LocusZoom.Layouts.get('dashboard', 'standard_panel', { unnamespaced: true });\n                        l.components.push({\n                            type: 'toggle_split_tracks',\n                            data_layer_id: 'intervals',\n                            position: 'right'\n                        });\n                        return l;\n                    }(),\n                    axes: {},\n                    interaction: {\n                        drag_background_to_pan: true,\n                        scroll_to_zoom: true,\n                        x_linked: true\n                    },\n                    legend: {\n                        hidden: true,\n                        orientation: 'horizontal',\n                        origin: {\n                            x: 50,\n                            y: 0\n                        },\n                        pad_from_bottom: 5\n                    },\n                    data_layers: [LocusZoom.Layouts.get('data_layer', 'intervals', { unnamespaced: true })]\n                });\n                /**\n * Plot Layouts\n * @namespace Layouts.plot\n */\n                LocusZoom.Layouts.add('plot', 'standard_association', {\n                    state: {},\n                    width: 800,\n                    height: 450,\n                    responsive_resize: true,\n                    min_region_scale: 20000,\n                    max_region_scale: 1000000,\n                    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n                    panels: [\n                        LocusZoom.Layouts.get('panel', 'association', {\n                            unnamespaced: true,\n                            proportional_height: 0.5\n                        }),\n                        LocusZoom.Layouts.get('panel', 'genes', {\n                            unnamespaced: true,\n                            proportional_height: 0.5\n                        })\n                    ]\n                });\n                // Shortcut to \"StandardLayout\" for backward compatibility\n                LocusZoom.StandardLayout = LocusZoom.Layouts.get('plot', 'standard_association');\n                LocusZoom.Layouts.add('plot', 'standard_phewas', {\n                    width: 800,\n                    height: 600,\n                    min_width: 800,\n                    min_height: 600,\n                    responsive_resize: true,\n                    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n                    panels: [\n                        LocusZoom.Layouts.get('panel', 'phewas', {\n                            unnamespaced: true,\n                            proportional_height: 0.45\n                        }),\n                        LocusZoom.Layouts.get('panel', 'genome_legend', {\n                            unnamespaced: true,\n                            proportional_height: 0.1\n                        }),\n                        LocusZoom.Layouts.get('panel', 'genes', {\n                            unnamespaced: true,\n                            proportional_height: 0.45,\n                            margin: { bottom: 40 },\n                            axes: {\n                                x: {\n                                    label: 'Chromosome {{chr}} (Mb)',\n                                    label_offset: 32,\n                                    tick_format: 'region',\n                                    extent: 'state'\n                                }\n                            }\n                        })\n                    ],\n                    mouse_guide: false\n                });\n                LocusZoom.Layouts.add('plot', 'interval_association', {\n                    state: {},\n                    width: 800,\n                    height: 550,\n                    responsive_resize: true,\n                    min_region_scale: 20000,\n                    max_region_scale: 1000000,\n                    dashboard: LocusZoom.Layouts.get('dashboard', 'standard_plot', { unnamespaced: true }),\n                    panels: [\n                        LocusZoom.Layouts.get('panel', 'association', {\n                            unnamespaced: true,\n                            width: 800,\n                            proportional_height: 225 / 570\n                        }),\n                        LocusZoom.Layouts.get('panel', 'intervals', {\n                            unnamespaced: true,\n                            proportional_height: 120 / 570\n                        }),\n                        LocusZoom.Layouts.get('panel', 'genes', {\n                            unnamespaced: true,\n                            width: 800,\n                            proportional_height: 225 / 570\n                        })\n                    ]\n                });\n                /* global LocusZoom */\n                'use strict';\n                /**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @class\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n*/\n                LocusZoom.DataLayer = function (layout, parent) {\n                    /** @member {Boolean} */\n                    this.initialized = false;\n                    /** @member {Number} */\n                    this.layout_idx = null;\n                    /** @member {String} */\n                    this.id = null;\n                    /** @member {LocusZoom.Panel} */\n                    this.parent = parent || null;\n                    /**\n     * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n     */\n                    this.svg = {};\n                    /** @member {LocusZoom.Plot} */\n                    this.parent_plot = null;\n                    if (typeof parent != 'undefined' && parent instanceof LocusZoom.Panel) {\n                        this.parent_plot = parent.parent;\n                    }\n                    /** @member {Object} */\n                    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.DataLayer.DefaultLayout);\n                    if (this.layout.id) {\n                        this.id = this.layout.id;\n                    }\n                    // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n                    if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== 'number') {\n                        this.layout.x_axis.axis = 1;\n                    }\n                    if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== 'number') {\n                        this.layout.y_axis.axis = 1;\n                    }\n                    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state\n     * @member {Object}\n     */\n                    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n                    /** @member {Object} */\n                    this.state = {};\n                    /** @member {String} */\n                    this.state_id = null;\n                    this.setDefaultState();\n                    // Initialize parameters for storing data and tool tips\n                    /** @member {Array} */\n                    this.data = [];\n                    if (this.layout.tooltip) {\n                        /** @member {Object} */\n                        this.tooltips = {};\n                    }\n                    // Initialize flags for tracking global statuses\n                    this.global_statuses = {\n                        'highlighted': false,\n                        'selected': false,\n                        'faded': false,\n                        'hidden': false\n                    };\n                    return this;\n                };\n                /**\n * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n *\n * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn\n *\n *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n * @param fieldName\n * @param namespace\n * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n * @returns {String} The raw string added to the fields array\n */\n                LocusZoom.DataLayer.prototype.addField = function (fieldName, namespace, transformations) {\n                    if (!fieldName || !namespace) {\n                        throw 'Must specify field name and namespace to use when adding field';\n                    }\n                    var fieldString = namespace + ':' + fieldName;\n                    if (transformations) {\n                        fieldString += '|';\n                        if (typeof transformations === 'string') {\n                            fieldString += transformations;\n                        } else if (Array.isArray(transformations)) {\n                            fieldString += transformations.join('|');\n                        } else {\n                            throw 'Must provide transformations as either a string or array of strings';\n                        }\n                    }\n                    var fields = this.layout.fields;\n                    if (fields.indexOf(fieldString) === -1) {\n                        fields.push(fieldString);\n                    }\n                    return fieldString;\n                };\n                /**\n * Define default state that should get tracked during the lifetime of this layer.\n *\n * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n */\n                LocusZoom.DataLayer.prototype.setDefaultState = function () {\n                    // Define state parameters specific to this data layer. Within plot state, this will live under a key\n                    //  `panel_name.layer_name`.\n                    if (this.parent) {\n                        this.state = this.parent.state;\n                        this.state_id = this.parent.id + '.' + this.id;\n                        this.state[this.state_id] = this.state[this.state_id] || {};\n                        LocusZoom.DataLayer.Statuses.adjectives.forEach(function (status) {\n                            this.state[this.state_id][status] = this.state[this.state_id][status] || [];\n                        }.bind(this));\n                    }\n                };\n                /**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\n                LocusZoom.DataLayer.DefaultLayout = {\n                    type: '',\n                    fields: [],\n                    x_axis: {},\n                    y_axis: {}\n                };\n                /**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb/antiverb and an adjective. Verbs and antiverbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[], menu_antiverbs: String[]}}\n */\n                LocusZoom.DataLayer.Statuses = {\n                    verbs: [\n                        'highlight',\n                        'select',\n                        'fade',\n                        'hide'\n                    ],\n                    adjectives: [\n                        'highlighted',\n                        'selected',\n                        'faded',\n                        'hidden'\n                    ],\n                    menu_antiverbs: [\n                        'unhighlight',\n                        'deselect',\n                        'unfade',\n                        'show'\n                    ]\n                };\n                /**\n * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n *\n * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n */\n                LocusZoom.DataLayer.prototype.getBaseId = function () {\n                    return this.parent_plot.id + '.' + this.parent.id + '.' + this.id;\n                };\n                /**\n * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n *\n * May be used by operations that resize the data layer to fit available data\n *\n * @public\n * @returns {number}\n */\n                LocusZoom.DataLayer.prototype.getAbsoluteDataHeight = function () {\n                    var dataBCR = this.svg.group.node().getBoundingClientRect();\n                    return dataBCR.height;\n                };\n                /**\n * Whether transitions can be applied to this data layer\n * @returns {boolean}\n */\n                LocusZoom.DataLayer.prototype.canTransition = function () {\n                    if (!this.layout.transition) {\n                        return false;\n                    }\n                    return !(this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.panel_id);\n                };\n                /**\n * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n * @param {String|Object} element\n * @returns {String}\n */\n                LocusZoom.DataLayer.prototype.getElementId = function (element) {\n                    var element_id = 'element';\n                    if (typeof element == 'string') {\n                        element_id = element;\n                    } else if (typeof element == 'object') {\n                        var id_field = this.layout.id_field || 'id';\n                        if (typeof element[id_field] == 'undefined') {\n                            throw 'Unable to generate element ID';\n                        }\n                        element_id = element[id_field].toString().replace(/\\W/g, '');\n                    }\n                    return (this.getBaseId() + '-' + element_id).replace(/(:|\\.|\\[|\\]|,)/g, '_');\n                };\n                /**\n * Fetch an ID that may bind a data element to a separate visual node for displaying status\n * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n * even a common/shared node to show status across many elements in a set.\n * Abstract method. It should be overridden by data layers that implement seperate status\n * nodes specifically to the use case of the data layer type.\n * @param {String|Object} element\n * @returns {String|null}\n */\n                LocusZoom.DataLayer.prototype.getElementStatusNodeId = function (element) {\n                    return null;\n                };\n                /**\n * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n *   referenced by the unique identifier for the element\n\n * @param {String} id The unique identifier for the element, as defined by `getElementId`\n * @returns {Object|null} The data bound to that element\n */\n                LocusZoom.DataLayer.prototype.getElementById = function (id) {\n                    var selector = d3.select('#' + id.replace(/(:|\\.|\\[|\\]|,)/g, '\\\\$1'));\n                    if (!selector.empty() && selector.data() && selector.data().length) {\n                        return selector.data()[0];\n                    } else {\n                        return null;\n                    }\n                };\n                /**\n * Basic method to apply arbitrary methods and properties to data elements.\n *   This is called on all data immediately after being fetched.\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.applyDataMethods = function () {\n                    this.data.forEach(function (d, i) {\n                        // Basic toHTML() method - return the stringified value in the id_field, if defined.\n                        this.data[i].toHTML = function () {\n                            var id_field = this.layout.id_field || 'id';\n                            var html = '';\n                            if (this.data[i][id_field]) {\n                                html = this.data[i][id_field].toString();\n                            }\n                            return html;\n                        }.bind(this);\n                        // getDataLayer() method - return a reference to the data layer\n                        this.data[i].getDataLayer = function () {\n                            return this;\n                        }.bind(this);\n                        // deselect() method - shortcut method to deselect the element\n                        this.data[i].deselect = function () {\n                            var data_layer = this.getDataLayer();\n                            data_layer.unselectElement(this);\n                        };\n                    }.bind(this));\n                    this.applyCustomDataMethods();\n                    return this;\n                };\n                /**\n * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.applyCustomDataMethods = function () {\n                    return this;\n                };\n                /**\n * Initialize a data layer\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.initialize = function () {\n                    // Append a container group element to house the main data layer group element and the clip path\n                    this.svg.container = this.parent.svg.group.append('g').attr('class', 'lz-data_layer-container').attr('id', this.getBaseId() + '.data_layer_container');\n                    // Append clip path to the container element\n                    this.svg.clipRect = this.svg.container.append('clipPath').attr('id', this.getBaseId() + '.clip').append('rect');\n                    // Append svg group for rendering all data layer elements, clipped by the clip path\n                    this.svg.group = this.svg.container.append('g').attr('id', this.getBaseId() + '.data_layer').attr('clip-path', 'url(#' + this.getBaseId() + '.clip)');\n                    return this;\n                };\n                /**\n * Move a data layer up relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.moveUp = function () {\n                    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]) {\n                        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n                        this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n                        this.parent.resortDataLayers();\n                    }\n                    return this;\n                };\n                /**\n * Move a data layer down relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.moveDown = function () {\n                    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]) {\n                        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n                        this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n                        this.parent.resortDataLayers();\n                    }\n                    return this;\n                };\n                /**\n * Apply scaling functions to an element or parameter as needed, based on its layout and the element's data\n * If the layout parameter is already a primitive type, simply return the value as given\n * @param {Array|Number|String|Object} layout\n * @param {*} data The value to be used with the filter\n * @returns {*} The transformed value\n */\n                LocusZoom.DataLayer.prototype.resolveScalableParameter = function (layout, data) {\n                    var ret = null;\n                    if (Array.isArray(layout)) {\n                        var idx = 0;\n                        while (ret === null && idx < layout.length) {\n                            ret = this.resolveScalableParameter(layout[idx], data);\n                            idx++;\n                        }\n                    } else {\n                        switch (typeof layout) {\n                        case 'number':\n                        case 'string':\n                            ret = layout;\n                            break;\n                        case 'object':\n                            if (layout.scale_function) {\n                                if (layout.field) {\n                                    var f = new LocusZoom.Data.Field(layout.field);\n                                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, f.resolve(data));\n                                } else {\n                                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, data);\n                                }\n                            }\n                            break;\n                        }\n                    }\n                    return ret;\n                };\n                /**\n * Generate dimension extent function based on layout parameters\n * @param {('x'|'y')} dimension\n */\n                LocusZoom.DataLayer.prototype.getAxisExtent = function (dimension) {\n                    if ([\n                            'x',\n                            'y'\n                        ].indexOf(dimension) === -1) {\n                        throw 'Invalid dimension identifier passed to LocusZoom.DataLayer.getAxisExtent()';\n                    }\n                    var axis_name = dimension + '_axis';\n                    var axis_layout = this.layout[axis_name];\n                    // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n                    if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)) {\n                        return [\n                            +axis_layout.floor,\n                            +axis_layout.ceiling\n                        ];\n                    }\n                    // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n                    var data_extent = [];\n                    if (axis_layout.field && this.data) {\n                        if (!this.data.length) {\n                            // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n                            //  because we don't need padding around an empty screen)\n                            data_extent = axis_layout.min_extent || [];\n                            return data_extent;\n                        } else {\n                            data_extent = d3.extent(this.data, function (d) {\n                                var f = new LocusZoom.Data.Field(axis_layout.field);\n                                return +f.resolve(d);\n                            });\n                            // Apply upper/lower buffers, if applicable\n                            var original_extent_span = data_extent[1] - data_extent[0];\n                            if (!isNaN(axis_layout.lower_buffer)) {\n                                data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n                            }\n                            if (!isNaN(axis_layout.upper_buffer)) {\n                                data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n                            }\n                            if (typeof axis_layout.min_extent == 'object') {\n                                // The data should span at least the range specified by min_extent, an array with [low, high]\n                                var range_min = axis_layout.min_extent[0];\n                                var range_max = axis_layout.min_extent[1];\n                                if (!isNaN(range_min) && !isNaN(range_max)) {\n                                    data_extent[0] = Math.min(data_extent[0], range_min);\n                                }\n                                if (!isNaN(range_max)) {\n                                    data_extent[1] = Math.max(data_extent[1], range_max);\n                                }\n                            }\n                            // If specified, floor and ceiling will override the actual data range\n                            return [\n                                isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                                isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling\n                            ];\n                        }\n                    }\n                    // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n                    // then default to using the state-defined region as the extent\n                    if (dimension === 'x' && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n                        return [\n                            this.state.start,\n                            this.state.end\n                        ];\n                    }\n                    // No conditions met for generating a valid extent, return an empty array\n                    return [];\n                };\n                /**\n * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n *\n *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n *\n * @param {('x'|'y1'|'y2')} dimension\n * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n *   and meanings of these parameters may vary between different data layers.\n * @returns {Object[]}\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\n                LocusZoom.DataLayer.prototype.getTicks = function (dimension, config) {\n                    if ([\n                            'x',\n                            'y1',\n                            'y2'\n                        ].indexOf(dimension) === -1) {\n                        throw 'Invalid dimension identifier at layer level' + dimension;\n                    }\n                    return [];\n                };\n                /**\n * Generate a tool tip for a given element\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\n                LocusZoom.DataLayer.prototype.createTooltip = function (d, id) {\n                    if (typeof this.layout.tooltip != 'object') {\n                        throw 'DataLayer [' + this.id + '] layout does not define a tooltip';\n                    }\n                    if (typeof id == 'undefined') {\n                        id = this.getElementId(d);\n                    }\n                    if (this.tooltips[id]) {\n                        this.positionTooltip(id);\n                        return;\n                    }\n                    this.tooltips[id] = {\n                        data: d,\n                        arrow: null,\n                        selector: d3.select(this.parent_plot.svg.node().parentNode).append('div').attr('class', 'lz-data_layer-tooltip').attr('id', id + '-tooltip')\n                    };\n                    this.updateTooltip(d);\n                    return this;\n                };\n                /**\n * Update a tool tip (generate its inner HTML)\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\n                LocusZoom.DataLayer.prototype.updateTooltip = function (d, id) {\n                    if (typeof id == 'undefined') {\n                        id = this.getElementId(d);\n                    }\n                    // Empty the tooltip of all HTML (including its arrow!)\n                    this.tooltips[id].selector.html('');\n                    this.tooltips[id].arrow = null;\n                    // Set the new HTML\n                    if (this.layout.tooltip.html) {\n                        this.tooltips[id].selector.html(LocusZoom.parseFields(d, this.layout.tooltip.html));\n                    }\n                    // If the layout allows tool tips on this data layer to be closable then add the close button\n                    // and add padding to the tooltip to accommodate it\n                    if (this.layout.tooltip.closable) {\n                        this.tooltips[id].selector.insert('button', ':first-child').attr('class', 'lz-tooltip-close-button').attr('title', 'Close').text('\\xD7').on('click', function () {\n                            this.destroyTooltip(id);\n                        }.bind(this));\n                    }\n                    // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n                    this.tooltips[id].selector.data([d]);\n                    // Reposition and draw a new arrow\n                    this.positionTooltip(id);\n                    return this;\n                };\n                /**\n * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.destroyTooltip = function (d, id) {\n                    if (typeof d == 'string') {\n                        id = d;\n                    } else if (typeof id == 'undefined') {\n                        id = this.getElementId(d);\n                    }\n                    if (this.tooltips[id]) {\n                        if (typeof this.tooltips[id].selector == 'object') {\n                            this.tooltips[id].selector.remove();\n                        }\n                        delete this.tooltips[id];\n                    }\n                    return this;\n                };\n                /**\n * Loop through and destroy all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.destroyAllTooltips = function () {\n                    for (var id in this.tooltips) {\n                        this.destroyTooltip(id);\n                    }\n                    return this;\n                };\n                //\n                /**\n * Position tool tip - naïve function to place a tool tip to the lower right of the current mouse element\n *   Most data layers reimplement this method to position tool tips specifically for the data they display\n * @param {String} id The identifier of the tooltip to position\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.positionTooltip = function (id) {\n                    if (typeof id != 'string') {\n                        throw 'Unable to position tooltip: id is not a string';\n                    }\n                    // Position the div itself\n                    this.tooltips[id].selector.style('left', d3.event.pageX + 'px').style('top', d3.event.pageY + 'px');\n                    // Create / update position on arrow connecting tooltip to data\n                    if (!this.tooltips[id].arrow) {\n                        this.tooltips[id].arrow = this.tooltips[id].selector.append('div').style('position', 'absolute').attr('class', 'lz-data_layer-tooltip-arrow_top_left');\n                    }\n                    this.tooltips[id].arrow.style('left', '-1px').style('top', '-1px');\n                    return this;\n                };\n                /**\n * Loop through and position all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.positionAllTooltips = function () {\n                    for (var id in this.tooltips) {\n                        this.positionTooltip(id);\n                    }\n                    return this;\n                };\n                /**\n * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n * @param {String|Object} element The element associated with the tooltip\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.showOrHideTooltip = function (element) {\n                    if (typeof this.layout.tooltip != 'object') {\n                        return;\n                    }\n                    var id = this.getElementId(element);\n                    var resolveStatus = function (statuses, directive, operator) {\n                        var status = null;\n                        if (typeof statuses != 'object' || statuses === null) {\n                            return null;\n                        }\n                        if (Array.isArray(directive)) {\n                            if (typeof operator == 'undefined') {\n                                operator = 'and';\n                            }\n                            if (directive.length === 1) {\n                                status = statuses[directive[0]];\n                            } else {\n                                status = directive.reduce(function (previousValue, currentValue) {\n                                    if (operator === 'and') {\n                                        return statuses[previousValue] && statuses[currentValue];\n                                    } else if (operator === 'or') {\n                                        return statuses[previousValue] || statuses[currentValue];\n                                    }\n                                    return null;\n                                });\n                            }\n                        } else if (typeof directive == 'object') {\n                            var sub_status;\n                            for (var sub_operator in directive) {\n                                sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                                if (status === null) {\n                                    status = sub_status;\n                                } else if (operator === 'and') {\n                                    status = status && sub_status;\n                                } else if (operator === 'or') {\n                                    status = status || sub_status;\n                                }\n                            }\n                        }\n                        return status;\n                    };\n                    var show_directive = {};\n                    if (typeof this.layout.tooltip.show == 'string') {\n                        show_directive = { and: [this.layout.tooltip.show] };\n                    } else if (typeof this.layout.tooltip.show == 'object') {\n                        show_directive = this.layout.tooltip.show;\n                    }\n                    var hide_directive = {};\n                    if (typeof this.layout.tooltip.hide == 'string') {\n                        hide_directive = { and: [this.layout.tooltip.hide] };\n                    } else if (typeof this.layout.tooltip.hide == 'object') {\n                        hide_directive = this.layout.tooltip.hide;\n                    }\n                    var statuses = {};\n                    LocusZoom.DataLayer.Statuses.adjectives.forEach(function (status) {\n                        var antistatus = 'un' + status;\n                        statuses[status] = this.state[this.state_id][status].indexOf(id) !== -1;\n                        statuses[antistatus] = !statuses[status];\n                    }.bind(this));\n                    var show_resolved = resolveStatus(statuses, show_directive);\n                    var hide_resolved = resolveStatus(statuses, hide_directive);\n                    // Only show tooltip if the resolved logic explicitly shows and explicitly not hides the tool tip\n                    // Otherwise ensure tooltip does not exist\n                    if (show_resolved && !hide_resolved) {\n                        this.createTooltip(element);\n                    } else {\n                        this.destroyTooltip(element);\n                    }\n                    return this;\n                };\n                /**\n * Find the elements (or indices) that match any of a set of provided filters\n * @protected\n * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n *   [field, operator, value] for other operators\n * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n *   elements, or references to the elements themselves\n * @returns {Array}\n */\n                LocusZoom.DataLayer.prototype.filter = function (filters, return_type) {\n                    if (typeof return_type == 'undefined' || [\n                            'indexes',\n                            'elements'\n                        ].indexOf(return_type) === -1) {\n                        return_type = 'indexes';\n                    }\n                    if (!Array.isArray(filters)) {\n                        return [];\n                    }\n                    var test = function (element, filter) {\n                        var operators = {\n                            '=': function (a, b) {\n                                return a === b;\n                            },\n                            '<': function (a, b) {\n                                return a < b;\n                            },\n                            '<=': function (a, b) {\n                                return a <= b;\n                            },\n                            '>': function (a, b) {\n                                return a > b;\n                            },\n                            '>=': function (a, b) {\n                                return a >= b;\n                            },\n                            '%': function (a, b) {\n                                return a % b;\n                            }\n                        };\n                        if (!Array.isArray(filter)) {\n                            return false;\n                        }\n                        if (filter.length === 2) {\n                            return element[filter[0]] === filter[1];\n                        } else if (filter.length === 3 && operators[filter[1]]) {\n                            return operators[filter[1]](element[filter[0]], filter[2]);\n                        } else {\n                            return false;\n                        }\n                    };\n                    var matches = [];\n                    this.data.forEach(function (element, idx) {\n                        var match = true;\n                        filters.forEach(function (filter) {\n                            if (!test(element, filter)) {\n                                match = false;\n                            }\n                        });\n                        if (match) {\n                            matches.push(return_type === 'indexes' ? idx : element);\n                        }\n                    });\n                    return matches;\n                };\n                /**\n * @param filters\n * @returns {Array}\n */\n                LocusZoom.DataLayer.prototype.filterIndexes = function (filters) {\n                    return this.filter(filters, 'indexes');\n                };\n                /**\n * @param filters\n * @returns {Array}\n */\n                LocusZoom.DataLayer.prototype.filterElements = function (filters) {\n                    return this.filter(filters, 'elements');\n                };\n                LocusZoom.DataLayer.Statuses.verbs.forEach(function (verb, idx) {\n                    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n                    var antiverb = 'un' + verb;\n                    // Set/unset a single element's status\n                    // TODO: Improve documentation for dynamically generated methods/properties\n                    LocusZoom.DataLayer.prototype[verb + 'Element'] = function (element, exclusive) {\n                        if (typeof exclusive == 'undefined') {\n                            exclusive = false;\n                        } else {\n                            exclusive = !!exclusive;\n                        }\n                        this.setElementStatus(adjective, element, true, exclusive);\n                        return this;\n                    };\n                    LocusZoom.DataLayer.prototype[antiverb + 'Element'] = function (element, exclusive) {\n                        if (typeof exclusive == 'undefined') {\n                            exclusive = false;\n                        } else {\n                            exclusive = !!exclusive;\n                        }\n                        this.setElementStatus(adjective, element, false, exclusive);\n                        return this;\n                    };\n                    // Set/unset status for arbitrarily many elements given a set of filters\n                    LocusZoom.DataLayer.prototype[verb + 'ElementsByFilters'] = function (filters, exclusive) {\n                        if (typeof exclusive == 'undefined') {\n                            exclusive = false;\n                        } else {\n                            exclusive = !!exclusive;\n                        }\n                        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n                    };\n                    LocusZoom.DataLayer.prototype[antiverb + 'ElementsByFilters'] = function (filters, exclusive) {\n                        if (typeof exclusive == 'undefined') {\n                            exclusive = false;\n                        } else {\n                            exclusive = !!exclusive;\n                        }\n                        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n                    };\n                    // Set/unset status for all elements\n                    LocusZoom.DataLayer.prototype[verb + 'AllElements'] = function () {\n                        this.setAllElementStatus(adjective, true);\n                        return this;\n                    };\n                    LocusZoom.DataLayer.prototype[antiverb + 'AllElements'] = function () {\n                        this.setAllElementStatus(adjective, false);\n                        return this;\n                    };\n                });\n                /**\n * Toggle a status (e.g. highlighted, selected, identified) on an element\n * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n * @param {String|Object} element The data bound to the element of interest\n * @param {Boolean} toggle True to add the status (and associated CSS styles); false to remove it\n * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.setElementStatus = function (status, element, toggle, exclusive) {\n                    // Sanity checks\n                    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n                        throw 'Invalid status passed to DataLayer.setElementStatus()';\n                    }\n                    if (typeof element == 'undefined') {\n                        throw 'Invalid element passed to DataLayer.setElementStatus()';\n                    }\n                    if (typeof toggle == 'undefined') {\n                        toggle = true;\n                    }\n                    // Get an ID for the element or return having changed nothing\n                    try {\n                        var element_id = this.getElementId(element);\n                    } catch (get_element_id_error) {\n                        return this;\n                    }\n                    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n                    if (exclusive) {\n                        this.setAllElementStatus(status, !toggle);\n                    }\n                    // Set/unset the proper status class on the appropriate DOM element(s)\n                    d3.select('#' + element_id).classed('lz-data_layer-' + this.layout.type + '-' + status, toggle);\n                    var element_status_node_id = this.getElementStatusNodeId(element);\n                    if (element_status_node_id !== null) {\n                        d3.select('#' + element_status_node_id).classed('lz-data_layer-' + this.layout.type + '-statusnode-' + status, toggle);\n                    }\n                    // Track element ID in the proper status state array\n                    var element_status_idx = this.state[this.state_id][status].indexOf(element_id);\n                    if (toggle && element_status_idx === -1) {\n                        this.state[this.state_id][status].push(element_id);\n                    }\n                    if (!toggle && element_status_idx !== -1) {\n                        this.state[this.state_id][status].splice(element_status_idx, 1);\n                    }\n                    // Trigger tool tip show/hide logic\n                    this.showOrHideTooltip(element);\n                    // Trigger layout changed event hook\n                    this.parent.emit('layout_changed', true);\n                    if (status === 'selected') {\n                        // Notify parents that a given element has been interacted with. For now, we will only notify on\n                        //   \"selected\" type events, which is (usually) a toggle-able state. If elements are exclusive, two selection\n                        //   events will be sent in short order as the previously selected element has to be de-selected first\n                        this.parent.emit('element_selection', {\n                            element: element,\n                            active: toggle\n                        }, true);\n                    }\n                    return this;\n                };\n                /**\n * Toggle a status on elements in the data layer based on a set of filters\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.setElementStatusByFilters = function (status, toggle, filters, exclusive) {\n                    // Sanity check\n                    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n                        throw 'Invalid status passed to DataLayer.setElementStatusByFilters()';\n                    }\n                    if (typeof this.state[this.state_id][status] == 'undefined') {\n                        return this;\n                    }\n                    if (typeof toggle == 'undefined') {\n                        toggle = true;\n                    } else {\n                        toggle = !!toggle;\n                    }\n                    if (typeof exclusive == 'undefined') {\n                        exclusive = false;\n                    } else {\n                        exclusive = !!exclusive;\n                    }\n                    if (!Array.isArray(filters)) {\n                        filters = [];\n                    }\n                    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n                    if (exclusive) {\n                        this.setAllElementStatus(status, !toggle);\n                    }\n                    // Apply statuses\n                    this.filterElements(filters).forEach(function (element) {\n                        this.setElementStatus(status, element, toggle);\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * Toggle a status on all elements in the data layer\n * @param {String} status\n * @param {Boolean} toggle\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.setAllElementStatus = function (status, toggle) {\n                    // Sanity check\n                    if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n                        throw 'Invalid status passed to DataLayer.setAllElementStatus()';\n                    }\n                    if (typeof this.state[this.state_id][status] == 'undefined') {\n                        return this;\n                    }\n                    if (typeof toggle == 'undefined') {\n                        toggle = true;\n                    }\n                    // Apply statuses\n                    if (toggle) {\n                        this.data.forEach(function (element) {\n                            this.setElementStatus(status, element, true);\n                        }.bind(this));\n                    } else {\n                        var status_ids = this.state[this.state_id][status].slice();\n                        status_ids.forEach(function (id) {\n                            var element = this.getElementById(id);\n                            if (typeof element == 'object' && element !== null) {\n                                this.setElementStatus(status, element, false);\n                            }\n                        }.bind(this));\n                        this.state[this.state_id][status] = [];\n                    }\n                    // Update global status flag\n                    this.global_statuses[status] = toggle;\n                    return this;\n                };\n                /**\n * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n * @param {d3.selection} selection\n */\n                LocusZoom.DataLayer.prototype.applyBehaviors = function (selection) {\n                    if (typeof this.layout.behaviors != 'object') {\n                        return;\n                    }\n                    Object.keys(this.layout.behaviors).forEach(function (directive) {\n                        var event_match = /(click|mouseover|mouseout)/.exec(directive);\n                        if (!event_match) {\n                            return;\n                        }\n                        selection.on(event_match[0] + '.' + directive, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n                    }.bind(this));\n                };\n                /**\n * Generate a function that executes an arbitrary list of behaviors on an element during an event\n * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n * @param {Object} behaviors An object describing the behavior to attach to this single element\n * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n *  selected, etc)\n * @param {string} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n * @returns {function(this:LocusZoom.DataLayer)} Return a function that handles the event in context with the behavior\n *   and the element- can be attached as an event listener\n */\n                LocusZoom.DataLayer.prototype.executeBehaviors = function (directive, behaviors) {\n                    // Determine the required state of control and shift keys during the event\n                    var requiredKeyStates = {\n                        'ctrl': directive.indexOf('ctrl') !== -1,\n                        'shift': directive.indexOf('shift') !== -1\n                    };\n                    return function (element) {\n                        // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n                        if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey) {\n                            return;\n                        }\n                        // Loop through behaviors making each one go in succession\n                        behaviors.forEach(function (behavior) {\n                            // Route first by the action, if defined\n                            if (typeof behavior != 'object' || behavior === null) {\n                                return;\n                            }\n                            switch (behavior.action) {\n                            // Set a status (set to true regardless of current status, optionally with exclusivity)\n                            case 'set':\n                                this.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                                break;\n                            // Unset a status (set to false regardless of current status, optionally with exclusivity)\n                            case 'unset':\n                                this.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                                break;\n                            // Toggle a status\n                            case 'toggle':\n                                var current_status_boolean = this.state[this.state_id][behavior.status].indexOf(this.getElementId(element)) !== -1;\n                                var exclusive = behavior.exclusive && !current_status_boolean;\n                                this.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                                break;\n                            // Link to a dynamic URL\n                            case 'link':\n                                if (typeof behavior.href == 'string') {\n                                    var url = LocusZoom.parseFields(element, behavior.href);\n                                    if (typeof behavior.target == 'string') {\n                                        window.open(url, behavior.target);\n                                    } else {\n                                        window.location.href = url;\n                                    }\n                                }\n                                break;\n                            // Action not defined, just return\n                            default:\n                                break;\n                            }\n                            return;\n                        }.bind(this));\n                    }.bind(this);\n                };\n                /**\n * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n *   Necessary for positioning any HTML elements over the panel\n * @returns {{x: Number, y: Number}}\n */\n                LocusZoom.DataLayer.prototype.getPageOrigin = function () {\n                    var panel_origin = this.parent.getPageOrigin();\n                    return {\n                        x: panel_origin.x + this.parent.layout.margin.left,\n                        y: panel_origin.y + this.parent.layout.margin.top\n                    };\n                };\n                /**\n * Get a data layer's current underlying data in a standard format (e.g. JSON or CSV)\n * @param {('csv'|'tsv'|'json')} format How to export the data\n * @returns {*}\n */\n                LocusZoom.DataLayer.prototype.exportData = function (format) {\n                    var default_format = 'json';\n                    format = format || default_format;\n                    format = typeof format == 'string' ? format.toLowerCase() : default_format;\n                    if ([\n                            'json',\n                            'csv',\n                            'tsv'\n                        ].indexOf(format) === -1) {\n                        format = default_format;\n                    }\n                    var ret;\n                    switch (format) {\n                    case 'json':\n                        try {\n                            ret = JSON.stringify(this.data);\n                        } catch (e) {\n                            ret = null;\n                            console.error('Unable to export JSON data from data layer: ' + this.getBaseId() + ';', e);\n                        }\n                        break;\n                    case 'tsv':\n                    case 'csv':\n                        try {\n                            var jsonified = JSON.parse(JSON.stringify(this.data));\n                            if (typeof jsonified != 'object') {\n                                ret = jsonified.toString();\n                            } else if (!Array.isArray(jsonified)) {\n                                ret = 'Object';\n                            } else {\n                                var delimiter = format === 'tsv' ? '\\t' : ',';\n                                var header = this.layout.fields.map(function (header) {\n                                    return JSON.stringify(header);\n                                }).join(delimiter) + '\\n';\n                                ret = header + jsonified.map(function (record) {\n                                    return this.layout.fields.map(function (field) {\n                                        if (typeof record[field] == 'undefined') {\n                                            return JSON.stringify(null);\n                                        } else if (typeof record[field] == 'object' && record[field] !== null) {\n                                            return Array.isArray(record[field]) ? '\"[Array(' + record[field].length + ')]\"' : '\"[Object]\"';\n                                        } else {\n                                            return JSON.stringify(record[field]);\n                                        }\n                                    }).join(delimiter);\n                                }.bind(this)).join('\\n');\n                            }\n                        } catch (e) {\n                            ret = null;\n                            console.error('Unable to export CSV data from data layer: ' + this.getBaseId() + ';', e);\n                        }\n                        break;\n                    }\n                    return ret;\n                };\n                /**\n * Position the datalayer and all tooltips\n * @returns {LocusZoom.DataLayer}\n */\n                LocusZoom.DataLayer.prototype.draw = function () {\n                    this.svg.container.attr('transform', 'translate(' + this.parent.layout.cliparea.origin.x + ',' + this.parent.layout.cliparea.origin.y + ')');\n                    this.svg.clipRect.attr('width', this.parent.layout.cliparea.width).attr('height', this.parent.layout.cliparea.height);\n                    this.positionAllTooltips();\n                    return this;\n                };\n                /**\n * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n * @return {Promise}\n */\n                LocusZoom.DataLayer.prototype.reMap = function () {\n                    this.destroyAllTooltips();\n                    // hack - only non-visible tooltips should be destroyed\n                    // and then recreated if returning to visibility\n                    // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n                    var promise = this.parent_plot.lzd.getData(this.state, this.layout.fields);\n                    promise.then(function (new_data) {\n                        this.data = new_data.body;\n                        this.applyDataMethods();\n                        this.initialized = true;\n                    }.bind(this));\n                    return promise;\n                };\n                /**\n * The central registry of known data layer definitions (which may be stored in separate files due to length)\n * @namespace\n */\n                LocusZoom.DataLayers = function () {\n                    var obj = {};\n                    var datalayers = {};\n                    /**\n     * @name LocusZoom.DataLayers.get\n     * @param {String} name The name of the datalayer\n     * @param {Object} layout The configuration object for this data layer\n     * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n     * @returns {LocusZoom.DataLayer}\n     */\n                    obj.get = function (name, layout, parent) {\n                        if (!name) {\n                            return null;\n                        } else if (datalayers[name]) {\n                            if (typeof layout != 'object') {\n                                throw 'invalid layout argument for data layer [' + name + ']';\n                            } else {\n                                return new datalayers[name](layout, parent);\n                            }\n                        } else {\n                            throw 'data layer [' + name + '] not found';\n                        }\n                    };\n                    /**\n     * @name LocusZoom.DataLayers.set\n     * @protected\n     * @param {String} name\n     * @param {Function} datalayer Constructor for the datalayer\n     */\n                    obj.set = function (name, datalayer) {\n                        if (datalayer) {\n                            if (typeof datalayer != 'function') {\n                                throw 'unable to set data layer [' + name + '], argument provided is not a function';\n                            } else {\n                                datalayers[name] = datalayer;\n                                datalayers[name].prototype = new LocusZoom.DataLayer();\n                            }\n                        } else {\n                            delete datalayers[name];\n                        }\n                    };\n                    /**\n     * Add a new type of datalayer to the registry of known layer types\n     * @name LocusZoom.DataLayers.add\n     * @param {String} name The name of the data layer to register\n     * @param {Function} datalayer\n     */\n                    obj.add = function (name, datalayer) {\n                        if (datalayers[name]) {\n                            throw 'data layer already exists with name: ' + name;\n                        } else {\n                            obj.set(name, datalayer);\n                        }\n                    };\n                    /**\n     * Register a new datalayer that inherits and extends basic behaviors from a known datalayer\n     * @param {String} parent_name The name of the parent data layer whose behavior is to be extended\n     * @param {String} name The name of the new datalayer to register\n     * @param {Object} [overrides] Object of properties and methods to combine with the prototype of the parent datalayer\n     * @returns {Function} The constructor for the new child class\n     */\n                    obj.extend = function (parent_name, name, overrides) {\n                        // TODO: Consider exposing additional constructor argument, if there is a use case for very granular extension\n                        overrides = overrides || {};\n                        var parent = datalayers[parent_name];\n                        if (!parent) {\n                            throw 'Attempted to subclass an unknown or unregistered datalayer type';\n                        }\n                        if (typeof overrides !== 'object') {\n                            throw 'Must specify an object of properties and methods';\n                        }\n                        var child = LocusZoom.subclass(parent, overrides);\n                        // Bypass .set() because we want a layer of inheritance below `DataLayer`\n                        datalayers[name] = child;\n                        return child;\n                    };\n                    /**\n     * List the names of all known datalayers\n     * @name LocusZoom.DataLayers.list\n     * @returns {String[]}\n     */\n                    obj.list = function () {\n                        return Object.keys(datalayers);\n                    };\n                    return obj;\n                }();\n                'use strict';\n                /**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @class LocusZoom.DataLayers.annotation_track\n * @augments LocusZoom.DataLayer\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `LocusZoom.DataLayer.filter` for details\n */\n                LocusZoom.DataLayers.add('annotation_track', function (layout) {\n                    // In the future we may add additional options for controlling marker size/ shape, based on user feedback\n                    this.DefaultLayout = {\n                        color: '#000000',\n                        filters: []\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    if (!Array.isArray(layout.filters)) {\n                        throw 'Annotation track must specify array of filters for selecting points to annotate';\n                    }\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    this.render = function () {\n                        var self = this;\n                        // Only render points that currently satisfy all provided filter conditions.\n                        var trackData = this.filter(this.layout.filters, 'elements');\n                        var selection = this.svg.group.selectAll('rect.lz-data_layer-' + self.layout.type).data(trackData, function (d) {\n                            return d[self.layout.id_field];\n                        });\n                        // Add new elements as needed\n                        selection.enter().append('rect').attr('class', 'lz-data_layer-' + this.layout.type).attr('id', function (d) {\n                            return self.getElementId(d);\n                        });\n                        // Update the set of elements to reflect new data\n                        selection.attr('x', function (d) {\n                            return self.parent['x_scale'](d[self.layout.x_axis.field]);\n                        }).attr('width', 1)    // TODO autocalc width of track? Based on datarange / pixel width presumably\n.attr('height', self.parent.layout.height).attr('fill', function (d) {\n                            return self.resolveScalableParameter(self.layout.color, d);\n                        });\n                        // Remove unused elements\n                        selection.exit().remove();\n                        // Set up tooltips and mouse interaction\n                        this.applyBehaviors(selection);\n                    };\n                    // Reimplement the positionTooltip() method to be annotation-specific\n                    this.positionTooltip = function (id) {\n                        if (typeof id != 'string') {\n                            throw 'Unable to position tooltip: id is not a string';\n                        }\n                        if (!this.tooltips[id]) {\n                            throw 'Unable to position tooltip: id does not point to a valid tooltip';\n                        }\n                        var top, left, arrow_type, arrow_top, arrow_left;\n                        var tooltip = this.tooltips[id];\n                        var arrow_width = 7;\n                        // as defined in the default stylesheet\n                        var stroke_width = 1;\n                        // as defined in the default stylesheet\n                        var offset = stroke_width / 2;\n                        var page_origin = this.getPageOrigin();\n                        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n                        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n                        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n                        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n                        var y_center = data_layer_height / 2;\n                        // Tooltip should be horizontally centered above the point to be annotated. (or below if space is limited)\n                        var offset_right = Math.max(tooltip_box.width / 2 - x_center, 0);\n                        var offset_left = Math.max(tooltip_box.width / 2 + x_center - data_layer_width, 0);\n                        left = page_origin.x + x_center - tooltip_box.width / 2 - offset_left + offset_right;\n                        arrow_left = tooltip_box.width / 2 - arrow_width + offset_left - offset_right - offset;\n                        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - y_center) {\n                            top = page_origin.y + y_center - (tooltip_box.height + stroke_width + arrow_width);\n                            arrow_type = 'down';\n                            arrow_top = tooltip_box.height - stroke_width;\n                        } else {\n                            top = page_origin.y + y_center + stroke_width + arrow_width;\n                            arrow_type = 'up';\n                            arrow_top = 0 - stroke_width - arrow_width;\n                        }\n                        // Apply positions to the main div\n                        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n                        // Create / update position on arrow connecting tooltip to data\n                        if (!tooltip.arrow) {\n                            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n                        }\n                        tooltip.arrow.attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type).style('left', arrow_left + 'px').style('top', arrow_top + 'px');\n                    };\n                    return this;\n                });\n                'use strict';\n                /**\n * Forest Data Layer\n * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n *  and extent in advance.\n *\n * If you are using dynamically fetched data, consider using `category_forest` instead.\n *\n * @class LocusZoom.DataLayers.forest\n */\n                LocusZoom.DataLayers.add('forest', function (layout) {\n                    // Define a default layout for this DataLayer type and merge it with the passed argument\n                    this.DefaultLayout = {\n                        point_size: 40,\n                        point_shape: 'square',\n                        color: '#888888',\n                        fill_opacity: 1,\n                        y_axis: { axis: 2 },\n                        id_field: 'id',\n                        confidence_intervals: {\n                            start_field: 'ci_start',\n                            end_field: 'ci_end'\n                        },\n                        show_no_significance_line: true\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    // Reimplement the positionTooltip() method to be forest-specific\n                    this.positionTooltip = function (id) {\n                        if (typeof id != 'string') {\n                            throw 'Unable to position tooltip: id is not a string';\n                        }\n                        if (!this.tooltips[id]) {\n                            throw 'Unable to position tooltip: id does not point to a valid tooltip';\n                        }\n                        var tooltip = this.tooltips[id];\n                        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n                        var arrow_width = 7;\n                        // as defined in the default stylesheet\n                        var stroke_width = 1;\n                        // as defined in the default stylesheet\n                        var border_radius = 6;\n                        // as defined in the default stylesheet\n                        var page_origin = this.getPageOrigin();\n                        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n                        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n                        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n                        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n                        // Position horizontally on the left or the right depending on which side of the plot the point is on\n                        var offset = Math.sqrt(point_size / Math.PI);\n                        var left, arrow_type, arrow_left;\n                        if (x_center <= this.parent.layout.width / 2) {\n                            left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                            arrow_type = 'left';\n                            arrow_left = -1 * (arrow_width + stroke_width);\n                        } else {\n                            left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                            arrow_type = 'right';\n                            arrow_left = tooltip_box.width - stroke_width;\n                        }\n                        // Position vertically centered unless we're at the top or bottom of the plot\n                        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n                        var top, arrow_top;\n                        if (y_center - tooltip_box.height / 2 <= 0) {\n                            // Too close to the top, push it down\n                            top = page_origin.y + y_center - 1.5 * arrow_width - border_radius;\n                            arrow_top = border_radius;\n                        } else if (y_center + tooltip_box.height / 2 >= data_layer_height) {\n                            // Too close to the bottom, pull it up\n                            top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                            arrow_top = tooltip_box.height - 2 * arrow_width - border_radius;\n                        } else {\n                            // vertically centered\n                            top = page_origin.y + y_center - tooltip_box.height / 2;\n                            arrow_top = tooltip_box.height / 2 - arrow_width;\n                        }\n                        // Apply positions to the main div\n                        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n                        // Create / update position on arrow connecting tooltip to data\n                        if (!tooltip.arrow) {\n                            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n                        }\n                        tooltip.arrow.attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type).style('left', arrow_left + 'px').style('top', arrow_top + 'px');\n                    };\n                    // Implement the main render function\n                    this.render = function () {\n                        var x_scale = 'x_scale';\n                        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n                        // Generate confidence interval paths if fields are defined\n                        if (this.layout.confidence_intervals && this.layout.fields.indexOf(this.layout.confidence_intervals.start_field) !== -1 && this.layout.fields.indexOf(this.layout.confidence_intervals.end_field) !== -1) {\n                            // Generate a selection for all forest plot confidence intervals\n                            var ci_selection = this.svg.group.selectAll('rect.lz-data_layer-forest.lz-data_layer-forest-ci').data(this.data, function (d) {\n                                return d[this.layout.id_field];\n                            }.bind(this));\n                            // Create confidence interval rect elements\n                            ci_selection.enter().append('rect').attr('class', 'lz-data_layer-forest lz-data_layer-forest-ci').attr('id', function (d) {\n                                return this.getElementId(d) + '_ci';\n                            }.bind(this)).attr('transform', 'translate(0,' + (isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height) + ')');\n                            // Apply position and size parameters using transition if necessary\n                            var ci_transform = function (d) {\n                                var x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                                var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                                if (isNaN(x)) {\n                                    x = -1000;\n                                }\n                                if (isNaN(y)) {\n                                    y = -1000;\n                                }\n                                return 'translate(' + x + ',' + y + ')';\n                            }.bind(this);\n                            var ci_width = function (d) {\n                                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field]) - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                            }.bind(this);\n                            var ci_height = 1;\n                            if (this.canTransition()) {\n                                ci_selection.transition().duration(this.layout.transition.duration || 0).ease(this.layout.transition.ease || 'cubic-in-out').attr('transform', ci_transform).attr('width', ci_width).attr('height', ci_height);\n                            } else {\n                                ci_selection.attr('transform', ci_transform).attr('width', ci_width).attr('height', ci_height);\n                            }\n                            // Remove old elements as needed\n                            ci_selection.exit().remove();\n                        }\n                        // Generate a selection for all forest plot points\n                        var points_selection = this.svg.group.selectAll('path.lz-data_layer-forest.lz-data_layer-forest-point').data(this.data, function (d) {\n                            return d[this.layout.id_field];\n                        }.bind(this));\n                        // Create elements, apply class, ID, and initial position\n                        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n                        points_selection.enter().append('path').attr('class', 'lz-data_layer-forest lz-data_layer-forest-point').attr('id', function (d) {\n                            return this.getElementId(d) + '_point';\n                        }.bind(this)).attr('transform', 'translate(0,' + initial_y + ')');\n                        // Generate new values (or functions for them) for position, color, size, and shape\n                        var transform = function (d) {\n                            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n                            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                            if (isNaN(x)) {\n                                x = -1000;\n                            }\n                            if (isNaN(y)) {\n                                y = -1000;\n                            }\n                            return 'translate(' + x + ',' + y + ')';\n                        }.bind(this);\n                        var fill = function (d) {\n                            return this.resolveScalableParameter(this.layout.color, d);\n                        }.bind(this);\n                        var fill_opacity = function (d) {\n                            return this.resolveScalableParameter(this.layout.fill_opacity, d);\n                        }.bind(this);\n                        var shape = d3.svg.symbol().size(function (d) {\n                            return this.resolveScalableParameter(this.layout.point_size, d);\n                        }.bind(this)).type(function (d) {\n                            return this.resolveScalableParameter(this.layout.point_shape, d);\n                        }.bind(this));\n                        // Apply position and color, using a transition if necessary\n                        if (this.canTransition()) {\n                            points_selection.transition().duration(this.layout.transition.duration || 0).ease(this.layout.transition.ease || 'cubic-in-out').attr('transform', transform).attr('fill', fill).attr('fill-opacity', fill_opacity).attr('d', shape);\n                        } else {\n                            points_selection.attr('transform', transform).attr('fill', fill).attr('fill-opacity', fill_opacity).attr('d', shape);\n                        }\n                        // Remove old elements as needed\n                        points_selection.exit().remove();\n                        // Apply default event emitters to selection\n                        points_selection.on('click.event_emitter', function (element_data) {\n                            this.parent.emit('element_clicked', element_data, true);\n                        }.bind(this));\n                        // Apply behaviors to points\n                        this.applyBehaviors(points_selection);\n                    };\n                    return this;\n                });\n                /**\n * A y-aligned forest plot that dynamically chooses category labels when the data is first loaded.\n * This allows generating forest plots without defining the layout in advance.\n *\n * @class LocusZoom.DataLayers.category_forest\n * @augments LocusZoom.DataLayers.forest\n */\n                LocusZoom.DataLayers.extend('forest', 'category_forest', {\n                    getTicks: function (dimension, config) {\n                        // Overrides parent method\n                        if ([\n                                'x',\n                                'y1',\n                                'y2'\n                            ].indexOf(dimension) === -1) {\n                            throw 'Invalid dimension identifier' + dimension;\n                        }\n                        // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n                        // Also assumes that every tick gets assigned a unique matching label\n                        var axis_num = this.layout.y_axis.axis;\n                        if (dimension === 'y' + axis_num) {\n                            var category_field = this.layout.y_axis.category_field;\n                            if (!category_field) {\n                                throw 'Layout for ' + this.layout.id + ' must specify category_field';\n                            }\n                            return this.data.map(function (item, index) {\n                                return {\n                                    y: index + 1,\n                                    text: item[category_field]\n                                };\n                            });\n                        } else {\n                            return [];\n                        }\n                    },\n                    applyCustomDataMethods: function () {\n                        // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n                        //  correct extents.\n                        var field_to_add = this.layout.y_axis.field;\n                        if (!field_to_add) {\n                            throw 'Layout for ' + this.layout.id + ' must specify yaxis.field';\n                        }\n                        this.data = this.data.map(function (item, index) {\n                            item[field_to_add] = index + 1;\n                            return item;\n                        });\n                        // Update axis extents based on one label for every point (with a bit of padding above and below)\n                        this.layout.y_axis.floor = 0;\n                        this.layout.y_axis.ceiling = this.data.length + 1;\n                        return this;\n                    }\n                });\n                'use strict';\n                /*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @class\n * @augments LocusZoom.DataLayer\n*/\n                LocusZoom.DataLayers.add('genes', function (layout) {\n                    /**\n     * Define a default layout for this DataLayer type and merge it with the passed argument\n     * @protected\n     * @member {Object}\n     * */\n                    this.DefaultLayout = {\n                        // Optionally specify different fill and stroke properties\n                        stroke: 'rgb(54, 54, 150)',\n                        color: '#363696',\n                        label_font_size: 12,\n                        label_exon_spacing: 4,\n                        exon_height: 16,\n                        bounding_box_padding: 6,\n                        track_vertical_spacing: 10\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n                    this.getElementStatusNodeId = function (element) {\n                        return this.getElementId(element) + '-statusnode';\n                    };\n                    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n                    this.getTrackHeight = function () {\n                        return 2 * this.layout.bounding_box_padding + this.layout.label_font_size + this.layout.label_exon_spacing + this.layout.exon_height + this.layout.track_vertical_spacing;\n                    };\n                    /**\n     * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n     * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n     * @member {number}\n     * @type {number}\n     */\n                    this.transcript_idx = 0;\n                    /**\n     * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n     *   over positions / assignments\n     * @protected\n     * @member {number}\n     */\n                    this.tracks = 1;\n                    /**\n     * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n     * @member {Object.<Number, Array>}\n     */\n                    this.gene_track_index = { 1: [] };\n                    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {LocusZoom.DataLayer}\n     */\n                    this.assignTracks = function () {\n                        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         *      TODO: Move to outer scope?\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n                        this.getLabelWidth = function (gene_name, font_size) {\n                            try {\n                                var temp_text = this.svg.group.append('text').attr('x', 0).attr('y', 0).attr('class', 'lz-data_layer-genes lz-label').style('font-size', font_size).text(gene_name + '\\u2192');\n                                var label_width = temp_text.node().getBBox().width;\n                                temp_text.remove();\n                                return label_width;\n                            } catch (e) {\n                                return 0;\n                            }\n                        };\n                        // Reinitialize some metadata\n                        this.tracks = 1;\n                        this.gene_track_index = { 1: [] };\n                        this.data.map(function (d, g) {\n                            // If necessary, split combined gene id / version fields into discrete fields.\n                            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n                            if (this.data[g].gene_id && this.data[g].gene_id.indexOf('.')) {\n                                var split = this.data[g].gene_id.split('.');\n                                this.data[g].gene_id = split[0];\n                                this.data[g].gene_version = split[1];\n                            }\n                            // Stash the transcript ID on the parent gene\n                            this.data[g].transcript_id = this.data[g].transcripts[this.transcript_idx].transcript_id;\n                            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n                            // (range: values in terms of pixels on the screen)\n                            this.data[g].display_range = {\n                                start: this.parent.x_scale(Math.max(d.start, this.state.start)),\n                                end: this.parent.x_scale(Math.min(d.end, this.state.end))\n                            };\n                            this.data[g].display_range.label_width = this.getLabelWidth(this.data[g].gene_name, this.layout.label_font_size);\n                            this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n                            // Determine label text anchor (default to middle)\n                            this.data[g].display_range.text_anchor = 'middle';\n                            if (this.data[g].display_range.width < this.data[g].display_range.label_width) {\n                                if (d.start < this.state.start) {\n                                    this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width + this.layout.label_font_size;\n                                    this.data[g].display_range.text_anchor = 'start';\n                                } else if (d.end > this.state.end) {\n                                    this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width - this.layout.label_font_size;\n                                    this.data[g].display_range.text_anchor = 'end';\n                                } else {\n                                    var centered_margin = (this.data[g].display_range.label_width - this.data[g].display_range.width) / 2 + this.layout.label_font_size;\n                                    if (this.data[g].display_range.start - centered_margin < this.parent.x_scale(this.state.start)) {\n                                        this.data[g].display_range.start = this.parent.x_scale(this.state.start);\n                                        this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width;\n                                        this.data[g].display_range.text_anchor = 'start';\n                                    } else if (this.data[g].display_range.end + centered_margin > this.parent.x_scale(this.state.end)) {\n                                        this.data[g].display_range.end = this.parent.x_scale(this.state.end);\n                                        this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width;\n                                        this.data[g].display_range.text_anchor = 'end';\n                                    } else {\n                                        this.data[g].display_range.start -= centered_margin;\n                                        this.data[g].display_range.end += centered_margin;\n                                    }\n                                }\n                                this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n                            }\n                            // Add bounding box padding to the calculated display range start, end, and width\n                            this.data[g].display_range.start -= this.layout.bounding_box_padding;\n                            this.data[g].display_range.end += this.layout.bounding_box_padding;\n                            this.data[g].display_range.width += 2 * this.layout.bounding_box_padding;\n                            // Convert and stash display range values into domain values\n                            // (domain: values in terms of the data set, e.g. megabases)\n                            this.data[g].display_domain = {\n                                start: this.parent.x_scale.invert(this.data[g].display_range.start),\n                                end: this.parent.x_scale.invert(this.data[g].display_range.end)\n                            };\n                            this.data[g].display_domain.width = this.data[g].display_domain.end - this.data[g].display_domain.start;\n                            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n                            this.data[g].track = null;\n                            var potential_track = 1;\n                            while (this.data[g].track === null) {\n                                var collision_on_potential_track = false;\n                                this.gene_track_index[potential_track].map(function (placed_gene) {\n                                    if (!collision_on_potential_track) {\n                                        var min_start = Math.min(placed_gene.display_range.start, this.display_range.start);\n                                        var max_end = Math.max(placed_gene.display_range.end, this.display_range.end);\n                                        if (max_end - min_start < placed_gene.display_range.width + this.display_range.width) {\n                                            collision_on_potential_track = true;\n                                        }\n                                    }\n                                }.bind(this.data[g]));\n                                if (!collision_on_potential_track) {\n                                    this.data[g].track = potential_track;\n                                    this.gene_track_index[potential_track].push(this.data[g]);\n                                } else {\n                                    potential_track++;\n                                    if (potential_track > this.tracks) {\n                                        this.tracks = potential_track;\n                                        this.gene_track_index[potential_track] = [];\n                                    }\n                                }\n                            }\n                            // Stash parent references on all genes, trascripts, and exons\n                            this.data[g].parent = this;\n                            this.data[g].transcripts.map(function (d, t) {\n                                this.data[g].transcripts[t].parent = this.data[g];\n                                this.data[g].transcripts[t].exons.map(function (d, e) {\n                                    this.data[g].transcripts[t].exons[e].parent = this.data[g].transcripts[t];\n                                }.bind(this));\n                            }.bind(this));\n                        }.bind(this));\n                        return this;\n                    };\n                    /**\n     * Main render function\n     */\n                    this.render = function () {\n                        var self = this;\n                        this.assignTracks();\n                        var width, height, x, y;\n                        // Render gene groups\n                        var selection = this.svg.group.selectAll('g.lz-data_layer-genes').data(this.data, function (d) {\n                            return d.gene_name;\n                        });\n                        selection.enter().append('g').attr('class', 'lz-data_layer-genes');\n                        selection.attr('id', function (d) {\n                            return this.getElementId(d);\n                        }.bind(this)).each(function (gene) {\n                            var data_layer = gene.parent;\n                            // Render gene bounding boxes (status nodes to show selected/highlighted)\n                            var bboxes = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-data_layer-genes-statusnode').data([gene], function (d) {\n                                return data_layer.getElementStatusNodeId(d);\n                            });\n                            bboxes.enter().append('rect').attr('class', 'lz-data_layer-genes lz-data_layer-genes-statusnode');\n                            bboxes.attr('id', function (d) {\n                                return data_layer.getElementStatusNodeId(d);\n                            }).attr('rx', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            }).attr('ry', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            });\n                            width = function (d) {\n                                return d.display_range.width;\n                            };\n                            height = function () {\n                                return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                            };\n                            x = function (d) {\n                                return d.display_range.start;\n                            };\n                            y = function (d) {\n                                return (d.track - 1) * data_layer.getTrackHeight();\n                            };\n                            if (data_layer.canTransition()) {\n                                bboxes.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            } else {\n                                bboxes.attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            }\n                            bboxes.exit().remove();\n                            // Render gene boundaries\n                            var boundary_fill = function (d) {\n                                return self.resolveScalableParameter(self.layout.color, d);\n                            };\n                            var boundary_stroke = function (d) {\n                                return self.resolveScalableParameter(self.layout.stroke, d);\n                            };\n                            var boundaries = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-boundary').data([gene], function (d) {\n                                return d.gene_name + '_boundary';\n                            }).style({\n                                fill: boundary_fill,\n                                stroke: boundary_stroke\n                            });\n                            boundaries.enter().append('rect').attr('class', 'lz-data_layer-genes lz-boundary');\n                            width = function (d) {\n                                return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                            };\n                            height = function () {\n                                return 1;    // TODO: scale dynamically?\n                            };\n                            x = function (d) {\n                                return data_layer.parent.x_scale(d.start);\n                            };\n                            y = function (d) {\n                                return (d.track - 1) * data_layer.getTrackHeight() + data_layer.layout.bounding_box_padding + data_layer.layout.label_font_size + data_layer.layout.label_exon_spacing + Math.max(data_layer.layout.exon_height, 3) / 2;\n                            };\n                            if (data_layer.canTransition()) {\n                                boundaries.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            } else {\n                                boundaries.attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            }\n                            boundaries.exit().remove();\n                            // Render gene labels\n                            var labels = d3.select(this).selectAll('text.lz-data_layer-genes.lz-label').data([gene], function (d) {\n                                return d.gene_name + '_label';\n                            });\n                            labels.enter().append('text').attr('class', 'lz-data_layer-genes lz-label');\n                            labels.attr('text-anchor', function (d) {\n                                return d.display_range.text_anchor;\n                            }).text(function (d) {\n                                return d.strand === '+' ? d.gene_name + '\\u2192' : '\\u2190' + d.gene_name;\n                            }).style('font-size', gene.parent.layout.label_font_size);\n                            x = function (d) {\n                                if (d.display_range.text_anchor === 'middle') {\n                                    return d.display_range.start + d.display_range.width / 2;\n                                } else if (d.display_range.text_anchor === 'start') {\n                                    return d.display_range.start + data_layer.layout.bounding_box_padding;\n                                } else if (d.display_range.text_anchor === 'end') {\n                                    return d.display_range.end - data_layer.layout.bounding_box_padding;\n                                }\n                            };\n                            y = function (d) {\n                                return (d.track - 1) * data_layer.getTrackHeight() + data_layer.layout.bounding_box_padding + data_layer.layout.label_font_size;\n                            };\n                            if (data_layer.canTransition()) {\n                                labels.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('x', x).attr('y', y);\n                            } else {\n                                labels.attr('x', x).attr('y', y);\n                            }\n                            labels.exit().remove();\n                            // Render exon rects (first transcript only, for now)\n                            // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                            var exon_fill = function (d) {\n                                return self.resolveScalableParameter(self.layout.color, d.parent.parent);\n                            };\n                            var exon_stroke = function (d) {\n                                return self.resolveScalableParameter(self.layout.stroke, d.parent.parent);\n                            };\n                            var exons = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-exon').data(gene.transcripts[gene.parent.transcript_idx].exons, function (d) {\n                                return d.exon_id;\n                            });\n                            exons.enter().append('rect').attr('class', 'lz-data_layer-genes lz-exon');\n                            exons.style({\n                                fill: exon_fill,\n                                stroke: exon_stroke\n                            });\n                            width = function (d) {\n                                return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                            };\n                            height = function () {\n                                return data_layer.layout.exon_height;\n                            };\n                            x = function (d) {\n                                return data_layer.parent.x_scale(d.start);\n                            };\n                            y = function () {\n                                return (gene.track - 1) * data_layer.getTrackHeight() + data_layer.layout.bounding_box_padding + data_layer.layout.label_font_size + data_layer.layout.label_exon_spacing;\n                            };\n                            if (data_layer.canTransition()) {\n                                exons.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            } else {\n                                exons.attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            }\n                            exons.exit().remove();\n                            // Render gene click area\n                            var clickareas = d3.select(this).selectAll('rect.lz-data_layer-genes.lz-clickarea').data([gene], function (d) {\n                                return d.gene_name + '_clickarea';\n                            });\n                            clickareas.enter().append('rect').attr('class', 'lz-data_layer-genes lz-clickarea');\n                            clickareas.attr('id', function (d) {\n                                return data_layer.getElementId(d) + '_clickarea';\n                            }).attr('rx', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            }).attr('ry', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            });\n                            width = function (d) {\n                                return d.display_range.width;\n                            };\n                            height = function () {\n                                return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                            };\n                            x = function (d) {\n                                return d.display_range.start;\n                            };\n                            y = function (d) {\n                                return (d.track - 1) * data_layer.getTrackHeight();\n                            };\n                            if (data_layer.canTransition()) {\n                                clickareas.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            } else {\n                                clickareas.attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            }\n                            // Remove old clickareas as needed\n                            clickareas.exit().remove();\n                            // Apply default event emitters to clickareas\n                            clickareas.on('click.event_emitter', function (element) {\n                                element.parent.parent.emit('element_clicked', element, true);\n                            });\n                            // Apply mouse behaviors to clickareas\n                            data_layer.applyBehaviors(clickareas);\n                        });\n                        // Remove old elements as needed\n                        selection.exit().remove();\n                    };\n                    /**\n     * Reimplement the positionTooltip() method to be gene-specific\n     * @param {String} id\n     */\n                    this.positionTooltip = function (id) {\n                        if (typeof id != 'string') {\n                            throw 'Unable to position tooltip: id is not a string';\n                        }\n                        if (!this.tooltips[id]) {\n                            throw 'Unable to position tooltip: id does not point to a valid tooltip';\n                        }\n                        var tooltip = this.tooltips[id];\n                        var arrow_width = 7;\n                        // as defined in the default stylesheet\n                        var stroke_width = 1;\n                        // as defined in the default stylesheet\n                        var page_origin = this.getPageOrigin();\n                        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n                        var gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n                        var gene_bbox = d3.select('#' + gene_bbox_id).node().getBBox();\n                        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n                        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n                        // Position horizontally: attempt to center on the portion of the gene that's visible,\n                        // pad to either side if bumping up against the edge of the data layer\n                        var gene_center_x = (tooltip.data.display_range.start + tooltip.data.display_range.end) / 2 - this.layout.bounding_box_padding / 2;\n                        var offset_right = Math.max(tooltip_box.width / 2 - gene_center_x, 0);\n                        var offset_left = Math.max(tooltip_box.width / 2 + gene_center_x - data_layer_width, 0);\n                        var left = page_origin.x + gene_center_x - tooltip_box.width / 2 - offset_left + offset_right;\n                        var arrow_left = tooltip_box.width / 2 - arrow_width / 2 + offset_left - offset_right;\n                        // Position vertically below the gene unless there's insufficient space\n                        var top, arrow_type, arrow_top;\n                        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (gene_bbox.y + gene_bbox.height)) {\n                            top = page_origin.y + gene_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n                            arrow_type = 'down';\n                            arrow_top = tooltip_box.height - stroke_width;\n                        } else {\n                            top = page_origin.y + gene_bbox.y + gene_bbox.height + stroke_width + arrow_width;\n                            arrow_type = 'up';\n                            arrow_top = 0 - stroke_width - arrow_width;\n                        }\n                        // Apply positions to the main div\n                        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n                        // Create / update position on arrow connecting tooltip to data\n                        if (!tooltip.arrow) {\n                            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n                        }\n                        tooltip.arrow.attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type).style('left', arrow_left + 'px').style('top', arrow_top + 'px');\n                    };\n                    return this;\n                });\n                'use strict';\n                /*********************\n  Genome Legend Data Layer\n  Implements a data layer that will render a genome legend\n*/\n                // Build a custom data layer for a genome legend\n                LocusZoom.DataLayers.add('genome_legend', function (layout) {\n                    // Define a default layout for this DataLayer type and merge it with the passed argument\n                    this.DefaultLayout = {\n                        chromosome_fill_colors: {\n                            light: 'rgb(155, 155, 188)',\n                            dark: 'rgb(95, 95, 128)'\n                        },\n                        chromosome_label_colors: {\n                            light: 'rgb(120, 120, 186)',\n                            dark: 'rgb(0, 0, 66)'\n                        }\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    // Implement the main render function\n                    this.render = function () {\n                        // Iterate over data to generate genome-wide start/end values for each chromosome\n                        var position = 0;\n                        this.data.forEach(function (d, i) {\n                            this.data[i].genome_start = position;\n                            this.data[i].genome_end = position + d['genome:base_pairs'];\n                            position += d['genome:base_pairs'];\n                        }.bind(this));\n                        var chromosomes = this.svg.group.selectAll('rect.lz-data_layer-genome_legend').data(this.data, function (d) {\n                            return d['genome:chr'];\n                        });\n                        // Create chromosome elements, apply class\n                        chromosomes.enter().append('rect').attr('class', 'lz-data_layer-genome_legend');\n                        // Position and fill chromosome rects\n                        var data_layer = this;\n                        var panel = this.parent;\n                        chromosomes.attr('fill', function (d) {\n                            return d['genome:chr'] % 2 ? data_layer.layout.chromosome_fill_colors.light : data_layer.layout.chromosome_fill_colors.dark;\n                        }).attr('x', function (d) {\n                            return panel.x_scale(d.genome_start);\n                        }).attr('y', 0).attr('width', function (d) {\n                            return panel.x_scale(d['genome:base_pairs']);\n                        }).attr('height', panel.layout.cliparea.height);\n                        // Remove old elements as needed\n                        chromosomes.exit().remove();\n                        // Parse current state variant into a position\n                        // Assumes that variant string is of the format 10:123352136_C/T or 10:123352136\n                        var variant_parts = /([^:]+):(\\d+)(?:_.*)?/.exec(this.state.variant);\n                        if (!variant_parts) {\n                            throw 'Genome legend cannot understand the specified variant position';\n                        }\n                        var chr = variant_parts[1];\n                        var offset = variant_parts[2];\n                        // TODO: How does this handle representation of X or Y chromosomes?\n                        position = +this.data[chr - 1].genome_start + +offset;\n                        // Render the position\n                        var region = this.svg.group.selectAll('rect.lz-data_layer-genome_legend-marker').data([{\n                                start: position,\n                                end: position + 1\n                            }]);\n                        region.enter().append('rect').attr('class', 'lz-data_layer-genome_legend-marker');\n                        region.transition().duration(500).style({\n                            'fill': 'rgba(255, 250, 50, 0.8)',\n                            'stroke': 'rgba(255, 250, 50, 0.8)',\n                            'stroke-width': '3px'\n                        }).attr('x', function (d) {\n                            return panel.x_scale(d.start);\n                        }).attr('y', 0).attr('width', function (d) {\n                            return panel.x_scale(d.end - d.start);\n                        }).attr('height', panel.layout.cliparea.height);\n                        region.exit().remove();\n                    };\n                    return this;\n                });\n                'use strict';\n                /**\n * Intervals Data Layer\n * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)\n * @class LocusZoom.DataLayers.intervals\n * @augments LocusZoom.DataLayer\n */\n                LocusZoom.DataLayers.add('intervals', function (layout) {\n                    // Define a default layout for this DataLayer type and merge it with the passed argument\n                    this.DefaultLayout = {\n                        start_field: 'start',\n                        end_field: 'end',\n                        track_split_field: 'state_id',\n                        track_split_order: 'DESC',\n                        track_split_legend_to_y_axis: 2,\n                        split_tracks: true,\n                        track_height: 15,\n                        track_vertical_spacing: 3,\n                        bounding_box_padding: 2,\n                        always_hide_legend: false,\n                        color: '#B8B8B8',\n                        fill_opacity: 1\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    /**\n     * To define shared highlighting on the track split field define the status node id override\n     * to generate an ID common to the track when we're actively splitting data out to separate tracks\n     * @override\n     * @returns {String}\n     */\n                    this.getElementStatusNodeId = function (element) {\n                        if (this.layout.split_tracks) {\n                            return (this.getBaseId() + '-statusnode-' + element[this.layout.track_split_field]).replace(/[:.[\\],]/g, '_');\n                        }\n                        return this.getElementId(element) + '-statusnode';\n                    }.bind(this);\n                    // Helper function to sum layout values to derive total height for a single interval track\n                    this.getTrackHeight = function () {\n                        return this.layout.track_height + this.layout.track_vertical_spacing + 2 * this.layout.bounding_box_padding;\n                    };\n                    this.tracks = 1;\n                    this.previous_tracks = 1;\n                    // track-number-indexed object with arrays of interval indexes in the dataset\n                    this.interval_track_index = { 1: [] };\n                    // After we've loaded interval data interpret it to assign\n                    // each to a track so that they do not overlap in the view\n                    this.assignTracks = function () {\n                        // Reinitialize some metadata\n                        this.previous_tracks = this.tracks;\n                        this.tracks = 0;\n                        this.interval_track_index = { 1: [] };\n                        this.track_split_field_index = {};\n                        // If splitting tracks by a field's value then do a first pass determine\n                        // a value/track mapping that preserves the order of possible values\n                        if (this.layout.track_split_field && this.layout.split_tracks) {\n                            this.data.map(function (d) {\n                                this.track_split_field_index[d[this.layout.track_split_field]] = null;\n                            }.bind(this));\n                            var index = Object.keys(this.track_split_field_index);\n                            if (this.layout.track_split_order === 'DESC') {\n                                index.reverse();\n                            }\n                            index.forEach(function (val) {\n                                this.track_split_field_index[val] = this.tracks + 1;\n                                this.interval_track_index[this.tracks + 1] = [];\n                                this.tracks++;\n                            }.bind(this));\n                        }\n                        this.data.map(function (d, i) {\n                            // Stash a parent reference on the interval\n                            this.data[i].parent = this;\n                            // Determine display range start and end, based on minimum allowable interval display width,\n                            // bounded by what we can see (range: values in terms of pixels on the screen)\n                            this.data[i].display_range = {\n                                start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),\n                                end: this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))\n                            };\n                            this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start;\n                            // Convert and stash display range values into domain values\n                            // (domain: values in terms of the data set, e.g. megabases)\n                            this.data[i].display_domain = {\n                                start: this.parent.x_scale.invert(this.data[i].display_range.start),\n                                end: this.parent.x_scale.invert(this.data[i].display_range.end)\n                            };\n                            this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start;\n                            // If splitting to tracks based on the value of the designated track split field\n                            // then don't bother with collision detection (intervals will be grouped on tracks\n                            // solely by the value of track_split_field)\n                            if (this.layout.track_split_field && this.layout.split_tracks) {\n                                var val = this.data[i][this.layout.track_split_field];\n                                this.data[i].track = this.track_split_field_index[val];\n                                this.interval_track_index[this.data[i].track].push(i);\n                            } else {\n                                // If not splitting to tracks based on a field value then do so based on collision\n                                // detection (as how it's done for genes). Use display range/domain data generated\n                                // above and cast each interval to tracks such that none overlap\n                                this.tracks = 1;\n                                this.data[i].track = null;\n                                var potential_track = 1;\n                                while (this.data[i].track === null) {\n                                    var collision_on_potential_track = false;\n                                    this.interval_track_index[potential_track].map(function (placed_interval) {\n                                        if (!collision_on_potential_track) {\n                                            var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);\n                                            var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);\n                                            if (max_end - min_start < placed_interval.display_range.width + this.display_range.width) {\n                                                collision_on_potential_track = true;\n                                            }\n                                        }\n                                    }.bind(this.data[i]));\n                                    if (!collision_on_potential_track) {\n                                        this.data[i].track = potential_track;\n                                        this.interval_track_index[potential_track].push(this.data[i]);\n                                    } else {\n                                        potential_track++;\n                                        if (potential_track > this.tracks) {\n                                            this.tracks = potential_track;\n                                            this.interval_track_index[potential_track] = [];\n                                        }\n                                    }\n                                }\n                            }\n                        }.bind(this));\n                        return this;\n                    };\n                    // Implement the main render function\n                    this.render = function () {\n                        this.assignTracks();\n                        // Remove any shared highlight nodes and re-render them if we're splitting on tracks\n                        // At most there will only be dozen or so nodes here (one per track) and each time\n                        // we render data we may have new tracks, so wiping/redrawing all is reasonable.\n                        this.svg.group.selectAll('.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared').remove();\n                        Object.keys(this.track_split_field_index).forEach(function (key) {\n                            // Make a psuedo-element so that we can generate an id for the shared node\n                            var psuedoElement = {};\n                            psuedoElement[this.layout.track_split_field] = key;\n                            // Insert the shared node\n                            var sharedstatusnode_style = { display: this.layout.split_tracks ? null : 'none' };\n                            this.svg.group.insert('rect', ':first-child').attr('id', this.getElementStatusNodeId(psuedoElement)).attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared').attr('rx', this.layout.bounding_box_padding).attr('ry', this.layout.bounding_box_padding).attr('width', this.parent.layout.cliparea.width).attr('height', this.getTrackHeight() - this.layout.track_vertical_spacing).attr('x', 0).attr('y', (this.track_split_field_index[key] - 1) * this.getTrackHeight()).style(sharedstatusnode_style);\n                        }.bind(this));\n                        var width, height, x, y, fill, fill_opacity;\n                        // Render interval groups\n                        var selection = this.svg.group.selectAll('g.lz-data_layer-intervals').data(this.data, function (d) {\n                            return d[this.layout.id_field];\n                        }.bind(this));\n                        selection.enter().append('g').attr('class', 'lz-data_layer-intervals');\n                        selection.attr('id', function (d) {\n                            return this.getElementId(d);\n                        }.bind(this)).each(function (interval) {\n                            var data_layer = interval.parent;\n                            // Render interval status nodes (displayed behind intervals to show highlight\n                            // without needing to modify interval display element(s))\n                            var statusnode_style = { display: data_layer.layout.split_tracks ? 'none' : null };\n                            var statusnodes = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete').data([interval], function (d) {\n                                return data_layer.getElementId(d) + '-statusnode';\n                            });\n                            statusnodes.enter().insert('rect', ':first-child').attr('class', 'lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete');\n                            statusnodes.attr('id', function (d) {\n                                return data_layer.getElementId(d) + '-statusnode';\n                            }).attr('rx', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            }).attr('ry', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            }).style(statusnode_style);\n                            width = function (d) {\n                                return d.display_range.width + 2 * data_layer.layout.bounding_box_padding;\n                            };\n                            height = function () {\n                                return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                            };\n                            x = function (d) {\n                                return d.display_range.start - data_layer.layout.bounding_box_padding;\n                            };\n                            y = function (d) {\n                                return (d.track - 1) * data_layer.getTrackHeight();\n                            };\n                            if (data_layer.canTransition()) {\n                                statusnodes.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            } else {\n                                statusnodes.attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            }\n                            statusnodes.exit().remove();\n                            // Render primary interval rects\n                            var rects = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-interval_rect').data([interval], function (d) {\n                                return d[data_layer.layout.id_field] + '_interval_rect';\n                            });\n                            rects.enter().append('rect').attr('class', 'lz-data_layer-intervals lz-interval_rect');\n                            height = data_layer.layout.track_height;\n                            width = function (d) {\n                                return d.display_range.width;\n                            };\n                            x = function (d) {\n                                return d.display_range.start;\n                            };\n                            y = function (d) {\n                                return (d.track - 1) * data_layer.getTrackHeight() + data_layer.layout.bounding_box_padding;\n                            };\n                            fill = function (d) {\n                                return data_layer.resolveScalableParameter(data_layer.layout.color, d);\n                            };\n                            fill_opacity = function (d) {\n                                return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d);\n                            };\n                            if (data_layer.canTransition()) {\n                                rects.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('width', width).attr('height', height).attr('x', x).attr('y', y).attr('fill', fill).attr('fill-opacity', fill_opacity);\n                            } else {\n                                rects.attr('width', width).attr('height', height).attr('x', x).attr('y', y).attr('fill', fill).attr('fill-opacity', fill_opacity);\n                            }\n                            rects.exit().remove();\n                            // Render interval click areas\n                            var clickareas = d3.select(this).selectAll('rect.lz-data_layer-intervals.lz-clickarea').data([interval], function (d) {\n                                return d.interval_name + '_clickarea';\n                            });\n                            clickareas.enter().append('rect').attr('class', 'lz-data_layer-intervals lz-clickarea');\n                            clickareas.attr('id', function (d) {\n                                return data_layer.getElementId(d) + '_clickarea';\n                            }).attr('rx', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            }).attr('ry', function () {\n                                return data_layer.layout.bounding_box_padding;\n                            });\n                            width = function (d) {\n                                return d.display_range.width;\n                            };\n                            height = function () {\n                                return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                            };\n                            x = function (d) {\n                                return d.display_range.start;\n                            };\n                            y = function (d) {\n                                return (d.track - 1) * data_layer.getTrackHeight();\n                            };\n                            if (data_layer.canTransition()) {\n                                clickareas.transition().duration(data_layer.layout.transition.duration || 0).ease(data_layer.layout.transition.ease || 'cubic-in-out').attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            } else {\n                                clickareas.attr('width', width).attr('height', height).attr('x', x).attr('y', y);\n                            }\n                            // Remove old clickareas as needed\n                            clickareas.exit().remove();\n                            // Apply default event emitters to clickareas\n                            clickareas.on('click', function (element_data) {\n                                element_data.parent.parent.emit('element_clicked', element_data, true);\n                            }.bind(this));\n                            // Apply mouse behaviors to clickareas\n                            data_layer.applyBehaviors(clickareas);\n                        });\n                        // Remove old elements as needed\n                        selection.exit().remove();\n                        // Update the legend axis if the number of ticks changed\n                        if (this.previous_tracks !== this.tracks) {\n                            this.updateSplitTrackAxis();\n                        }\n                        return this;\n                    };\n                    // Reimplement the positionTooltip() method to be interval-specific\n                    this.positionTooltip = function (id) {\n                        if (typeof id != 'string') {\n                            throw 'Unable to position tooltip: id is not a string';\n                        }\n                        if (!this.tooltips[id]) {\n                            throw 'Unable to position tooltip: id does not point to a valid tooltip';\n                        }\n                        var tooltip = this.tooltips[id];\n                        var arrow_width = 7;\n                        // as defined in the default stylesheet\n                        var stroke_width = 1;\n                        // as defined in the default stylesheet\n                        var page_origin = this.getPageOrigin();\n                        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n                        var interval_bbox = d3.select('#' + this.getElementStatusNodeId(tooltip.data)).node().getBBox();\n                        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n                        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n                        // Position horizontally: attempt to center on the portion of the interval that's visible,\n                        // pad to either side if bumping up against the edge of the data layer\n                        var interval_center_x = (tooltip.data.display_range.start + tooltip.data.display_range.end) / 2 - this.layout.bounding_box_padding / 2;\n                        var offset_right = Math.max(tooltip_box.width / 2 - interval_center_x, 0);\n                        var offset_left = Math.max(tooltip_box.width / 2 + interval_center_x - data_layer_width, 0);\n                        var left = page_origin.x + interval_center_x - tooltip_box.width / 2 - offset_left + offset_right;\n                        var arrow_left = tooltip_box.width / 2 - arrow_width / 2 + offset_left - offset_right;\n                        // Position vertically below the interval unless there's insufficient space\n                        var top, arrow_type, arrow_top;\n                        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (interval_bbox.y + interval_bbox.height)) {\n                            top = page_origin.y + interval_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n                            arrow_type = 'down';\n                            arrow_top = tooltip_box.height - stroke_width;\n                        } else {\n                            top = page_origin.y + interval_bbox.y + interval_bbox.height + stroke_width + arrow_width;\n                            arrow_type = 'up';\n                            arrow_top = 0 - stroke_width - arrow_width;\n                        }\n                        // Apply positions to the main div\n                        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n                        // Create / update position on arrow connecting tooltip to data\n                        if (!tooltip.arrow) {\n                            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n                        }\n                        tooltip.arrow.attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type).style('left', arrow_left + 'px').style('top', arrow_top + 'px');\n                    };\n                    // Redraw split track axis or hide it, and show/hide the legend, as determined\n                    // by current layout parameters and data\n                    this.updateSplitTrackAxis = function () {\n                        var legend_axis = this.layout.track_split_legend_to_y_axis ? 'y' + this.layout.track_split_legend_to_y_axis : false;\n                        if (this.layout.split_tracks) {\n                            var tracks = +this.tracks || 0;\n                            var track_height = +this.layout.track_height || 0;\n                            var track_spacing = 2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);\n                            var target_height = tracks * track_height + (tracks - 1) * track_spacing;\n                            this.parent.scaleHeightToData(target_height);\n                            if (legend_axis && this.parent.legend) {\n                                this.parent.legend.hide();\n                                this.parent.layout.axes[legend_axis] = {\n                                    render: true,\n                                    ticks: [],\n                                    range: {\n                                        start: target_height - this.layout.track_height / 2,\n                                        end: this.layout.track_height / 2\n                                    }\n                                };\n                                this.layout.legend.forEach(function (element) {\n                                    var key = element[this.layout.track_split_field];\n                                    var track = this.track_split_field_index[key];\n                                    if (track) {\n                                        if (this.layout.track_split_order === 'DESC') {\n                                            track = Math.abs(track - tracks - 1);\n                                        }\n                                        this.parent.layout.axes[legend_axis].ticks.push({\n                                            y: track,\n                                            text: element.label\n                                        });\n                                    }\n                                }.bind(this));\n                                this.layout.y_axis = {\n                                    axis: this.layout.track_split_legend_to_y_axis,\n                                    floor: 1,\n                                    ceiling: tracks\n                                };\n                                this.parent.render();\n                            }\n                            this.parent_plot.positionPanels();\n                        } else {\n                            if (legend_axis && this.parent.legend) {\n                                if (!this.layout.always_hide_legend) {\n                                    this.parent.legend.show();\n                                }\n                                this.parent.layout.axes[legend_axis] = { render: false };\n                                this.parent.render();\n                            }\n                        }\n                        return this;\n                    };\n                    // Method to not only toggle the split tracks boolean but also update\n                    // necessary display values to animate a complete merge/split\n                    this.toggleSplitTracks = function () {\n                        this.layout.split_tracks = !this.layout.split_tracks;\n                        if (this.parent.legend && !this.layout.always_hide_legend) {\n                            this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);\n                        }\n                        this.render();\n                        this.updateSplitTrackAxis();\n                        return this;\n                    };\n                    return this;\n                });\n                'use strict';\n                /*********************\n * Line Data Layer\n * Implements a standard line plot\n * @class\n * @augments LocusZoom.DataLayer\n*/\n                LocusZoom.DataLayers.add('line', function (layout) {\n                    // Define a default layout for this DataLayer type and merge it with the passed argument\n                    /** @member {Object} */\n                    this.DefaultLayout = {\n                        style: {\n                            fill: 'none',\n                            'stroke-width': '2px'\n                        },\n                        interpolate: 'linear',\n                        x_axis: { field: 'x' },\n                        y_axis: {\n                            field: 'y',\n                            axis: 1\n                        },\n                        hitarea_width: 5\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    // Var for storing mouse events for use in tool tip positioning\n                    /** @member {String} */\n                    this.mouse_event = null;\n                    /**\n     * Var for storing the generated line function itself\n     * @member {d3.svg.line}\n     * */\n                    this.line = null;\n                    /**\n     * The timeout identifier returned by setTimeout\n     * @member {Number}\n     */\n                    this.tooltip_timeout = null;\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    /**\n     * Helper function to get display and data objects representing\n     *   the x/y coordinates of the current mouse event with respect to the line in terms of the display\n     *   and the interpolated values of the x/y fields with respect to the line\n     * @returns {{display: {x: *, y: null}, data: {}, slope: null}}\n     */\n                    this.getMouseDisplayAndData = function () {\n                        var ret = {\n                            display: {\n                                x: d3.mouse(this.mouse_event)[0],\n                                y: null\n                            },\n                            data: {},\n                            slope: null\n                        };\n                        var x_field = this.layout.x_axis.field;\n                        var y_field = this.layout.y_axis.field;\n                        var x_scale = 'x_scale';\n                        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n                        ret.data[x_field] = this.parent[x_scale].invert(ret.display.x);\n                        var bisect = d3.bisector(function (datum) {\n                            return +datum[x_field];\n                        }).left;\n                        var index = bisect(this.data, ret.data[x_field]) - 1;\n                        var startDatum = this.data[index];\n                        var endDatum = this.data[index + 1];\n                        var interpolate = d3.interpolateNumber(+startDatum[y_field], +endDatum[y_field]);\n                        var range = +endDatum[x_field] - +startDatum[x_field];\n                        ret.data[y_field] = interpolate(ret.data[x_field] % range / range);\n                        ret.display.y = this.parent[y_scale](ret.data[y_field]);\n                        if (this.layout.tooltip.x_precision) {\n                            ret.data[x_field] = ret.data[x_field].toPrecision(this.layout.tooltip.x_precision);\n                        }\n                        if (this.layout.tooltip.y_precision) {\n                            ret.data[y_field] = ret.data[y_field].toPrecision(this.layout.tooltip.y_precision);\n                        }\n                        ret.slope = (this.parent[y_scale](endDatum[y_field]) - this.parent[y_scale](startDatum[y_field])) / (this.parent[x_scale](endDatum[x_field]) - this.parent[x_scale](startDatum[x_field]));\n                        return ret;\n                    };\n                    /**\n     * Reimplement the positionTooltip() method to be line-specific\n     * @param {String} id Identify the tooltip to be positioned\n     */\n                    this.positionTooltip = function (id) {\n                        if (typeof id != 'string') {\n                            throw 'Unable to position tooltip: id is not a string';\n                        }\n                        if (!this.tooltips[id]) {\n                            throw 'Unable to position tooltip: id does not point to a valid tooltip';\n                        }\n                        var tooltip = this.tooltips[id];\n                        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n                        var arrow_width = 7;\n                        // as defined in the default stylesheet\n                        var border_radius = 6;\n                        // as defined in the default stylesheet\n                        var stroke_width = parseFloat(this.layout.style['stroke-width']) || 1;\n                        var page_origin = this.getPageOrigin();\n                        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n                        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n                        var top, left, arrow_top, arrow_left, arrow_type;\n                        // Determine x/y coordinates for display and data\n                        var dd = this.getMouseDisplayAndData();\n                        // If the absolute value of the slope of the line at this point is above 1 (including Infinity)\n                        // then position the tool tip left/right. Otherwise position top/bottom.\n                        if (Math.abs(dd.slope) > 1) {\n                            // Position horizontally on the left or the right depending on which side of the plot the point is on\n                            if (dd.display.x <= this.parent.layout.width / 2) {\n                                left = page_origin.x + dd.display.x + stroke_width + arrow_width + stroke_width;\n                                arrow_type = 'left';\n                                arrow_left = -1 * (arrow_width + stroke_width);\n                            } else {\n                                left = page_origin.x + dd.display.x - tooltip_box.width - stroke_width - arrow_width - stroke_width;\n                                arrow_type = 'right';\n                                arrow_left = tooltip_box.width - stroke_width;\n                            }\n                            // Position vertically centered unless we're at the top or bottom of the plot\n                            if (dd.display.y - tooltip_box.height / 2 <= 0) {\n                                // Too close to the top, push it down\n                                top = page_origin.y + dd.display.y - 1.5 * arrow_width - border_radius;\n                                arrow_top = border_radius;\n                            } else if (dd.display.y + tooltip_box.height / 2 >= data_layer_height) {\n                                // Too close to the bottom, pull it up\n                                top = page_origin.y + dd.display.y + arrow_width + border_radius - tooltip_box.height;\n                                arrow_top = tooltip_box.height - 2 * arrow_width - border_radius;\n                            } else {\n                                // vertically centered\n                                top = page_origin.y + dd.display.y - tooltip_box.height / 2;\n                                arrow_top = tooltip_box.height / 2 - arrow_width;\n                            }\n                        } else {\n                            // Position horizontally: attempt to center on the mouse's x coordinate\n                            // pad to either side if bumping up against the edge of the data layer\n                            var offset_right = Math.max(tooltip_box.width / 2 - dd.display.x, 0);\n                            var offset_left = Math.max(tooltip_box.width / 2 + dd.display.x - data_layer_width, 0);\n                            left = page_origin.x + dd.display.x - tooltip_box.width / 2 - offset_left + offset_right;\n                            var min_arrow_left = arrow_width / 2;\n                            var max_arrow_left = tooltip_box.width - 2.5 * arrow_width;\n                            arrow_left = tooltip_box.width / 2 - arrow_width + offset_left - offset_right;\n                            arrow_left = Math.min(Math.max(arrow_left, min_arrow_left), max_arrow_left);\n                            // Position vertically above the line unless there's insufficient space\n                            if (tooltip_box.height + stroke_width + arrow_width > dd.display.y) {\n                                top = page_origin.y + dd.display.y + stroke_width + arrow_width;\n                                arrow_type = 'up';\n                                arrow_top = 0 - stroke_width - arrow_width;\n                            } else {\n                                top = page_origin.y + dd.display.y - (tooltip_box.height + stroke_width + arrow_width);\n                                arrow_type = 'down';\n                                arrow_top = tooltip_box.height - stroke_width;\n                            }\n                        }\n                        // Apply positions to the main div\n                        tooltip.selector.style({\n                            left: left + 'px',\n                            top: top + 'px'\n                        });\n                        // Create / update position on arrow connecting tooltip to data\n                        if (!tooltip.arrow) {\n                            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n                        }\n                        tooltip.arrow.attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type).style({\n                            'left': arrow_left + 'px',\n                            top: arrow_top + 'px'\n                        });\n                    };\n                    /**\n     * Implement the main render function\n     */\n                    this.render = function () {\n                        // Several vars needed to be in scope\n                        var data_layer = this;\n                        var panel = this.parent;\n                        var x_field = this.layout.x_axis.field;\n                        var y_field = this.layout.y_axis.field;\n                        var x_scale = 'x_scale';\n                        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n                        // Join data to the line selection\n                        var selection = this.svg.group.selectAll('path.lz-data_layer-line').data([this.data]);\n                        // Create path element, apply class\n                        this.path = selection.enter().append('path').attr('class', 'lz-data_layer-line');\n                        // Generate the line\n                        this.line = d3.svg.line().x(function (d) {\n                            return parseFloat(panel[x_scale](d[x_field]));\n                        }).y(function (d) {\n                            return parseFloat(panel[y_scale](d[y_field]));\n                        }).interpolate(this.layout.interpolate);\n                        // Apply line and style\n                        if (this.canTransition()) {\n                            selection.transition().duration(this.layout.transition.duration || 0).ease(this.layout.transition.ease || 'cubic-in-out').attr('d', this.line).style(this.layout.style);\n                        } else {\n                            selection.attr('d', this.line).style(this.layout.style);\n                        }\n                        // Apply tooltip, etc\n                        if (this.layout.tooltip) {\n                            // Generate an overlaying transparent \"hit area\" line for more intuitive mouse events\n                            var hitarea_width = parseFloat(this.layout.hitarea_width).toString() + 'px';\n                            var hitarea = this.svg.group.selectAll('path.lz-data_layer-line-hitarea').data([this.data]);\n                            hitarea.enter().append('path').attr('class', 'lz-data_layer-line-hitarea').style('stroke-width', hitarea_width);\n                            var hitarea_line = d3.svg.line().x(function (d) {\n                                return parseFloat(panel[x_scale](d[x_field]));\n                            }).y(function (d) {\n                                return parseFloat(panel[y_scale](d[y_field]));\n                            }).interpolate(this.layout.interpolate);\n                            hitarea.attr('d', hitarea_line).on('mouseover', function () {\n                                clearTimeout(data_layer.tooltip_timeout);\n                                data_layer.mouse_event = this;\n                                var dd = data_layer.getMouseDisplayAndData();\n                                data_layer.createTooltip(dd.data);\n                            }).on('mousemove', function () {\n                                clearTimeout(data_layer.tooltip_timeout);\n                                data_layer.mouse_event = this;\n                                var dd = data_layer.getMouseDisplayAndData();\n                                data_layer.updateTooltip(dd.data);\n                                data_layer.positionTooltip(data_layer.getElementId());\n                            }).on('mouseout', function () {\n                                data_layer.tooltip_timeout = setTimeout(function () {\n                                    data_layer.mouse_event = null;\n                                    data_layer.destroyTooltip(data_layer.getElementId());\n                                }, 300);\n                            });\n                            hitarea.exit().remove();\n                        }\n                        // Remove old elements as needed\n                        selection.exit().remove();\n                    };\n                    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {LocusZoom.DataLayer}\n     */\n                    this.setElementStatus = function (status, element, toggle) {\n                        return this.setAllElementStatus(status, toggle);\n                    };\n                    this.setElementStatusByFilters = function (status, toggle) {\n                        return this.setAllElementStatus(status, toggle);\n                    };\n                    this.setAllElementStatus = function (status, toggle) {\n                        // Sanity check\n                        if (typeof status == 'undefined' || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1) {\n                            throw 'Invalid status passed to DataLayer.setAllElementStatus()';\n                        }\n                        if (typeof this.state[this.state_id][status] == 'undefined') {\n                            return this;\n                        }\n                        if (typeof toggle == 'undefined') {\n                            toggle = true;\n                        }\n                        // Update global status flag\n                        this.global_statuses[status] = toggle;\n                        // Apply class to path based on global status flags\n                        var path_class = 'lz-data_layer-line';\n                        Object.keys(this.global_statuses).forEach(function (global_status) {\n                            if (this.global_statuses[global_status]) {\n                                path_class += ' lz-data_layer-line-' + global_status;\n                            }\n                        }.bind(this));\n                        this.path.attr('class', path_class);\n                        // Trigger layout changed event hook\n                        this.parent.emit('layout_changed', true);\n                        return this;\n                    };\n                    return this;\n                });\n                /***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n * @class\n * @augments LocusZoom.DataLayer\n*/\n                LocusZoom.DataLayers.add('orthogonal_line', function (layout) {\n                    // Define a default layout for this DataLayer type and merge it with the passed argument\n                    this.DefaultLayout = {\n                        style: {\n                            'stroke': '#D3D3D3',\n                            'stroke-width': '3px',\n                            'stroke-dasharray': '10px 10px'\n                        },\n                        orientation: 'horizontal',\n                        x_axis: {\n                            axis: 1,\n                            decoupled: true\n                        },\n                        y_axis: {\n                            axis: 1,\n                            decoupled: true\n                        },\n                        offset: 0\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    // Require that orientation be \"horizontal\" or \"vertical\" only\n                    if ([\n                            'horizontal',\n                            'vertical'\n                        ].indexOf(layout.orientation) === -1) {\n                        layout.orientation = 'horizontal';\n                    }\n                    // Vars for storing the data generated line\n                    /** @member {Array} */\n                    this.data = [];\n                    /** @member {d3.svg.line} */\n                    this.line = null;\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    /**\n     * Implement the main render function\n     */\n                    this.render = function () {\n                        // Several vars needed to be in scope\n                        var panel = this.parent;\n                        var x_scale = 'x_scale';\n                        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n                        var x_extent = 'x_extent';\n                        var y_extent = 'y' + this.layout.y_axis.axis + '_extent';\n                        var x_range = 'x_range';\n                        var y_range = 'y' + this.layout.y_axis.axis + '_range';\n                        // Generate data using extents depending on orientation\n                        if (this.layout.orientation === 'horizontal') {\n                            this.data = [\n                                {\n                                    x: panel[x_extent][0],\n                                    y: this.layout.offset\n                                },\n                                {\n                                    x: panel[x_extent][1],\n                                    y: this.layout.offset\n                                }\n                            ];\n                        } else {\n                            this.data = [\n                                {\n                                    x: this.layout.offset,\n                                    y: panel[y_extent][0]\n                                },\n                                {\n                                    x: this.layout.offset,\n                                    y: panel[y_extent][1]\n                                }\n                            ];\n                        }\n                        // Join data to the line selection\n                        var selection = this.svg.group.selectAll('path.lz-data_layer-line').data([this.data]);\n                        // Create path element, apply class\n                        this.path = selection.enter().append('path').attr('class', 'lz-data_layer-line');\n                        // Generate the line\n                        this.line = d3.svg.line().x(function (d, i) {\n                            var x = parseFloat(panel[x_scale](d['x']));\n                            return isNaN(x) ? panel[x_range][i] : x;\n                        }).y(function (d, i) {\n                            var y = parseFloat(panel[y_scale](d['y']));\n                            return isNaN(y) ? panel[y_range][i] : y;\n                        }).interpolate('linear');\n                        // Apply line and style\n                        if (this.canTransition()) {\n                            selection.transition().duration(this.layout.transition.duration || 0).ease(this.layout.transition.ease || 'cubic-in-out').attr('d', this.line).style(this.layout.style);\n                        } else {\n                            selection.attr('d', this.line).style(this.layout.style);\n                        }\n                        // Remove old elements as needed\n                        selection.exit().remove();\n                    };\n                    return this;\n                });\n                'use strict';\n                /**\n * Scatter Data Layer\n * Implements a standard scatter plot\n * @class LocusZoom.DataLayers.scatter\n */\n                LocusZoom.DataLayers.add('scatter', function (layout) {\n                    // Define a default layout for this DataLayer type and merge it with the passed argument\n                    this.DefaultLayout = {\n                        point_size: 40,\n                        point_shape: 'circle',\n                        tooltip_positioning: 'horizontal',\n                        color: '#888888',\n                        fill_opacity: 1,\n                        y_axis: { axis: 1 },\n                        id_field: 'id'\n                    };\n                    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n                    // Extra default for layout spacing\n                    // Not in default layout since that would make the label attribute always present\n                    if (layout.label && isNaN(layout.label.spacing)) {\n                        layout.label.spacing = 4;\n                    }\n                    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n                    LocusZoom.DataLayer.apply(this, arguments);\n                    // Reimplement the positionTooltip() method to be scatter-specific\n                    this.positionTooltip = function (id) {\n                        if (typeof id != 'string') {\n                            throw 'Unable to position tooltip: id is not a string';\n                        }\n                        if (!this.tooltips[id]) {\n                            throw 'Unable to position tooltip: id does not point to a valid tooltip';\n                        }\n                        var top, left, arrow_type, arrow_top, arrow_left;\n                        var tooltip = this.tooltips[id];\n                        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n                        var offset = Math.sqrt(point_size / Math.PI);\n                        var arrow_width = 7;\n                        // as defined in the default stylesheet\n                        var stroke_width = 1;\n                        // as defined in the default stylesheet\n                        var border_radius = 6;\n                        // as defined in the default stylesheet\n                        var page_origin = this.getPageOrigin();\n                        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n                        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n                        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n                        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n                        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n                        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n                        if (this.layout.tooltip_positioning === 'vertical') {\n                            // Position horizontally centered above the point\n                            var offset_right = Math.max(tooltip_box.width / 2 - x_center, 0);\n                            var offset_left = Math.max(tooltip_box.width / 2 + x_center - data_layer_width, 0);\n                            left = page_origin.x + x_center - tooltip_box.width / 2 - offset_left + offset_right;\n                            arrow_left = tooltip_box.width / 2 - arrow_width / 2 + offset_left - offset_right - offset;\n                            // Position vertically above the point unless there's insufficient space, then go below\n                            if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (y_center + offset)) {\n                                top = page_origin.y + y_center - (offset + tooltip_box.height + stroke_width + arrow_width);\n                                arrow_type = 'down';\n                                arrow_top = tooltip_box.height - stroke_width;\n                            } else {\n                                top = page_origin.y + y_center + offset + stroke_width + arrow_width;\n                                arrow_type = 'up';\n                                arrow_top = 0 - stroke_width - arrow_width;\n                            }\n                        } else {\n                            // Position horizontally on the left or the right depending on which side of the plot the point is on\n                            if (x_center <= this.parent.layout.width / 2) {\n                                left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                                arrow_type = 'left';\n                                arrow_left = -1 * (arrow_width + stroke_width);\n                            } else {\n                                left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                                arrow_type = 'right';\n                                arrow_left = tooltip_box.width - stroke_width;\n                            }\n                            // Position vertically centered unless we're at the top or bottom of the plot\n                            data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n                            if (y_center - tooltip_box.height / 2 <= 0) {\n                                // Too close to the top, push it down\n                                top = page_origin.y + y_center - 1.5 * arrow_width - border_radius;\n                                arrow_top = border_radius;\n                            } else if (y_center + tooltip_box.height / 2 >= data_layer_height) {\n                                // Too close to the bottom, pull it up\n                                top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                                arrow_top = tooltip_box.height - 2 * arrow_width - border_radius;\n                            } else {\n                                // vertically centered\n                                top = page_origin.y + y_center - tooltip_box.height / 2;\n                                arrow_top = tooltip_box.height / 2 - arrow_width;\n                            }\n                        }\n                        // Apply positions to the main div\n                        tooltip.selector.style('left', left + 'px').style('top', top + 'px');\n                        // Create / update position on arrow connecting tooltip to data\n                        if (!tooltip.arrow) {\n                            tooltip.arrow = tooltip.selector.append('div').style('position', 'absolute');\n                        }\n                        tooltip.arrow.attr('class', 'lz-data_layer-tooltip-arrow_' + arrow_type).style('left', arrow_left + 'px').style('top', arrow_top + 'px');\n                    };\n                    // Function to flip labels from being anchored at the start of the text to the end\n                    // Both to keep labels from running outside the data layer and  also as a first\n                    // pass on recursive separation\n                    this.flip_labels = function () {\n                        var data_layer = this;\n                        var point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n                        var spacing = data_layer.layout.label.spacing;\n                        var handle_lines = Boolean(data_layer.layout.label.lines);\n                        var min_x = 2 * spacing;\n                        var max_x = data_layer.parent.layout.width - data_layer.parent.layout.margin.left - data_layer.parent.layout.margin.right - 2 * spacing;\n                        var flip = function (dn, dnl) {\n                            var dnx = +dn.attr('x');\n                            var text_swing = 2 * spacing + 2 * Math.sqrt(point_size);\n                            if (handle_lines) {\n                                var dnlx2 = +dnl.attr('x2');\n                                var line_swing = spacing + 2 * Math.sqrt(point_size);\n                            }\n                            if (dn.style('text-anchor') === 'start') {\n                                dn.style('text-anchor', 'end');\n                                dn.attr('x', dnx - text_swing);\n                                if (handle_lines) {\n                                    dnl.attr('x2', dnlx2 - line_swing);\n                                }\n                            } else {\n                                dn.style('text-anchor', 'start');\n                                dn.attr('x', dnx + text_swing);\n                                if (handle_lines) {\n                                    dnl.attr('x2', dnlx2 + line_swing);\n                                }\n                            }\n                        };\n                        // Flip any going over the right edge from the right side to the left side\n                        // (all labels start on the right side)\n                        data_layer.label_texts.each(function (d, i) {\n                            var a = this;\n                            var da = d3.select(a);\n                            var dax = +da.attr('x');\n                            var abound = da.node().getBoundingClientRect();\n                            if (dax + abound.width + spacing > max_x) {\n                                var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                                flip(da, dal);\n                            }\n                        });\n                        // Second pass to flip any others that haven't flipped yet if they collide with another label\n                        data_layer.label_texts.each(function (d, i) {\n                            var a = this;\n                            var da = d3.select(a);\n                            if (da.style('text-anchor') === 'end')\n                                return;\n                            var dax = +da.attr('x');\n                            var abound = da.node().getBoundingClientRect();\n                            var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                            data_layer.label_texts.each(function () {\n                                var b = this;\n                                var db = d3.select(b);\n                                var bbound = db.node().getBoundingClientRect();\n                                var collision = abound.left < bbound.left + bbound.width + 2 * spacing && abound.left + abound.width + 2 * spacing > bbound.left && abound.top < bbound.top + bbound.height + 2 * spacing && abound.height + abound.top + 2 * spacing > bbound.top;\n                                if (collision) {\n                                    flip(da, dal);\n                                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                                    dax = +da.attr('x');\n                                    if (dax - abound.width - spacing < min_x) {\n                                        flip(da, dal);\n                                    }\n                                }\n                                return;\n                            });\n                        });\n                    };\n                    // Recursive function to space labels apart immediately after initial render\n                    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n                    // TODO: Make labels also aware of data elements\n                    this.separate_labels = function () {\n                        this.seperate_iterations++;\n                        var data_layer = this;\n                        var alpha = 0.5;\n                        var spacing = this.layout.label.spacing;\n                        var again = false;\n                        data_layer.label_texts.each(function () {\n                            var a = this;\n                            var da = d3.select(a);\n                            var y1 = da.attr('y');\n                            data_layer.label_texts.each(function () {\n                                var b = this;\n                                // a & b are the same element and don't collide.\n                                if (a === b)\n                                    return;\n                                var db = d3.select(b);\n                                // a & b are on opposite sides of the chart and\n                                // don't collide\n                                if (da.attr('text-anchor') !== db.attr('text-anchor'))\n                                    return;\n                                // Determine if the  bounding rects for the two text elements collide\n                                var abound = da.node().getBoundingClientRect();\n                                var bbound = db.node().getBoundingClientRect();\n                                var collision = abound.left < bbound.left + bbound.width + 2 * spacing && abound.left + abound.width + 2 * spacing > bbound.left && abound.top < bbound.top + bbound.height + 2 * spacing && abound.height + abound.top + 2 * spacing > bbound.top;\n                                if (!collision)\n                                    return;\n                                again = true;\n                                // If the labels collide, we'll push each\n                                // of the two labels up and down a little bit.\n                                var y2 = db.attr('y');\n                                var sign = abound.top < bbound.top ? 1 : -1;\n                                var adjust = sign * alpha;\n                                var new_a_y = +y1 - adjust;\n                                var new_b_y = +y2 + adjust;\n                                // Keep new values from extending outside the data layer\n                                var min_y = 2 * spacing;\n                                var max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - 2 * spacing;\n                                var delta;\n                                if (new_a_y - abound.height / 2 < min_y) {\n                                    delta = +y1 - new_a_y;\n                                    new_a_y = +y1;\n                                    new_b_y += delta;\n                                } else if (new_b_y - bbound.height / 2 < min_y) {\n                                    delta = +y2 - new_b_y;\n                                    new_b_y = +y2;\n                                    new_a_y += delta;\n                                }\n                                if (new_a_y + abound.height / 2 > max_y) {\n                                    delta = new_a_y - +y1;\n                                    new_a_y = +y1;\n                                    new_b_y -= delta;\n                                } else if (new_b_y + bbound.height / 2 > max_y) {\n                                    delta = new_b_y - +y2;\n                                    new_b_y = +y2;\n                                    new_a_y -= delta;\n                                }\n                                da.attr('y', new_a_y);\n                                db.attr('y', new_b_y);\n                            });\n                        });\n                        if (again) {\n                            // Adjust lines to follow the labels\n                            if (data_layer.layout.label.lines) {\n                                var label_elements = data_layer.label_texts[0];\n                                data_layer.label_lines.attr('y2', function (d, i) {\n                                    var label_line = d3.select(label_elements[i]);\n                                    return label_line.attr('y');\n                                });\n                            }\n                            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n                            if (this.seperate_iterations < 150) {\n                                setTimeout(function () {\n                                    this.separate_labels();\n                                }.bind(this), 1);\n                            }\n                        }\n                    };\n                    // Implement the main render function\n                    this.render = function () {\n                        var data_layer = this;\n                        var x_scale = 'x_scale';\n                        var y_scale = 'y' + this.layout.y_axis.axis + '_scale';\n                        // Generate labels first (if defined)\n                        if (this.layout.label) {\n                            // Apply filters to generate a filtered data set\n                            var filtered_data = this.data.filter(function (d) {\n                                if (!data_layer.layout.label.filters) {\n                                    return true;\n                                } else {\n                                    // Start by assuming a match, run through all filters to test if not a match on any one\n                                    var match = true;\n                                    data_layer.layout.label.filters.forEach(function (filter) {\n                                        var field_value = new LocusZoom.Data.Field(filter.field).resolve(d);\n                                        if (isNaN(field_value)) {\n                                            match = false;\n                                        } else {\n                                            switch (filter.operator) {\n                                            case '<':\n                                                if (!(field_value < filter.value)) {\n                                                    match = false;\n                                                }\n                                                break;\n                                            case '<=':\n                                                if (!(field_value <= filter.value)) {\n                                                    match = false;\n                                                }\n                                                break;\n                                            case '>':\n                                                if (!(field_value > filter.value)) {\n                                                    match = false;\n                                                }\n                                                break;\n                                            case '>=':\n                                                if (!(field_value >= filter.value)) {\n                                                    match = false;\n                                                }\n                                                break;\n                                            case '=':\n                                                if (!(field_value === filter.value)) {\n                                                    match = false;\n                                                }\n                                                break;\n                                            default:\n                                                // If we got here the operator is not valid, so the filter should fail\n                                                match = false;\n                                                break;\n                                            }\n                                        }\n                                    });\n                                    return match;\n                                }\n                            });\n                            // Render label groups\n                            var self = this;\n                            this.label_groups = this.svg.group.selectAll('g.lz-data_layer-' + this.layout.type + '-label').data(filtered_data, function (d) {\n                                return d[self.layout.id_field] + '_label';\n                            });\n                            this.label_groups.enter().append('g').attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n                            // Render label texts\n                            if (this.label_texts) {\n                                this.label_texts.remove();\n                            }\n                            this.label_texts = this.label_groups.append('text').attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n                            this.label_texts.text(function (d) {\n                                return LocusZoom.parseFields(d, data_layer.layout.label.text || '');\n                            }).style(data_layer.layout.label.style || {}).attr({\n                                'x': function (d) {\n                                    var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]) + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d)) + data_layer.layout.label.spacing;\n                                    if (isNaN(x)) {\n                                        x = -1000;\n                                    }\n                                    return x;\n                                },\n                                'y': function (d) {\n                                    var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                                    if (isNaN(y)) {\n                                        y = -1000;\n                                    }\n                                    return y;\n                                },\n                                'text-anchor': function () {\n                                    return 'start';\n                                }\n                            });\n                            // Render label lines\n                            if (data_layer.layout.label.lines) {\n                                if (this.label_lines) {\n                                    this.label_lines.remove();\n                                }\n                                this.label_lines = this.label_groups.append('line').attr('class', 'lz-data_layer-' + this.layout.type + '-label');\n                                this.label_lines.style(data_layer.layout.label.lines.style || {}).attr({\n                                    'x1': function (d) {\n                                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                                        if (isNaN(x)) {\n                                            x = -1000;\n                                        }\n                                        return x;\n                                    },\n                                    'y1': function (d) {\n                                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                                        if (isNaN(y)) {\n                                            y = -1000;\n                                        }\n                                        return y;\n                                    },\n                                    'x2': function (d) {\n                                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]) + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d)) + data_layer.layout.label.spacing / 2;\n                                        if (isNaN(x)) {\n                                            x = -1000;\n                                        }\n                                        return x;\n                                    },\n                                    'y2': function (d) {\n                                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                                        if (isNaN(y)) {\n                                            y = -1000;\n                                        }\n                                        return y;\n                                    }\n                                });\n                            }\n                            // Remove labels when they're no longer in the filtered data set\n                            this.label_groups.exit().remove();\n                        }\n                        // Generate main scatter data elements\n                        var selection = this.svg.group.selectAll('path.lz-data_layer-' + this.layout.type).data(this.data, function (d) {\n                            return d[this.layout.id_field];\n                        }.bind(this));\n                        // Create elements, apply class, ID, and initial position\n                        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n                        selection.enter().append('path').attr('class', 'lz-data_layer-' + this.layout.type).attr('id', function (d) {\n                            return this.getElementId(d);\n                        }.bind(this)).attr('transform', 'translate(0,' + initial_y + ')');\n                        // Generate new values (or functions for them) for position, color, size, and shape\n                        var transform = function (d) {\n                            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n                            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                            if (isNaN(x)) {\n                                x = -1000;\n                            }\n                            if (isNaN(y)) {\n                                y = -1000;\n                            }\n                            return 'translate(' + x + ',' + y + ')';\n                        }.bind(this);\n                        var fill = function (d) {\n                            return this.resolveScalableParameter(this.layout.color, d);\n                        }.bind(this);\n                        var fill_opacity = function (d) {\n                            return this.resolveScalableParameter(this.layout.fill_opacity, d);\n                        }.bind(this);\n                        var shape = d3.svg.symbol().size(function (d) {\n                            return this.resolveScalableParameter(this.layout.point_size, d);\n                        }.bind(this)).type(function (d) {\n                            return this.resolveScalableParameter(this.layout.point_shape, d);\n                        }.bind(this));\n                        // Apply position and color, using a transition if necessary\n                        if (this.canTransition()) {\n                            selection.transition().duration(this.layout.transition.duration || 0).ease(this.layout.transition.ease || 'cubic-in-out').attr('transform', transform).attr('fill', fill).attr('fill-opacity', fill_opacity).attr('d', shape);\n                        } else {\n                            selection.attr('transform', transform).attr('fill', fill).attr('fill-opacity', fill_opacity).attr('d', shape);\n                        }\n                        // Remove old elements as needed\n                        selection.exit().remove();\n                        // Apply default event emitters to selection\n                        selection.on('click.event_emitter', function (element) {\n                            this.parent.emit('element_clicked', element, true);\n                        }.bind(this));\n                        // Apply mouse behaviors\n                        this.applyBehaviors(selection);\n                        // Apply method to keep labels from overlapping each other\n                        if (this.layout.label) {\n                            this.flip_labels();\n                            this.seperate_iterations = 0;\n                            this.separate_labels();\n                            // Apply default event emitters to selection\n                            this.label_texts.on('click.event_emitter', function (element) {\n                                this.parent.emit('element_clicked', element, true);\n                            }.bind(this));\n                            // Extend mouse behaviors to labels\n                            this.applyBehaviors(this.label_texts);\n                        }\n                    };\n                    // Method to set a passed element as the LD reference in the plot-level state\n                    this.makeLDReference = function (element) {\n                        var ref = null;\n                        if (typeof element == 'undefined') {\n                            throw 'makeLDReference requires one argument of any type';\n                        } else if (typeof element == 'object') {\n                            if (this.layout.id_field && typeof element[this.layout.id_field] != 'undefined') {\n                                ref = element[this.layout.id_field].toString();\n                            } else if (typeof element['id'] != 'undefined') {\n                                ref = element['id'].toString();\n                            } else {\n                                ref = element.toString();\n                            }\n                        } else {\n                            ref = element.toString();\n                        }\n                        this.parent_plot.applyState({ ldrefvar: ref });\n                    };\n                    return this;\n                });\n                /**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n * @class LocusZoom.DataLayers.category_scatter\n * @augments LocusZoom.DataLayers.scatter\n */\n                LocusZoom.DataLayers.extend('scatter', 'category_scatter', {\n                    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n                    _prepareData: function () {\n                        var xField = this.layout.x_axis.field || 'x';\n                        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n                        var category_field = this.layout.x_axis.category_field;\n                        if (!category_field) {\n                            throw 'Layout for ' + this.layout.id + ' must specify category_field';\n                        }\n                        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n                        var sourceData = this.data.sort(function (a, b) {\n                            var ak = a[category_field];\n                            var bk = b[category_field];\n                            var av = ak.toString ? ak.toString().toLowerCase() : ak;\n                            var bv = bk.toString ? bk.toString().toLowerCase() : bk;\n                            return av === bv ? 0 : av < bv ? -1 : 1;\n                        });\n                        sourceData.forEach(function (d, i) {\n                            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n                            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n                            d[xField] = d[xField] || i;\n                        });\n                        return sourceData;\n                    },\n                    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n                    _generateCategoryBounds: function () {\n                        // TODO: API may return null values in category_field; should we add placeholder category label?\n                        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n                        var category_field = this.layout.x_axis.category_field;\n                        var xField = this.layout.x_axis.field || 'x';\n                        var uniqueCategories = {};\n                        this.data.forEach(function (item) {\n                            var category = item[category_field];\n                            var x = item[xField];\n                            var bounds = uniqueCategories[category] || [\n                                x,\n                                x\n                            ];\n                            uniqueCategories[category] = [\n                                Math.min(bounds[0], x),\n                                Math.max(bounds[1], x)\n                            ];\n                        });\n                        var categoryNames = Object.keys(uniqueCategories);\n                        this._setDynamicColorScheme(categoryNames);\n                        return uniqueCategories;\n                    },\n                    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n                    _setDynamicColorScheme: function (categoryNames) {\n                        var colorParams = this.layout.color.parameters;\n                        var baseParams = this._base_layout.color.parameters;\n                        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n                        if (this.layout.color.scale_function !== 'categorical_bin') {\n                            throw 'This layer requires that coloring be specified as a `categorical_bin`';\n                        }\n                        if (baseParams.categories.length && baseParams.values.length) {\n                            // If there are preset category/color combos, make sure that they apply to the actual dataset\n                            var parameters_categories_hash = {};\n                            baseParams.categories.forEach(function (category) {\n                                parameters_categories_hash[category] = 1;\n                            });\n                            if (categoryNames.every(function (name) {\n                                    return parameters_categories_hash.hasOwnProperty(name);\n                                })) {\n                                // The layout doesn't have to specify categories in order, but make sure they are all there\n                                colorParams.categories = baseParams.categories;\n                            } else {\n                                colorParams.categories = categoryNames;\n                            }\n                        } else {\n                            colorParams.categories = categoryNames;\n                        }\n                        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n                        var colors;\n                        if (baseParams.values.length) {\n                            colors = baseParams.values;\n                        } else {\n                            var color_scale = categoryNames.length <= 10 ? d3.scale.category10 : d3.scale.category20;\n                            colors = color_scale().range();\n                        }\n                        while (colors.length < categoryNames.length) {\n                            colors = colors.concat(colors);\n                        }\n                        colors = colors.slice(0, categoryNames.length);\n                        // List of hex values, should be of same length as categories array\n                        colorParams.values = colors;\n                    },\n                    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n                    getTicks: function (dimension, config) {\n                        // Overrides parent method\n                        if ([\n                                'x',\n                                'y1',\n                                'y2'\n                            ].indexOf(dimension) === -1) {\n                            throw 'Invalid dimension identifier';\n                        }\n                        var position = config.position || 'left';\n                        if ([\n                                'left',\n                                'center',\n                                'right'\n                            ].indexOf(position) === -1) {\n                            throw 'Invalid tick position';\n                        }\n                        var categoryBounds = this._categories;\n                        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n                            return [];\n                        }\n                        if (dimension === 'y') {\n                            return [];\n                        }\n                        if (dimension === 'x') {\n                            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n                            var knownCategories = this.layout.color.parameters.categories || [];\n                            var knownColors = this.layout.color.parameters.values || [];\n                            return Object.keys(categoryBounds).map(function (category, index) {\n                                var bounds = categoryBounds[category];\n                                var xPos;\n                                switch (position) {\n                                case 'left':\n                                    xPos = bounds[0];\n                                    break;\n                                case 'center':\n                                    // Center tick under one or many elements as appropriate\n                                    var diff = bounds[1] - bounds[0];\n                                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                                    break;\n                                case 'right':\n                                    xPos = bounds[1];\n                                    break;\n                                }\n                                return {\n                                    x: xPos,\n                                    text: category,\n                                    style: { 'fill': knownColors[knownCategories.indexOf(category)] || '#000000' }\n                                };\n                            });\n                        }\n                    },\n                    applyCustomDataMethods: function () {\n                        this.data = this._prepareData();\n                        /**\n         * Define category names and extents (boundaries) for plotting.  TODO: properties in constructor\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n                        this._categories = this._generateCategoryBounds();\n                        return this;\n                    }\n                });\n                /* global LocusZoom */\n                'use strict';\n                /**\n *\n * LocusZoom has various singleton objects that are used for registering functions or classes.\n * These objects provide safe, standard methods to redefine or delete existing functions/classes\n * as well as define new custom functions/classes to be used in a plot.\n *\n * @namespace Singletons\n */\n                /*\n * The Collection of \"Known\" Data Sources. This registry is used internally by the `DataSources` class\n * @class\n * @static\n */\n                LocusZoom.KnownDataSources = function () {\n                    /** @lends LocusZoom.KnownDataSources */\n                    var obj = {};\n                    /* @member {function[]} */\n                    var sources = [];\n                    var findSourceByName = function (x) {\n                        for (var i = 0; i < sources.length; i++) {\n                            if (!sources[i].SOURCE_NAME) {\n                                throw 'KnownDataSources at position ' + i + ' does not have a \\'SOURCE_NAME\\' static property';\n                            }\n                            if (sources[i].SOURCE_NAME === x) {\n                                return sources[i];\n                            }\n                        }\n                        return null;\n                    };\n                    /**\n     * Identify the datasource associated with a given name\n     * @param {String} name\n     * @returns {function} The constructor for the data source; will usually extend `Data.Source`\n     */\n                    obj.get = function (name) {\n                        return findSourceByName(name);\n                    };\n                    /**\n     * Register a data source constructor so that it may be located by name\n     * @param {function} source A constructor function for a data source; will usually extend `Data.Source`,\n     *   and should have a `SOURCE_NAME` property\n     */\n                    obj.add = function (source) {\n                        if (!source.SOURCE_NAME) {\n                            console.warn('Data source added does not have a SOURCE_NAME');\n                        }\n                        sources.push(source);\n                    };\n                    /**\n     * Create a custom source type that extends the behavior of an existing source, and registers that\n     *  source by the provided name\n     * @param {String} parent_name The name of a previously registered data source type to use as a template\n     * @param {String} source_name The new name to use when registering this data source\n     * @param {Object} overrides An object of additional properties and methods to add/override behavior\n     * @returns {LocusZoom.Data.Source} The newly defined class for this source\n     */\n                    obj.extend = function (parent_name, source_name, overrides) {\n                        var parent = findSourceByName(parent_name);\n                        if (!parent) {\n                            throw 'Attempted to subclass an unknown or unregistered data source';\n                        }\n                        if (!source_name) {\n                            throw 'Must provide a name for the new data source';\n                        }\n                        if (typeof overrides !== 'object') {\n                            throw 'Must specify an object of properties and methods';\n                        }\n                        var child = LocusZoom.subclass(parent, overrides);\n                        child.SOURCE_NAME = source_name;\n                        sources.push(child);\n                        return child;\n                    };\n                    /** @deprecated */\n                    obj.push = function (source) {\n                        console.warn('Warning: KnownDataSources.push() is deprecated. Use .add() instead');\n                        obj.add(source);\n                    };\n                    /**\n     * List the names of all registered datasources\n     * @returns {String[]}\n     */\n                    obj.list = function () {\n                        return sources.map(function (x) {\n                            return x.SOURCE_NAME;\n                        });\n                    };\n                    /**\n     * Create a datasource instance\n     * @param {String} name The name of the desired datasource to instantiate (must be defined in the registry)\n     * @returns {LocusZoom.Data.Source}\n     */\n                    obj.create = function (name) {\n                        //create new object (pass additional parameters to constructor)\n                        var newObj = findSourceByName(name);\n                        if (newObj) {\n                            var params = arguments;\n                            params[0] = null;\n                            return new (Function.prototype.bind.apply(newObj, params))();\n                        } else {\n                            throw 'Unable to find data source for name: ' + name;\n                        }\n                    };\n                    /**\n     * Get the array of all registered constructors\n     *   Generally only used for unit tests internally\n     * @private\n     * @returns {function[]}\n     */\n                    obj.getAll = function () {\n                        return sources;\n                    };\n                    /**\n     * Register an entire collection of data sources\n     *   Generally only used for unit tests internally\n     * @private\n     * @param {function[]} x An array of datasource constructors\n     */\n                    obj.setAll = function (x) {\n                        sources = x;\n                    };\n                    /**\n     * Unregister all known data sources\n     *   Generally only used for unit tests internally\n     * @private\n     */\n                    obj.clear = function () {\n                        sources = [];\n                    };\n                    return obj;\n                }();\n                /**************************\n * Transformation Functions\n *\n * Singleton for formatting or transforming a single input, for instance turning raw p values into negative log10 form\n * Transformation functions are chainable with a pipe on a field name, like so: \"pvalue|neglog10\"\n *\n * NOTE: Because these functions are chainable the FUNCTION is returned by get(), not the result of that function.\n *\n * All transformation functions must accept an object of parameters and a value to process.\n * @class\n */\n                LocusZoom.TransformationFunctions = function () {\n                    /** @lends LocusZoom.TransformationFunctions */\n                    var obj = {};\n                    var transformations = {};\n                    var getTrans = function (name) {\n                        if (!name) {\n                            return null;\n                        }\n                        var fun = transformations[name];\n                        if (fun) {\n                            return fun;\n                        } else {\n                            throw 'transformation ' + name + ' not found';\n                        }\n                    };\n                    //a single transformation with any parameters\n                    //(parameters not currently supported)\n                    var parseTrans = function (name) {\n                        return getTrans(name);\n                    };\n                    //a \"raw\" transformation string with a leading pipe\n                    //and one or more transformations\n                    var parseTransString = function (x) {\n                        var funs = [];\n                        var re = /\\|([^|]+)/g;\n                        var result;\n                        while ((result = re.exec(x)) !== null) {\n                            funs.push(result[1]);\n                        }\n                        if (funs.length === 1) {\n                            return parseTrans(funs[0]);\n                        } else if (funs.length > 1) {\n                            return function (x) {\n                                var val = x;\n                                for (var i = 0; i < funs.length; i++) {\n                                    val = parseTrans(funs[i])(val);\n                                }\n                                return val;\n                            };\n                        }\n                        return null;\n                    };\n                    /**\n     * Retrieve a transformation function by name\n     * @param {String} name The name of the transformation function to retrieve. May optionally be prefixed with a\n     *   pipe (`|`) when chaining multiple transformation functions.\n     * @returns {function} The constructor for the transformation function\n     */\n                    obj.get = function (name) {\n                        if (name && name.substring(0, 1) === '|') {\n                            return parseTransString(name);\n                        } else {\n                            return parseTrans(name);\n                        }\n                    };\n                    /**\n     * Internal logic that registers a transformation function\n     * @protected\n     * @param {String} name\n     * @param {function} fn\n     */\n                    obj.set = function (name, fn) {\n                        if (name.substring(0, 1) === '|') {\n                            throw 'transformation name should not start with a pipe';\n                        } else {\n                            if (fn) {\n                                transformations[name] = fn;\n                            } else {\n                                delete transformations[name];\n                            }\n                        }\n                    };\n                    /**\n     * Register a transformation function\n     * @param {String} name\n     * @param {function} fn A transformation function (should accept one argument with the value)\n     */\n                    obj.add = function (name, fn) {\n                        if (transformations[name]) {\n                            throw 'transformation already exists with name: ' + name;\n                        } else {\n                            obj.set(name, fn);\n                        }\n                    };\n                    /**\n     * List the names of all registered transformation functions\n     * @returns {String[]}\n     */\n                    obj.list = function () {\n                        return Object.keys(transformations);\n                    };\n                    return obj;\n                }();\n                /**\n * Return the -log (base 10)\n * @function neglog10\n */\n                LocusZoom.TransformationFunctions.add('neglog10', function (x) {\n                    if (isNaN(x) || x <= 0) {\n                        return null;\n                    }\n                    return -Math.log(x) / Math.LN10;\n                });\n                /**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\n                LocusZoom.TransformationFunctions.add('logtoscinotation', function (x) {\n                    if (isNaN(x)) {\n                        return 'NaN';\n                    }\n                    if (x === 0) {\n                        return '1';\n                    }\n                    var exp = Math.ceil(x);\n                    var diff = exp - x;\n                    var base = Math.pow(10, diff);\n                    if (exp === 1) {\n                        return (base / 10).toFixed(4);\n                    } else if (exp === 2) {\n                        return (base / 100).toFixed(3);\n                    } else {\n                        return base.toFixed(2) + ' \\xD7 10^-' + exp;\n                    }\n                });\n                /**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} x\n * @returns {String}\n */\n                LocusZoom.TransformationFunctions.add('scinotation', function (x) {\n                    if (isNaN(x)) {\n                        return 'NaN';\n                    }\n                    if (x === 0) {\n                        return '0';\n                    }\n                    var abs = Math.abs(x);\n                    var log;\n                    if (abs > 1) {\n                        log = Math.ceil(Math.log(abs) / Math.LN10);\n                    } else {\n                        // 0...1\n                        log = Math.floor(Math.log(abs) / Math.LN10);\n                    }\n                    if (Math.abs(log) <= 3) {\n                        return x.toFixed(3);\n                    } else {\n                        return x.toExponential(2).replace('+', '').replace('e', ' \\xD7 10^');\n                    }\n                });\n                /**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} str\n */\n                LocusZoom.TransformationFunctions.add('urlencode', function (str) {\n                    return encodeURIComponent(str);\n                });\n                /**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} str HTML-escape the provided value\n */\n                LocusZoom.TransformationFunctions.add('htmlescape', function (str) {\n                    if (!str) {\n                        return '';\n                    }\n                    str = str + '';\n                    return str.replace(/['\"<>&`]/g, function (s) {\n                        switch (s) {\n                        case '\\'':\n                            return '&#039;';\n                        case '\"':\n                            return '&quot;';\n                        case '<':\n                            return '&lt;';\n                        case '>':\n                            return '&gt;';\n                        case '&':\n                            return '&amp;';\n                        case '`':\n                            return '&#x60;';\n                        }\n                    });\n                });\n                /**\n * Singleton for accessing/storing functions that will convert arbitrary data points to values in a given scale\n * Useful for anything that needs to scale discretely with data (e.g. color, point size, etc.)\n *\n * A Scale Function can be thought of as a modifier to a layout directive that adds extra logic to how a piece of data\n *   can be resolved to a value.\n *\n * All scale functions must accept an object of parameters and a value to process.\n * @class\n * @static\n */\n                LocusZoom.ScaleFunctions = function () {\n                    /** @lends LocusZoom.ScaleFunctions */\n                    var obj = {};\n                    var functions = {};\n                    /**\n     * Find a scale function and return it. If parameters and values are passed, calls the function directly; otherwise\n     *   returns a callable.\n     * @param {String} name\n     * @param {Object} [parameters] Configuration parameters specific to the specified scale function\n     * @param {*} [value] The value to operate on\n     * @returns {*}\n     */\n                    obj.get = function (name, parameters, value) {\n                        if (!name) {\n                            return null;\n                        } else if (functions[name]) {\n                            if (typeof parameters === 'undefined' && typeof value === 'undefined') {\n                                return functions[name];\n                            } else {\n                                return functions[name](parameters, value);\n                            }\n                        } else {\n                            throw 'scale function [' + name + '] not found';\n                        }\n                    };\n                    /**\n     * @protected\n     * @param {String} name The name of the function to set/unset\n     * @param {Function} [fn] The function to register. If blank, removes this function name from the registry.\n     */\n                    obj.set = function (name, fn) {\n                        if (fn) {\n                            functions[name] = fn;\n                        } else {\n                            delete functions[name];\n                        }\n                    };\n                    /**\n     * Add a new scale function to the registry\n     * @param {String} name The name of the scale function\n     * @param {function} fn A scale function that accepts two parameters: an object of configuration and a value\n     */\n                    obj.add = function (name, fn) {\n                        if (functions[name]) {\n                            throw 'scale function already exists with name: ' + name;\n                        } else {\n                            obj.set(name, fn);\n                        }\n                    };\n                    /**\n     * List the names of all registered scale functions\n     * @returns {String[]}\n     */\n                    obj.list = function () {\n                        return Object.keys(functions);\n                    };\n                    return obj;\n                }();\n                /**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\n                LocusZoom.ScaleFunctions.add('if', function (parameters, input) {\n                    if (typeof input == 'undefined' || parameters.field_value !== input) {\n                        if (typeof parameters.else != 'undefined') {\n                            return parameters.else;\n                        } else {\n                            return null;\n                        }\n                    } else {\n                        return parameters.then;\n                    }\n                });\n                /**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} null_value\n * @param {*} input value\n * @returns\n */\n                LocusZoom.ScaleFunctions.add('numerical_bin', function (parameters, input) {\n                    var breaks = parameters.breaks || [];\n                    var values = parameters.values || [];\n                    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n                        return parameters.null_value ? parameters.null_value : null;\n                    }\n                    var threshold = breaks.reduce(function (prev, curr) {\n                        if (+input < prev || +input >= prev && +input < curr) {\n                            return prev;\n                        } else {\n                            return curr;\n                        }\n                    });\n                    return values[breaks.indexOf(threshold)];\n                });\n                /**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\n                LocusZoom.ScaleFunctions.add('categorical_bin', function (parameters, value) {\n                    if (typeof value == 'undefined' || parameters.categories.indexOf(value) === -1) {\n                        return parameters.null_value ? parameters.null_value : null;\n                    } else {\n                        return parameters.values[parameters.categories.indexOf(value)];\n                    }\n                });\n                /**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\n                LocusZoom.ScaleFunctions.add('interpolate', function (parameters, input) {\n                    var breaks = parameters.breaks || [];\n                    var values = parameters.values || [];\n                    var nullval = parameters.null_value ? parameters.null_value : null;\n                    if (breaks.length < 2 || breaks.length !== values.length) {\n                        return nullval;\n                    }\n                    if (typeof input == 'undefined' || input === null || isNaN(+input)) {\n                        return nullval;\n                    }\n                    if (+input <= parameters.breaks[0]) {\n                        return values[0];\n                    } else if (+input >= parameters.breaks[parameters.breaks.length - 1]) {\n                        return values[breaks.length - 1];\n                    } else {\n                        var upper_idx = null;\n                        breaks.forEach(function (brk, idx) {\n                            if (!idx) {\n                                return;\n                            }\n                            if (breaks[idx - 1] <= +input && breaks[idx] >= +input) {\n                                upper_idx = idx;\n                            }\n                        });\n                        if (upper_idx === null) {\n                            return nullval;\n                        }\n                        var normalized_input = (+input - breaks[upper_idx - 1]) / (breaks[upper_idx] - breaks[upper_idx - 1]);\n                        if (!isFinite(normalized_input)) {\n                            return nullval;\n                        }\n                        return d3.interpolate(values[upper_idx - 1], values[upper_idx])(normalized_input);\n                    }\n                });\n                /* global LocusZoom */\n                'use strict';\n                /**\n * A Dashboard is an HTML element used for presenting arbitrary user interface components. Dashboards are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each dashboard is an HTML-based (read: not SVG) collection of components used to display information or provide\n *   user interface. Dashboards can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n * @class\n */\n                LocusZoom.Dashboard = function (parent) {\n                    // parent must be a locuszoom plot or panel\n                    if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)) {\n                        throw 'Unable to create dashboard, parent must be a locuszoom plot or panel';\n                    }\n                    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n                    this.parent = parent;\n                    /** @member {String} */\n                    this.id = this.parent.getBaseId() + '.dashboard';\n                    /** @member {('plot'|'panel')} */\n                    this.type = this.parent instanceof LocusZoom.Plot ? 'plot' : 'panel';\n                    /** @member {LocusZoom.Plot} */\n                    this.parent_plot = this.type === 'plot' ? this.parent : this.parent.parent;\n                    /** @member {d3.selection} */\n                    this.selector = null;\n                    /** @member {LocusZoom.Dashboard.Component[]} */\n                    this.components = [];\n                    /**\n     * The timer identifier as returned by setTimeout\n     * @member {Number}\n     */\n                    this.hide_timeout = null;\n                    /**\n     * Whether to hide the dashboard. Can be overridden by a child component. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n                    this.persist = false;\n                    // TODO: Return value from constructor function?\n                    return this.initialize();\n                };\n                /**\n * Prepare the dashboard for first use: generate all component instances for this dashboard, based on the provided\n *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n * @returns {LocusZoom.Dashboard}\n */\n                LocusZoom.Dashboard.prototype.initialize = function () {\n                    // Parse layout to generate component instances\n                    if (Array.isArray(this.parent.layout.dashboard.components)) {\n                        this.parent.layout.dashboard.components.forEach(function (layout) {\n                            try {\n                                var component = LocusZoom.Dashboard.Components.get(layout.type, layout, this);\n                                this.components.push(component);\n                            } catch (e) {\n                                console.warn(e);\n                            }\n                        }.bind(this));\n                    }\n                    // Add mouseover event handlers to show/hide panel dashboard\n                    if (this.type === 'panel') {\n                        d3.select(this.parent.parent.svg.node().parentNode).on('mouseover.' + this.id, function () {\n                            clearTimeout(this.hide_timeout);\n                            if (!this.selector || this.selector.style('visibility') === 'hidden') {\n                                this.show();\n                            }\n                        }.bind(this));\n                        d3.select(this.parent.parent.svg.node().parentNode).on('mouseout.' + this.id, function () {\n                            clearTimeout(this.hide_timeout);\n                            this.hide_timeout = setTimeout(function () {\n                                this.hide();\n                            }.bind(this), 300);\n                        }.bind(this));\n                    }\n                    return this;\n                };\n                /**\n * Whether to persist the dashboard. Returns true if at least one component should persist, or if the panel is engaged\n *   in an active drag event.\n * @returns {boolean}\n */\n                LocusZoom.Dashboard.prototype.shouldPersist = function () {\n                    if (this.persist) {\n                        return true;\n                    }\n                    var persist = false;\n                    // Persist if at least one component should also persist\n                    this.components.forEach(function (component) {\n                        persist = persist || component.shouldPersist();\n                    });\n                    // Persist if in a parent drag event\n                    persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n                    return !!persist;\n                };\n                /**\n * Make the dashboard appear. If it doesn't exist yet create it, including creating/positioning all components within,\n *   and make sure it is set to be visible.\n */\n                LocusZoom.Dashboard.prototype.show = function () {\n                    if (!this.selector) {\n                        switch (this.type) {\n                        case 'plot':\n                            this.selector = d3.select(this.parent.svg.node().parentNode).insert('div', ':first-child');\n                            break;\n                        case 'panel':\n                            this.selector = d3.select(this.parent.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip, .lz-dashboard-menu, .lz-curtain').classed('lz-panel-dashboard', true);\n                            break;\n                        }\n                        this.selector.classed('lz-dashboard', true).classed('lz-' + this.type + '-dashboard', true).attr('id', this.id);\n                    }\n                    this.components.forEach(function (component) {\n                        component.show();\n                    });\n                    this.selector.style({ visibility: 'visible' });\n                    return this.update();\n                };\n                /**\n * Update the dashboard and rerender all child components. This can be called whenever plot state changes.\n * @returns {LocusZoom.Dashboard}\n */\n                LocusZoom.Dashboard.prototype.update = function () {\n                    if (!this.selector) {\n                        return this;\n                    }\n                    this.components.forEach(function (component) {\n                        component.update();\n                    });\n                    return this.position();\n                };\n                /**\n * Position the dashboard (and child components) within the panel\n * @returns {LocusZoom.Dashboard}\n */\n                LocusZoom.Dashboard.prototype.position = function () {\n                    if (!this.selector) {\n                        return this;\n                    }\n                    // Position the dashboard itself (panel only)\n                    if (this.type === 'panel') {\n                        var page_origin = this.parent.getPageOrigin();\n                        var top = (page_origin.y + 3.5).toString() + 'px';\n                        var left = page_origin.x.toString() + 'px';\n                        var width = (this.parent.layout.width - 4).toString() + 'px';\n                        this.selector.style({\n                            position: 'absolute',\n                            top: top,\n                            left: left,\n                            width: width\n                        });\n                    }\n                    // Recursively position components\n                    this.components.forEach(function (component) {\n                        component.position();\n                    });\n                    return this;\n                };\n                /**\n * Hide the dashboard (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n *\n * @returns {LocusZoom.Dashboard}\n */\n                LocusZoom.Dashboard.prototype.hide = function () {\n                    if (!this.selector || this.shouldPersist()) {\n                        return this;\n                    }\n                    this.components.forEach(function (component) {\n                        component.hide();\n                    });\n                    this.selector.style({ visibility: 'hidden' });\n                    return this;\n                };\n                /**\n * Completely remove dashboard and all child components. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\n                LocusZoom.Dashboard.prototype.destroy = function (force) {\n                    if (typeof force == 'undefined') {\n                        force = false;\n                    }\n                    if (!this.selector) {\n                        return this;\n                    }\n                    if (this.shouldPersist() && !force) {\n                        return this;\n                    }\n                    this.components.forEach(function (component) {\n                        component.destroy(true);\n                    });\n                    this.components = [];\n                    this.selector.remove();\n                    this.selector = null;\n                    return this;\n                };\n                /**\n *\n * A dashboard component is an empty div rendered on a dashboard that can display custom\n * html of user interface elements. LocusZoom.Dashboard.Components is a singleton used to\n * define and manage an extendable collection of dashboard components.\n * (e.g. by LocusZoom.Dashboard.Components.add())\n * @class\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the component left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot dashboard is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple'} [layout.color='gray']  Color scheme for the\n *   component. Applies to buttons and menus.\n * @param {LocusZoom.Dashboard} parent The dashboard that contains this component\n*/\n                LocusZoom.Dashboard.Component = function (layout, parent) {\n                    /** @member {Object} */\n                    this.layout = layout || {};\n                    if (!this.layout.color) {\n                        this.layout.color = 'gray';\n                    }\n                    /** @member {LocusZoom.Dashboard|*} */\n                    this.parent = parent || null;\n                    /**\n     * Some dashboards are attached to a panel, rather than directly to a plot\n     * @member {LocusZoom.Panel|null}\n     */\n                    this.parent_panel = null;\n                    /** @member {LocusZoom.Plot} */\n                    this.parent_plot = null;\n                    /**\n     * This is a reference to either the panel or the plot, depending on what the dashboard is\n     *   tied to. Useful when absolutely positioning dashboard components relative to their SVG anchor.\n     * @member {LocusZoom.Plot|LocusZoom.Panel}\n     */\n                    this.parent_svg = null;\n                    if (this.parent instanceof LocusZoom.Dashboard) {\n                        // TODO: when is the immediate parent *not* a dashboard?\n                        if (this.parent.type === 'panel') {\n                            this.parent_panel = this.parent.parent;\n                            this.parent_plot = this.parent.parent.parent;\n                            this.parent_svg = this.parent_panel;\n                        } else {\n                            this.parent_plot = this.parent.parent;\n                            this.parent_svg = this.parent_plot;\n                        }\n                    }\n                    /** @member {d3.selection} */\n                    this.selector = null;\n                    /**\n     * If this is an interactive component, it will contain a button or menu instance that handles the interactivity.\n     *   There is a 1-to-1 relationship of dashboard component to button\n     * @member {null|LocusZoom.Dashboard.Component.Button}\n     */\n                    this.button = null;\n                    /**\n     * If any single component is marked persistent, it will bubble up to prevent automatic hide behavior on a\n     *   component's parent dashboard. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n                    this.persist = false;\n                    if (!this.layout.position) {\n                        this.layout.position = 'left';\n                    }\n                    // TODO: Return value in constructor\n                    return this;\n                };\n                /**\n * Perform all rendering of component, including toggling visibility to true. Will initialize and create SVG element\n *   if necessary, as well as updating with new data and performing layout actions.\n */\n                LocusZoom.Dashboard.Component.prototype.show = function () {\n                    if (!this.parent || !this.parent.selector) {\n                        return;\n                    }\n                    if (!this.selector) {\n                        var group_position = [\n                            'start',\n                            'middle',\n                            'end'\n                        ].indexOf(this.layout.group_position) !== -1 ? ' lz-dashboard-group-' + this.layout.group_position : '';\n                        this.selector = this.parent.selector.append('div').attr('class', 'lz-dashboard-' + this.layout.position + group_position);\n                        if (this.layout.style) {\n                            this.selector.style(this.layout.style);\n                        }\n                        if (typeof this.initialize == 'function') {\n                            this.initialize();\n                        }\n                    }\n                    if (this.button && this.button.status === 'highlighted') {\n                        this.button.menu.show();\n                    }\n                    this.selector.style({ visibility: 'visible' });\n                    this.update();\n                    return this.position();\n                };\n                /**\n * Update the dashboard component with any new data or plot state as appropriate. This method performs all\n *  necessary rendering steps.\n */\n                LocusZoom.Dashboard.Component.prototype.update = function () {\n                };\n                /**\n * Place the component correctly in the plot\n * @returns {LocusZoom.Dashboard.Component}\n */\n                LocusZoom.Dashboard.Component.prototype.position = function () {\n                    if (this.button) {\n                        this.button.menu.position();\n                    }\n                    return this;\n                };\n                /**\n * Determine whether the component should persist (will bubble up to parent dashboard)\n * @returns {boolean}\n */\n                LocusZoom.Dashboard.Component.prototype.shouldPersist = function () {\n                    if (this.persist) {\n                        return true;\n                    }\n                    if (this.button && this.button.persist) {\n                        return true;\n                    }\n                    return false;\n                };\n                /**\n * Toggle visibility to hidden, unless marked as persistent\n * @returns {LocusZoom.Dashboard.Component}\n */\n                LocusZoom.Dashboard.Component.prototype.hide = function () {\n                    if (!this.selector || this.shouldPersist()) {\n                        return this;\n                    }\n                    if (this.button) {\n                        this.button.menu.hide();\n                    }\n                    this.selector.style({ visibility: 'hidden' });\n                    return this;\n                };\n                /**\n * Completely remove component and button. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\n                LocusZoom.Dashboard.Component.prototype.destroy = function (force) {\n                    if (typeof force == 'undefined') {\n                        force = false;\n                    }\n                    if (!this.selector) {\n                        return this;\n                    }\n                    if (this.shouldPersist() && !force) {\n                        return this;\n                    }\n                    if (this.button && this.button.menu) {\n                        this.button.menu.destroy();\n                    }\n                    this.selector.remove();\n                    this.selector = null;\n                    this.button = null;\n                    return this;\n                };\n                /**\n * Singleton registry of all known components\n * @class\n * @static\n */\n                LocusZoom.Dashboard.Components = function () {\n                    /** @lends LocusZoom.Dashboard.Components */\n                    var obj = {};\n                    var components = {};\n                    /**\n     * Create a new component instance by name\n     * @param {String} name The string identifier of the desired component\n     * @param {Object} layout The layout to use to create the component\n     * @param {LocusZoom.Dashboard} parent The containing dashboard to use when creating the component\n     * @returns {LocusZoom.Dashboard.Component}\n     */\n                    obj.get = function (name, layout, parent) {\n                        if (!name) {\n                            return null;\n                        } else if (components[name]) {\n                            if (typeof layout != 'object') {\n                                throw 'invalid layout argument for dashboard component [' + name + ']';\n                            } else {\n                                return new components[name](layout, parent);\n                            }\n                        } else {\n                            throw 'dashboard component [' + name + '] not found';\n                        }\n                    };\n                    /**\n     * Add a new component constructor to the registry and ensure that it extends the correct parent class\n     * @protected\n     * @param name\n     * @param component\n     */\n                    obj.set = function (name, component) {\n                        if (component) {\n                            if (typeof component != 'function') {\n                                throw 'unable to set dashboard component [' + name + '], argument provided is not a function';\n                            } else {\n                                components[name] = component;\n                                components[name].prototype = new LocusZoom.Dashboard.Component();\n                            }\n                        } else {\n                            delete components[name];\n                        }\n                    };\n                    /**\n     * Register a new component constructor by name\n     * @param {String} name\n     * @param {function} component The component constructor\n     */\n                    obj.add = function (name, component) {\n                        if (components[name]) {\n                            throw 'dashboard component already exists with name: ' + name;\n                        } else {\n                            obj.set(name, component);\n                        }\n                    };\n                    /**\n     * List the names of all registered components\n     * @returns {String[]}\n     */\n                    obj.list = function () {\n                        return Object.keys(components);\n                    };\n                    return obj;\n                }();\n                /**\n * Plots and panels may have a \"dashboard\" element suited for showing HTML components that may be interactive.\n *   When components need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @class\n * @param {LocusZoom.Dashboard.Component} parent\n */\n                LocusZoom.Dashboard.Component.Button = function (parent) {\n                    if (!(parent instanceof LocusZoom.Dashboard.Component)) {\n                        throw 'Unable to create dashboard component button, invalid parent';\n                    }\n                    /** @member {LocusZoom.Dashboard.Component} */\n                    this.parent = parent;\n                    /** @member {LocusZoom.Dashboard.Panel} */\n                    this.parent_panel = this.parent.parent_panel;\n                    /** @member {LocusZoom.Dashboard.Plot} */\n                    this.parent_plot = this.parent.parent_plot;\n                    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n                    this.parent_svg = this.parent.parent_svg;\n                    /** @member {LocusZoom.Dashboard|null|*} */\n                    this.parent_dashboard = this.parent.parent;\n                    /** @member {d3.selection} */\n                    this.selector = null;\n                    /**\n     * Tag to use for the button (default: a)\n     * @member {String}\n     */\n                    this.tag = 'a';\n                    /**\n     * TODO This method does not appear to be used anywhere\n     * @param {String} tag\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.setTag = function (tag) {\n                        if (typeof tag != 'undefined') {\n                            this.tag = tag.toString();\n                        }\n                        return this;\n                    };\n                    /**\n     * HTML for the button to show.\n     * @protected\n     * @member {String}\n     */\n                    this.html = '';\n                    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.setHtml = function (html) {\n                        if (typeof html != 'undefined') {\n                            this.html = html.toString();\n                        }\n                        return this;\n                    };\n                    /**\n     * @deprecated since 0.5.6; use setHTML instead\n     */\n                    this.setText = this.setHTML;\n                    /**\n     * Mouseover title text for the button to show\n     * @protected\n     * @member {String}\n     */\n                    this.title = '';\n                    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.setTitle = function (title) {\n                        if (typeof title != 'undefined') {\n                            this.title = title.toString();\n                        }\n                        return this;\n                    };\n                    /**\n     * Color of the button\n     * @member {String}\n     */\n                    this.color = 'gray';\n                    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.setColor = function (color) {\n                        if (typeof color != 'undefined') {\n                            if ([\n                                    'gray',\n                                    'red',\n                                    'orange',\n                                    'yellow',\n                                    'green',\n                                    'blue',\n                                    'purple'\n                                ].indexOf(color) !== -1) {\n                                this.color = color;\n                            } else {\n                                this.color = 'gray';\n                            }\n                        }\n                        return this;\n                    };\n                    /**\n     * Hash of arbitrary button styles to apply as {name: value} entries\n     * @protected\n     * @member {Object}\n     */\n                    this.style = {};\n                    /**\n     * Set a collection of custom styles to be used by the button\n     * @param {Object} style Hash of {name:value} entries\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.setStyle = function (style) {\n                        if (typeof style != 'undefined') {\n                            this.style = style;\n                        }\n                        return this;\n                    };\n                    //\n                    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n                    this.getClass = function () {\n                        var group_position = [\n                            'start',\n                            'middle',\n                            'end'\n                        ].indexOf(this.parent.layout.group_position) !== -1 ? ' lz-dashboard-button-group-' + this.parent.layout.group_position : '';\n                        return 'lz-dashboard-button lz-dashboard-button-' + this.color + (this.status ? '-' + this.status : '') + group_position;\n                    };\n                    // Permanence\n                    /**\n     * Track internal state on whether to keep showing the button/ menu contents at the moment\n     * @protected\n     * @member {Boolean}\n     */\n                    this.persist = false;\n                    /**\n     * Configuration when defining a button: track whether this component should be allowed to keep open\n     *   menu/button contents in response to certain events\n     * @protected\n     * @member {Boolean}\n     */\n                    this.permanent = false;\n                    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.setPermanent = function (bool) {\n                        if (typeof bool == 'undefined') {\n                            bool = true;\n                        } else {\n                            bool = Boolean(bool);\n                        }\n                        this.permanent = bool;\n                        if (this.permanent) {\n                            this.persist = true;\n                        }\n                        return this;\n                    };\n                    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n                    this.shouldPersist = function () {\n                        return this.permanent || this.persist;\n                    };\n                    /**\n     * Button status (highlighted / disabled/ etc)\n     * @protected\n     * @member {String}\n     */\n                    this.status = '';\n                    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n                    this.setStatus = function (status) {\n                        if (typeof status != 'undefined' && [\n                                '',\n                                'highlighted',\n                                'disabled'\n                            ].indexOf(status) !== -1) {\n                            this.status = status;\n                        }\n                        return this.update();\n                    };\n                    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.highlight = function (bool) {\n                        if (typeof bool == 'undefined') {\n                            bool = true;\n                        } else {\n                            bool = Boolean(bool);\n                        }\n                        if (bool) {\n                            return this.setStatus('highlighted');\n                        } else if (this.status === 'highlighted') {\n                            return this.setStatus('');\n                        }\n                        return this;\n                    };\n                    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.disable = function (bool) {\n                        if (typeof bool == 'undefined') {\n                            bool = true;\n                        } else {\n                            bool = Boolean(bool);\n                        }\n                        if (bool) {\n                            return this.setStatus('disabled');\n                        } else if (this.status === 'disabled') {\n                            return this.setStatus('');\n                        }\n                        return this;\n                    };\n                    // Mouse events\n                    /** @member {function} */\n                    this.onmouseover = function () {\n                    };\n                    this.setOnMouseover = function (onmouseover) {\n                        if (typeof onmouseover == 'function') {\n                            this.onmouseover = onmouseover;\n                        } else {\n                            this.onmouseover = function () {\n                            };\n                        }\n                        return this;\n                    };\n                    /** @member {function} */\n                    this.onmouseout = function () {\n                    };\n                    this.setOnMouseout = function (onmouseout) {\n                        if (typeof onmouseout == 'function') {\n                            this.onmouseout = onmouseout;\n                        } else {\n                            this.onmouseout = function () {\n                            };\n                        }\n                        return this;\n                    };\n                    /** @member {function} */\n                    this.onclick = function () {\n                    };\n                    this.setOnclick = function (onclick) {\n                        if (typeof onclick == 'function') {\n                            this.onclick = onclick;\n                        } else {\n                            this.onclick = function () {\n                            };\n                        }\n                        return this;\n                    };\n                    // Primary behavior functions\n                    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n                    this.show = function () {\n                        if (!this.parent) {\n                            return;\n                        }\n                        if (!this.selector) {\n                            this.selector = this.parent.selector.append(this.tag).attr('class', this.getClass());\n                        }\n                        return this.update();\n                    };\n                    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.preUpdate = function () {\n                        return this;\n                    };\n                    /**\n     * Update button state and contents, and fully rerender\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.update = function () {\n                        if (!this.selector) {\n                            return this;\n                        }\n                        this.preUpdate();\n                        this.selector.attr('class', this.getClass()).attr('title', this.title).style(this.style).on('mouseover', this.status === 'disabled' ? null : this.onmouseover).on('mouseout', this.status === 'disabled' ? null : this.onmouseout).on('click', this.status === 'disabled' ? null : this.onclick).html(this.html);\n                        this.menu.update();\n                        this.postUpdate();\n                        return this;\n                    };\n                    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.postUpdate = function () {\n                        return this;\n                    };\n                    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n                    this.hide = function () {\n                        if (this.selector && !this.shouldPersist()) {\n                            this.selector.remove();\n                            this.selector = null;\n                        }\n                        return this;\n                    };\n                    /**\n     * Button Menu Object\n     * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n     *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n     * @member {Object}\n     */\n                    this.menu = {\n                        outer_selector: null,\n                        inner_selector: null,\n                        scroll_position: 0,\n                        hidden: true,\n                        /**\n         * Show the button menu, including setting up any DOM elements needed for first rendering\n         */\n                        show: function () {\n                            if (!this.menu.outer_selector) {\n                                this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append('div').attr('class', 'lz-dashboard-menu lz-dashboard-menu-' + this.color).attr('id', this.parent_svg.getBaseId() + '.dashboard.menu');\n                                this.menu.inner_selector = this.menu.outer_selector.append('div').attr('class', 'lz-dashboard-menu-content');\n                                this.menu.inner_selector.on('scroll', function () {\n                                    this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                                }.bind(this));\n                            }\n                            this.menu.outer_selector.style({ visibility: 'visible' });\n                            this.menu.hidden = false;\n                            return this.menu.update();\n                        }.bind(this),\n                        /**\n         * Update the rendering of the menu\n         */\n                        update: function () {\n                            if (!this.menu.outer_selector) {\n                                return this.menu;\n                            }\n                            this.menu.populate();\n                            // This function is stubbed for all buttons by default and custom implemented in component definition\n                            if (this.menu.inner_selector) {\n                                this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n                            }\n                            return this.menu.position();\n                        }.bind(this),\n                        position: function () {\n                            if (!this.menu.outer_selector) {\n                                return this.menu;\n                            }\n                            // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n                            this.menu.outer_selector.style({ height: null });\n                            var padding = 3;\n                            var scrollbar_padding = 20;\n                            var menu_height_padding = 14;\n                            // 14: 2x 6px padding, 2x 1px border\n                            var page_origin = this.parent_svg.getPageOrigin();\n                            var page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n                            var container_offset = this.parent_plot.getContainerOffset();\n                            var dashboard_client_rect = this.parent_dashboard.selector.node().getBoundingClientRect();\n                            var button_client_rect = this.selector.node().getBoundingClientRect();\n                            var menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n                            var total_content_height = this.menu.inner_selector.node().scrollHeight;\n                            var top = 0;\n                            var left = 0;\n                            if (this.parent_dashboard.type === 'panel') {\n                                top = page_origin.y + dashboard_client_rect.height + 2 * padding;\n                                left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n                            } else {\n                                top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                                left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n                            }\n                            var base_max_width = Math.max(this.parent_svg.layout.width - 2 * padding - scrollbar_padding, scrollbar_padding);\n                            var container_max_width = base_max_width;\n                            var content_max_width = base_max_width - 4 * padding;\n                            var base_max_height = Math.max(this.parent_svg.layout.height - 10 * padding - menu_height_padding, menu_height_padding);\n                            var height = Math.min(total_content_height, base_max_height);\n                            var max_height = base_max_height;\n                            this.menu.outer_selector.style({\n                                'top': top.toString() + 'px',\n                                'left': left.toString() + 'px',\n                                'max-width': container_max_width.toString() + 'px',\n                                'max-height': max_height.toString() + 'px',\n                                'height': height.toString() + 'px'\n                            });\n                            this.menu.inner_selector.style({ 'max-width': content_max_width.toString() + 'px' });\n                            this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n                            return this.menu;\n                        }.bind(this),\n                        hide: function () {\n                            if (!this.menu.outer_selector) {\n                                return this.menu;\n                            }\n                            this.menu.outer_selector.style({ visibility: 'hidden' });\n                            this.menu.hidden = true;\n                            return this.menu;\n                        }.bind(this),\n                        destroy: function () {\n                            if (!this.menu.outer_selector) {\n                                return this.menu;\n                            }\n                            this.menu.inner_selector.remove();\n                            this.menu.outer_selector.remove();\n                            this.menu.inner_selector = null;\n                            this.menu.outer_selector = null;\n                            return this.menu;\n                        }.bind(this),\n                        /**\n         * Internal method definition\n         * By convention populate() does nothing and should be reimplemented with each dashboard button definition\n         *   Reimplement by way of Dashboard.Component.Button.menu.setPopulate to define the populate method and hook\n         *   up standard menu click-toggle behavior prototype.\n         * @protected\n         */\n                        populate: function () {\n                        }.bind(this),\n                        /**\n         * Define how the menu is populated with items, and set up click and display properties as appropriate\n         * @public\n         */\n                        setPopulate: function (menu_populate_function) {\n                            if (typeof menu_populate_function == 'function') {\n                                this.menu.populate = menu_populate_function;\n                                this.setOnclick(function () {\n                                    if (this.menu.hidden) {\n                                        this.menu.show();\n                                        this.highlight().update();\n                                        this.persist = true;\n                                    } else {\n                                        this.menu.hide();\n                                        this.highlight(false).update();\n                                        if (!this.permanent) {\n                                            this.persist = false;\n                                        }\n                                    }\n                                }.bind(this));\n                            } else {\n                                this.setOnclick();\n                            }\n                            return this;\n                        }.bind(this)\n                    };\n                };\n                /**\n * Renders arbitrary text with title formatting\n * @class LocusZoom.Dashboard.Components.title\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\n                LocusZoom.Dashboard.Components.add('title', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.show = function () {\n                        this.div_selector = this.parent.selector.append('div').attr('class', 'lz-dashboard-title lz-dashboard-' + this.layout.position);\n                        this.title_selector = this.div_selector.append('h3');\n                        return this.update();\n                    };\n                    this.update = function () {\n                        var title = layout.title.toString();\n                        if (this.layout.subtitle) {\n                            title += ' <small>' + this.layout.subtitle + '</small>';\n                        }\n                        this.title_selector.html(title);\n                        return this;\n                    };\n                });\n                /**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n * @class LocusZoom.Dashboard.Components.dimensions\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('dimensions', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        var display_width = this.parent_plot.layout.width.toString().indexOf('.') === -1 ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n                        var display_height = this.parent_plot.layout.height.toString().indexOf('.') === -1 ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n                        this.selector.html(display_width + 'px \\xD7 ' + display_height + 'px');\n                        if (layout.class) {\n                            this.selector.attr('class', layout.class);\n                        }\n                        if (layout.style) {\n                            this.selector.style(layout.style);\n                        }\n                        return this;\n                    };\n                });\n                /**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n * @class LocusZoom.Dashboard.Components.region_scale\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('region_scale', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end) && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null) {\n                            this.selector.style('display', null);\n                            this.selector.html(LocusZoom.positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n                        } else {\n                            this.selector.style('display', 'none');\n                        }\n                        if (layout.class) {\n                            this.selector.attr('class', layout.class);\n                        }\n                        if (layout.style) {\n                            this.selector.style(layout.style);\n                        }\n                        return this;\n                    };\n                });\n                /**\n * Button to export current plot to an SVG image\n * @class LocusZoom.Dashboard.Components.download\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('download', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (this.button) {\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml('Download Image').setTitle('Download image of the current plot as locuszoom.svg').setOnMouseover(function () {\n                            this.button.selector.classed('lz-dashboard-button-gray-disabled', true).html('Preparing Image');\n                            this.generateBase64SVG().then(function (base64_string) {\n                                this.button.selector.attr('href', 'data:image/svg+xml;base64,\\n' + base64_string).classed('lz-dashboard-button-gray-disabled', false).classed('lz-dashboard-button-gray-highlighted', true).html('Download Image');\n                            }.bind(this));\n                        }.bind(this)).setOnMouseout(function () {\n                            this.button.selector.classed('lz-dashboard-button-gray-highlighted', false);\n                        }.bind(this));\n                        this.button.show();\n                        this.button.selector.attr('href-lang', 'image/svg+xml').attr('download', 'locuszoom.svg');\n                        return this;\n                    };\n                    this.css_string = '';\n                    for (var stylesheet in Object.keys(document.styleSheets)) {\n                        if (document.styleSheets[stylesheet].href !== null && document.styleSheets[stylesheet].href.indexOf('locuszoom.css') !== -1) {\n                            // TODO: \"Download image\" button will render the image incorrectly if the stylesheet has been renamed or concatenated\n                            LocusZoom.createCORSPromise('GET', document.styleSheets[stylesheet].href).then(function (response) {\n                                this.css_string = response.replace(/[\\r\\n]/g, ' ').replace(/\\s+/g, ' ');\n                                if (this.css_string.indexOf('/* ! LocusZoom HTML Styles */')) {\n                                    this.css_string = this.css_string.substring(0, this.css_string.indexOf('/* ! LocusZoom HTML Styles */'));\n                                }\n                            }.bind(this));\n                            break;\n                        }\n                    }\n                    this.generateBase64SVG = function () {\n                        return Q.fcall(function () {\n                            // Insert a hidden div, clone the node into that so we can modify it with d3\n                            var container = this.parent.selector.append('div').style('display', 'none').html(this.parent_plot.svg.node().outerHTML);\n                            // Remove unnecessary elements\n                            container.selectAll('g.lz-curtain').remove();\n                            container.selectAll('g.lz-mouse_guide').remove();\n                            // Convert units on axis tick dy attributes from ems to pixels\n                            container.selectAll('g.tick text').each(function () {\n                                var dy = +d3.select(this).attr('dy').substring(-2).slice(0, -2) * 10;\n                                d3.select(this).attr('dy', dy);\n                            });\n                            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n                            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n                            var initial_html = d3.select(container.select('svg').node().parentNode).html();\n                            var style_def = '<style type=\"text/css\"><![CDATA[ ' + this.css_string + ' ]]></style>';\n                            var insert_at = initial_html.indexOf('>') + 1;\n                            initial_html = initial_html.slice(0, insert_at) + style_def + initial_html.slice(insert_at);\n                            // Delete the container node\n                            container.remove();\n                            // Base64-encode the string and return it\n                            return btoa(encodeURIComponent(initial_html).replace(/%([0-9A-F]{2})/g, function (match, p1) {\n                                return String.fromCharCode('0x' + p1);\n                            }));\n                        }.bind(this));\n                    };\n                });\n                /**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.remove_panel\n * @augments LocusZoom.Dashboard.Component\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\n                LocusZoom.Dashboard.Components.add('remove_panel', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (this.button) {\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml('\\xD7').setTitle('Remove panel').setOnclick(function () {\n                            if (!layout.suppress_confirm && !confirm('Are you sure you want to remove this panel? This cannot be undone!')) {\n                                return false;\n                            }\n                            var panel = this.parent_panel;\n                            panel.dashboard.hide(true);\n                            d3.select(panel.parent.svg.node().parentNode).on('mouseover.' + panel.getBaseId() + '.dashboard', null);\n                            d3.select(panel.parent.svg.node().parentNode).on('mouseout.' + panel.getBaseId() + '.dashboard', null);\n                            return panel.parent.removePanel(panel.id);\n                        }.bind(this));\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_up\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('move_panel_up', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (this.button) {\n                            var is_at_top = this.parent_panel.layout.y_index === 0;\n                            this.button.disable(is_at_top);\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml('\\u25B4').setTitle('Move panel up').setOnclick(function () {\n                            this.parent_panel.moveUp();\n                            this.update();\n                        }.bind(this));\n                        this.button.show();\n                        return this.update();\n                    };\n                });\n                /**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_down\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('move_panel_down', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (this.button) {\n                            var is_at_bottom = this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length - 1;\n                            this.button.disable(is_at_bottom);\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml('\\u25BE').setTitle('Move panel down').setOnclick(function () {\n                            this.parent_panel.moveDown();\n                            this.update();\n                        }.bind(this));\n                        this.button.show();\n                        return this.update();\n                    };\n                });\n                /**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @class LocusZoom.Dashboard.Components.shift_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\n                LocusZoom.Dashboard.Components.add('shift_region', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n                        this.update = function () {\n                        };\n                        console.warn('Unable to add shift_region dashboard component: plot state does not have region bounds');\n                        return;\n                    }\n                    if (isNaN(layout.step) || layout.step === 0) {\n                        layout.step = 50000;\n                    }\n                    if (typeof layout.button_html !== 'string') {\n                        layout.button_html = layout.step > 0 ? '>' : '<';\n                    }\n                    if (typeof layout.button_title !== 'string') {\n                        layout.button_title = 'Shift region by ' + (layout.step > 0 ? '+' : '-') + LocusZoom.positionIntToString(Math.abs(layout.step), null, true);\n                    }\n                    this.update = function () {\n                        if (this.button) {\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title).setOnclick(function () {\n                            this.parent_plot.applyState({\n                                start: Math.max(this.parent_plot.state.start + layout.step, 1),\n                                end: this.parent_plot.state.end + layout.step\n                            });\n                        }.bind(this));\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @class LocusZoom.Dashboard.Components.zoom_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\n                LocusZoom.Dashboard.Components.add('zoom_region', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)) {\n                        this.update = function () {\n                        };\n                        console.warn('Unable to add zoom_region dashboard component: plot state does not have region bounds');\n                        return;\n                    }\n                    if (isNaN(layout.step) || layout.step === 0) {\n                        layout.step = 0.2;\n                    }\n                    if (typeof layout.button_html != 'string') {\n                        layout.button_html = layout.step > 0 ? 'z\\u2013' : 'z+';\n                    }\n                    if (typeof layout.button_title != 'string') {\n                        layout.button_title = 'Zoom region ' + (layout.step > 0 ? 'out' : 'in') + ' by ' + (Math.abs(layout.step) * 100).toFixed(1) + '%';\n                    }\n                    this.update = function () {\n                        if (this.button) {\n                            var can_zoom = true;\n                            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                            if (layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale) {\n                                can_zoom = false;\n                            }\n                            if (layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale) {\n                                can_zoom = false;\n                            }\n                            this.button.disable(!can_zoom);\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title).setOnclick(function () {\n                            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                            var zoom_factor = 1 + layout.step;\n                            var new_region_scale = current_region_scale * zoom_factor;\n                            if (!isNaN(this.parent_plot.layout.max_region_scale)) {\n                                new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                            }\n                            if (!isNaN(this.parent_plot.layout.min_region_scale)) {\n                                new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                            }\n                            var delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                            this.parent_plot.applyState({\n                                start: Math.max(this.parent_plot.state.start - delta, 1),\n                                end: this.parent_plot.state.end + delta\n                            });\n                        }.bind(this));\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @class LocusZoom.Dashboard.Components.menu\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\n                LocusZoom.Dashboard.Components.add('menu', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (this.button) {\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title);\n                        this.button.menu.setPopulate(function () {\n                            this.button.menu.inner_selector.html(layout.menu_html);\n                        }.bind(this));\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /**\n * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n *   objects and store them in the special `model.covariates` field of plot `state`.\n * @class LocusZoom.Dashboard.Components.covariates_model\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n */\n                LocusZoom.Dashboard.Components.add('covariates_model', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.initialize = function () {\n                        // Initialize state.model.covariates\n                        this.parent_plot.state.model = this.parent_plot.state.model || {};\n                        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n                        // Create an object at the plot level for easy access to interface methods in custom client-side JS\n                        /**\n         * When a covariates model dashboard element is present, create (one) object at the plot level that exposes\n         *   component data and state for custom interactions with other plot elements.\n         * @class LocusZoom.Plot.CovariatesModel\n         */\n                        this.parent_plot.CovariatesModel = {\n                            /** @member {LocusZoom.Dashboard.Component.Button} */\n                            button: this,\n                            /**\n             * Add an element to the model and show a representation of it in the dashboard component menu. If the\n             *   element is already part of the model, do nothing (to avoid adding duplicates).\n             * When plot state is changed, this will automatically trigger requests for new data accordingly.\n             * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n             *   to create a serialized representation of itself.\n             */\n                            add: function (element_reference) {\n                                var element = JSON.parse(JSON.stringify(element_reference));\n                                if (typeof element_reference == 'object' && typeof element.html != 'string') {\n                                    element.html = typeof element_reference.toHTML == 'function' ? element_reference.toHTML() : element_reference.toString();\n                                }\n                                // Check if the element is already in the model covariates array and return if it is.\n                                for (var i = 0; i < this.state.model.covariates.length; i++) {\n                                    if (JSON.stringify(this.state.model.covariates[i]) === JSON.stringify(element)) {\n                                        return this;\n                                    }\n                                }\n                                this.state.model.covariates.push(element);\n                                this.applyState();\n                                this.CovariatesModel.updateComponent();\n                                return this;\n                            }.bind(this.parent_plot),\n                            /**\n             * Remove an element from `state.model.covariates` (and from the dashboard component menu's\n             *  representation of the state model). When plot state is changed, this will automatically trigger\n             *  requests for new data accordingly.\n             * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n             */\n                            removeByIdx: function (idx) {\n                                if (typeof this.state.model.covariates[idx] == 'undefined') {\n                                    throw 'Unable to remove model covariate, invalid index: ' + idx.toString();\n                                }\n                                this.state.model.covariates.splice(idx, 1);\n                                this.applyState();\n                                this.CovariatesModel.updateComponent();\n                                return this;\n                            }.bind(this.parent_plot),\n                            /**\n             * Empty the `state.model.covariates` array (and dashboard component menu representation thereof) of all\n             *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n             */\n                            removeAll: function () {\n                                this.state.model.covariates = [];\n                                this.applyState();\n                                this.CovariatesModel.updateComponent();\n                                return this;\n                            }.bind(this.parent_plot),\n                            /**\n             * Manually trigger the update methods on the dashboard component's button and menu elements to force\n             *   display of most up-to-date content. Can be used to force the dashboard to reflect changes made, eg if\n             *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n             */\n                            updateComponent: function () {\n                                this.button.update();\n                                this.button.menu.update();\n                            }.bind(this)\n                        };\n                    }.bind(this);\n                    this.update = function () {\n                        if (this.button) {\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title).setOnclick(function () {\n                            this.button.menu.populate();\n                        }.bind(this));\n                        this.button.menu.setPopulate(function () {\n                            var selector = this.button.menu.inner_selector;\n                            selector.html('');\n                            // General model HTML representation\n                            if (typeof this.parent_plot.state.model.html != 'undefined') {\n                                selector.append('div').html(this.parent_plot.state.model.html);\n                            }\n                            // Model covariates table\n                            if (!this.parent_plot.state.model.covariates.length) {\n                                selector.append('i').html('no covariates in model');\n                            } else {\n                                selector.append('h5').html('Model Covariates (' + this.parent_plot.state.model.covariates.length + ')');\n                                var table = selector.append('table');\n                                this.parent_plot.state.model.covariates.forEach(function (covariate, idx) {\n                                    var html = typeof covariate == 'object' && typeof covariate.html == 'string' ? covariate.html : covariate.toString();\n                                    var row = table.append('tr');\n                                    row.append('td').append('button').attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color).style({ 'margin-left': '0em' }).on('click', function () {\n                                        this.parent_plot.CovariatesModel.removeByIdx(idx);\n                                    }.bind(this)).html('\\xD7');\n                                    row.append('td').html(html);\n                                }.bind(this));\n                                selector.append('button').attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color).style({ 'margin-left': '4px' }).html('\\xD7 Remove All Covariates').on('click', function () {\n                                    this.parent_plot.CovariatesModel.removeAll();\n                                }.bind(this));\n                            }\n                        }.bind(this));\n                        this.button.preUpdate = function () {\n                            var html = 'Model';\n                            if (this.parent_plot.state.model.covariates.length) {\n                                var cov = this.parent_plot.state.model.covariates.length > 1 ? 'covariates' : 'covariate';\n                                html += ' (' + this.parent_plot.state.model.covariates.length + ' ' + cov + ')';\n                            }\n                            this.button.setHtml(html).disable(false);\n                        }.bind(this);\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /**\n * Button to toggle split tracks\n * @class LocusZoom.Dashboard.Components.toggle_split_tracks\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('toggle_split_tracks', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    if (!layout.data_layer_id) {\n                        layout.data_layer_id = 'intervals';\n                    }\n                    if (!this.parent_panel.data_layers[layout.data_layer_id]) {\n                        throw 'Dashboard toggle split tracks component missing valid data layer ID';\n                    }\n                    this.update = function () {\n                        var data_layer = this.parent_panel.data_layers[layout.data_layer_id];\n                        var html = data_layer.layout.split_tracks ? 'Merge Tracks' : 'Split Tracks';\n                        if (this.button) {\n                            this.button.setHtml(html);\n                            this.button.show();\n                            this.parent.position();\n                            return this;\n                        } else {\n                            this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml(html).setTitle('Toggle whether tracks are split apart or merged together').setOnclick(function () {\n                                data_layer.toggleSplitTracks();\n                                if (this.scale_timeout) {\n                                    clearTimeout(this.scale_timeout);\n                                }\n                                var timeout = data_layer.layout.transition ? +data_layer.layout.transition.duration || 0 : 0;\n                                this.scale_timeout = setTimeout(function () {\n                                    this.parent_panel.scaleHeightToData();\n                                    this.parent_plot.positionPanels();\n                                }.bind(this), timeout);\n                                this.update();\n                            }.bind(this));\n                            return this.update();\n                        }\n                    };\n                });\n                /**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @class LocusZoom.Dashboard.Components.resize_to_data\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('resize_to_data', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (this.button) {\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml('Resize to Data').setTitle('Automatically resize this panel to fit the data its currently showing').setOnclick(function () {\n                            this.parent_panel.scaleHeightToData();\n                            this.update();\n                        }.bind(this));\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /**\n * Button to toggle legend\n * @class LocusZoom.Dashboard.Components.toggle_legend\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('toggle_legend', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        var html = this.parent_panel.legend.layout.hidden ? 'Show Legend' : 'Hide Legend';\n                        if (this.button) {\n                            this.button.setHtml(html).show();\n                            this.parent.position();\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setTitle('Show or hide the legend for this panel').setOnclick(function () {\n                            this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                            this.parent_panel.legend.render();\n                            this.update();\n                        }.bind(this));\n                        return this.update();\n                    };\n                });\n                /**\n * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n * @class LocusZoom.Dashboard.Components.data_layers\n * @augments LocusZoom.Dashboard.Component\n */\n                LocusZoom.Dashboard.Components.add('data_layers', function (layout) {\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    this.update = function () {\n                        if (typeof layout.button_html != 'string') {\n                            layout.button_html = 'Data Layers';\n                        }\n                        if (typeof layout.button_title != 'string') {\n                            layout.button_title = 'Manipulate Data Layers (sort, dim, show/hide, etc.)';\n                        }\n                        if (this.button) {\n                            return this;\n                        }\n                        this.button = new LocusZoom.Dashboard.Component.Button(this).setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title).setOnclick(function () {\n                            this.button.menu.populate();\n                        }.bind(this));\n                        this.button.menu.setPopulate(function () {\n                            this.button.menu.inner_selector.html('');\n                            var table = this.button.menu.inner_selector.append('table');\n                            this.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function (id, idx) {\n                                var data_layer = this.parent_panel.data_layers[id];\n                                var name = typeof data_layer.layout.name != 'string' ? data_layer.id : data_layer.layout.name;\n                                var row = table.append('tr');\n                                // Layer name\n                                row.append('td').html(name);\n                                // Status toggle buttons\n                                layout.statuses.forEach(function (status_adj) {\n                                    var status_idx = LocusZoom.DataLayer.Statuses.adjectives.indexOf(status_adj);\n                                    var status_verb = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                                    var html, onclick, highlight;\n                                    if (data_layer.global_statuses[status_adj]) {\n                                        html = LocusZoom.DataLayer.Statuses.menu_antiverbs[status_idx];\n                                        onclick = 'un' + status_verb + 'AllElements';\n                                        highlight = '-highlighted';\n                                    } else {\n                                        html = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                                        onclick = status_verb + 'AllElements';\n                                        highlight = '';\n                                    }\n                                    row.append('td').append('a').attr('class', 'lz-dashboard-button lz-dashboard-button-' + this.layout.color + highlight).style({ 'margin-left': '0em' }).on('click', function () {\n                                        data_layer[onclick]();\n                                        this.button.menu.populate();\n                                    }.bind(this)).html(html);\n                                }.bind(this));\n                                // Sort layer buttons\n                                var at_top = idx === 0;\n                                var at_bottom = idx === this.parent_panel.data_layer_ids_by_z_index.length - 1;\n                                var td = row.append('td');\n                                td.append('a').attr('class', 'lz-dashboard-button lz-dashboard-button-group-start lz-dashboard-button-' + this.layout.color + (at_bottom ? '-disabled' : '')).style({ 'margin-left': '0em' }).on('click', function () {\n                                    data_layer.moveDown();\n                                    this.button.menu.populate();\n                                }.bind(this)).html('\\u25BE').attr('title', 'Move layer down (further back)');\n                                td.append('a').attr('class', 'lz-dashboard-button lz-dashboard-button-group-middle lz-dashboard-button-' + this.layout.color + (at_top ? '-disabled' : '')).style({ 'margin-left': '0em' }).on('click', function () {\n                                    data_layer.moveUp();\n                                    this.button.menu.populate();\n                                }.bind(this)).html('\\u25B4').attr('title', 'Move layer up (further front)');\n                                td.append('a').attr('class', 'lz-dashboard-button lz-dashboard-button-group-end lz-dashboard-button-red').style({ 'margin-left': '0em' }).on('click', function () {\n                                    if (confirm('Are you sure you want to remove the ' + name + ' layer? This cannot be undone!')) {\n                                        data_layer.parent.removeDataLayer(id);\n                                    }\n                                    return this.button.menu.populate();\n                                }.bind(this)).html('\\xD7').attr('title', 'Remove layer');\n                            }.bind(this));\n                            return this;\n                        }.bind(this));\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @class LocusZoom.Dashboard.Components.display_options\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\n                LocusZoom.Dashboard.Components.add('display_options', function (layout) {\n                    if (typeof layout.button_html != 'string') {\n                        layout.button_html = 'Display options';\n                    }\n                    if (typeof layout.button_title != 'string') {\n                        layout.button_title = 'Control how plot items are displayed';\n                    }\n                    // Call parent constructor\n                    LocusZoom.Dashboard.Component.apply(this, arguments);\n                    // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n                    //  information (like plot height etc) while changing point rendering\n                    var allowed_fields = layout.fields_whitelist || [\n                        'color',\n                        'fill_opacity',\n                        'label',\n                        'legend',\n                        'point_shape',\n                        'point_size',\n                        'tooltip',\n                        'tooltip_positioning'\n                    ];\n                    var dataLayer = this.parent_panel.data_layers[layout.layer_name];\n                    var dataLayerLayout = dataLayer.layout;\n                    // Store default configuration for the layer as a clean deep copy, so we may revert later\n                    var defaultConfig = {};\n                    allowed_fields.forEach(function (name) {\n                        var configSlot = dataLayerLayout[name];\n                        if (configSlot) {\n                            defaultConfig[name] = JSON.parse(JSON.stringify(configSlot));\n                        }\n                    });\n                    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n                    this._selected_item = 'default';\n                    // Define the button + menu that provides the real functionality for this dashboard component\n                    var self = this;\n                    this.button = new LocusZoom.Dashboard.Component.Button(self).setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title).setOnclick(function () {\n                        self.button.menu.populate();\n                    });\n                    this.button.menu.setPopulate(function () {\n                        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n                        var uniqueID = Math.floor(Math.random() * 10000).toString();\n                        self.button.menu.inner_selector.html('');\n                        var table = self.button.menu.inner_selector.append('table');\n                        var menuLayout = self.layout;\n                        var renderRow = function (display_name, display_options, row_id) {\n                            // Helper method\n                            var row = table.append('tr');\n                            row.append('td').append('input').attr({\n                                type: 'radio',\n                                name: 'color-picker-' + uniqueID,\n                                value: row_id\n                            }).property('checked', row_id === self._selected_item).on('click', function () {\n                                Object.keys(display_options).forEach(function (field_name) {\n                                    dataLayer.layout[field_name] = display_options[field_name];\n                                });\n                                self._selected_item = row_id;\n                                self.parent_panel.render();\n                                var legend = self.parent_panel.legend;\n                                if (legend && display_options.legend) {\n                                    // Update the legend only if necessary\n                                    legend.render();\n                                }\n                            });\n                            row.append('td').text(display_name);\n                        };\n                        // Render the \"display options\" menu: default and special custom options\n                        var defaultName = menuLayout.default_config_display_name || 'Default style';\n                        renderRow(defaultName, defaultConfig, 'default');\n                        menuLayout.options.forEach(function (item, index) {\n                            renderRow(item.display_name, item.display, index);\n                        });\n                        return self;\n                    });\n                    this.update = function () {\n                        this.button.show();\n                        return this;\n                    };\n                });\n                /* global LocusZoom */\n                'use strict';\n                /**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @class\n * @param {LocusZoom.Panel} parent\n*/\n                LocusZoom.Legend = function (parent) {\n                    if (!(parent instanceof LocusZoom.Panel)) {\n                        throw 'Unable to create legend, parent must be a locuszoom panel';\n                    }\n                    /** @member {LocusZoom.Panel} */\n                    this.parent = parent;\n                    /** @member {String} */\n                    this.id = this.parent.getBaseId() + '.legend';\n                    this.parent.layout.legend = LocusZoom.Layouts.merge(this.parent.layout.legend || {}, LocusZoom.Legend.DefaultLayout);\n                    /** @member {Object} */\n                    this.layout = this.parent.layout.legend;\n                    /** @member {d3.selection} */\n                    this.selector = null;\n                    /** @member {d3.selection} */\n                    this.background_rect = null;\n                    /** @member {d3.selection[]} */\n                    this.elements = [];\n                    /**\n     * SVG selector for the group containing all elements in the legend\n     * @protected\n     * @member {d3.selection|null}\n     */\n                    this.elements_group = null;\n                    /**\n     * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n     * @deprecated\n     * @protected\n     * @member {Boolean}\n     */\n                    this.hidden = false;\n                    // TODO Revisit constructor return value; see https://stackoverflow.com/a/3350364/1422268\n                    return this.render();\n                };\n                /**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\n                LocusZoom.Legend.DefaultLayout = {\n                    orientation: 'vertical',\n                    origin: {\n                        x: 0,\n                        y: 0\n                    },\n                    width: 10,\n                    height: 10,\n                    padding: 5,\n                    label_size: 12,\n                    hidden: false\n                };\n                /**\n * Render the legend in the parent panel\n */\n                LocusZoom.Legend.prototype.render = function () {\n                    // Get a legend group selector if not yet defined\n                    if (!this.selector) {\n                        this.selector = this.parent.svg.group.append('g').attr('id', this.parent.getBaseId() + '.legend').attr('class', 'lz-legend');\n                    }\n                    // Get a legend background rect selector if not yet defined\n                    if (!this.background_rect) {\n                        this.background_rect = this.selector.append('rect').attr('width', 100).attr('height', 100).attr('class', 'lz-legend-background');\n                    }\n                    // Get a legend elements group selector if not yet defined\n                    if (!this.elements_group) {\n                        this.elements_group = this.selector.append('g');\n                    }\n                    // Remove all elements from the document and re-render from scratch\n                    this.elements.forEach(function (element) {\n                        element.remove();\n                    });\n                    this.elements = [];\n                    // Gather all elements from data layers in order (top to bottom) and render them\n                    var padding = +this.layout.padding || 1;\n                    var x = padding;\n                    var y = padding;\n                    var line_height = 0;\n                    this.parent.data_layer_ids_by_z_index.slice().reverse().forEach(function (id) {\n                        if (Array.isArray(this.parent.data_layers[id].layout.legend)) {\n                            this.parent.data_layers[id].layout.legend.forEach(function (element) {\n                                var selector = this.elements_group.append('g').attr('transform', 'translate(' + x + ',' + y + ')');\n                                var label_size = +element.label_size || +this.layout.label_size || 12;\n                                var label_x = 0;\n                                var label_y = label_size / 2 + padding / 2;\n                                line_height = Math.max(line_height, label_size + padding);\n                                // Draw the legend element symbol (line, rect, shape, etc)\n                                if (element.shape === 'line') {\n                                    // Line symbol\n                                    var length = +element.length || 16;\n                                    var path_y = label_size / 4 + padding / 2;\n                                    selector.append('path').attr('class', element.class || '').attr('d', 'M0,' + path_y + 'L' + length + ',' + path_y).style(element.style || {});\n                                    label_x = length + padding;\n                                } else if (element.shape === 'rect') {\n                                    // Rect symbol\n                                    var width = +element.width || 16;\n                                    var height = +element.height || width;\n                                    selector.append('rect').attr('class', element.class || '').attr('width', width).attr('height', height).attr('fill', element.color || {}).style(element.style || {});\n                                    label_x = width + padding;\n                                    line_height = Math.max(line_height, height + padding);\n                                } else if (d3.svg.symbolTypes.indexOf(element.shape) !== -1) {\n                                    // Shape symbol (circle, diamond, etc.)\n                                    var size = +element.size || 40;\n                                    var radius = Math.ceil(Math.sqrt(size / Math.PI));\n                                    selector.append('path').attr('class', element.class || '').attr('d', d3.svg.symbol().size(size).type(element.shape)).attr('transform', 'translate(' + radius + ',' + (radius + padding / 2) + ')').attr('fill', element.color || {}).style(element.style || {});\n                                    label_x = 2 * radius + padding;\n                                    label_y = Math.max(2 * radius + padding / 2, label_y);\n                                    line_height = Math.max(line_height, 2 * radius + padding);\n                                }\n                                // Draw the legend element label\n                                selector.append('text').attr('text-anchor', 'left').attr('class', 'lz-label').attr('x', label_x).attr('y', label_y).style({ 'font-size': label_size }).text(element.label);\n                                // Position the legend element group based on legend layout orientation\n                                var bcr = selector.node().getBoundingClientRect();\n                                if (this.layout.orientation === 'vertical') {\n                                    y += bcr.height + padding;\n                                    line_height = 0;\n                                } else {\n                                    // Ensure this element does not exceed the panel width\n                                    // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                                    var right_x = this.layout.origin.x + x + bcr.width;\n                                    if (x > padding && right_x > this.parent.layout.width) {\n                                        y += line_height;\n                                        x = padding;\n                                        selector.attr('transform', 'translate(' + x + ',' + y + ')');\n                                    }\n                                    x += bcr.width + 3 * padding;\n                                }\n                                // Store the element\n                                this.elements.push(selector);\n                            }.bind(this));\n                        }\n                    }.bind(this));\n                    // Scale the background rect to the elements in the legend\n                    var bcr = this.elements_group.node().getBoundingClientRect();\n                    this.layout.width = bcr.width + 2 * this.layout.padding;\n                    this.layout.height = bcr.height + 2 * this.layout.padding;\n                    this.background_rect.attr('width', this.layout.width).attr('height', this.layout.height);\n                    // Set the visibility on the legend from the \"hidden\" flag\n                    // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n                    this.selector.style({ visibility: this.layout.hidden ? 'hidden' : 'visible' });\n                    // TODO: Annotate return type and make consistent\n                    return this.position();\n                };\n                /**\n * Place the legend in position relative to the panel, as specified in the layout configuration\n * @returns {LocusZoom.Legend | null}\n * TODO: should this always be chainable?\n */\n                LocusZoom.Legend.prototype.position = function () {\n                    if (!this.selector) {\n                        return this;\n                    }\n                    var bcr = this.selector.node().getBoundingClientRect();\n                    if (!isNaN(+this.layout.pad_from_bottom)) {\n                        this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n                    }\n                    if (!isNaN(+this.layout.pad_from_right)) {\n                        this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n                    }\n                    this.selector.attr('transform', 'translate(' + this.layout.origin.x + ',' + this.layout.origin.y + ')');\n                };\n                /**\n * Hide the legend (triggers a re-render)\n * @public\n */\n                LocusZoom.Legend.prototype.hide = function () {\n                    this.layout.hidden = true;\n                    this.render();\n                };\n                /**\n * Show the legend (triggers a re-render)\n * @public\n */\n                LocusZoom.Legend.prototype.show = function () {\n                    this.layout.hidden = false;\n                    this.render();\n                };\n                /* global LocusZoom */\n                'use strict';\n                /**\n * LocusZoom functionality used for data parsing and retrieval\n * @namespace\n * @public\n */\n                LocusZoom.Data = LocusZoom.Data || {};\n                /**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * @public\n * @class\n */\n                LocusZoom.DataSources = function () {\n                    /** @member {Object.<string, LocusZoom.Data.Source>} */\n                    this.sources = {};\n                };\n                /** @deprecated */\n                LocusZoom.DataSources.prototype.addSource = function (ns, x) {\n                    console.warn('Warning: .addSource() is deprecated. Use .add() instead');\n                    return this.add(ns, x);\n                };\n                /**\n * Add a (namespaced) datasource to the plot\n * @public\n * @param {String} ns A namespace used for fields from this data source\n * @param {LocusZoom.Data.Source|Array|null} x An instantiated datasource, or an array of arguments that can be used to\n *   create a known datasource type.\n */\n                LocusZoom.DataSources.prototype.add = function (ns, x) {\n                    return this.set(ns, x);\n                };\n                /** @protected */\n                LocusZoom.DataSources.prototype.set = function (ns, x) {\n                    if (Array.isArray(x)) {\n                        // If passed array of source name and options, make the source\n                        var dsobj = LocusZoom.KnownDataSources.create.apply(null, x);\n                        // Each datasource in the chain should be aware of its assigned namespace\n                        dsobj.source_id = ns;\n                        this.sources[ns] = dsobj;\n                    } else {\n                        // If passed the already-created source object\n                        if (x !== null) {\n                            x.source_id = ns;\n                            this.sources[ns] = x;\n                        } else {\n                            delete this.sources[ns];\n                        }\n                    }\n                    return this;\n                };\n                /** @deprecated */\n                LocusZoom.DataSources.prototype.getSource = function (ns) {\n                    console.warn('Warning: .getSource() is deprecated. Use .get() instead');\n                    return this.get(ns);\n                };\n                /**\n * Return the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n * @returns {LocusZoom.Data.Source}\n */\n                LocusZoom.DataSources.prototype.get = function (ns) {\n                    return this.sources[ns];\n                };\n                /** @deprecated */\n                LocusZoom.DataSources.prototype.removeSource = function (ns) {\n                    console.warn('Warning: .removeSource() is deprecated. Use .remove() instead');\n                    return this.remove(ns);\n                };\n                /**\n * Remove the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n */\n                LocusZoom.DataSources.prototype.remove = function (ns) {\n                    return this.set(ns, null);\n                };\n                /**\n * Populate a list of datasources specified as a JSON object\n * @public\n * @param {String|Object} x An object or JSON representation containing {ns: configArray} entries\n * @returns {LocusZoom.DataSources}\n */\n                LocusZoom.DataSources.prototype.fromJSON = function (x) {\n                    if (typeof x === 'string') {\n                        x = JSON.parse(x);\n                    }\n                    var ds = this;\n                    Object.keys(x).forEach(function (ns) {\n                        ds.set(ns, x[ns]);\n                    });\n                    return ds;\n                };\n                /**\n * Return the names of all currently recognized datasources\n * @public\n * @returns {Array}\n */\n                LocusZoom.DataSources.prototype.keys = function () {\n                    return Object.keys(this.sources);\n                };\n                /**\n * Datasources can be instantiated from a JSON object instead of code. This represents existing sources in that format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n */\n                LocusZoom.DataSources.prototype.toJSON = function () {\n                    return this.sources;\n                };\n                /**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @public\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\n                LocusZoom.Data.Field = function (field) {\n                    var parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n                    /** @member {String} */\n                    this.full_name = field;\n                    /** @member {String} */\n                    this.namespace = parts[1] || null;\n                    /** @member {String} */\n                    this.name = parts[2] || null;\n                    /** @member {Array} */\n                    this.transformations = [];\n                    if (typeof parts[3] == 'string' && parts[3].length > 1) {\n                        this.transformations = parts[3].substring(1).split('|');\n                        this.transformations.forEach(function (transform, i) {\n                            this.transformations[i] = LocusZoom.TransformationFunctions.get(transform);\n                        }.bind(this));\n                    }\n                    this.applyTransformations = function (val) {\n                        this.transformations.forEach(function (transform) {\n                            val = transform(val);\n                        });\n                        return val;\n                    };\n                    // Resolve the field for a given data element.\n                    // First look for a full match with transformations already applied by the data requester.\n                    // Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n                    this.resolve = function (d) {\n                        if (typeof d[this.full_name] == 'undefined') {\n                            var val = null;\n                            if (typeof d[this.namespace + ':' + this.name] != 'undefined') {\n                                val = d[this.namespace + ':' + this.name];\n                            } else if (typeof d[this.name] != 'undefined') {\n                                val = d[this.name];\n                            }\n                            d[this.full_name] = this.applyTransformations(val);\n                        }\n                        return d[this.full_name];\n                    };\n                };\n                /**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {LocusZoom.DataSources} sources An object of {ns: LocusZoom.Data.Source} instances\n * @class\n */\n                LocusZoom.Data.Requester = function (sources) {\n                    function split_requests(fields) {\n                        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n                        //  to, and how to handle the returned data\n                        var requests = {};\n                        // Regular expression finds namespace:field|trans\n                        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n                        fields.forEach(function (raw) {\n                            var parts = re.exec(raw);\n                            var ns = parts[1] || 'base';\n                            var field = parts[2];\n                            var trans = LocusZoom.TransformationFunctions.get(parts[3]);\n                            if (typeof requests[ns] == 'undefined') {\n                                requests[ns] = {\n                                    outnames: [],\n                                    fields: [],\n                                    trans: []\n                                };\n                            }\n                            requests[ns].outnames.push(raw);\n                            requests[ns].fields.push(field);\n                            requests[ns].trans.push(trans);\n                        });\n                        return requests;\n                    }\n                    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n                    this.getData = function (state, fields) {\n                        var requests = split_requests(fields);\n                        // Create an array of functions that, when called, will trigger the request to the specified datasource\n                        var request_handles = Object.keys(requests).map(function (key) {\n                            if (!sources.get(key)) {\n                                throw 'Datasource for namespace ' + key + ' not found';\n                            }\n                            return sources.get(key).getData(state, requests[key].fields, requests[key].outnames, requests[key].trans);\n                        });\n                        //assume the fields are requested in dependent order\n                        //TODO: better manage dependencies\n                        var ret = Q.when({\n                            header: {},\n                            body: {},\n                            discrete: {}\n                        });\n                        for (var i = 0; i < request_handles.length; i++) {\n                            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n                            ret = ret.then(request_handles[i]);\n                        }\n                        return ret;\n                    };\n                };\n                /**\n * Base class for LocusZoom data sources\n * This can be extended with .extend() to create custom data sources\n * @class\n * @public\n */\n                LocusZoom.Data.Source = function () {\n                    /**\n     * Whether this source should enable caching\n     * @member {Boolean}\n     */\n                    this.enableCache = true;\n                    /**\n     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n     *  association data if no data was found for that region.\n     * @member {boolean}\n     */\n                    this.dependentSource = false;\n                };\n                /**\n * A default constructor that can be used when creating new data sources\n * @param {String|Object} init Basic configuration- either a url, or a config object\n * @param {String} [init.url] The datasource URL\n * @param {String} [init.params] Initial config params for the datasource\n */\n                LocusZoom.Data.Source.prototype.parseInit = function (init) {\n                    if (typeof init === 'string') {\n                        /** @member {String} */\n                        this.url = init;\n                        /** @member {String} */\n                        this.params = {};\n                    } else {\n                        this.url = init.url;\n                        this.params = init.params || {};\n                    }\n                    if (!this.url) {\n                        throw 'Source not initialized with required URL';\n                    }\n                };\n                /**\n * A unique identifier that indicates whether cached data is valid for this request\n * @protected\n * @param state\n * @param chain\n * @param fields\n * @returns {String|undefined}\n */\n                LocusZoom.Data.Source.prototype.getCacheKey = function (state, chain, fields) {\n                    return this.getURL && this.getURL(state, chain, fields);\n                };\n                /**\n * Stub: build the URL for any requests made by this source.\n */\n                LocusZoom.Data.Source.prototype.getURL = function (state, chain, fields) {\n                    return this.url;\n                };\n                /**\n * Perform a network request to fetch data for this source\n * @protected\n * @param {Object} state The state of the parent plot\n * @param chain\n * @param fields\n */\n                LocusZoom.Data.Source.prototype.fetchRequest = function (state, chain, fields) {\n                    var url = this.getURL(state, chain, fields);\n                    return LocusZoom.createCORSPromise('GET', url);\n                };\n                /**\n * Gets the data for just this source, typically via a network request (caching where possible)\n * @protected\n */\n                LocusZoom.Data.Source.prototype.getRequest = function (state, chain, fields) {\n                    var req;\n                    var cacheKey = this.getCacheKey(state, chain, fields);\n                    if (this.enableCache && typeof cacheKey !== 'undefined' && cacheKey === this._cachedKey) {\n                        req = Q.when(this._cachedResponse);\n                    } else {\n                        req = this.fetchRequest(state, chain, fields);\n                        if (this.enableCache) {\n                            req = req.then(function (x) {\n                                this._cachedKey = cacheKey;\n                                return this._cachedResponse = x;\n                            }.bind(this));\n                        }\n                    }\n                    return req;\n                };\n                /**\n * Fetch the data from the specified data source, and apply transformations requested by an external consumer.\n * This is the public-facing datasource method that will most commonly be called by external code.\n *\n * @public\n * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {function} A callable operation that can be used as part of the data chain\n */\n                LocusZoom.Data.Source.prototype.getData = function (state, fields, outnames, trans) {\n                    if (this.preGetData) {\n                        var pre = this.preGetData(state, fields, outnames, trans);\n                        if (this.pre) {\n                            state = pre.state || state;\n                            fields = pre.fields || fields;\n                            outnames = pre.outnames || outnames;\n                            trans = pre.trans || trans;\n                        }\n                    }\n                    var self = this;\n                    return function (chain) {\n                        if (self.dependentSource && chain && chain.body && !chain.body.length) {\n                            // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n                            // Therefore, it should simply return the previous data chain.\n                            return Q.when(chain);\n                        }\n                        return self.getRequest(state, chain, fields).then(function (resp) {\n                            return self.parseResponse(resp, chain, fields, outnames, trans);\n                        });\n                    };\n                };\n                /**\n * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n *\n * Does not apply namespacing, transformations, or field extraction.\n *\n * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other\n *  sources (eg, if the payload provides extra data rather than a series of records).\n *\n * @param {Object[]|Object} data The original parsed server response\n * @protected\n */\n                LocusZoom.Data.Source.prototype.normalizeResponse = function (data) {\n                    if (Array.isArray(data)) {\n                        // Already in the desired form\n                        return data;\n                    }\n                    // Otherwise, assume the server response is an object representing columns of data.\n                    // Each array should have the same length (verify), and a given array index corresponds to a single row.\n                    var keys = Object.keys(data);\n                    var N = data[keys[0]].length;\n                    var sameLength = keys.every(function (key) {\n                        var item = data[key];\n                        return item.length === N;\n                    });\n                    if (!sameLength) {\n                        throw this.constructor.SOURCE_NAME + ' expects a response in which all arrays of data are the same length';\n                    }\n                    // Go down the rows, and create an object for each record\n                    var records = [];\n                    var fields = Object.keys(data);\n                    for (var i = 0; i < N; i++) {\n                        var record = {};\n                        for (var j = 0; j < fields.length; j++) {\n                            record[fields[j]] = data[fields[j]][i];\n                        }\n                        records.push(record);\n                    }\n                    return records;\n                };\n                /** @deprecated */\n                LocusZoom.Data.Source.prototype.prepareData = function (records) {\n                    console.warn('Warning: .prepareData() is deprecated. Use .annotateData() instead');\n                    return this.annotateData(records);\n                };\n                /**\n * Hook to post-process the data returned by this source with new, additional behavior.\n *   (eg cleaning up API values or performing complex calculations on the returned data)\n *\n * @param {Object[]} records The parsed data from the source (eg standardized api response)\n * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n * @returns {Object[]|Promise} The modified set of records\n */\n                LocusZoom.Data.Source.prototype.annotateData = function (records, chain) {\n                    // Default behavior: no transformations\n                    return records;\n                };\n                /**\n * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n *   Apply per-field transformations as appropriate.\n *\n * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n *\n * @param {Object[]} data One record object per element\n * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n * @protected\n */\n                LocusZoom.Data.Source.prototype.extractFields = function (data, fields, outnames, trans) {\n                    //intended for an array of objects\n                    //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n                    // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n                    if (!Array.isArray(data)) {\n                        return data;\n                    }\n                    var fieldFound = [];\n                    for (var k = 0; k < fields.length; k++) {\n                        fieldFound[k] = 0;\n                    }\n                    var records = data.map(function (item) {\n                        var output_record = {};\n                        for (var j = 0; j < fields.length; j++) {\n                            var val = item[fields[j]];\n                            if (typeof val != 'undefined') {\n                                fieldFound[j] = 1;\n                            }\n                            if (trans && trans[j]) {\n                                val = trans[j](val);\n                            }\n                            output_record[outnames[j]] = val;\n                        }\n                        return output_record;\n                    });\n                    fieldFound.forEach(function (v, i) {\n                        if (!v) {\n                            throw 'field ' + fields[i] + ' not found in response for ' + outnames[i];\n                        }\n                    });\n                    return records;\n                };\n                /**\n * Combine records from this source with others in the chain to yield final chain body.\n *   Handles merging this data with other sources (if applicable).\n *\n * @param {Object[]} data The data That would be returned from this source alone\n * @param {Object} chain The data chain built up during previous requests\n * @param {String[]} fields\n * @param {String[]} outnames\n * @return {Promise|Object[]} The new chain body\n * @protected\n */\n                LocusZoom.Data.Source.prototype.combineChainBody = function (data, chain, fields, outnames) {\n                    return data;\n                };\n                /**\n * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n *\n * @public\n * @param {String|Object} resp The raw data associated with the response\n * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n *  including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {Promise|{header: ({}|*), discrete: {}, body: []}} A promise that resolves to an object containing\n *   request metadata (headers), the consolidated data for plotting (body), and the individual responses that would be\n *   returned by each source in the chain in isolation (discrete)\n */\n                LocusZoom.Data.Source.prototype.parseResponse = function (resp, chain, fields, outnames, trans) {\n                    var source_id = this.source_id || this.constructor.SOURCE_NAME;\n                    if (!chain.discrete) {\n                        chain.discrete = {};\n                    }\n                    if (!resp) {\n                        // FIXME: Hack. Certain browser issues (such as mixed content warnings) are reported as a successful promise\n                        //  resolution, even though the request was aborted. This is difficult to reliably detect, and is most likely\n                        // to occur for annotation sources (such as from ExAC). If empty response is received, skip parsing and log.\n                        // FIXME: Throw an error after pending, eg https://github.com/konradjk/exac_browser/issues/345\n                        console.error('No usable response was returned for source: \\'' + source_id + '\\'. Parsing will be skipped.');\n                        return Q.when(chain);\n                    }\n                    var json = typeof resp == 'string' ? JSON.parse(resp) : resp;\n                    var self = this;\n                    // Perform the 4 steps of parsing the payload and return a combined chain object\n                    return Q.when(self.normalizeResponse(json.data || json)).then(function (standardized) {\n                        // Perform calculations on the data from just this source\n                        return Q.when(self.annotateData(standardized, chain));\n                    }).then(function (data) {\n                        return Q.when(self.extractFields(data, fields, outnames, trans));\n                    }).then(function (one_source_body) {\n                        // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n                        //   fields array into account). This is useful when we want to re-use the source output in many ways.\n                        chain.discrete[source_id] = one_source_body;\n                        return Q.when(self.combineChainBody(one_source_body, chain, fields, outnames));\n                    }).then(function (new_body) {\n                        return {\n                            header: chain.header || {},\n                            discrete: chain.discrete,\n                            body: new_body\n                        };\n                    });\n                };\n                /** @deprecated */\n                LocusZoom.Data.Source.prototype.parseArraysToObjects = function (data, fields, outnames, trans) {\n                    console.warn('Warning: .parseArraysToObjects() is no longer used. A stub is provided for legacy use');\n                    var standard = this.normalizeResponse(data);\n                    return this.extractFields(standard, fields, outnames, trans);\n                };\n                /** @deprecated */\n                LocusZoom.Data.Source.prototype.parseObjectsToObjects = function (data, fields, outnames, trans) {\n                    console.warn('Warning: .parseObjectsToObjects() is deprecated. Use .extractFields() instead');\n                    return this.extractFields(data, fields, outnames, trans);\n                };\n                /** @deprecated */\n                LocusZoom.Data.Source.prototype.parseData = function (data, fields, outnames, trans) {\n                    console.warn('Warning: .parseData() is no longer used. A stub is provided for legacy use');\n                    var standard = this.normalizeResponse(data);\n                    return this.extractFields(standard, fields, outnames, trans);\n                };\n                /**\n * Method to define new custom datasources based on a provided constructor. (does not allow registering any additional methods)\n * @public\n * @param {Function} constructorFun Constructor function that is used to create the specified class\n * @param {String} [uniqueName] The name by which the class should be listed in `KnownDataSources`\n * @param {String|Function} [base=LocusZoomData.Source] The name or constructor of a base class to use\n * @returns {*|Function}\n */\n                LocusZoom.Data.Source.extend = function (constructorFun, uniqueName, base) {\n                    if (base) {\n                        if (Array.isArray(base)) {\n                            base = LocusZoom.KnownDataSources.create.apply(null, base);\n                        } else if (typeof base === 'string') {\n                            base = LocusZoom.KnownDataSources.get(base).prototype;\n                        } else if (typeof base === 'function') {\n                            base = base.prototype;\n                        }\n                    } else {\n                        base = new LocusZoom.Data.Source();\n                    }\n                    constructorFun = constructorFun || function () {\n                    };\n                    constructorFun.prototype = base;\n                    constructorFun.prototype.constructor = constructorFun;\n                    if (uniqueName) {\n                        /** @member {String} LocusZoom.Data.Source.SOURCENAME */\n                        constructorFun.SOURCE_NAME = uniqueName;\n                        LocusZoom.KnownDataSources.add(constructorFun);\n                    }\n                    return constructorFun;\n                };\n                /**\n * Datasources can be instantiated from a JSON object instead of code. This represents an existing source in that data format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n *\n * Custom sources with their own parameters may need to re-implement this method\n *\n * @public\n * @returns {Object}\n */\n                LocusZoom.Data.Source.prototype.toJSON = function () {\n                    return [\n                        Object.getPrototypeOf(this).constructor.SOURCE_NAME,\n                        {\n                            url: this.url,\n                            params: this.params\n                        }\n                    ];\n                };\n                /**\n * Data Source for Association Data, as fetched from the LocusZoom API server (or compatible)\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\n                LocusZoom.Data.AssociationSource = LocusZoom.Data.Source.extend(function (init) {\n                    this.parseInit(init);\n                }, 'AssociationLZ');\n                LocusZoom.Data.AssociationSource.prototype.preGetData = function (state, fields, outnames, trans) {\n                    var id_field = this.params.id_field || 'id';\n                    [\n                        id_field,\n                        'position'\n                    ].forEach(function (x) {\n                        if (fields.indexOf(x) === -1) {\n                            fields.unshift(x);\n                            outnames.unshift(x);\n                            trans.unshift(null);\n                        }\n                    });\n                    return {\n                        fields: fields,\n                        outnames: outnames,\n                        trans: trans\n                    };\n                };\n                LocusZoom.Data.AssociationSource.prototype.getURL = function (state, chain, fields) {\n                    var analysis = state.analysis || chain.header.analysis || this.params.analysis;\n                    if (typeof analysis == 'undefined') {\n                        throw 'Association source must specify an analysis ID to plot';\n                    }\n                    return this.url + 'results/?filter=analysis in ' + analysis + ' and chromosome in  \\'' + state.chr + '\\'' + ' and position ge ' + state.start + ' and position le ' + state.end;\n                };\n                LocusZoom.Data.AssociationSource.prototype.normalizeResponse = function (data) {\n                    // Some association sources do not sort their data in a predictable order, which makes it hard to reliably\n                    //  align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.\n                    // TODO: Consider more fine grained sorting control in the future\n                    data = LocusZoom.Data.Source.prototype.normalizeResponse.call(this, data);\n                    if (this.params && this.params.sort && data.length && data[0]['position']) {\n                        data.sort(function (a, b) {\n                            return a['position'] - b['position'];\n                        });\n                    }\n                    return data;\n                };\n                /**\n * Data Source for LD Data, as fetched from the LocusZoom API server (or compatible)\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\n                LocusZoom.Data.LDSource = LocusZoom.Data.Source.extend(function (init) {\n                    this.parseInit(init);\n                    this.dependentSource = true;\n                }, 'LDLZ');\n                LocusZoom.Data.LDSource.prototype.preGetData = function (state, fields) {\n                    if (fields.length > 1) {\n                        if (fields.length !== 2 || fields.indexOf('isrefvar') === -1) {\n                            throw 'LD does not know how to get all fields: ' + fields.join(', ');\n                        }\n                    }\n                };\n                LocusZoom.Data.LDSource.prototype.findMergeFields = function (chain) {\n                    // since LD may be shared across sources with different namespaces\n                    // we use regex to find columns to join on rather than\n                    // requiring exact matches\n                    var exactMatch = function (arr) {\n                        return function () {\n                            var regexes = arguments;\n                            for (var i = 0; i < regexes.length; i++) {\n                                var regex = regexes[i];\n                                var m = arr.filter(function (x) {\n                                    return x.match(regex);\n                                });\n                                if (m.length) {\n                                    return m[0];\n                                }\n                            }\n                            return null;\n                        };\n                    };\n                    var dataFields = {\n                        id: this.params.id_field,\n                        position: this.params.position_field,\n                        pvalue: this.params.pvalue_field,\n                        _names_: null\n                    };\n                    if (chain && chain.body && chain.body.length > 0) {\n                        var names = Object.keys(chain.body[0]);\n                        var nameMatch = exactMatch(names);\n                        dataFields.id = dataFields.id || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n                        dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n                        dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n                        dataFields._names_ = names;\n                    }\n                    return dataFields;\n                };\n                LocusZoom.Data.LDSource.prototype.findRequestedFields = function (fields, outnames) {\n                    var obj = {};\n                    for (var i = 0; i < fields.length; i++) {\n                        if (fields[i] === 'isrefvar') {\n                            obj.isrefvarin = fields[i];\n                            obj.isrefvarout = outnames && outnames[i];\n                        } else {\n                            obj.ldin = fields[i];\n                            obj.ldout = outnames && outnames[i];\n                        }\n                    }\n                    return obj;\n                };\n                LocusZoom.Data.LDSource.prototype.normalizeResponse = function (data) {\n                    return data;\n                };\n                LocusZoom.Data.LDSource.prototype.getURL = function (state, chain, fields) {\n                    var findExtremeValue = function (x, pval, sign) {\n                        pval = pval || 'pvalue';\n                        sign = sign || 1;\n                        var extremeVal = x[0][pval], extremeIdx = 0;\n                        for (var i = 1; i < x.length; i++) {\n                            if (x[i][pval] * sign > extremeVal) {\n                                extremeVal = x[i][pval] * sign;\n                                extremeIdx = i;\n                            }\n                        }\n                        return extremeIdx;\n                    };\n                    var refSource = state.ldrefsource || chain.header.ldrefsource || 1;\n                    var reqFields = this.findRequestedFields(fields);\n                    var refVar = reqFields.ldin;\n                    if (refVar === 'state') {\n                        refVar = state.ldrefvar || chain.header.ldrefvar || 'best';\n                    }\n                    if (refVar === 'best') {\n                        if (!chain.body) {\n                            throw 'No association data found to find best pvalue';\n                        }\n                        var keys = this.findMergeFields(chain);\n                        if (!keys.pvalue || !keys.id) {\n                            var columns = '';\n                            if (!keys.id) {\n                                columns += (columns.length ? ', ' : '') + 'id';\n                            }\n                            if (!keys.pvalue) {\n                                columns += (columns.length ? ', ' : '') + 'pvalue';\n                            }\n                            throw 'Unable to find necessary column(s) for merge: ' + columns + ' (available: ' + keys._names_ + ')';\n                        }\n                        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n                    }\n                    if (!chain.header) {\n                        chain.header = {};\n                    }\n                    chain.header.ldrefvar = refVar;\n                    return this.url + 'results/?filter=reference eq ' + refSource + ' and chromosome2 eq \\'' + state.chr + '\\'' + ' and position2 ge ' + state.start + ' and position2 le ' + state.end + ' and variant1 eq \\'' + refVar + '\\'' + '&fields=chr,pos,rsquare';\n                };\n                LocusZoom.Data.LDSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n                    var keys = this.findMergeFields(chain);\n                    var reqFields = this.findRequestedFields(fields, outnames);\n                    if (!keys.position) {\n                        throw 'Unable to find position field for merge: ' + keys._names_;\n                    }\n                    var leftJoin = function (left, right, lfield, rfield) {\n                        var i = 0, j = 0;\n                        while (i < left.length && j < right.position2.length) {\n                            if (left[i][keys.position] === right.position2[j]) {\n                                left[i][lfield] = right[rfield][j];\n                                i++;\n                                j++;\n                            } else if (left[i][keys.position] < right.position2[j]) {\n                                i++;\n                            } else {\n                                j++;\n                            }\n                        }\n                    };\n                    var tagRefVariant = function (data, refvar, idfield, outname) {\n                        for (var i = 0; i < data.length; i++) {\n                            if (data[i][idfield] && data[i][idfield] === refvar) {\n                                data[i][outname] = 1;\n                            } else {\n                                data[i][outname] = 0;\n                            }\n                        }\n                    };\n                    leftJoin(chain.body, data, reqFields.ldout, 'rsquare');\n                    if (reqFields.isrefvarin && chain.header.ldrefvar) {\n                        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout);\n                    }\n                    return chain.body;\n                };\n                /**\n * Data Source for Gene Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\n                LocusZoom.Data.GeneSource = LocusZoom.Data.Source.extend(function (init) {\n                    this.parseInit(init);\n                }, 'GeneLZ');\n                LocusZoom.Data.GeneSource.prototype.getURL = function (state, chain, fields) {\n                    var source = state.source || chain.header.source || this.params.source || 2;\n                    return this.url + '?filter=source in ' + source + ' and chrom eq \\'' + state.chr + '\\'' + ' and start le ' + state.end + ' and end ge ' + state.start;\n                };\n                // Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with the\n                // exact information returned by the API. (ignoring the fields array in the layout)\n                LocusZoom.Data.GeneSource.prototype.normalizeResponse = function (data) {\n                    return data;\n                };\n                LocusZoom.Data.GeneSource.prototype.extractFields = function (data, fields, outnames, trans) {\n                    return data;\n                };\n                /**\n * Data Source for Gene Constraint Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n*/\n                LocusZoom.Data.GeneConstraintSource = LocusZoom.Data.Source.extend(function (init) {\n                    this.parseInit(init);\n                }, 'GeneConstraintLZ');\n                LocusZoom.Data.GeneConstraintSource.prototype.getURL = function () {\n                    return this.url;\n                };\n                LocusZoom.Data.GeneConstraintSource.prototype.normalizeResponse = function (data) {\n                    return data;\n                };\n                LocusZoom.Data.GeneConstraintSource.prototype.getCacheKey = function (state, chain, fields) {\n                    return this.url + JSON.stringify(state);\n                };\n                LocusZoom.Data.GeneConstraintSource.prototype.fetchRequest = function (state, chain, fields) {\n                    var geneids = [];\n                    chain.body.forEach(function (gene) {\n                        var gene_id = gene.gene_id;\n                        if (gene_id.indexOf('.')) {\n                            gene_id = gene_id.substr(0, gene_id.indexOf('.'));\n                        }\n                        geneids.push(gene_id);\n                    });\n                    var url = this.getURL(state, chain, fields);\n                    var body = 'geneids=' + encodeURIComponent(JSON.stringify(geneids));\n                    var headers = { 'Content-Type': 'application/x-www-form-urlencoded' };\n                    return LocusZoom.createCORSPromise('POST', url, body, headers);\n                };\n                LocusZoom.Data.GeneConstraintSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n                    if (!data) {\n                        return chain;\n                    }\n                    var constraint_fields = [\n                        'bp',\n                        'exp_lof',\n                        'exp_mis',\n                        'exp_syn',\n                        'lof_z',\n                        'mis_z',\n                        'mu_lof',\n                        'mu_mis',\n                        'mu_syn',\n                        'n_exons',\n                        'n_lof',\n                        'n_mis',\n                        'n_syn',\n                        'pLI',\n                        'syn_z'\n                    ];\n                    chain.body.forEach(function (gene, i) {\n                        var gene_id = gene.gene_id;\n                        if (gene_id.indexOf('.')) {\n                            gene_id = gene_id.substr(0, gene_id.indexOf('.'));\n                        }\n                        constraint_fields.forEach(function (field) {\n                            // Do not overwrite any fields defined in the original gene source\n                            if (typeof chain.body[i][field] != 'undefined') {\n                                return;\n                            }\n                            if (data[gene_id]) {\n                                var val = data[gene_id][field];\n                                if (typeof val == 'number' && val.toString().indexOf('.') !== -1) {\n                                    val = parseFloat(val.toFixed(2));\n                                }\n                                chain.body[i][field] = val;\n                            } else {\n                                // If the gene did not come back in the response then set the same field with a null values\n                                chain.body[i][field] = null;\n                            }\n                        });\n                    });\n                    return chain.body;\n                };\n                /**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\n                LocusZoom.Data.RecombinationRateSource = LocusZoom.Data.Source.extend(function (init) {\n                    this.parseInit(init);\n                }, 'RecombLZ');\n                LocusZoom.Data.RecombinationRateSource.prototype.getURL = function (state, chain, fields) {\n                    var source = state.recombsource || chain.header.recombsource || this.params.source || 15;\n                    return this.url + '?filter=id in ' + source + ' and chromosome eq \\'' + state.chr + '\\'' + ' and position le ' + state.end + ' and position ge ' + state.start;\n                };\n                /**\n * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\n                LocusZoom.Data.IntervalSource = LocusZoom.Data.Source.extend(function (init) {\n                    this.parseInit(init);\n                }, 'IntervalLZ');\n                LocusZoom.Data.IntervalSource.prototype.getURL = function (state, chain, fields) {\n                    var source = state.bedtracksource || chain.header.bedtracksource || this.params.source || 16;\n                    return this.url + '?filter=id in ' + source + ' and chromosome eq \\'' + state.chr + '\\'' + ' and start le ' + state.end + ' and end ge ' + state.start;\n                };\n                /**\n * Data Source for static blobs of JSON Data. This does not perform additional parsing, and therefore it is the\n * responsibility of the user to pass information in a format that can be read and understood by the chosen plot.\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\n                LocusZoom.Data.StaticSource = LocusZoom.Data.Source.extend(function (data) {\n                    /** @member {Object} */\n                    this._data = data;\n                }, 'StaticJSON');\n                LocusZoom.Data.StaticSource.prototype.getRequest = function (state, chain, fields) {\n                    return Q.fcall(function () {\n                        return this._data;\n                    }.bind(this));\n                };\n                LocusZoom.Data.StaticSource.prototype.toJSON = function () {\n                    return [\n                        Object.getPrototypeOf(this).constructor.SOURCE_NAME,\n                        this._data\n                    ];\n                };\n                /**\n * Data source for PheWAS data served from external JSON files\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {String[]} init.build This datasource expects to be provided the name of the genome build that will be used to\n *   provide pheWAS results for this position. Note positions may not translate between builds.\n */\n                LocusZoom.Data.PheWASSource = LocusZoom.Data.Source.extend(function (init) {\n                    this.parseInit(init);\n                }, 'PheWASLZ');\n                LocusZoom.Data.PheWASSource.prototype.getURL = function (state, chain, fields) {\n                    var build = this.params.build;\n                    if (!build || !Array.isArray(build) || !build.length) {\n                        throw [\n                            'Data source',\n                            this.constructor.SOURCE_NAME,\n                            'requires that you specify array of one or more desired genome build names'\n                        ].join(' ');\n                    }\n                    var url = [\n                        this.url,\n                        '?filter=variant eq \\'',\n                        encodeURIComponent(state.variant),\n                        '\\'&format=objects&',\n                        build.map(function (item) {\n                            return 'build=' + encodeURIComponent(item);\n                        }).join('&')\n                    ];\n                    return url.join('');\n                };\n                /**\n * Base class for \"connectors\"- this is meant to be subclassed, rather than used directly.\n *\n * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object} init Configuration for this source\n * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n *  assumptions about what namespaces a source is using.\n * @type {*|Function}\n */\n                LocusZoom.Data.ConnectorSource = LocusZoom.Data.Source.extend(function (init) {\n                    if (!init || !init.sources) {\n                        throw 'Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs';\n                    }\n                    /**\n     * Tells the connector how to find the data it relies on\n     *\n     * For example, a connector that applies burden test information to the genes layer might specify:\n     *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n     *\n     * @member {Object}\n     */\n                    this._source_name_mapping = init.sources;\n                    // Validate that this source has been told how to find the required information\n                    var specified_ids = Object.keys(init.sources);\n                    var self = this;\n                    this.REQUIRED_SOURCES.forEach(function (k) {\n                        if (specified_ids.indexOf(k) === -1) {\n                            throw 'Configuration for ' + self.constructor.SOURCE_NAME + ' must specify a source ID corresponding to ' + k;\n                        }\n                    });\n                    this.parseInit(init);\n                }, 'ConnectorSource');\n                /** @property {String[]} Specifies the sources that must be provided in the original config object */\n                LocusZoom.Data.ConnectorSource.prototype.REQUIRED_SOURCES = [];\n                LocusZoom.Data.ConnectorSource.prototype.parseInit = function (init) {\n                };\n                // Stub\n                LocusZoom.Data.ConnectorSource.prototype.getRequest = function (state, chain, fields) {\n                    // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n                    //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n                    var self = this;\n                    Object.keys(this._source_name_mapping).forEach(function (ns) {\n                        var chain_source_id = self._source_name_mapping[ns];\n                        if (chain.discrete && !chain.discrete[chain_source_id]) {\n                            throw self.constructor.SOURCE_NAME + ' cannot be used before loading required data for: ' + chain_source_id;\n                        }\n                    });\n                    return Q.when(chain.body || []);\n                };\n                LocusZoom.Data.ConnectorSource.prototype.parseResponse = function (data, chain, fields, outnames) {\n                    // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n                    //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n                    // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n                    // Typically connectors are called with `connector_name:all` in the fields array.\n                    return Q.when(this.combineChainBody(data, chain, fields, outnames)).then(function (new_body) {\n                        return {\n                            header: chain.header || {},\n                            discrete: chain.discrete || {},\n                            body: new_body\n                        };\n                    });\n                };\n                LocusZoom.Data.ConnectorSource.prototype.combineChainBody = function (records, chain) {\n                    // Stub method: specifies how to combine the data\n                    throw 'This method must be implemented in a subclass';\n                };\n                /* global LocusZoom */\n                'use strict';\n                /**\n * An independent LocusZoom object that renders a unique set of data and subpanels.\n * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n *\n * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n * to use the `LocusZoom.populate` helper method.\n *\n * @class\n * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n *   where the plot is rendered..\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n*/\n                LocusZoom.Plot = function (id, datasource, layout) {\n                    /** @member Boolean} */\n                    this.initialized = false;\n                    // TODO: This makes sense for all other locuszoom elements to have; determine whether this is interface boilerplate or something that can be removed\n                    this.parent_plot = this;\n                    /** @member {String} */\n                    this.id = id;\n                    /** @member {Element} */\n                    this.container = null;\n                    /**\n     * Selector for a node that will contain the plot. (set externally by populate methods)\n     * @member {d3.selection}\n     */\n                    this.svg = null;\n                    /** @member {Object.<String, Number>} */\n                    this.panels = {};\n                    /**\n     * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n     * @protected\n     * @member {String[]}\n     */\n                    this.panel_ids_by_y_index = [];\n                    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     */\n                    this.applyPanelYIndexesToPanelLayouts = function () {\n                        this.panel_ids_by_y_index.forEach(function (pid, idx) {\n                            this.panels[pid].layout.y_index = idx;\n                        }.bind(this));\n                    };\n                    /**\n     * Get the qualified ID pathname for the plot\n     * @returns {String}\n     */\n                    this.getBaseId = function () {\n                        return this.id;\n                    };\n                    /**\n     * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n     * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n     * @protected\n     * @member {Promise[]}\n     */\n                    this.remap_promises = [];\n                    if (typeof layout == 'undefined') {\n                        /**\n         * The layout is a serializable object used to describe the composition of the Plot\n         *   If no layout was passed, use the Standard Association Layout\n         *   Otherwise merge whatever was passed with the Default Layout\n         *   TODO: Review description; we *always* merge with default layout?\n         * @member {Object}\n         */\n                        this.layout = LocusZoom.Layouts.merge({}, LocusZoom.Layouts.get('plot', 'standard_association'));\n                    } else {\n                        this.layout = layout;\n                    }\n                    LocusZoom.Layouts.merge(this.layout, LocusZoom.Plot.DefaultLayout);\n                    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original plot state\n     * @member {Object}\n     */\n                    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n                    /**\n     * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n     *   with initial state/setup.\n     *\n     * Tracks state of the plot, eg start and end position\n     * @member {Object}\n     */\n                    this.state = this.layout.state;\n                    /** @member {LocusZoom.Data.Requester} */\n                    this.lzd = new LocusZoom.Data.Requester(datasource);\n                    /**\n     * Window.onresize listener (responsive layouts only)\n     * TODO: .on appears to return a selection, not a listener? Check logic here\n     * https://github.com/d3/d3-selection/blob/00b904b9bcec4dfaf154ae0bbc777b1fc1d7bc08/test/selection/on-test.js#L11\n     * @deprecated\n     * @member {d3.selection}\n     */\n                    this.window_onresize = null;\n                    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n                    this.event_hooks = {\n                        'layout_changed': [],\n                        'data_requested': [],\n                        'data_rendered': [],\n                        'element_clicked': [],\n                        'element_selection': [],\n                        'state_changed': []    // Only triggered when a state change causes rerender\n                    };\n                    /**\n     * @callback eventCallback\n     * @param {object} eventData A description of the event\n     * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n     *  triggered the event. Will be automatically filled in if not explicitly provided.\n     * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n     *   associated with a clicked plot element\n     */\n                    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: plot - A data element in any of the plot's data layers has been clicked.\n     *   - `element_selection` - context: plot - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n                    this.on = function (event, hook) {\n                        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n                            throw 'Unable to register event hook, invalid event: ' + event.toString();\n                        }\n                        if (typeof hook != 'function') {\n                            throw 'Unable to register event hook, invalid hook function passed';\n                        }\n                        this.event_hooks[event].push(hook);\n                        return hook;\n                    };\n                    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Plot}\n     */\n                    this.off = function (event, hook) {\n                        var theseHooks = this.event_hooks[event];\n                        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n                            throw 'Unable to remove event hook, invalid event: ' + event.toString();\n                        }\n                        if (hook === undefined) {\n                            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n                            //  cleanup operations (eg to prevent memory leaks)\n                            this.event_hooks[event] = [];\n                        } else {\n                            var hookMatch = theseHooks.indexOf(hook);\n                            if (hookMatch !== -1) {\n                                theseHooks.splice(hookMatch, 1);\n                            } else {\n                                throw 'The specified event listener is not registered and therefore cannot be removed';\n                            }\n                        }\n                        return this;\n                    };\n                    /**\n     * Handle running of event hooks when an event is emitted\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {LocusZoom.Plot}\n     */\n                    this.emit = function (event, eventData) {\n                        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n                        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n                        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n                            throw 'LocusZoom attempted to throw an invalid event: ' + event.toString();\n                        }\n                        var sourceID = this.getBaseId();\n                        var self = this;\n                        this.event_hooks[event].forEach(function (hookToRun) {\n                            var eventContext;\n                            if (eventData && eventData.sourceID) {\n                                // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n                                //  when re-emitting the event to plot-level listeners\n                                eventContext = eventData;\n                            } else {\n                                eventContext = {\n                                    sourceID: sourceID,\n                                    data: eventData || null\n                                };\n                            }\n                            // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n                            //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n                            //  override anything provided to `call` below.\n                            hookToRun.call(self, eventContext);\n                        });\n                        return this;\n                    };\n                    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the plot\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n                    this.getPageOrigin = function () {\n                        var bounding_client_rect = this.svg.node().getBoundingClientRect();\n                        var x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n                        var y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n                        var container = this.svg.node();\n                        while (container.parentNode !== null) {\n                            container = container.parentNode;\n                            if (container !== document && d3.select(container).style('position') !== 'static') {\n                                x_offset = -1 * container.getBoundingClientRect().left;\n                                y_offset = -1 * container.getBoundingClientRect().top;\n                                break;\n                            }\n                        }\n                        return {\n                            x: x_offset + bounding_client_rect.left,\n                            y: y_offset + bounding_client_rect.top,\n                            width: bounding_client_rect.width,\n                            height: bounding_client_rect.height\n                        };\n                    };\n                    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @returns {{top: number, left: number}}\n     */\n                    this.getContainerOffset = function () {\n                        var offset = {\n                            top: 0,\n                            left: 0\n                        };\n                        var container = this.container.offsetParent || null;\n                        while (container !== null) {\n                            offset.top += container.offsetTop;\n                            offset.left += container.offsetLeft;\n                            container = container.offsetParent || null;\n                        }\n                        return offset;\n                    };\n                    //\n                    /**\n     * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n     * TODO: Add/ document details of interaction structure as we expand\n     * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n     * @returns {LocusZoom.Plot}\n     */\n                    this.interaction = {};\n                    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n                    this.canInteract = function (panel_id) {\n                        panel_id = panel_id || null;\n                        if (panel_id) {\n                            return (typeof this.interaction.panel_id == 'undefined' || this.interaction.panel_id === panel_id) && !this.loading_data;\n                        } else {\n                            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n                        }\n                    };\n                    // Initialize the layout\n                    this.initializeLayout();\n                    // TODO: Possibly superfluous return from constructor\n                    return this;\n                };\n                /**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\n                LocusZoom.Plot.DefaultLayout = {\n                    state: {},\n                    width: 1,\n                    height: 1,\n                    min_width: 1,\n                    min_height: 1,\n                    responsive_resize: false,\n                    aspect_ratio: 1,\n                    panels: [],\n                    dashboard: { components: [] },\n                    panel_boundaries: true,\n                    mouse_guide: true\n                };\n                /**\n * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n * @param {('Height'|'Width')} dimension\n * @returns {number}\n */\n                LocusZoom.Plot.prototype.sumProportional = function (dimension) {\n                    if (dimension !== 'height' && dimension !== 'width') {\n                        throw 'Bad dimension value passed to LocusZoom.Plot.prototype.sumProportional';\n                    }\n                    var total = 0;\n                    for (var id in this.panels) {\n                        // Ensure every panel contributing to the sum has a non-zero proportional dimension\n                        if (!this.panels[id].layout['proportional_' + dimension]) {\n                            this.panels[id].layout['proportional_' + dimension] = 1 / Object.keys(this.panels).length;\n                        }\n                        total += this.panels[id].layout['proportional_' + dimension];\n                    }\n                    return total;\n                };\n                /**\n * Resize the plot to fit the bounding container\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.rescaleSVG = function () {\n                    var clientRect = this.svg.node().getBoundingClientRect();\n                    this.setDimensions(clientRect.width, clientRect.height);\n                    return this;\n                };\n                /**\n * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.initializeLayout = function () {\n                    // Sanity check layout values\n                    // TODO: Find a way to generally abstract this, maybe into an object that models allowed layout values?\n                    if (isNaN(this.layout.width) || this.layout.width <= 0) {\n                        throw 'Plot layout parameter `width` must be a positive number';\n                    }\n                    if (isNaN(this.layout.height) || this.layout.height <= 0) {\n                        throw 'Plot layout parameter `width` must be a positive number';\n                    }\n                    if (isNaN(this.layout.aspect_ratio) || this.layout.aspect_ratio <= 0) {\n                        throw 'Plot layout parameter `aspect_ratio` must be a positive number';\n                    }\n                    // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n                    if (this.layout.responsive_resize) {\n                        this.window_onresize = d3.select(window).on('resize.lz-' + this.id, function () {\n                            this.rescaleSVG();\n                        }.bind(this));\n                        // Forcing one additional setDimensions() call after the page is loaded clears up\n                        // any disagreements between the initial layout and the loaded responsive container's size\n                        d3.select(window).on('load.lz-' + this.id, function () {\n                            this.setDimensions();\n                        }.bind(this));\n                    }\n                    // Add panels\n                    this.layout.panels.forEach(function (panel_layout) {\n                        this.addPanel(panel_layout);\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n *\n * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n *   calculates the appropriate plot dimensions based on all panels.\n * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.setDimensions = function (width, height) {\n                    var id;\n                    // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n                    var min_width = parseFloat(this.layout.min_width) || 0;\n                    var min_height = parseFloat(this.layout.min_height) || 0;\n                    for (id in this.panels) {\n                        min_width = Math.max(min_width, this.panels[id].layout.min_width);\n                        if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0) {\n                            min_height = Math.max(min_height, this.panels[id].layout.min_height / this.panels[id].layout.proportional_height);\n                        }\n                    }\n                    this.layout.min_width = Math.max(min_width, 1);\n                    this.layout.min_height = Math.max(min_height, 1);\n                    d3.select(this.svg.node().parentNode).style({\n                        'min-width': this.layout.min_width + 'px',\n                        'min-height': this.layout.min_height + 'px'\n                    });\n                    // If width and height arguments were passed then adjust them against plot minimums if necessary.\n                    // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n                    if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n                        this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n                        this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n                        this.layout.aspect_ratio = this.layout.width / this.layout.height;\n                        // Override discrete values if resizing responsively\n                        if (this.layout.responsive_resize) {\n                            if (this.svg) {\n                                this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n                            }\n                            this.layout.height = this.layout.width / this.layout.aspect_ratio;\n                            if (this.layout.height < this.layout.min_height) {\n                                this.layout.height = this.layout.min_height;\n                                this.layout.width = this.layout.height * this.layout.aspect_ratio;\n                            }\n                        }\n                        // Resize/reposition panels to fit, update proportional origins if necessary\n                        var y_offset = 0;\n                        this.panel_ids_by_y_index.forEach(function (panel_id) {\n                            var panel_width = this.layout.width;\n                            var panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n                            this.panels[panel_id].setDimensions(panel_width, panel_height);\n                            this.panels[panel_id].setOrigin(0, y_offset);\n                            this.panels[panel_id].layout.proportional_origin.x = 0;\n                            this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n                            y_offset += panel_height;\n                            this.panels[panel_id].dashboard.update();\n                        }.bind(this));\n                    }    // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n                         // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n                    else if (Object.keys(this.panels).length) {\n                        this.layout.width = 0;\n                        this.layout.height = 0;\n                        for (id in this.panels) {\n                            this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n                            this.layout.height += this.panels[id].layout.height;\n                        }\n                        this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n                        this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n                    }\n                    // Keep aspect ratio in agreement with dimensions\n                    this.layout.aspect_ratio = this.layout.width / this.layout.height;\n                    // Apply layout width and height as discrete values or viewbox values\n                    if (this.svg !== null) {\n                        if (this.layout.responsive_resize) {\n                            this.svg.attr('viewBox', '0 0 ' + this.layout.width + ' ' + this.layout.height).attr('preserveAspectRatio', 'xMinYMin meet');\n                        } else {\n                            this.svg.attr('width', this.layout.width).attr('height', this.layout.height);\n                        }\n                    }\n                    // If the plot has been initialized then trigger some necessary render functions\n                    if (this.initialized) {\n                        this.panel_boundaries.position();\n                        this.dashboard.update();\n                        this.curtain.update();\n                        this.loader.update();\n                    }\n                    return this.emit('layout_changed');\n                };\n                /**\n * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n * @param {Object} layout\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Plot.prototype.addPanel = function (layout) {\n                    // Sanity checks\n                    if (typeof layout !== 'object') {\n                        throw 'Invalid panel layout passed to LocusZoom.Plot.prototype.addPanel()';\n                    }\n                    // Create the Panel and set its parent\n                    var panel = new LocusZoom.Panel(layout, this);\n                    // Store the Panel on the Plot\n                    this.panels[panel.id] = panel;\n                    // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n                    if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index) && this.panel_ids_by_y_index.length > 0) {\n                        // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n                        if (panel.layout.y_index < 0) {\n                            panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n                        }\n                        this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n                        this.applyPanelYIndexesToPanelLayouts();\n                    } else {\n                        var length = this.panel_ids_by_y_index.push(panel.id);\n                        this.panels[panel.id].layout.y_index = length - 1;\n                    }\n                    // Determine if this panel was already in the layout.panels array.\n                    // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n                    var layout_idx = null;\n                    this.layout.panels.forEach(function (panel_layout, idx) {\n                        if (panel_layout.id === panel.id) {\n                            layout_idx = idx;\n                        }\n                    });\n                    if (layout_idx === null) {\n                        layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n                    }\n                    this.panels[panel.id].layout_idx = layout_idx;\n                    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n                    if (this.initialized) {\n                        this.positionPanels();\n                        // Initialize and load data into the new panel\n                        this.panels[panel.id].initialize();\n                        this.panels[panel.id].reMap();\n                        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n                        // positioning. TODO: make this additional call unnecessary.\n                        this.setDimensions(this.layout.width, this.layout.height);\n                    }\n                    return this.panels[panel.id];\n                };\n                /**\n * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n *\n * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.clearPanelData = function (panelId, mode) {\n                    mode = mode || 'wipe';\n                    // TODO: Add unit tests for this method\n                    var panelsList;\n                    if (panelId) {\n                        panelsList = [panelId];\n                    } else {\n                        panelsList = Object.keys(this.panels);\n                    }\n                    var self = this;\n                    panelsList.forEach(function (pid) {\n                        self.panels[pid].data_layer_ids_by_z_index.forEach(function (dlid) {\n                            var layer = self.panels[pid].data_layers[dlid];\n                            layer.destroyAllTooltips();\n                            delete self.layout.state[pid + '.' + dlid];\n                            if (mode === 'reset') {\n                                layer.setDefaultState();\n                            }\n                        });\n                    });\n                    return this;\n                };\n                /**\n * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n * @param {String} id\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.removePanel = function (id) {\n                    if (!this.panels[id]) {\n                        throw 'Unable to remove panel, ID not found: ' + id;\n                    }\n                    // Hide all panel boundaries\n                    this.panel_boundaries.hide();\n                    // Destroy all tooltips and state vars for all data layers on the panel\n                    this.clearPanelData(id);\n                    // Remove all panel-level HTML overlay elements\n                    this.panels[id].loader.hide();\n                    this.panels[id].dashboard.destroy(true);\n                    this.panels[id].curtain.hide();\n                    // Remove the svg container for the panel if it exists\n                    if (this.panels[id].svg.container) {\n                        this.panels[id].svg.container.remove();\n                    }\n                    // Delete the panel and its presence in the plot layout and state\n                    this.layout.panels.splice(this.panels[id].layout_idx, 1);\n                    delete this.panels[id];\n                    delete this.layout.state[id];\n                    // Update layout_idx values for all remaining panels\n                    this.layout.panels.forEach(function (panel_layout, idx) {\n                        this.panels[panel_layout.id].layout_idx = idx;\n                    }.bind(this));\n                    // Remove the panel id from the y_index array\n                    this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n                    this.applyPanelYIndexesToPanelLayouts();\n                    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n                    if (this.initialized) {\n                        // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n                        this.layout.min_height = this._base_layout.min_height;\n                        this.layout.min_width = this._base_layout.min_width;\n                        this.positionPanels();\n                        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n                        // positioning. TODO: make this additional call unnecessary.\n                        this.setDimensions(this.layout.width, this.layout.height);\n                    }\n                    return this;\n                };\n                /**\n * Automatically position panels based on panel positioning rules and values.\n * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n *\n * TODO: This logic currently only supports dynamic positioning of panels to prevent overlap in a VERTICAL orientation.\n *      Some framework exists for positioning panels in horizontal orientations as well (width, proportional_width, origin.x, etc.)\n *      but the logic for keeping these user-definable values straight approaches the complexity of a 2D box-packing algorithm.\n *      That's complexity we don't need right now, and may not ever need, so it's on hiatus until a use case materializes.\n */\n                LocusZoom.Plot.prototype.positionPanels = function () {\n                    var id;\n                    // We want to enforce that all x-linked panels have consistent horizontal margins\n                    // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n                    // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n                    var x_linked_margins = {\n                        left: 0,\n                        right: 0\n                    };\n                    // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n                    // proportional heights for all panels with a null value from discretely set dimensions.\n                    // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n                    for (id in this.panels) {\n                        if (this.panels[id].layout.proportional_height === null) {\n                            this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n                        }\n                        if (this.panels[id].layout.proportional_width === null) {\n                            this.panels[id].layout.proportional_width = 1;\n                        }\n                        if (this.panels[id].layout.interaction.x_linked) {\n                            x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n                            x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n                        }\n                    }\n                    // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n                    var total_proportional_height = this.sumProportional('height');\n                    if (!total_proportional_height) {\n                        return this;\n                    }\n                    var proportional_adjustment = 1 / total_proportional_height;\n                    for (id in this.panels) {\n                        this.panels[id].layout.proportional_height *= proportional_adjustment;\n                    }\n                    // Update origins on all panels without changing plot-level dimensions yet\n                    // Also apply x-linked margins to x-linked panels, updating widths as needed\n                    var y_offset = 0;\n                    this.panel_ids_by_y_index.forEach(function (panel_id) {\n                        this.panels[panel_id].setOrigin(0, y_offset);\n                        this.panels[panel_id].layout.proportional_origin.x = 0;\n                        y_offset += this.panels[panel_id].layout.height;\n                        if (this.panels[panel_id].layout.interaction.x_linked) {\n                            var delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0) + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n                            this.panels[panel_id].layout.width += delta;\n                            this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n                            this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n                            this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n                        }\n                    }.bind(this));\n                    var calculated_plot_height = y_offset;\n                    this.panel_ids_by_y_index.forEach(function (panel_id) {\n                        this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n                    }.bind(this));\n                    // Update dimensions on the plot to accommodate repositioned panels\n                    this.setDimensions();\n                    // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n                    this.panel_ids_by_y_index.forEach(function (panel_id) {\n                        this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width, this.layout.height * this.panels[panel_id].layout.proportional_height);\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n *\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.initialize = function () {\n                    // Ensure proper responsive class is present on the containing node if called for\n                    if (this.layout.responsive_resize) {\n                        d3.select(this.container).classed('lz-container-responsive', true);\n                    }\n                    // Create an element/layer for containing mouse guides\n                    if (this.layout.mouse_guide) {\n                        var mouse_guide_svg = this.svg.append('g').attr('class', 'lz-mouse_guide').attr('id', this.id + '.mouse_guide');\n                        var mouse_guide_vertical_svg = mouse_guide_svg.append('rect').attr('class', 'lz-mouse_guide-vertical').attr('x', -1);\n                        var mouse_guide_horizontal_svg = mouse_guide_svg.append('rect').attr('class', 'lz-mouse_guide-horizontal').attr('y', -1);\n                        this.mouse_guide = {\n                            svg: mouse_guide_svg,\n                            vertical: mouse_guide_vertical_svg,\n                            horizontal: mouse_guide_horizontal_svg\n                        };\n                    }\n                    // Add curtain and loader prototpyes to the plot\n                    this.curtain = LocusZoom.generateCurtain.call(this);\n                    this.loader = LocusZoom.generateLoader.call(this);\n                    // Create the panel_boundaries object with show/position/hide methods\n                    this.panel_boundaries = {\n                        parent: this,\n                        hide_timeout: null,\n                        showing: false,\n                        dragging: false,\n                        selectors: [],\n                        corner_selector: null,\n                        show: function () {\n                            // Generate panel boundaries\n                            if (!this.showing && !this.parent.curtain.showing) {\n                                this.showing = true;\n                                // Loop through all panels to create a horizontal boundary for each\n                                this.parent.panel_ids_by_y_index.forEach(function (panel_id, panel_idx) {\n                                    var selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip').attr('class', 'lz-panel-boundary').attr('title', 'Resize panel');\n                                    selector.append('span');\n                                    var panel_resize_drag = d3.behavior.drag();\n                                    panel_resize_drag.on('dragstart', function () {\n                                        this.dragging = true;\n                                    }.bind(this));\n                                    panel_resize_drag.on('dragend', function () {\n                                        this.dragging = false;\n                                    }.bind(this));\n                                    panel_resize_drag.on('drag', function () {\n                                        // First set the dimensions on the panel we're resizing\n                                        var this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                                        var original_panel_height = this_panel.layout.height;\n                                        this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                                        var panel_height_change = this_panel.layout.height - original_panel_height;\n                                        var new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                                        // Next loop through all panels.\n                                        // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                                        // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                                        this.parent.panel_ids_by_y_index.forEach(function (loop_panel_id, loop_panel_idx) {\n                                            var loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                                            loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                                            if (loop_panel_idx > panel_idx) {\n                                                loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                                loop_panel.dashboard.position();\n                                            }\n                                        }.bind(this));\n                                        // Reset dimensions on the entire plot and reposition panel boundaries\n                                        this.parent.positionPanels();\n                                        this.position();\n                                    }.bind(this));\n                                    selector.call(panel_resize_drag);\n                                    this.parent.panel_boundaries.selectors.push(selector);\n                                }.bind(this));\n                                // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                                var corner_selector = d3.select(this.parent.svg.node().parentNode).insert('div', '.lz-data_layer-tooltip').attr('class', 'lz-panel-corner-boundary').attr('title', 'Resize plot');\n                                corner_selector.append('span').attr('class', 'lz-panel-corner-boundary-outer');\n                                corner_selector.append('span').attr('class', 'lz-panel-corner-boundary-inner');\n                                var corner_drag = d3.behavior.drag();\n                                corner_drag.on('dragstart', function () {\n                                    this.dragging = true;\n                                }.bind(this));\n                                corner_drag.on('dragend', function () {\n                                    this.dragging = false;\n                                }.bind(this));\n                                corner_drag.on('drag', function () {\n                                    this.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                                }.bind(this.parent));\n                                corner_selector.call(corner_drag);\n                                this.parent.panel_boundaries.corner_selector = corner_selector;\n                            }\n                            return this.position();\n                        },\n                        position: function () {\n                            if (!this.showing) {\n                                return this;\n                            }\n                            // Position panel boundaries\n                            var plot_page_origin = this.parent.getPageOrigin();\n                            this.selectors.forEach(function (selector, panel_idx) {\n                                var panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].getPageOrigin();\n                                var left = plot_page_origin.x;\n                                var top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                                var width = this.parent.layout.width - 1;\n                                selector.style({\n                                    top: top + 'px',\n                                    left: left + 'px',\n                                    width: width + 'px'\n                                });\n                                selector.select('span').style({ width: width + 'px' });\n                            }.bind(this));\n                            // Position corner selector\n                            var corner_padding = 10;\n                            var corner_size = 16;\n                            this.corner_selector.style({\n                                top: plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size + 'px',\n                                left: plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size + 'px'\n                            });\n                            return this;\n                        },\n                        hide: function () {\n                            if (!this.showing) {\n                                return this;\n                            }\n                            this.showing = false;\n                            // Remove panel boundaries\n                            this.selectors.forEach(function (selector) {\n                                selector.remove();\n                            });\n                            this.selectors = [];\n                            // Remove corner boundary\n                            this.corner_selector.remove();\n                            this.corner_selector = null;\n                            return this;\n                        }\n                    };\n                    // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n                    if (this.layout.panel_boundaries) {\n                        d3.select(this.svg.node().parentNode).on('mouseover.' + this.id + '.panel_boundaries', function () {\n                            clearTimeout(this.panel_boundaries.hide_timeout);\n                            this.panel_boundaries.show();\n                        }.bind(this));\n                        d3.select(this.svg.node().parentNode).on('mouseout.' + this.id + '.panel_boundaries', function () {\n                            this.panel_boundaries.hide_timeout = setTimeout(function () {\n                                this.panel_boundaries.hide();\n                            }.bind(this), 300);\n                        }.bind(this));\n                    }\n                    // Create the dashboard object and immediately show it\n                    this.dashboard = new LocusZoom.Dashboard(this).show();\n                    // Initialize all panels\n                    for (var id in this.panels) {\n                        this.panels[id].initialize();\n                    }\n                    // Define plot-level mouse events\n                    var namespace = '.' + this.id;\n                    if (this.layout.mouse_guide) {\n                        var mouseout_mouse_guide = function () {\n                            this.mouse_guide.vertical.attr('x', -1);\n                            this.mouse_guide.horizontal.attr('y', -1);\n                        }.bind(this);\n                        var mousemove_mouse_guide = function () {\n                            var coords = d3.mouse(this.svg.node());\n                            this.mouse_guide.vertical.attr('x', coords[0]);\n                            this.mouse_guide.horizontal.attr('y', coords[1]);\n                        }.bind(this);\n                        this.svg.on('mouseout' + namespace + '-mouse_guide', mouseout_mouse_guide).on('touchleave' + namespace + '-mouse_guide', mouseout_mouse_guide).on('mousemove' + namespace + '-mouse_guide', mousemove_mouse_guide);\n                    }\n                    var mouseup = function () {\n                        this.stopDrag();\n                    }.bind(this);\n                    var mousemove = function () {\n                        if (this.interaction.dragging) {\n                            var coords = d3.mouse(this.svg.node());\n                            if (d3.event) {\n                                d3.event.preventDefault();\n                            }\n                            this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n                            this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n                            this.panels[this.interaction.panel_id].render();\n                            this.interaction.linked_panel_ids.forEach(function (panel_id) {\n                                this.panels[panel_id].render();\n                            }.bind(this));\n                        }\n                    }.bind(this);\n                    this.svg.on('mouseup' + namespace, mouseup).on('touchend' + namespace, mouseup).on('mousemove' + namespace, mousemove).on('touchmove' + namespace, mousemove);\n                    // Add an extra namespaced mouseup handler to the containing body, if there is one\n                    // This helps to stop interaction events gracefully when dragging outside of the plot element\n                    if (!d3.select('body').empty()) {\n                        d3.select('body').on('mouseup' + namespace, mouseup).on('touchend' + namespace, mouseup);\n                    }\n                    this.initialized = true;\n                    // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n                    // positioning. TODO: make this additional call unnecessary.\n                    var client_rect = this.svg.node().getBoundingClientRect();\n                    var width = client_rect.width ? client_rect.width : this.layout.width;\n                    var height = client_rect.height ? client_rect.height : this.layout.height;\n                    this.setDimensions(width, height);\n                    return this;\n                };\n                /**\n * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n * @returns {Promise}\n */\n                LocusZoom.Plot.prototype.refresh = function () {\n                    return this.applyState();\n                };\n                /**\n * A user-defined callback function that can receive (and potentially act on) new plot data.\n * @callback externalDataCallback\n * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n *  a data layer making an equivalent request.\n */\n                /**\n * A user-defined callback function that can respond to errors received during a previous operation\n * @callback externalErrorCallback\n * @param err A representation of the error that occurred\n */\n                /**\n * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n *\n * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n *  using the same fields syntax and underlying methods as data layers.\n *\n * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n *  Different data sources should be prefixed by the source name.\n * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n *  new data is received by the plot.\n * @param {Object} [opts] Options\n * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n *  occurs during the data request or subsequent callback operations\n * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n *  uncombined record info\n *  @return {function} The newly created event listener, to allow for later cleanup/removal\n */\n                LocusZoom.Plot.prototype.subscribeToData = function (fields, success_callback, opts) {\n                    opts = opts || {};\n                    // Register an event listener that is notified whenever new data has been rendered\n                    var error_callback = opts.onerror || function (err) {\n                        console.log('An error occurred while acting on an external callback', err);\n                    };\n                    var self = this;\n                    var listener = function () {\n                        try {\n                            self.lzd.getData(self.state, fields).then(function (new_data) {\n                                success_callback(opts.discrete ? new_data.discrete : new_data.body);\n                            }).catch(error_callback);\n                        } catch (error) {\n                            // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n                            error_callback(error);\n                        }\n                    };\n                    this.on('data_rendered', listener);\n                    return listener;\n                };\n                /**\n * Update state values and trigger a pull for fresh data on all data sources for all data layers\n * @param state_changes\n * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n */\n                LocusZoom.Plot.prototype.applyState = function (state_changes) {\n                    state_changes = state_changes || {};\n                    if (typeof state_changes != 'object') {\n                        throw 'LocusZoom.applyState only accepts an object; ' + typeof state_changes + ' given';\n                    }\n                    // First make a copy of the current (old) state to work with\n                    var new_state = JSON.parse(JSON.stringify(this.state));\n                    // Apply changes by top-level property to the new state\n                    for (var property in state_changes) {\n                        new_state[property] = state_changes[property];\n                    }\n                    // Validate the new state (may do nothing, may do a lot, depends on how the user has things set up)\n                    new_state = LocusZoom.validateState(new_state, this.layout);\n                    // Apply new state to the actual state\n                    for (property in new_state) {\n                        this.state[property] = new_state[property];\n                    }\n                    // Generate requests for all panels given new state\n                    this.emit('data_requested');\n                    this.remap_promises = [];\n                    this.loading_data = true;\n                    for (var id in this.panels) {\n                        this.remap_promises.push(this.panels[id].reMap());\n                    }\n                    return Q.all(this.remap_promises).catch(function (error) {\n                        console.error(error);\n                        this.curtain.drop(error);\n                        this.loading_data = false;\n                    }.bind(this)).then(function () {\n                        // TODO: Check logic here; in some promise implementations, this would cause the error to be considered handled, and \"then\" would always fire. (may or may not be desired behavior)\n                        // Update dashboard / components\n                        this.dashboard.update();\n                        // Apply panel-level state values\n                        this.panel_ids_by_y_index.forEach(function (panel_id) {\n                            var panel = this.panels[panel_id];\n                            panel.dashboard.update();\n                            // Apply data-layer-level state values\n                            panel.data_layer_ids_by_z_index.forEach(function (data_layer_id) {\n                                var data_layer = this.data_layers[data_layer_id];\n                                var state_id = panel_id + '.' + data_layer_id;\n                                for (var property in this.state[state_id]) {\n                                    if (!this.state[state_id].hasOwnProperty(property)) {\n                                        continue;\n                                    }\n                                    if (Array.isArray(this.state[state_id][property])) {\n                                        this.state[state_id][property].forEach(function (element_id) {\n                                            try {\n                                                this.setElementStatus(property, this.getElementById(element_id), true);\n                                            } catch (e) {\n                                                console.error('Unable to apply state: ' + state_id + ', ' + property);\n                                            }\n                                        }.bind(data_layer));\n                                    }\n                                }\n                            }.bind(panel));\n                        }.bind(this));\n                        // Emit events\n                        this.emit('layout_changed');\n                        this.emit('data_rendered');\n                        this.emit('state_changed', state_changes);\n                        this.loading_data = false;\n                    }.bind(this));\n                };\n                /**\n * Register interactions along the specified axis, provided that the target panel allows interaction.\n *\n * @param {LocusZoom.Panel} panel\n * @param {('x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.startDrag = function (panel, method) {\n                    panel = panel || null;\n                    method = method || null;\n                    var axis = null;\n                    switch (method) {\n                    case 'background':\n                    case 'x_tick':\n                        axis = 'x';\n                        break;\n                    case 'y1_tick':\n                        axis = 'y1';\n                        break;\n                    case 'y2_tick':\n                        axis = 'y2';\n                        break;\n                    }\n                    if (!(panel instanceof LocusZoom.Panel) || !axis || !this.canInteract()) {\n                        return this.stopDrag();\n                    }\n                    var coords = d3.mouse(this.svg.node());\n                    this.interaction = {\n                        panel_id: panel.id,\n                        linked_panel_ids: panel.getLinkedPanelIds(axis),\n                        dragging: {\n                            method: method,\n                            start_x: coords[0],\n                            start_y: coords[1],\n                            dragged_x: 0,\n                            dragged_y: 0,\n                            axis: axis\n                        }\n                    };\n                    this.svg.style('cursor', 'all-scroll');\n                    return this;\n                };\n                /**\n * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n *   clear the event when complete\n * @returns {LocusZoom.Plot}\n */\n                LocusZoom.Plot.prototype.stopDrag = function () {\n                    if (!this.interaction.dragging) {\n                        return this;\n                    }\n                    if (typeof this.panels[this.interaction.panel_id] != 'object') {\n                        this.interaction = {};\n                        return this;\n                    }\n                    var panel = this.panels[this.interaction.panel_id];\n                    // Helper function to find the appropriate axis layouts on child data layers\n                    // Once found, apply the extent as floor/ceiling and remove all other directives\n                    // This forces all associated axes to conform to the extent generated by a drag action\n                    var overrideAxisLayout = function (axis, axis_number, extent) {\n                        panel.data_layer_ids_by_z_index.forEach(function (id) {\n                            if (panel.data_layers[id].layout[axis + '_axis'].axis === axis_number) {\n                                panel.data_layers[id].layout[axis + '_axis'].floor = extent[0];\n                                panel.data_layers[id].layout[axis + '_axis'].ceiling = extent[1];\n                                delete panel.data_layers[id].layout[axis + '_axis'].lower_buffer;\n                                delete panel.data_layers[id].layout[axis + '_axis'].upper_buffer;\n                                delete panel.data_layers[id].layout[axis + '_axis'].min_extent;\n                                delete panel.data_layers[id].layout[axis + '_axis'].ticks;\n                            }\n                        });\n                    };\n                    switch (this.interaction.dragging.method) {\n                    case 'background':\n                    case 'x_tick':\n                        if (this.interaction.dragging.dragged_x !== 0) {\n                            overrideAxisLayout('x', 1, panel.x_extent);\n                            this.applyState({\n                                start: panel.x_extent[0],\n                                end: panel.x_extent[1]\n                            });\n                        }\n                        break;\n                    case 'y1_tick':\n                    case 'y2_tick':\n                        if (this.interaction.dragging.dragged_y !== 0) {\n                            // TODO: Hardcoded assumption of only two possible axes with single-digit #s (switch/case)\n                            var y_axis_number = parseInt(this.interaction.dragging.method[1]);\n                            overrideAxisLayout('y', y_axis_number, panel['y' + y_axis_number + '_extent']);\n                        }\n                        break;\n                    }\n                    this.interaction = {};\n                    this.svg.style('cursor', null);\n                    return this;\n                };\n                /* global LocusZoom */\n                'use strict';\n                /**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n * @class\n * @param {Object} layout\n * @param {LocusZoom.Plot|null} parent\n*/\n                LocusZoom.Panel = function (layout, parent) {\n                    if (typeof layout !== 'object') {\n                        throw 'Unable to create panel, invalid layout';\n                    }\n                    /** @member {LocusZoom.Plot|null} */\n                    this.parent = parent || null;\n                    /** @member {LocusZoom.Plot|null} */\n                    this.parent_plot = parent;\n                    // Ensure a valid ID is present. If there is no valid ID then generate one\n                    if (typeof layout.id !== 'string' || !layout.id.length) {\n                        if (!this.parent) {\n                            layout.id = 'p' + Math.floor(Math.random() * Math.pow(10, 8));\n                        } else {\n                            var id = null;\n                            var generateID = function () {\n                                id = 'p' + Math.floor(Math.random() * Math.pow(10, 8));\n                                if (id == null || typeof this.parent.panels[id] != 'undefined') {\n                                    id = generateID();\n                                }\n                            }.bind(this);\n                            layout.id = id;\n                        }\n                    } else if (this.parent) {\n                        if (typeof this.parent.panels[layout.id] !== 'undefined') {\n                            throw 'Cannot create panel with id [' + layout.id + ']; panel with that id already exists';\n                        }\n                    }\n                    /** @member {String} */\n                    this.id = layout.id;\n                    /** @member {Boolean} */\n                    this.initialized = false;\n                    /**\n     * The index of this panel in the parent plot's `layout.panels`\n     * @member {number}\n     * */\n                    this.layout_idx = null;\n                    /** @member {Object} */\n                    this.svg = {};\n                    /**\n     * A JSON-serializable object used to describe the composition of the Panel\n     * @member {Object}\n     */\n                    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.Panel.DefaultLayout);\n                    // Define state parameters specific to this panel\n                    if (this.parent) {\n                        /** @member {Object} */\n                        this.state = this.parent.state;\n                        /** @member {String} */\n                        this.state_id = this.id;\n                        this.state[this.state_id] = this.state[this.state_id] || {};\n                    } else {\n                        this.state = null;\n                        this.state_id = null;\n                    }\n                    /** @member {Object} */\n                    this.data_layers = {};\n                    /** @member {String[]} */\n                    this.data_layer_ids_by_z_index = [];\n                    /** @protected */\n                    this.applyDataLayerZIndexesToDataLayerLayouts = function () {\n                        this.data_layer_ids_by_z_index.forEach(function (dlid, idx) {\n                            this.data_layers[dlid].layout.z_index = idx;\n                        }.bind(this));\n                    }.bind(this);\n                    /**\n     * Track data requests in progress\n     * @member {Promise[]}\n     *  @protected\n     */\n                    this.data_promises = [];\n                    /** @member {d3.scale} */\n                    this.x_scale = null;\n                    /** @member {d3.scale} */\n                    this.y1_scale = null;\n                    /** @member {d3.scale} */\n                    this.y2_scale = null;\n                    /** @member {d3.extent} */\n                    this.x_extent = null;\n                    /** @member {d3.extent} */\n                    this.y1_extent = null;\n                    /** @member {d3.extent} */\n                    this.y2_extent = null;\n                    /** @member {Number[]} */\n                    this.x_ticks = [];\n                    /** @member {Number[]} */\n                    this.y1_ticks = [];\n                    /** @member {Number[]} */\n                    this.y2_ticks = [];\n                    /**\n     * A timeout ID as returned by setTimeout\n     * @protected\n     * @member {number}\n     */\n                    this.zoom_timeout = null;\n                    /** @returns {string} */\n                    this.getBaseId = function () {\n                        return this.parent.id + '.' + this.id;\n                    };\n                    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n                    this.event_hooks = {\n                        'layout_changed': [],\n                        'data_requested': [],\n                        'data_rendered': [],\n                        'element_clicked': [],\n                        'element_selection': []\n                    };\n                    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: panel - A data element in any of the panel's data layers has been clicked.\n     *   - `element_selection` - context: panel - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of the event (as defined in `event_hooks`)\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n                    this.on = function (event, hook) {\n                        // TODO: Dry plot and panel event code into a shared mixin\n                        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n                            throw 'Unable to register event hook, invalid event: ' + event.toString();\n                        }\n                        if (typeof hook != 'function') {\n                            throw 'Unable to register event hook, invalid hook function passed';\n                        }\n                        this.event_hooks[event].push(hook);\n                        return hook;\n                    };\n                    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Panel}\n     */\n                    this.off = function (event, hook) {\n                        var theseHooks = this.event_hooks[event];\n                        if (typeof 'event' != 'string' || !Array.isArray(theseHooks)) {\n                            throw 'Unable to remove event hook, invalid event: ' + event.toString();\n                        }\n                        if (hook === undefined) {\n                            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n                            //  cleanup operations (eg to prevent memory leaks)\n                            this.event_hooks[event] = [];\n                        } else {\n                            var hookMatch = theseHooks.indexOf(hook);\n                            if (hookMatch !== -1) {\n                                theseHooks.splice(hookMatch, 1);\n                            } else {\n                                throw 'The specified event listener is not registered and therefore cannot be removed';\n                            }\n                        }\n                        return this;\n                    };\n                    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {LocusZoom.Panel}\n     */\n                    this.emit = function (event, eventData, bubble) {\n                        bubble = bubble || false;\n                        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n                        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n                        if (typeof 'event' != 'string' || !Array.isArray(this.event_hooks[event])) {\n                            throw 'LocusZoom attempted to throw an invalid event: ' + event.toString();\n                        }\n                        if (typeof eventData === 'boolean' && arguments.length === 2) {\n                            // Overloaded method signature: emit(event, bubble)\n                            bubble = eventData;\n                            eventData = null;\n                        }\n                        var sourceID = this.getBaseId();\n                        var self = this;\n                        var eventContext = {\n                            sourceID: sourceID,\n                            data: eventData || null\n                        };\n                        this.event_hooks[event].forEach(function (hookToRun) {\n                            // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n                            // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n                            hookToRun.call(self, eventContext);\n                        });\n                        if (bubble && this.parent) {\n                            this.parent.emit(event, eventContext);\n                        }\n                        return this;\n                    };\n                    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @returns {{x: Number, y: Number}}\n     */\n                    this.getPageOrigin = function () {\n                        var plot_origin = this.parent.getPageOrigin();\n                        return {\n                            x: plot_origin.x + this.layout.origin.x,\n                            y: plot_origin.y + this.layout.origin.y\n                        };\n                    };\n                    // Initialize the layout\n                    this.initializeLayout();\n                    return this;\n                };\n                /**\n * Default panel layout\n * @static\n * @type {Object}\n */\n                LocusZoom.Panel.DefaultLayout = {\n                    title: {\n                        text: '',\n                        style: {},\n                        x: 10,\n                        y: 22\n                    },\n                    y_index: null,\n                    width: 0,\n                    height: 0,\n                    origin: {\n                        x: 0,\n                        y: null\n                    },\n                    min_width: 1,\n                    min_height: 1,\n                    proportional_width: null,\n                    proportional_height: null,\n                    proportional_origin: {\n                        x: 0,\n                        y: null\n                    },\n                    margin: {\n                        top: 0,\n                        right: 0,\n                        bottom: 0,\n                        left: 0\n                    },\n                    background_click: 'clear_selections',\n                    dashboard: { components: [] },\n                    cliparea: {\n                        height: 0,\n                        width: 0,\n                        origin: {\n                            x: 0,\n                            y: 0\n                        }\n                    },\n                    axes: {\n                        // These are the only axes supported!!\n                        x: {},\n                        y1: {},\n                        y2: {}\n                    },\n                    legend: null,\n                    interaction: {\n                        drag_background_to_pan: false,\n                        drag_x_ticks_to_scale: false,\n                        drag_y1_ticks_to_scale: false,\n                        drag_y2_ticks_to_scale: false,\n                        scroll_to_zoom: false,\n                        x_linked: false,\n                        y1_linked: false,\n                        y2_linked: false\n                    },\n                    data_layers: []\n                };\n                /**\n * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n *   and preparing / positioning data layers as appropriate.\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.initializeLayout = function () {\n                    // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n                    // This will default the panel to taking up the full width of the plot.\n                    if (this.layout.width === 0 && this.layout.proportional_width === null) {\n                        this.layout.proportional_width = 1;\n                    }\n                    // If the layout is missing BOTH height and proportional height then set the proportional height to\n                    // an equal share of the plot's current height.\n                    if (this.layout.height === 0 && this.layout.proportional_height === null) {\n                        var panel_count = Object.keys(this.parent.panels).length;\n                        if (panel_count > 0) {\n                            this.layout.proportional_height = 1 / panel_count;\n                        } else {\n                            this.layout.proportional_height = 1;\n                        }\n                    }\n                    // Set panel dimensions, origin, and margin\n                    this.setDimensions();\n                    this.setOrigin();\n                    this.setMargin();\n                    // Set ranges\n                    // TODO: Define stub values in constructor\n                    this.x_range = [\n                        0,\n                        this.layout.cliparea.width\n                    ];\n                    this.y1_range = [\n                        this.layout.cliparea.height,\n                        0\n                    ];\n                    this.y2_range = [\n                        this.layout.cliparea.height,\n                        0\n                    ];\n                    // Initialize panel axes\n                    [\n                        'x',\n                        'y1',\n                        'y2'\n                    ].forEach(function (axis) {\n                        if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render === false) {\n                            // The default layout sets the axis to an empty object, so set its render boolean here\n                            this.layout.axes[axis].render = false;\n                        } else {\n                            this.layout.axes[axis].render = true;\n                            this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n                            this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n                        }\n                    }.bind(this));\n                    // Add data layers (which define x and y extents)\n                    this.layout.data_layers.forEach(function (data_layer_layout) {\n                        this.addDataLayer(data_layer_layout);\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n *\n * @public\n * @param {number} [width]\n * @param {number} [height]\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.setDimensions = function (width, height) {\n                    if (typeof width != 'undefined' && typeof height != 'undefined') {\n                        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0) {\n                            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n                            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n                        }\n                    } else {\n                        if (this.layout.proportional_width !== null) {\n                            this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n                        }\n                        if (this.layout.proportional_height !== null) {\n                            this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n                        }\n                    }\n                    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n                    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n                    if (this.svg.clipRect) {\n                        this.svg.clipRect.attr('width', this.layout.width).attr('height', this.layout.height);\n                    }\n                    if (this.initialized) {\n                        this.render();\n                        this.curtain.update();\n                        this.loader.update();\n                        this.dashboard.update();\n                        if (this.legend) {\n                            this.legend.position();\n                        }\n                    }\n                    return this;\n                };\n                /**\n * Set panel origin on the plot, and re-render as appropriate\n *\n * @public\n * @param {number} x\n * @param {number} y\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.setOrigin = function (x, y) {\n                    if (!isNaN(x) && x >= 0) {\n                        this.layout.origin.x = Math.max(Math.round(+x), 0);\n                    }\n                    if (!isNaN(y) && y >= 0) {\n                        this.layout.origin.y = Math.max(Math.round(+y), 0);\n                    }\n                    if (this.initialized) {\n                        this.render();\n                    }\n                    return this;\n                };\n                /**\n * Set margins around this panel\n * @public\n * @param {number} top\n * @param {number} right\n * @param {number} bottom\n * @param {number} left\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.setMargin = function (top, right, bottom, left) {\n                    var extra;\n                    if (!isNaN(top) && top >= 0) {\n                        this.layout.margin.top = Math.max(Math.round(+top), 0);\n                    }\n                    if (!isNaN(right) && right >= 0) {\n                        this.layout.margin.right = Math.max(Math.round(+right), 0);\n                    }\n                    if (!isNaN(bottom) && bottom >= 0) {\n                        this.layout.margin.bottom = Math.max(Math.round(+bottom), 0);\n                    }\n                    if (!isNaN(left) && left >= 0) {\n                        this.layout.margin.left = Math.max(Math.round(+left), 0);\n                    }\n                    if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height) {\n                        extra = Math.floor((this.layout.margin.top + this.layout.margin.bottom - this.layout.height) / 2);\n                        this.layout.margin.top -= extra;\n                        this.layout.margin.bottom -= extra;\n                    }\n                    if (this.layout.margin.left + this.layout.margin.right > this.layout.width) {\n                        extra = Math.floor((this.layout.margin.left + this.layout.margin.right - this.layout.width) / 2);\n                        this.layout.margin.left -= extra;\n                        this.layout.margin.right -= extra;\n                    }\n                    [\n                        'top',\n                        'right',\n                        'bottom',\n                        'left'\n                    ].forEach(function (m) {\n                        this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n                    }.bind(this));\n                    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n                    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n                    this.layout.cliparea.origin.x = this.layout.margin.left;\n                    this.layout.cliparea.origin.y = this.layout.margin.top;\n                    if (this.initialized) {\n                        this.render();\n                    }\n                    return this;\n                };\n                /**\n * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n *   string, the title DOM element will be set to display: none.\n *\n * @param {string|object|null} title The title text, or an object with additional configuration\n * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n    NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.setTitle = function (title) {\n                    if (typeof this.layout.title == 'string') {\n                        var text = this.layout.title;\n                        this.layout.title = {\n                            text: text,\n                            x: 0,\n                            y: 0,\n                            style: {}\n                        };\n                    }\n                    if (typeof title == 'string') {\n                        this.layout.title.text = title;\n                    } else if (typeof title == 'object' && title !== null) {\n                        this.layout.title = LocusZoom.Layouts.merge(title, this.layout.title);\n                    }\n                    if (this.layout.title.text.length) {\n                        this.title.attr('display', null).attr('x', parseFloat(this.layout.title.x)).attr('y', parseFloat(this.layout.title.y)).style(this.layout.title.style).text(this.layout.title.text);\n                    } else {\n                        this.title.attr('display', 'none');\n                    }\n                    return this;\n                };\n                /**\n * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n *   elements such as axes,  title, and loader/curtain.\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.initialize = function () {\n                    // Append a container group element to house the main panel group element and the clip path\n                    // Position with initial layout parameters\n                    this.svg.container = this.parent.svg.append('g').attr('id', this.getBaseId() + '.panel_container').attr('transform', 'translate(' + (this.layout.origin.x || 0) + ',' + (this.layout.origin.y || 0) + ')');\n                    // Append clip path to the parent svg element, size with initial layout parameters\n                    var clipPath = this.svg.container.append('clipPath').attr('id', this.getBaseId() + '.clip');\n                    this.svg.clipRect = clipPath.append('rect').attr('width', this.layout.width).attr('height', this.layout.height);\n                    // Append svg group for rendering all panel child elements, clipped by the clip path\n                    this.svg.group = this.svg.container.append('g').attr('id', this.getBaseId() + '.panel').attr('clip-path', 'url(#' + this.getBaseId() + '.clip)');\n                    // Add curtain and loader prototypes to the panel\n                    /** @member {Object} */\n                    this.curtain = LocusZoom.generateCurtain.call(this);\n                    /** @member {Object} */\n                    this.loader = LocusZoom.generateLoader.call(this);\n                    /**\n     * Create the dashboard object and hang components on it as defined by panel layout\n     * @member {LocusZoom.Dashboard}\n     */\n                    this.dashboard = new LocusZoom.Dashboard(this);\n                    // Inner border\n                    this.inner_border = this.svg.group.append('rect').attr('class', 'lz-panel-background').on('click', function () {\n                        if (this.layout.background_click === 'clear_selections') {\n                            this.clearSelections();\n                        }\n                    }.bind(this));\n                    // Add the title\n                    /** @member {Element} */\n                    this.title = this.svg.group.append('text').attr('class', 'lz-panel-title');\n                    if (typeof this.layout.title != 'undefined') {\n                        this.setTitle();\n                    }\n                    // Initialize Axes\n                    this.svg.x_axis = this.svg.group.append('g').attr('id', this.getBaseId() + '.x_axis').attr('class', 'lz-x lz-axis');\n                    if (this.layout.axes.x.render) {\n                        this.svg.x_axis_label = this.svg.x_axis.append('text').attr('class', 'lz-x lz-axis lz-label').attr('text-anchor', 'middle');\n                    }\n                    this.svg.y1_axis = this.svg.group.append('g').attr('id', this.getBaseId() + '.y1_axis').attr('class', 'lz-y lz-y1 lz-axis');\n                    if (this.layout.axes.y1.render) {\n                        this.svg.y1_axis_label = this.svg.y1_axis.append('text').attr('class', 'lz-y1 lz-axis lz-label').attr('text-anchor', 'middle');\n                    }\n                    this.svg.y2_axis = this.svg.group.append('g').attr('id', this.getBaseId() + '.y2_axis').attr('class', 'lz-y lz-y2 lz-axis');\n                    if (this.layout.axes.y2.render) {\n                        this.svg.y2_axis_label = this.svg.y2_axis.append('text').attr('class', 'lz-y2 lz-axis lz-label').attr('text-anchor', 'middle');\n                    }\n                    // Initialize child Data Layers\n                    this.data_layer_ids_by_z_index.forEach(function (id) {\n                        this.data_layers[id].initialize();\n                    }.bind(this));\n                    /**\n     * Legend object, as defined by panel layout and child data layer layouts\n     * @member {LocusZoom.Legend}\n     * */\n                    this.legend = null;\n                    if (this.layout.legend) {\n                        this.legend = new LocusZoom.Legend(this);\n                    }\n                    // Establish panel background drag interaction mousedown event handler (on the panel background)\n                    if (this.layout.interaction.drag_background_to_pan) {\n                        var namespace = '.' + this.parent.id + '.' + this.id + '.interaction.drag';\n                        var mousedown = function () {\n                            this.parent.startDrag(this, 'background');\n                        }.bind(this);\n                        this.svg.container.select('.lz-panel-background').on('mousedown' + namespace + '.background', mousedown).on('touchstart' + namespace + '.background', mousedown);\n                    }\n                    return this;\n                };\n                /**\n * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n */\n                LocusZoom.Panel.prototype.resortDataLayers = function () {\n                    var sort = [];\n                    this.data_layer_ids_by_z_index.forEach(function (id) {\n                        sort.push(this.data_layers[id].layout.z_index);\n                    }.bind(this));\n                    this.svg.group.selectAll('g.lz-data_layer-container').data(sort).sort(d3.ascending);\n                    this.applyDataLayerZIndexesToDataLayerLayouts();\n                };\n                /**\n * Get an array of panel IDs that are axis-linked to this panel\n * @param {('x'|'y1'|'y2')} axis\n * @returns {Array}\n */\n                LocusZoom.Panel.prototype.getLinkedPanelIds = function (axis) {\n                    axis = axis || null;\n                    var linked_panel_ids = [];\n                    if ([\n                            'x',\n                            'y1',\n                            'y2'\n                        ].indexOf(axis) === -1) {\n                        return linked_panel_ids;\n                    }\n                    if (!this.layout.interaction[axis + '_linked']) {\n                        return linked_panel_ids;\n                    }\n                    this.parent.panel_ids_by_y_index.forEach(function (panel_id) {\n                        if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[axis + '_linked']) {\n                            linked_panel_ids.push(panel_id);\n                        }\n                    }.bind(this));\n                    return linked_panel_ids;\n                };\n                /**\n * Move a panel up relative to others by y-index\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.moveUp = function () {\n                    if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]) {\n                        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n                        this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n                        this.parent.applyPanelYIndexesToPanelLayouts();\n                        this.parent.positionPanels();\n                    }\n                    return this;\n                };\n                /**\n * Move a panel down (y-axis) relative to others in the plot\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.moveDown = function () {\n                    if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]) {\n                        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n                        this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n                        this.parent.applyPanelYIndexesToPanelLayouts();\n                        this.parent.positionPanels();\n                    }\n                    return this;\n                };\n                /**\n * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n *   in the layout provided.\n * @param {object} layout\n * @returns {*}\n */\n                LocusZoom.Panel.prototype.addDataLayer = function (layout) {\n                    // Sanity checks\n                    if (typeof layout !== 'object' || typeof layout.id !== 'string' || !layout.id.length) {\n                        throw 'Invalid data layer layout passed to LocusZoom.Panel.prototype.addDataLayer()';\n                    }\n                    if (typeof this.data_layers[layout.id] !== 'undefined') {\n                        throw 'Cannot create data_layer with id [' + layout.id + ']; data layer with that id already exists in the panel';\n                    }\n                    if (typeof layout.type !== 'string') {\n                        throw 'Invalid data layer type in layout passed to LocusZoom.Panel.prototype.addDataLayer()';\n                    }\n                    // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n                    if (typeof layout.y_axis == 'object' && (typeof layout.y_axis.axis == 'undefined' || [\n                            1,\n                            2\n                        ].indexOf(layout.y_axis.axis) === -1)) {\n                        layout.y_axis.axis = 1;\n                    }\n                    // Create the Data Layer\n                    var data_layer = LocusZoom.DataLayers.get(layout.type, layout, this);\n                    // Store the Data Layer on the Panel\n                    this.data_layers[data_layer.id] = data_layer;\n                    // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n                    if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index) && this.data_layer_ids_by_z_index.length > 0) {\n                        // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n                        if (data_layer.layout.z_index < 0) {\n                            data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n                        }\n                        this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n                        this.data_layer_ids_by_z_index.forEach(function (dlid, idx) {\n                            this.data_layers[dlid].layout.z_index = idx;\n                        }.bind(this));\n                    } else {\n                        var length = this.data_layer_ids_by_z_index.push(data_layer.id);\n                        this.data_layers[data_layer.id].layout.z_index = length - 1;\n                    }\n                    // Determine if this data layer was already in the layout.data_layers array.\n                    // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n                    var layout_idx = null;\n                    this.layout.data_layers.forEach(function (data_layer_layout, idx) {\n                        if (data_layer_layout.id === data_layer.id) {\n                            layout_idx = idx;\n                        }\n                    });\n                    if (layout_idx === null) {\n                        layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n                    }\n                    this.data_layers[data_layer.id].layout_idx = layout_idx;\n                    return this.data_layers[data_layer.id];\n                };\n                /**\n * Remove a data layer by id\n * @param {string} id\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.removeDataLayer = function (id) {\n                    if (!this.data_layers[id]) {\n                        throw 'Unable to remove data layer, ID not found: ' + id;\n                    }\n                    // Destroy all tooltips for the data layer\n                    this.data_layers[id].destroyAllTooltips();\n                    // Remove the svg container for the data layer if it exists\n                    if (this.data_layers[id].svg.container) {\n                        this.data_layers[id].svg.container.remove();\n                    }\n                    // Delete the data layer and its presence in the panel layout and state\n                    this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n                    delete this.state[this.data_layers[id].state_id];\n                    delete this.data_layers[id];\n                    // Remove the data_layer id from the z_index array\n                    this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n                    // Update layout_idx and layout.z_index values for all remaining data_layers\n                    this.applyDataLayerZIndexesToDataLayerLayouts();\n                    this.layout.data_layers.forEach(function (data_layer_layout, idx) {\n                        this.data_layers[data_layer_layout.id].layout_idx = idx;\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * Clear all selections on all data layers\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.clearSelections = function () {\n                    this.data_layer_ids_by_z_index.forEach(function (id) {\n                        this.data_layers[id].setAllElementStatus('selected', false);\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n *   from the API as the viewing region changes\n * @returns {Promise}\n */\n                LocusZoom.Panel.prototype.reMap = function () {\n                    this.emit('data_requested');\n                    this.data_promises = [];\n                    // Remove any previous error messages before attempting to load new data\n                    this.curtain.hide();\n                    // Trigger reMap on each Data Layer\n                    for (var id in this.data_layers) {\n                        try {\n                            this.data_promises.push(this.data_layers[id].reMap());\n                        } catch (error) {\n                            console.warn(error);\n                            this.curtain.show(error);\n                        }\n                    }\n                    // When all finished trigger a render\n                    return Q.all(this.data_promises).then(function () {\n                        this.initialized = true;\n                        this.render();\n                        this.emit('layout_changed', true);\n                        this.emit('data_rendered');\n                    }.bind(this)).catch(function (error) {\n                        console.warn(error);\n                        this.curtain.show(error);\n                    }.bind(this));\n                };\n                /**\n * Iterate over data layers to generate panel axis extents\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.generateExtents = function () {\n                    // Reset extents\n                    [\n                        'x',\n                        'y1',\n                        'y2'\n                    ].forEach(function (axis) {\n                        this[axis + '_extent'] = null;\n                    }.bind(this));\n                    // Loop through the data layers\n                    for (var id in this.data_layers) {\n                        var data_layer = this.data_layers[id];\n                        // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n                        if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled) {\n                            this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent('x')));\n                        }\n                        // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n                        if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled) {\n                            var y_axis = 'y' + data_layer.layout.y_axis.axis;\n                            this[y_axis + '_extent'] = d3.extent((this[y_axis + '_extent'] || []).concat(data_layer.getAxisExtent('y')));\n                        }\n                    }\n                    // Override x_extent from state if explicitly defined to do so\n                    if (this.layout.axes.x && this.layout.axes.x.extent === 'state') {\n                        this.x_extent = [\n                            this.state.start,\n                            this.state.end\n                        ];\n                    }\n                    return this;\n                };\n                /**\n * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n *   1. An array of specific tick marks\n *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n *     object to override the layer's default presentation settings\n *   3. Generate generic tick marks based on the extent of the data\n * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n * @returns {Number[]|Object[]}  TODO: number format?\n *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\n                LocusZoom.Panel.prototype.generateTicks = function (axis) {\n                    // Parse an explicit 'ticks' attribute in the axis layout\n                    if (this.layout.axes[axis].ticks) {\n                        var layout = this.layout.axes[axis];\n                        var baseTickConfig = layout.ticks;\n                        if (Array.isArray(baseTickConfig)) {\n                            // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n                            return baseTickConfig;\n                        }\n                        if (typeof baseTickConfig === 'object') {\n                            // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n                            //   data layer to report the tick marks that it thinks it needs\n                            // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n                            var self = this;\n                            // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n                            var config = { position: baseTickConfig.position };\n                            var combinedTicks = this.data_layer_ids_by_z_index.reduce(function (acc, data_layer_id) {\n                                var nextLayer = self.data_layers[data_layer_id];\n                                return acc.concat(nextLayer.getTicks(axis, config));\n                            }, []);\n                            return combinedTicks.map(function (item) {\n                                // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                                var itemConfig = {};\n                                itemConfig = LocusZoom.Layouts.merge(itemConfig, baseTickConfig);\n                                return LocusZoom.Layouts.merge(itemConfig, item);\n                            });\n                        }\n                    }\n                    // If no other configuration is provided, attempt to generate ticks from the extent\n                    if (this[axis + '_extent']) {\n                        return LocusZoom.prettyTicks(this[axis + '_extent'], 'both');\n                    }\n                    return [];\n                };\n                /**\n * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n *   prepared the first time via `initialize`\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.render = function () {\n                    // Position the panel container\n                    this.svg.container.attr('transform', 'translate(' + this.layout.origin.x + ',' + this.layout.origin.y + ')');\n                    // Set size on the clip rect\n                    this.svg.clipRect.attr('width', this.layout.width).attr('height', this.layout.height);\n                    // Set and position the inner border, style if necessary\n                    this.inner_border.attr('x', this.layout.margin.left).attr('y', this.layout.margin.top).attr('width', this.layout.width - (this.layout.margin.left + this.layout.margin.right)).attr('height', this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n                    if (this.layout.inner_border) {\n                        this.inner_border.style({\n                            'stroke-width': 1,\n                            'stroke': this.layout.inner_border\n                        });\n                    }\n                    // Set/update panel title if necessary\n                    this.setTitle();\n                    // Regenerate all extents\n                    this.generateExtents();\n                    // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n                    // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n                    var constrain = function (value, limit_exponent) {\n                        var neg_min = Math.pow(-10, limit_exponent);\n                        var neg_max = Math.pow(-10, -limit_exponent);\n                        var pos_min = Math.pow(10, -limit_exponent);\n                        var pos_max = Math.pow(10, limit_exponent);\n                        if (value === Infinity) {\n                            value = pos_max;\n                        }\n                        if (value === -Infinity) {\n                            value = neg_min;\n                        }\n                        if (value === 0) {\n                            value = pos_min;\n                        }\n                        if (value > 0) {\n                            value = Math.max(Math.min(value, pos_max), pos_min);\n                        }\n                        if (value < 0) {\n                            value = Math.max(Math.min(value, neg_max), neg_min);\n                        }\n                        return value;\n                    };\n                    // Define default and shifted ranges for all axes\n                    var ranges = {};\n                    if (this.x_extent) {\n                        var base_x_range = {\n                            start: 0,\n                            end: this.layout.cliparea.width\n                        };\n                        if (this.layout.axes.x.range) {\n                            base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n                            base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n                        }\n                        ranges.x = [\n                            base_x_range.start,\n                            base_x_range.end\n                        ];\n                        ranges.x_shifted = [\n                            base_x_range.start,\n                            base_x_range.end\n                        ];\n                    }\n                    if (this.y1_extent) {\n                        var base_y1_range = {\n                            start: this.layout.cliparea.height,\n                            end: 0\n                        };\n                        if (this.layout.axes.y1.range) {\n                            base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n                            base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n                        }\n                        ranges.y1 = [\n                            base_y1_range.start,\n                            base_y1_range.end\n                        ];\n                        ranges.y1_shifted = [\n                            base_y1_range.start,\n                            base_y1_range.end\n                        ];\n                    }\n                    if (this.y2_extent) {\n                        var base_y2_range = {\n                            start: this.layout.cliparea.height,\n                            end: 0\n                        };\n                        if (this.layout.axes.y2.range) {\n                            base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n                            base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n                        }\n                        ranges.y2 = [\n                            base_y2_range.start,\n                            base_y2_range.end\n                        ];\n                        ranges.y2_shifted = [\n                            base_y2_range.start,\n                            base_y2_range.end\n                        ];\n                    }\n                    // Shift ranges based on any drag or zoom interactions currently underway\n                    if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.indexOf(this.id) !== -1)) {\n                        var anchor, scalar = null;\n                        if (this.parent.interaction.zooming && typeof this.x_scale == 'function') {\n                            var current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n                            var current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n                            var zoom_factor = this.parent.interaction.zooming.scale;\n                            var potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n                            if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)) {\n                                zoom_factor = 1 / (Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n                            } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)) {\n                                zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n                            }\n                            var new_extent_size = Math.floor(current_extent_size * zoom_factor);\n                            anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n                            var offset_ratio = anchor / this.layout.cliparea.width;\n                            var new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - (new_extent_size - current_scaled_extent_size) * offset_ratio), 1);\n                            ranges.x_shifted = [\n                                this.x_scale(new_x_extent_start),\n                                this.x_scale(new_x_extent_start + new_extent_size)\n                            ];\n                        } else if (this.parent.interaction.dragging) {\n                            switch (this.parent.interaction.dragging.method) {\n                            case 'background':\n                                ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                                ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                                break;\n                            case 'x_tick':\n                                if (d3.event && d3.event.shiftKey) {\n                                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                                } else {\n                                    anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                                    scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                                    ranges.x_shifted[0] = 0;\n                                    ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                                }\n                                break;\n                            case 'y1_tick':\n                            case 'y2_tick':\n                                var y_shifted = 'y' + this.parent.interaction.dragging.method[1] + '_shifted';\n                                if (d3.event && d3.event.shiftKey) {\n                                    ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                                    ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                                } else {\n                                    anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                                    scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                                    ranges[y_shifted][0] = this.layout.cliparea.height;\n                                    ranges[y_shifted][1] = this.layout.cliparea.height - this.layout.cliparea.height * (1 / scalar);\n                                }\n                            }\n                        }\n                    }\n                    // Generate scales and ticks for all axes, then render them\n                    [\n                        'x',\n                        'y1',\n                        'y2'\n                    ].forEach(function (axis) {\n                        if (!this[axis + '_extent']) {\n                            return;\n                        }\n                        // Base Scale\n                        this[axis + '_scale'] = d3.scale.linear().domain(this[axis + '_extent']).range(ranges[axis + '_shifted']);\n                        // Shift the extent\n                        this[axis + '_extent'] = [\n                            this[axis + '_scale'].invert(ranges[axis][0]),\n                            this[axis + '_scale'].invert(ranges[axis][1])\n                        ];\n                        // Finalize Scale\n                        this[axis + '_scale'] = d3.scale.linear().domain(this[axis + '_extent']).range(ranges[axis]);\n                        // Render axis (and generate ticks as needed)\n                        this.renderAxis(axis);\n                    }.bind(this));\n                    // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n                    if (this.layout.interaction.scroll_to_zoom) {\n                        var zoom_handler = function () {\n                            // Look for a shift key press while scrolling to execute.\n                            // If not present, gracefully raise a notification and allow conventional scrolling\n                            if (!d3.event.shiftKey) {\n                                if (this.parent.canInteract(this.id)) {\n                                    this.loader.show('Press <tt>[SHIFT]</tt> while scrolling to zoom').hide(1000);\n                                }\n                                return;\n                            }\n                            d3.event.preventDefault();\n                            if (!this.parent.canInteract(this.id)) {\n                                return;\n                            }\n                            var coords = d3.mouse(this.svg.container.node());\n                            var delta = Math.max(-1, Math.min(1, d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY));\n                            if (delta === 0) {\n                                return;\n                            }\n                            this.parent.interaction = {\n                                panel_id: this.id,\n                                linked_panel_ids: this.getLinkedPanelIds('x'),\n                                zooming: {\n                                    scale: delta < 1 ? 0.9 : 1.1,\n                                    center: coords[0]\n                                }\n                            };\n                            this.render();\n                            this.parent.interaction.linked_panel_ids.forEach(function (panel_id) {\n                                this.parent.panels[panel_id].render();\n                            }.bind(this));\n                            if (this.zoom_timeout !== null) {\n                                clearTimeout(this.zoom_timeout);\n                            }\n                            this.zoom_timeout = setTimeout(function () {\n                                this.parent.interaction = {};\n                                this.parent.applyState({\n                                    start: this.x_extent[0],\n                                    end: this.x_extent[1]\n                                });\n                            }.bind(this), 500);\n                        }.bind(this);\n                        this.zoom_listener = d3.behavior.zoom();\n                        this.svg.container.call(this.zoom_listener).on('wheel.zoom', zoom_handler).on('mousewheel.zoom', zoom_handler).on('DOMMouseScroll.zoom', zoom_handler);\n                    }\n                    // Render data layers in order by z-index\n                    this.data_layer_ids_by_z_index.forEach(function (data_layer_id) {\n                        this.data_layers[data_layer_id].draw().render();\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * Render ticks for a particular axis\n * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.renderAxis = function (axis) {\n                    if ([\n                            'x',\n                            'y1',\n                            'y2'\n                        ].indexOf(axis) === -1) {\n                        throw 'Unable to render axis; invalid axis identifier: ' + axis;\n                    }\n                    var canRender = this.layout.axes[axis].render && typeof this[axis + '_scale'] == 'function' && !isNaN(this[axis + '_scale'](0));\n                    // If the axis has already been rendered then check if we can/can't render it\n                    // Make sure the axis element is shown/hidden to suit\n                    if (this[axis + '_axis']) {\n                        this.svg.container.select('g.lz-axis.lz-' + axis).style('display', canRender ? null : 'none');\n                    }\n                    if (!canRender) {\n                        return this;\n                    }\n                    // Axis-specific values to plug in where needed\n                    var axis_params = {\n                        x: {\n                            position: 'translate(' + this.layout.margin.left + ',' + (this.layout.height - this.layout.margin.bottom) + ')',\n                            orientation: 'bottom',\n                            label_x: this.layout.cliparea.width / 2,\n                            label_y: this.layout.axes[axis].label_offset || 0,\n                            label_rotate: null\n                        },\n                        y1: {\n                            position: 'translate(' + this.layout.margin.left + ',' + this.layout.margin.top + ')',\n                            orientation: 'left',\n                            label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n                            label_y: this.layout.cliparea.height / 2,\n                            label_rotate: -90\n                        },\n                        y2: {\n                            position: 'translate(' + (this.layout.width - this.layout.margin.right) + ',' + this.layout.margin.top + ')',\n                            orientation: 'right',\n                            label_x: this.layout.axes[axis].label_offset || 0,\n                            label_y: this.layout.cliparea.height / 2,\n                            label_rotate: -90\n                        }\n                    };\n                    // Generate Ticks\n                    this[axis + '_ticks'] = this.generateTicks(axis);\n                    // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n                    var ticksAreAllNumbers = function (ticks) {\n                        for (var i = 0; i < ticks.length; i++) {\n                            if (isNaN(ticks[i])) {\n                                return false;\n                            }\n                        }\n                        return true;\n                    }(this[axis + '_ticks']);\n                    // Initialize the axis; set scale and orientation\n                    this[axis + '_axis'] = d3.svg.axis().scale(this[axis + '_scale']).orient(axis_params[axis].orientation).tickPadding(3);\n                    // Set tick values and format\n                    if (ticksAreAllNumbers) {\n                        this[axis + '_axis'].tickValues(this[axis + '_ticks']);\n                        if (this.layout.axes[axis].tick_format === 'region') {\n                            this[axis + '_axis'].tickFormat(function (d) {\n                                return LocusZoom.positionIntToString(d, 6);\n                            });\n                        }\n                    } else {\n                        var ticks = this[axis + '_ticks'].map(function (t) {\n                            return t[axis.substr(0, 1)];\n                        });\n                        this[axis + '_axis'].tickValues(ticks).tickFormat(function (t, i) {\n                            return this[axis + '_ticks'][i].text;\n                        }.bind(this));\n                    }\n                    // Position the axis in the SVG and apply the axis construct\n                    this.svg[axis + '_axis'].attr('transform', axis_params[axis].position).call(this[axis + '_axis']);\n                    // If necessary manually apply styles and transforms to ticks as specified by the layout\n                    if (!ticksAreAllNumbers) {\n                        var tick_selector = d3.selectAll('g#' + this.getBaseId().replace('.', '\\\\.') + '\\\\.' + axis + '_axis g.tick');\n                        var panel = this;\n                        tick_selector.each(function (d, i) {\n                            var selector = d3.select(this).select('text');\n                            if (panel[axis + '_ticks'][i].style) {\n                                selector.style(panel[axis + '_ticks'][i].style);\n                            }\n                            if (panel[axis + '_ticks'][i].transform) {\n                                selector.attr('transform', panel[axis + '_ticks'][i].transform);\n                            }\n                        });\n                    }\n                    // Render the axis label if necessary\n                    var label = this.layout.axes[axis].label || null;\n                    if (label !== null) {\n                        this.svg[axis + '_axis_label'].attr('x', axis_params[axis].label_x).attr('y', axis_params[axis].label_y).text(LocusZoom.parseFields(this.state, label));\n                        if (axis_params[axis].label_rotate !== null) {\n                            this.svg[axis + '_axis_label'].attr('transform', 'rotate(' + axis_params[axis].label_rotate + ' ' + axis_params[axis].label_x + ',' + axis_params[axis].label_y + ')');\n                        }\n                    }\n                    // Attach interactive handlers to ticks as needed\n                    [\n                        'x',\n                        'y1',\n                        'y2'\n                    ].forEach(function (axis) {\n                        if (this.layout.interaction['drag_' + axis + '_ticks_to_scale']) {\n                            var namespace = '.' + this.parent.id + '.' + this.id + '.interaction.drag';\n                            var tick_mouseover = function () {\n                                if (typeof d3.select(this).node().focus == 'function') {\n                                    d3.select(this).node().focus();\n                                }\n                                var cursor = axis === 'x' ? 'ew-resize' : 'ns-resize';\n                                if (d3.event && d3.event.shiftKey) {\n                                    cursor = 'move';\n                                }\n                                d3.select(this).style({\n                                    'font-weight': 'bold',\n                                    'cursor': cursor\n                                }).on('keydown' + namespace, tick_mouseover).on('keyup' + namespace, tick_mouseover);\n                            };\n                            this.svg.container.selectAll('.lz-axis.lz-' + axis + ' .tick text').attr('tabindex', 0)    // necessary to make the tick focusable so keypress events can be captured\n.on('mouseover' + namespace, tick_mouseover).on('mouseout' + namespace, function () {\n                                d3.select(this).style({ 'font-weight': 'normal' });\n                                d3.select(this).on('keydown' + namespace, null).on('keyup' + namespace, null);\n                            }).on('mousedown' + namespace, function () {\n                                this.parent.startDrag(this, axis + '_tick');\n                            }.bind(this));\n                        }\n                    }.bind(this));\n                    return this;\n                };\n                /**\n * Force the height of this panel to the largest absolute height of the data in\n *   all child data layers (if not null for any child data layers)\n * @param {number} [target_height] A target height, which will be used in situations when the expected height can be\n *   pre-calculated (eg when the layers are transitioning)\n */\n                LocusZoom.Panel.prototype.scaleHeightToData = function (target_height) {\n                    target_height = +target_height || null;\n                    if (target_height === null) {\n                        this.data_layer_ids_by_z_index.forEach(function (id) {\n                            var dh = this.data_layers[id].getAbsoluteDataHeight();\n                            if (+dh) {\n                                if (target_height === null) {\n                                    target_height = +dh;\n                                } else {\n                                    target_height = Math.max(target_height, +dh);\n                                }\n                            }\n                        }.bind(this));\n                    }\n                    if (+target_height) {\n                        target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n                        this.setDimensions(this.layout.width, target_height);\n                        this.parent.setDimensions();\n                        this.parent.panel_ids_by_y_index.forEach(function (id) {\n                            this.parent.panels[id].layout.proportional_height = null;\n                        }.bind(this));\n                        this.parent.positionPanels();\n                    }\n                };\n                /**\n * Methods to set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n */\n                LocusZoom.Panel.prototype.setElementStatusByFilters = function (status, toggle, filters, exclusive) {\n                    this.data_layer_ids_by_z_index.forEach(function (id) {\n                        this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n                    }.bind(this));\n                };\n                /**\n * Set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n */\n                LocusZoom.Panel.prototype.setAllElementStatus = function (status, toggle) {\n                    this.data_layer_ids_by_z_index.forEach(function (id) {\n                        this.data_layers[id].setAllElementStatus(status, toggle);\n                    }.bind(this));\n                };\n                // TODO: Capture documentation for dynamically generated methods\n                LocusZoom.DataLayer.Statuses.verbs.forEach(function (verb, idx) {\n                    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n                    var antiverb = 'un' + verb;\n                    // Set/unset status for arbitrarily many elements given a set of filters\n                    LocusZoom.Panel.prototype[verb + 'ElementsByFilters'] = function (filters, exclusive) {\n                        if (typeof exclusive == 'undefined') {\n                            exclusive = false;\n                        } else {\n                            exclusive = !!exclusive;\n                        }\n                        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n                    };\n                    LocusZoom.Panel.prototype[antiverb + 'ElementsByFilters'] = function (filters, exclusive) {\n                        if (typeof exclusive == 'undefined') {\n                            exclusive = false;\n                        } else {\n                            exclusive = !!exclusive;\n                        }\n                        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n                    };\n                    // Set/unset status for all elements\n                    LocusZoom.Panel.prototype[verb + 'AllElements'] = function () {\n                        this.setAllElementStatus(adjective, true);\n                        return this;\n                    };\n                    LocusZoom.Panel.prototype[antiverb + 'AllElements'] = function () {\n                        this.setAllElementStatus(adjective, false);\n                        return this;\n                    };\n                });\n                /**\n * Add a \"basic\" loader to a panel\n * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n *\n *\n * @param {Boolean} show_immediately\n * @returns {LocusZoom.Panel}\n */\n                LocusZoom.Panel.prototype.addBasicLoader = function (show_immediately) {\n                    if (typeof show_immediately != 'undefined') {\n                        show_immediately = true;\n                    }\n                    if (show_immediately) {\n                        this.loader.show('Loading...').animate();\n                    }\n                    this.on('data_requested', function () {\n                        this.loader.show('Loading...').animate();\n                    }.bind(this));\n                    this.on('data_rendered', function () {\n                        this.loader.hide();\n                    }.bind(this));\n                    return this;\n                };\n            } catch (plugin_loading_error) {\n                console.error('LocusZoom Plugin error: ' + plugin_loading_error);\n            }\n            return LocusZoom;\n        }));    //# sourceMappingURL=locuszoom.app.js.map\n    } catch (plugin_loading_error) {\n        console.error('LocusZoom Plugin error: ' + plugin_loading_error);\n    }\n    return LocusZoom;\n}));","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A Dashboard is an HTML element used for presenting arbitrary user interface components. Dashboards are anchored\n *   to either the entire Plot or to individual Panels.\n *\n * Each dashboard is an HTML-based (read: not SVG) collection of components used to display information or provide\n *   user interface. Dashboards can exist on entire plots, where their visibility is permanent and vertically adjacent\n *   to the plot, or on individual panels, where their visibility is tied to a behavior (e.g. a mouseover) and is as\n *   an overlay.\n * @class\n */\nLocusZoom.Dashboard = function(parent){\n    // parent must be a locuszoom plot or panel\n    if (!(parent instanceof LocusZoom.Plot) && !(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create dashboard, parent must be a locuszoom plot or panel\";\n    }\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".dashboard\";\n    /** @member {('plot'|'panel')} */\n    this.type = (this.parent instanceof LocusZoom.Plot) ? \"plot\" : \"panel\";\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = this.type === \"plot\" ? this.parent : this.parent.parent;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {LocusZoom.Dashboard.Component[]} */\n    this.components = [];\n    /**\n     * The timer identifier as returned by setTimeout\n     * @member {Number}\n     */\n    this.hide_timeout = null;\n    /**\n     * Whether to hide the dashboard. Can be overridden by a child component. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n\n    // TODO: Return value from constructor function?\n    return this.initialize();\n};\n\n/**\n * Prepare the dashboard for first use: generate all component instances for this dashboard, based on the provided\n *   layout of the parent. Connects event listeners and shows/hides as appropriate.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.initialize = function() {\n    // Parse layout to generate component instances\n    if (Array.isArray(this.parent.layout.dashboard.components)){\n        this.parent.layout.dashboard.components.forEach(function(layout){\n            try {\n                var component = LocusZoom.Dashboard.Components.get(layout.type, layout, this);\n                this.components.push(component);\n            } catch (e) {\n                console.warn(e);\n            }\n        }.bind(this));\n    }\n\n    // Add mouseover event handlers to show/hide panel dashboard\n    if (this.type === \"panel\"){\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseover.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            if (!this.selector || this.selector.style(\"visibility\") === \"hidden\"){ this.show(); }\n        }.bind(this));\n        d3.select(this.parent.parent.svg.node().parentNode).on(\"mouseout.\" + this.id, function(){\n            clearTimeout(this.hide_timeout);\n            this.hide_timeout = setTimeout(function(){ this.hide(); }.bind(this), 300);\n        }.bind(this));\n    }\n\n    return this;\n\n};\n\n/**\n * Whether to persist the dashboard. Returns true if at least one component should persist, or if the panel is engaged\n *   in an active drag event.\n * @returns {boolean}\n */\nLocusZoom.Dashboard.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    var persist = false;\n    // Persist if at least one component should also persist\n    this.components.forEach(function(component){\n        persist = persist || component.shouldPersist();\n    });\n    // Persist if in a parent drag event\n    persist = persist || (this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.dragging);\n    return !!persist;\n};\n\n/**\n * Make the dashboard appear. If it doesn't exist yet create it, including creating/positioning all components within,\n *   and make sure it is set to be visible.\n */\nLocusZoom.Dashboard.prototype.show = function(){\n    if (!this.selector){\n        switch (this.type){\n        case \"plot\":\n            this.selector = d3.select(this.parent.svg.node().parentNode)\n                .insert(\"div\",\":first-child\");\n            break;\n        case \"panel\":\n            this.selector = d3.select(this.parent.parent.svg.node().parentNode)\n                .insert(\"div\", \".lz-data_layer-tooltip, .lz-dashboard-menu, .lz-curtain\").classed(\"lz-panel-dashboard\", true);\n            break;\n        }\n        this.selector.classed(\"lz-dashboard\", true).classed(\"lz-\"+this.type+\"-dashboard\", true).attr(\"id\", this.id);\n    }\n    this.components.forEach(function(component){ component.show(); });\n    this.selector.style({ visibility: \"visible\" });\n    return this.update();\n};\n\n/**\n * Update the dashboard and rerender all child components. This can be called whenever plot state changes.\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.update = function(){\n    if (!this.selector){ return this; }\n    this.components.forEach(function(component){ component.update(); });\n    return this.position();\n};\n\n/**\n * Position the dashboard (and child components) within the panel\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.position = function(){\n    if (!this.selector){ return this; }\n    // Position the dashboard itself (panel only)\n    if (this.type === \"panel\"){\n        var page_origin = this.parent.getPageOrigin();\n        var top = (page_origin.y + 3.5).toString() + \"px\";\n        var left = page_origin.x.toString() + \"px\";\n        var width = (this.parent.layout.width - 4).toString() + \"px\";\n        this.selector.style({ position: \"absolute\", top: top, left: left, width: width });\n    }\n    // Recursively position components\n    this.components.forEach(function(component){ component.position(); });\n    return this;\n};\n\n/**\n * Hide the dashboard (make invisible but do not destroy). Will do nothing if `shouldPersist` returns true.\n *\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    this.components.forEach(function(component){ component.hide(); });\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n\n/**\n * Completely remove dashboard and all child components. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    this.components.forEach(function(component){ component.destroy(true); });\n    this.components = [];\n    this.selector.remove();\n    this.selector = null;\n    return this;\n};\n\n/**\n *\n * A dashboard component is an empty div rendered on a dashboard that can display custom\n * html of user interface elements. LocusZoom.Dashboard.Components is a singleton used to\n * define and manage an extendable collection of dashboard components.\n * (e.g. by LocusZoom.Dashboard.Components.add())\n * @class\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @param {('left'|'right')} [layout.position='left']  Whether to float the component left or right.\n * @param {('start'|'middle'|'end')} [layout.group_position] Buttons can optionally be gathered into a visually\n *  distinctive group whose elements are closer together. If a button is identified as the start or end of a group,\n *  it will be drawn with rounded corners and an extra margin of spacing from any button not part of the group.\n *  For example, the region_nav_plot dashboard is a defined as a group.\n * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple'} [layout.color='gray']  Color scheme for the\n *   component. Applies to buttons and menus.\n * @param {LocusZoom.Dashboard} parent The dashboard that contains this component\n*/\nLocusZoom.Dashboard.Component = function(layout, parent) {\n    /** @member {Object} */\n    this.layout = layout || {};\n    if (!this.layout.color){ this.layout.color = \"gray\"; }\n\n    /** @member {LocusZoom.Dashboard|*} */\n    this.parent = parent || null;\n    /**\n     * Some dashboards are attached to a panel, rather than directly to a plot\n     * @member {LocusZoom.Panel|null}\n     */\n    this.parent_panel = null;\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    /**\n     * This is a reference to either the panel or the plot, depending on what the dashboard is\n     *   tied to. Useful when absolutely positioning dashboard components relative to their SVG anchor.\n     * @member {LocusZoom.Plot|LocusZoom.Panel}\n     */\n    this.parent_svg = null;\n    if (this.parent instanceof LocusZoom.Dashboard){\n        // TODO: when is the immediate parent *not* a dashboard?\n        if (this.parent.type === \"panel\"){\n            this.parent_panel = this.parent.parent;\n            this.parent_plot = this.parent.parent.parent;\n            this.parent_svg = this.parent_panel;\n        } else {\n            this.parent_plot = this.parent.parent;\n            this.parent_svg = this.parent_plot;\n        }\n    }\n    /** @member {d3.selection} */\n    this.selector = null;\n    /**\n     * If this is an interactive component, it will contain a button or menu instance that handles the interactivity.\n     *   There is a 1-to-1 relationship of dashboard component to button\n     * @member {null|LocusZoom.Dashboard.Component.Button}\n     */\n    this.button  = null;\n    /**\n     * If any single component is marked persistent, it will bubble up to prevent automatic hide behavior on a\n     *   component's parent dashboard. Check via `shouldPersist`\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    if (!this.layout.position){ this.layout.position = \"left\"; }\n\n    // TODO: Return value in constructor\n    return this;\n};\n/**\n * Perform all rendering of component, including toggling visibility to true. Will initialize and create SVG element\n *   if necessary, as well as updating with new data and performing layout actions.\n */\nLocusZoom.Dashboard.Component.prototype.show = function(){\n    if (!this.parent || !this.parent.selector){ return; }\n    if (!this.selector){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.layout.group_position) !== -1 ? \" lz-dashboard-group-\" + this.layout.group_position : \"\");\n        this.selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-\" + this.layout.position + group_position);\n        if (this.layout.style){ this.selector.style(this.layout.style); }\n        if (typeof this.initialize == \"function\"){ this.initialize(); }\n    }\n    if (this.button && this.button.status === \"highlighted\"){ this.button.menu.show(); }\n    this.selector.style({ visibility: \"visible\" });\n    this.update();\n    return this.position();\n};\n/**\n * Update the dashboard component with any new data or plot state as appropriate. This method performs all\n *  necessary rendering steps.\n */\nLocusZoom.Dashboard.Component.prototype.update = function(){ /* stub */ };\n/**\n * Place the component correctly in the plot\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.position = function(){\n    if (this.button){ this.button.menu.position(); }\n    return this;\n};\n/**\n * Determine whether the component should persist (will bubble up to parent dashboard)\n * @returns {boolean}\n */\nLocusZoom.Dashboard.Component.prototype.shouldPersist = function(){\n    if (this.persist){ return true; }\n    if (this.button && this.button.persist){ return true; }\n    return false;\n};\n/**\n * Toggle visibility to hidden, unless marked as persistent\n * @returns {LocusZoom.Dashboard.Component}\n */\nLocusZoom.Dashboard.Component.prototype.hide = function(){\n    if (!this.selector || this.shouldPersist()){ return this; }\n    if (this.button){ this.button.menu.hide(); }\n    this.selector.style({ visibility: \"hidden\" });\n    return this;\n};\n/**\n * Completely remove component and button. (may be overridden by persistence settings)\n * @param {Boolean} [force=false] If true, will ignore persistence settings and always destroy the dashboard\n * @returns {LocusZoom.Dashboard}\n */\nLocusZoom.Dashboard.Component.prototype.destroy = function(force){\n    if (typeof force == \"undefined\"){ force = false; }\n    if (!this.selector){ return this; }\n    if (this.shouldPersist() && !force){ return this; }\n    if (this.button && this.button.menu){ this.button.menu.destroy(); }\n    this.selector.remove();\n    this.selector = null;\n    this.button = null;\n    return this;\n};\n\n/**\n * Singleton registry of all known components\n * @class\n * @static\n */\nLocusZoom.Dashboard.Components = (function() {\n    /** @lends LocusZoom.Dashboard.Components */\n    var obj = {};\n    var components = {};\n\n    /**\n     * Create a new component instance by name\n     * @param {String} name The string identifier of the desired component\n     * @param {Object} layout The layout to use to create the component\n     * @param {LocusZoom.Dashboard} parent The containing dashboard to use when creating the component\n     * @returns {LocusZoom.Dashboard.Component}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (components[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for dashboard component [\" + name + \"]\");\n            } else {\n                return new components[name](layout, parent);\n            }\n        } else {\n            throw(\"dashboard component [\" + name + \"] not found\");\n        }\n    };\n    /**\n     * Add a new component constructor to the registry and ensure that it extends the correct parent class\n     * @protected\n     * @param name\n     * @param component\n     */\n    obj.set = function(name, component) {\n        if (component) {\n            if (typeof component != \"function\"){\n                throw(\"unable to set dashboard component [\" + name + \"], argument provided is not a function\");\n            } else {\n                components[name] = component;\n                components[name].prototype = new LocusZoom.Dashboard.Component();\n            }\n        } else {\n            delete components[name];\n        }\n    };\n\n    /**\n     * Register a new component constructor by name\n     * @param {String} name\n     * @param {function} component The component constructor\n     */\n    obj.add = function(name, component) {\n        if (components[name]) {\n            throw(\"dashboard component already exists with name: \" + name);\n        } else {\n            obj.set(name, component);\n        }\n    };\n\n    /**\n     * List the names of all registered components\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(components);\n    };\n\n    return obj;\n})();\n\n/**\n * Plots and panels may have a \"dashboard\" element suited for showing HTML components that may be interactive.\n *   When components need to incorporate a generic button, or additionally a button that generates a menu, this\n *   class provides much of the necessary framework.\n * @class\n * @param {LocusZoom.Dashboard.Component} parent\n */\nLocusZoom.Dashboard.Component.Button = function(parent) {   \n    \n    if (!(parent instanceof LocusZoom.Dashboard.Component)){\n        throw \"Unable to create dashboard component button, invalid parent\";\n    }\n    /** @member {LocusZoom.Dashboard.Component} */\n    this.parent = parent;\n    /** @member {LocusZoom.Dashboard.Panel} */\n    this.parent_panel = this.parent.parent_panel;\n    /** @member {LocusZoom.Dashboard.Plot} */\n    this.parent_plot = this.parent.parent_plot;\n    /** @member {LocusZoom.Plot|LocusZoom.Panel} */\n    this.parent_svg = this.parent.parent_svg;\n\n    /** @member {LocusZoom.Dashboard|null|*} */\n    this.parent_dashboard = this.parent.parent;\n    /** @member {d3.selection} */\n    this.selector = null;\n\n    /**\n     * Tag to use for the button (default: a)\n     * @member {String}\n     */\n    this.tag = \"a\";\n\n    /**\n     * TODO This method does not appear to be used anywhere\n     * @param {String} tag\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTag = function(tag){\n        if (typeof tag != \"undefined\"){ this.tag = tag.toString(); }\n        return this;\n    };\n\n    /**\n     * HTML for the button to show.\n     * @protected\n     * @member {String}\n     */\n    this.html = \"\";\n    /**\n     * Specify the HTML content of this button.\n     * WARNING: The string provided will be inserted into the document as raw markup; XSS mitigation is the\n     *   responsibility of each button implementation.\n     * @param {String} html\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setHtml = function(html){\n        if (typeof html != \"undefined\"){ this.html = html.toString(); }\n        return this;\n    };\n    /**\n     * @deprecated since 0.5.6; use setHTML instead\n     */\n    this.setText = this.setHTML;\n\n    /**\n     * Mouseover title text for the button to show\n     * @protected\n     * @member {String}\n     */\n    this.title = \"\";\n    /**\n     * Set the mouseover title text for the button (if any)\n     * @param {String} title Simple text to display\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setTitle = function(title){\n        if (typeof title != \"undefined\"){ this.title = title.toString(); }\n        return this;\n    };\n\n    /**\n     * Color of the button\n     * @member {String}\n     */\n    this.color = \"gray\";\n\n    /**\n     * Set the color associated with this button\n     * @param {('gray'|'red'|'orange'|'yellow'|'green'|'blue'|'purple')} color Any selection not in the preset list\n     *   will be replaced with gray.\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setColor = function(color){\n        if (typeof color != \"undefined\"){\n            if ([\"gray\", \"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"purple\"].indexOf(color) !== -1){ this.color = color; }\n            else { this.color = \"gray\"; }\n        }\n        return this;\n    };\n\n    /**\n     * Hash of arbitrary button styles to apply as {name: value} entries\n     * @protected\n     * @member {Object}\n     */\n    this.style = {};\n    /**\n     * Set a collection of custom styles to be used by the button\n     * @param {Object} style Hash of {name:value} entries\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setStyle = function(style){\n        if (typeof style != \"undefined\"){ this.style = style; }\n        return this;\n    };\n\n    //\n    /**\n     * Method to generate a CSS class string\n     * @returns {string}\n     */\n    this.getClass = function(){\n        var group_position = ([\"start\",\"middle\",\"end\"].indexOf(this.parent.layout.group_position) !== -1 ? \" lz-dashboard-button-group-\" + this.parent.layout.group_position : \"\");\n        return \"lz-dashboard-button lz-dashboard-button-\" + this.color + (this.status ? \"-\" + this.status : \"\") + group_position;\n    };\n\n    // Permanence\n    /**\n     * Track internal state on whether to keep showing the button/ menu contents at the moment\n     * @protected\n     * @member {Boolean}\n     */\n    this.persist = false;\n    /**\n     * Configuration when defining a button: track whether this component should be allowed to keep open\n     *   menu/button contents in response to certain events\n     * @protected\n     * @member {Boolean}\n     */\n    this.permanent = false;\n    /**\n     * Allow code to change whether the button is allowed to be `permanent`\n     * @param {boolean} bool\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.setPermanent = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        this.permanent = bool;\n        if (this.permanent){ this.persist = true; }\n        return this;\n    };\n    /**\n     * Determine whether the button/menu contents should persist in response to a specific event\n     * @returns {Boolean}\n     */\n    this.shouldPersist = function(){\n        return this.permanent || this.persist;\n    };\n\n    /**\n     * Button status (highlighted / disabled/ etc)\n     * @protected\n     * @member {String}\n     */\n    this.status = \"\";\n    /**\n     * Change button state\n     * @param {('highlighted'|'disabled'|'')} status\n     */\n    this.setStatus = function(status){\n        if (typeof status != \"undefined\" && [\"\", \"highlighted\", \"disabled\"].indexOf(status) !== -1){ this.status = status; }\n        return this.update();\n    };\n    /**\n     * Toggle whether the button is highlighted\n     * @param {boolean} bool If provided, explicitly set highlighted state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.highlight = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"highlighted\"); }\n        else if (this.status === \"highlighted\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n    /**\n     * Toggle whether the button is disabled\n     * @param {boolean} bool If provided, explicitly set disabled state\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.disable = function(bool){\n        if (typeof bool == \"undefined\"){ bool = true; } else { bool = Boolean(bool); }\n        if (bool){ return this.setStatus(\"disabled\"); }\n        else if (this.status === \"disabled\"){ return this.setStatus(\"\"); }\n        return this;\n    };\n\n    // Mouse events\n    /** @member {function} */\n    this.onmouseover = function(){};\n    this.setOnMouseover = function(onmouseover){\n        if (typeof onmouseover == \"function\"){ this.onmouseover = onmouseover; }\n        else { this.onmouseover = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onmouseout = function(){};\n    this.setOnMouseout = function(onmouseout){\n        if (typeof onmouseout == \"function\"){ this.onmouseout = onmouseout; }\n        else { this.onmouseout = function(){}; }\n        return this;\n    };\n    /** @member {function} */\n    this.onclick = function(){};\n    this.setOnclick = function(onclick){\n        if (typeof onclick == \"function\"){ this.onclick = onclick; }\n        else { this.onclick = function(){}; }\n        return this;\n    };\n    \n    // Primary behavior functions\n    /**\n     * Show the button, including creating DOM elements if necessary for first render\n     */\n    this.show = function(){\n        if (!this.parent){ return; }\n        if (!this.selector){\n            this.selector = this.parent.selector.append(this.tag).attr(\"class\", this.getClass());\n        }\n        return this.update();\n    };\n    /**\n     * Hook for any actions or state cleanup to be performed before rerendering\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.preUpdate = function(){ return this; };\n    /**\n     * Update button state and contents, and fully rerender\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.update = function(){\n        if (!this.selector){ return this; }\n        this.preUpdate();\n        this.selector\n            .attr(\"class\", this.getClass())\n            .attr(\"title\", this.title).style(this.style)\n            .on(\"mouseover\", (this.status === \"disabled\") ? null : this.onmouseover)\n            .on(\"mouseout\", (this.status === \"disabled\") ? null : this.onmouseout)\n            .on(\"click\", (this.status === \"disabled\") ? null : this.onclick)\n            .html(this.html);\n        this.menu.update();\n        this.postUpdate();\n        return this;\n    };\n    /**\n     * Hook for any behavior to be added/changed after the button has been re-rendered\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.postUpdate = function(){ return this; };\n    /**\n     * Hide the button by removing it from the DOM (may be overridden by current persistence setting)\n     * @returns {LocusZoom.Dashboard.Component.Button}\n     */\n    this.hide = function(){\n        if (this.selector && !this.shouldPersist()){\n            this.selector.remove();\n            this.selector = null;\n        }\n        return this;\n    };    \n\n    /**\n     * Button Menu Object\n     * The menu is an HTML overlay that can appear below a button. It can contain arbitrary HTML and\n     *   has logic to be automatically positioned and sized to behave more or less like a dropdown menu.\n     * @member {Object}\n     */\n    this.menu = {\n        outer_selector: null,\n        inner_selector: null,\n        scroll_position: 0,\n        hidden: true,\n        /**\n         * Show the button menu, including setting up any DOM elements needed for first rendering\n         */\n        show: function(){\n            if (!this.menu.outer_selector){\n                this.menu.outer_selector = d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu lz-dashboard-menu-\" + this.color)\n                    .attr(\"id\", this.parent_svg.getBaseId() + \".dashboard.menu\");\n                this.menu.inner_selector = this.menu.outer_selector.append(\"div\")\n                    .attr(\"class\", \"lz-dashboard-menu-content\");\n                this.menu.inner_selector.on(\"scroll\", function(){\n                    this.menu.scroll_position = this.menu.inner_selector.node().scrollTop;\n                }.bind(this));\n            }\n            this.menu.outer_selector.style({ visibility: \"visible\" });\n            this.menu.hidden = false;\n            return this.menu.update();\n        }.bind(this),\n        /**\n         * Update the rendering of the menu\n         */\n        update: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.populate(); // This function is stubbed for all buttons by default and custom implemented in component definition\n            if (this.menu.inner_selector){ this.menu.inner_selector.node().scrollTop = this.menu.scroll_position; }\n            return this.menu.position();\n        }.bind(this),\n        position: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            // Unset any explicitly defined outer selector height so that menus dynamically shrink if content is removed\n            this.menu.outer_selector.style({ height: null });\n            var padding = 3;\n            var scrollbar_padding = 20;\n            var menu_height_padding = 14; // 14: 2x 6px padding, 2x 1px border\n            var page_origin = this.parent_svg.getPageOrigin();\n            var page_scroll_top = document.documentElement.scrollTop || document.body.scrollTop;\n            var container_offset = this.parent_plot.getContainerOffset();\n            var dashboard_client_rect = this.parent_dashboard.selector.node().getBoundingClientRect();\n            var button_client_rect = this.selector.node().getBoundingClientRect();\n            var menu_client_rect = this.menu.outer_selector.node().getBoundingClientRect();\n            var total_content_height = this.menu.inner_selector.node().scrollHeight;\n            var top = 0; var left = 0;\n            if (this.parent_dashboard.type === \"panel\"){\n                top = (page_origin.y + dashboard_client_rect.height + (2 * padding));\n                left = Math.max(page_origin.x + this.parent_svg.layout.width - menu_client_rect.width - padding, page_origin.x + padding);\n            } else {\n                top = button_client_rect.bottom + page_scroll_top + padding - container_offset.top;\n                left = Math.max(button_client_rect.left + button_client_rect.width - menu_client_rect.width - container_offset.left, page_origin.x + padding);\n            }\n            var base_max_width = Math.max(this.parent_svg.layout.width - (2 * padding) - scrollbar_padding, scrollbar_padding);\n            var container_max_width = base_max_width;\n            var content_max_width = (base_max_width - (4 * padding));\n            var base_max_height = Math.max(this.parent_svg.layout.height - (10 * padding) - menu_height_padding, menu_height_padding);\n            var height = Math.min(total_content_height, base_max_height);\n            var max_height = base_max_height;\n            this.menu.outer_selector.style({\n                \"top\": top.toString() + \"px\",\n                \"left\": left.toString() + \"px\",\n                \"max-width\": container_max_width.toString() + \"px\",\n                \"max-height\": max_height.toString() + \"px\",\n                \"height\": height.toString() + \"px\"\n            });\n            this.menu.inner_selector.style({ \"max-width\": content_max_width.toString() + \"px\" });\n            this.menu.inner_selector.node().scrollTop = this.menu.scroll_position;\n            return this.menu;\n        }.bind(this),\n        hide: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.outer_selector.style({ visibility: \"hidden\" });\n            this.menu.hidden = true;\n            return this.menu;\n        }.bind(this),\n        destroy: function(){\n            if (!this.menu.outer_selector){ return this.menu; }\n            this.menu.inner_selector.remove();\n            this.menu.outer_selector.remove();\n            this.menu.inner_selector = null;\n            this.menu.outer_selector = null;\n            return this.menu;\n        }.bind(this),\n        /**\n         * Internal method definition\n         * By convention populate() does nothing and should be reimplemented with each dashboard button definition\n         *   Reimplement by way of Dashboard.Component.Button.menu.setPopulate to define the populate method and hook\n         *   up standard menu click-toggle behavior prototype.\n         * @protected\n         */\n        populate: function(){ /* stub */ }.bind(this),\n        /**\n         * Define how the menu is populated with items, and set up click and display properties as appropriate\n         * @public\n         */\n        setPopulate: function(menu_populate_function){\n            if (typeof menu_populate_function == \"function\"){\n                this.menu.populate = menu_populate_function;\n                this.setOnclick(function(){\n                    if (this.menu.hidden){\n                        this.menu.show();\n                        this.highlight().update();\n                        this.persist = true;\n                    } else {\n                        this.menu.hide();\n                        this.highlight(false).update();\n                        if (!this.permanent){ this.persist = false; }\n                    }\n                }.bind(this));\n            } else {\n                this.setOnclick();\n            }\n            return this;\n        }.bind(this)\n    };\n\n};\n\n/**\n * Renders arbitrary text with title formatting\n * @class LocusZoom.Dashboard.Components.title\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.title Text to render\n */\nLocusZoom.Dashboard.Components.add(\"title\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.show = function(){\n        this.div_selector = this.parent.selector.append(\"div\")\n            .attr(\"class\", \"lz-dashboard-title lz-dashboard-\" + this.layout.position);\n        this.title_selector = this.div_selector.append(\"h3\");\n        return this.update();\n    };\n    this.update = function(){\n        var title = layout.title.toString();\n        if (this.layout.subtitle){ title += \" <small>\" + this.layout.subtitle + \"</small>\"; }\n        this.title_selector.html(title);\n        return this;\n    };\n});\n\n/**\n * Renders text to display the current dimensions of the plot. Automatically updated as plot dimensions change\n * @class LocusZoom.Dashboard.Components.dimensions\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"dimensions\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var display_width = this.parent_plot.layout.width.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.width : this.parent_plot.layout.width.toFixed(2);\n        var display_height = this.parent_plot.layout.height.toString().indexOf(\".\") === -1 ? this.parent_plot.layout.height : this.parent_plot.layout.height.toFixed(2);\n        this.selector.html(display_width + \"px × \" + display_height + \"px\");\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Display the current scale of the genome region displayed in the plot, as defined by the difference between\n *  `state.end` and `state.start`.\n * @class LocusZoom.Dashboard.Components.region_scale\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"region_scale\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (!isNaN(this.parent_plot.state.start) && !isNaN(this.parent_plot.state.end)\n            && this.parent_plot.state.start !== null && this.parent_plot.state.end !== null){\n            this.selector.style(\"display\", null);\n            this.selector.html(LocusZoom.positionIntToString(this.parent_plot.state.end - this.parent_plot.state.start, null, true));\n        } else {\n            this.selector.style(\"display\", \"none\");\n        }\n        if (layout.class){ this.selector.attr(\"class\", layout.class); }\n        if (layout.style){ this.selector.style(layout.style); }\n        return this;\n    };\n});\n\n/**\n * Button to export current plot to an SVG image\n * @class LocusZoom.Dashboard.Components.download\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"download\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Download Image\").setTitle(\"Download image of the current plot as locuszoom.svg\")\n            .setOnMouseover(function() {\n                this.button.selector\n                    .classed(\"lz-dashboard-button-gray-disabled\", true)\n                    .html(\"Preparing Image\");\n                this.generateBase64SVG().then(function(base64_string){\n                    this.button.selector\n                        .attr(\"href\", \"data:image/svg+xml;base64,\\n\" + base64_string)\n                        .classed(\"lz-dashboard-button-gray-disabled\", false)\n                        .classed(\"lz-dashboard-button-gray-highlighted\", true)\n                        .html(\"Download Image\");\n                }.bind(this));\n            }.bind(this))\n            .setOnMouseout(function() {\n                this.button.selector.classed(\"lz-dashboard-button-gray-highlighted\", false);\n            }.bind(this));\n        this.button.show();\n        this.button.selector.attr(\"href-lang\", \"image/svg+xml\").attr(\"download\", \"locuszoom.svg\");\n        return this;\n    };\n    this.css_string = \"\";\n    for (var stylesheet in Object.keys(document.styleSheets)){\n        if ( document.styleSheets[stylesheet].href !== null\n             && document.styleSheets[stylesheet].href.indexOf(\"locuszoom.css\") !== -1){\n            // TODO: \"Download image\" button will render the image incorrectly if the stylesheet has been renamed or concatenated\n            LocusZoom.createCORSPromise(\"GET\", document.styleSheets[stylesheet].href)\n                .then(function(response){\n                    this.css_string = response.replace(/[\\r\\n]/g,\" \").replace(/\\s+/g,\" \");\n                    if (this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\")){\n                        this.css_string = this.css_string.substring(0, this.css_string.indexOf(\"/* ! LocusZoom HTML Styles */\"));\n                    }\n                }.bind(this));\n            break;\n        }\n    } \n    this.generateBase64SVG = function(){\n        return Q.fcall(function () {\n            // Insert a hidden div, clone the node into that so we can modify it with d3\n            var container = this.parent.selector.append(\"div\").style(\"display\", \"none\")\n                .html(this.parent_plot.svg.node().outerHTML);\n            // Remove unnecessary elements\n            container.selectAll(\"g.lz-curtain\").remove();\n            container.selectAll(\"g.lz-mouse_guide\").remove();\n            // Convert units on axis tick dy attributes from ems to pixels\n            container.selectAll(\"g.tick text\").each(function(){\n                var dy = +(d3.select(this).attr(\"dy\").substring(-2).slice(0,-2))*10;\n                d3.select(this).attr(\"dy\", dy);\n            });\n            // Pull the svg into a string and add the contents of the locuszoom stylesheet\n            // Don't add this with d3 because it will escape the CDATA declaration incorrectly\n            var initial_html = d3.select(container.select(\"svg\").node().parentNode).html();\n            var style_def = \"<style type=\\\"text/css\\\"><![CDATA[ \" + this.css_string + \" ]]></style>\";\n            var insert_at = initial_html.indexOf(\">\") + 1;\n            initial_html = initial_html.slice(0,insert_at) + style_def + initial_html.slice(insert_at);\n            // Delete the container node\n            container.remove();\n            // Base64-encode the string and return it\n            return btoa(encodeURIComponent(initial_html).replace(/%([0-9A-F]{2})/g, function(match, p1) {\n                return String.fromCharCode(\"0x\" + p1);\n            }));\n        }.bind(this));\n    };\n});\n\n/**\n * Button to remove panel from plot.\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.remove_panel\n * @augments LocusZoom.Dashboard.Component\n * @param {Boolean} [layout.suppress_confirm=false] If true, removes the panel without prompting user for confirmation\n */\nLocusZoom.Dashboard.Components.add(\"remove_panel\", function(layout) {\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function() {\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"×\").setTitle(\"Remove panel\")\n            .setOnclick(function(){\n                if (!layout.suppress_confirm && !confirm(\"Are you sure you want to remove this panel? This cannot be undone!\")){\n                    return false;\n                }\n                var panel = this.parent_panel;\n                panel.dashboard.hide(true);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseover.\" + panel.getBaseId() + \".dashboard\", null);\n                d3.select(panel.parent.svg.node().parentNode).on(\"mouseout.\" + panel.getBaseId() + \".dashboard\", null);\n                return panel.parent.removePanel(panel.id);\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to move panel up relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_up\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_up\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_top = (this.parent_panel.layout.y_index === 0);\n            this.button.disable(is_at_top);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▴\").setTitle(\"Move panel up\")\n            .setOnclick(function(){\n                this.parent_panel.moveUp();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to move panel down relative to other panels (in terms of y-index on the page)\n *   NOTE: Will only work on panel dashboards.\n * @class LocusZoom.Dashboard.Components.move_panel_down\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"move_panel_down\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){\n            var is_at_bottom = (this.parent_panel.layout.y_index === this.parent_plot.panel_ids_by_y_index.length-1);\n            this.button.disable(is_at_bottom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"▾\").setTitle(\"Move panel down\")\n            .setOnclick(function(){\n                this.parent_panel.moveDown();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this.update();\n    };\n});\n\n/**\n * Button to shift plot region forwards or back by a `step` increment provided in the layout\n * @class LocusZoom.Dashboard.Components.shift_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=50000] The stepsize to change the region by\n * @param {string} [layout.button_html]\n * @param {string} [layout.button_title]\n */\nLocusZoom.Dashboard.Components.add(\"shift_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add shift_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 50000; }\n    if (typeof layout.button_html !== \"string\"){ layout.button_html = layout.step > 0 ? \">\" : \"<\"; }\n    if (typeof layout.button_title !== \"string\"){\n        layout.button_title = \"Shift region by \" + (layout.step > 0 ? \"+\" : \"-\") + LocusZoom.positionIntToString(Math.abs(layout.step),null,true);\n    }\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start + layout.step, 1),\n                    end: this.parent_plot.state.end + layout.step\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Zoom in or out on the plot, centered on the middle of the plot region, by the specified amount\n * @class LocusZoom.Dashboard.Components.zoom_region\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {number} [layout.step=0.2] The amount to zoom in by (where 1 indicates 100%)\n */\nLocusZoom.Dashboard.Components.add(\"zoom_region\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (isNaN(this.parent_plot.state.start) || isNaN(this.parent_plot.state.end)){\n        this.update = function(){};\n        console.warn(\"Unable to add zoom_region dashboard component: plot state does not have region bounds\");\n        return;\n    }\n    if (isNaN(layout.step) || layout.step === 0){ layout.step = 0.2; }\n    if (typeof layout.button_html != \"string\"){ layout.button_html = layout.step > 0 ? \"z–\" : \"z+\"; }\n    if (typeof layout.button_title != \"string\"){\n        layout.button_title = \"Zoom region \" + (layout.step > 0 ? \"out\" : \"in\") + \" by \" + (Math.abs(layout.step)*100).toFixed(1) + \"%\";\n    }\n    this.update = function(){\n        if (this.button){\n            var can_zoom = true;\n            var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n            if (layout.step > 0 && !isNaN(this.parent_plot.layout.max_region_scale) && current_region_scale >= this.parent_plot.layout.max_region_scale){\n                can_zoom = false;\n            }\n            if (layout.step < 0 && !isNaN(this.parent_plot.layout.min_region_scale) && current_region_scale <= this.parent_plot.layout.min_region_scale){\n                can_zoom = false;\n            }\n            this.button.disable(!can_zoom);\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                var current_region_scale = this.parent_plot.state.end - this.parent_plot.state.start;\n                var zoom_factor = 1 + layout.step;\n                var new_region_scale = current_region_scale * zoom_factor;\n                if (!isNaN(this.parent_plot.layout.max_region_scale)){\n                    new_region_scale = Math.min(new_region_scale, this.parent_plot.layout.max_region_scale);\n                }\n                if (!isNaN(this.parent_plot.layout.min_region_scale)){\n                    new_region_scale = Math.max(new_region_scale, this.parent_plot.layout.min_region_scale);\n                }\n                var delta = Math.floor((new_region_scale - current_region_scale) / 2);\n                this.parent_plot.applyState({\n                    start: Math.max(this.parent_plot.state.start - delta, 1),\n                    end: this.parent_plot.state.end + delta\n                });\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Renders button with arbitrary text that, when clicked, shows a dropdown containing arbitrary HTML\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @class LocusZoom.Dashboard.Components.menu\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n * @param {string} layout.menu_html The HTML content of the dropdown menu\n */\nLocusZoom.Dashboard.Components.add(\"menu\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title);\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(layout.menu_html);\n        }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Special button/menu to allow model building by tracking individual covariants. Will track a list of covariate\n *   objects and store them in the special `model.covariates` field of plot `state`.\n * @class LocusZoom.Dashboard.Components.covariates_model\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {string} layout.button_html The HTML to render inside the button\n * @param {string} layout.button_title Text to display as a tooltip when hovering over the button\n */\nLocusZoom.Dashboard.Components.add(\"covariates_model\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.initialize = function(){\n        // Initialize state.model.covariates\n        this.parent_plot.state.model = this.parent_plot.state.model || {};\n        this.parent_plot.state.model.covariates = this.parent_plot.state.model.covariates || [];\n        // Create an object at the plot level for easy access to interface methods in custom client-side JS\n        /**\n         * When a covariates model dashboard element is present, create (one) object at the plot level that exposes\n         *   component data and state for custom interactions with other plot elements.\n         * @class LocusZoom.Plot.CovariatesModel\n         */\n        this.parent_plot.CovariatesModel = {\n            /** @member {LocusZoom.Dashboard.Component.Button} */\n            button: this,\n            /**\n             * Add an element to the model and show a representation of it in the dashboard component menu. If the\n             *   element is already part of the model, do nothing (to avoid adding duplicates).\n             * When plot state is changed, this will automatically trigger requests for new data accordingly.\n             * @param {string|object} element_reference Can be any value that can be put through JSON.stringify()\n             *   to create a serialized representation of itself.\n             */\n            add: function(element_reference){\n                var element = JSON.parse(JSON.stringify(element_reference));\n                if (typeof element_reference == \"object\" && typeof element.html != \"string\"){\n                    element.html = ( (typeof element_reference.toHTML == \"function\") ? element_reference.toHTML() : element_reference.toString());\n                }\n                // Check if the element is already in the model covariates array and return if it is.\n                for (var i = 0; i < this.state.model.covariates.length; i++) {\n                    if (JSON.stringify(this.state.model.covariates[i]) === JSON.stringify(element)) {\n                        return this;\n                    }\n                }\n                this.state.model.covariates.push(element);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Remove an element from `state.model.covariates` (and from the dashboard component menu's\n             *  representation of the state model). When plot state is changed, this will automatically trigger\n             *  requests for new data accordingly.\n             * @param {number} idx Array index of the element, in the `state.model.covariates array`.\n             */\n            removeByIdx: function(idx){\n                if (typeof this.state.model.covariates[idx] == \"undefined\"){\n                    throw(\"Unable to remove model covariate, invalid index: \" + idx.toString());\n                }\n                this.state.model.covariates.splice(idx, 1);\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Empty the `state.model.covariates` array (and dashboard component menu representation thereof) of all\n             *  elements. When plot state is changed, this will automatically trigger requests for new data accordingly\n             */\n            removeAll: function(){\n                this.state.model.covariates = [];\n                this.applyState();\n                this.CovariatesModel.updateComponent();\n                return this;\n            }.bind(this.parent_plot),\n            /**\n             * Manually trigger the update methods on the dashboard component's button and menu elements to force\n             *   display of most up-to-date content. Can be used to force the dashboard to reflect changes made, eg if\n             *   modifying `state.model.covariates` directly instead of via `plot.CovariatesModel`\n             */\n            updateComponent: function(){\n                this.button.update();\n                this.button.menu.update();\n            }.bind(this)\n        };\n    }.bind(this);\n\n    this.update = function(){\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            var selector = this.button.menu.inner_selector;\n            selector.html(\"\");\n            // General model HTML representation\n            if (typeof this.parent_plot.state.model.html != \"undefined\"){\n                selector.append(\"div\").html(this.parent_plot.state.model.html);\n            }\n            // Model covariates table\n            if (!this.parent_plot.state.model.covariates.length){\n                selector.append(\"i\").html(\"no covariates in model\");\n            } else {\n                selector.append(\"h5\").html(\"Model Covariates (\" + this.parent_plot.state.model.covariates.length + \")\");\n                var table = selector.append(\"table\");\n                this.parent_plot.state.model.covariates.forEach(function(covariate, idx){\n                    var html = ( (typeof covariate == \"object\" && typeof covariate.html == \"string\") ? covariate.html : covariate.toString() );\n                    var row = table.append(\"tr\");\n                    row.append(\"td\").append(\"button\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){\n                            this.parent_plot.CovariatesModel.removeByIdx(idx);\n                        }.bind(this))\n                        .html(\"×\");\n                    row.append(\"td\").html(html);\n                }.bind(this));\n                selector.append(\"button\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color)\n                    .style({ \"margin-left\": \"4px\" }).html(\"× Remove All Covariates\")\n                    .on(\"click\", function(){\n                        this.parent_plot.CovariatesModel.removeAll();\n                    }.bind(this));\n            }\n        }.bind(this));\n\n        this.button.preUpdate = function(){\n            var html = \"Model\";\n            if (this.parent_plot.state.model.covariates.length){\n                var cov = this.parent_plot.state.model.covariates.length > 1 ? \"covariates\" : \"covariate\";\n                html += \" (\" + this.parent_plot.state.model.covariates.length + \" \" + cov + \")\";\n            }\n            this.button.setHtml(html).disable(false);\n        }.bind(this);\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Button to toggle split tracks\n * @class LocusZoom.Dashboard.Components.toggle_split_tracks\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_split_tracks\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    if (!layout.data_layer_id){ layout.data_layer_id = \"intervals\"; }\n    if (!this.parent_panel.data_layers[layout.data_layer_id]){\n        throw (\"Dashboard toggle split tracks component missing valid data layer ID\");\n    }\n    this.update = function(){\n        var data_layer = this.parent_panel.data_layers[layout.data_layer_id];\n        var html = data_layer.layout.split_tracks ? \"Merge Tracks\" : \"Split Tracks\";\n        if (this.button){\n            this.button.setHtml(html);\n            this.button.show();\n            this.parent.position();\n            return this;\n        } else {\n            this.button = new LocusZoom.Dashboard.Component.Button(this)\n                .setColor(layout.color).setHtml(html)\n                .setTitle(\"Toggle whether tracks are split apart or merged together\")\n                .setOnclick(function(){\n                    data_layer.toggleSplitTracks();\n                    if (this.scale_timeout){ clearTimeout(this.scale_timeout); }\n                    var timeout = data_layer.layout.transition ? +data_layer.layout.transition.duration || 0 : 0;\n                    this.scale_timeout = setTimeout(function(){\n                        this.parent_panel.scaleHeightToData();\n                        this.parent_plot.positionPanels();\n                    }.bind(this), timeout);\n                    this.update();\n                }.bind(this));\n            return this.update();\n        }\n    };\n});\n\n/**\n * Button to resize panel height to fit available data (eg when showing a list of tracks)\n * @class LocusZoom.Dashboard.Components.resize_to_data\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"resize_to_data\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        if (this.button){ return this; }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(\"Resize to Data\")\n            .setTitle(\"Automatically resize this panel to fit the data its currently showing\")\n            .setOnclick(function(){\n                this.parent_panel.scaleHeightToData();\n                this.update();\n            }.bind(this));\n        this.button.show();\n        return this;\n    };\n});\n\n/**\n * Button to toggle legend\n * @class LocusZoom.Dashboard.Components.toggle_legend\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"toggle_legend\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n    this.update = function(){\n        var html = this.parent_panel.legend.layout.hidden ? \"Show Legend\" : \"Hide Legend\";\n        if (this.button){\n            this.button.setHtml(html).show();\n            this.parent.position();\n            return this;\n        }\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color)\n            .setTitle(\"Show or hide the legend for this panel\")\n            .setOnclick(function(){\n                this.parent_panel.legend.layout.hidden = !this.parent_panel.legend.layout.hidden;\n                this.parent_panel.legend.render();\n                this.update();\n            }.bind(this));\n        return this.update();\n    };\n});\n\n/**\n * Menu for manipulating multiple data layers in a single panel: show/hide, change order, etc.\n * @class LocusZoom.Dashboard.Components.data_layers\n * @augments LocusZoom.Dashboard.Component\n */\nLocusZoom.Dashboard.Components.add(\"data_layers\", function(layout){\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    this.update = function(){\n\n        if (typeof layout.button_html != \"string\"){ layout.button_html = \"Data Layers\"; }\n        if (typeof layout.button_title != \"string\"){ layout.button_title = \"Manipulate Data Layers (sort, dim, show/hide, etc.)\"; }\n\n        if (this.button){ return this; }\n\n        this.button = new LocusZoom.Dashboard.Component.Button(this)\n            .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n            .setOnclick(function(){\n                this.button.menu.populate();\n            }.bind(this));\n\n        this.button.menu.setPopulate(function(){\n            this.button.menu.inner_selector.html(\"\");\n            var table = this.button.menu.inner_selector.append(\"table\");\n            this.parent_panel.data_layer_ids_by_z_index.slice().reverse().forEach(function(id, idx){\n                var data_layer = this.parent_panel.data_layers[id];\n                var name = (typeof data_layer.layout.name != \"string\") ? data_layer.id : data_layer.layout.name;\n                var row = table.append(\"tr\");\n                // Layer name\n                row.append(\"td\").html(name);\n                // Status toggle buttons\n                layout.statuses.forEach(function(status_adj){\n                    var status_idx = LocusZoom.DataLayer.Statuses.adjectives.indexOf(status_adj);\n                    var status_verb = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                    var html, onclick, highlight;\n                    if (data_layer.global_statuses[status_adj]){\n                        html = LocusZoom.DataLayer.Statuses.menu_antiverbs[status_idx];\n                        onclick = \"un\" + status_verb + \"AllElements\";\n                        highlight = \"-highlighted\";\n                    } else {\n                        html = LocusZoom.DataLayer.Statuses.verbs[status_idx];\n                        onclick = status_verb + \"AllElements\";\n                        highlight = \"\";\n                    }\n                    row.append(\"td\").append(\"a\")\n                        .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-\" + this.layout.color + highlight)\n                        .style({ \"margin-left\": \"0em\" })\n                        .on(\"click\", function(){ data_layer[onclick](); this.button.menu.populate(); }.bind(this))\n                        .html(html);\n                }.bind(this));\n                // Sort layer buttons\n                var at_top = (idx === 0);\n                var at_bottom = (idx === (this.parent_panel.data_layer_ids_by_z_index.length - 1));\n                var td = row.append(\"td\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-start lz-dashboard-button-\" + this.layout.color + (at_bottom ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveDown(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▾\").attr(\"title\", \"Move layer down (further back)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-middle lz-dashboard-button-\" + this.layout.color + (at_top ? \"-disabled\" : \"\"))\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){ data_layer.moveUp(); this.button.menu.populate(); }.bind(this))\n                    .html(\"▴\").attr(\"title\", \"Move layer up (further front)\");\n                td.append(\"a\")\n                    .attr(\"class\", \"lz-dashboard-button lz-dashboard-button-group-end lz-dashboard-button-red\")\n                    .style({ \"margin-left\": \"0em\" })\n                    .on(\"click\", function(){\n                        if (confirm(\"Are you sure you want to remove the \" + name + \" layer? This cannot be undone!\")){\n                            data_layer.parent.removeDataLayer(id);\n                        }\n                        return this.button.menu.populate();\n                    }.bind(this))\n                    .html(\"×\").attr(\"title\", \"Remove layer\");\n            }.bind(this));\n            return this;\n        }.bind(this));\n\n        this.button.show();\n\n        return this;\n    };\n});\n\n/**\n * Dropdown menu allowing the user to choose between different display options for a single specific data layer\n *  within a panel.\n *\n * This allows controlling how points on a datalayer can be displayed- any display options supported via the layout for the target datalayer. This includes point\n *  size/shape, coloring, etc.\n *\n * This button intentionally limits display options it can control to those available on common plot types.\n *   Although the list of options it sets can be overridden (to control very special custom plot types), this\n *   capability should be used sparingly if at all.\n *\n * @class LocusZoom.Dashboard.Components.display_options\n * @augments LocusZoom.Dashboard.Component\n * @param {object} layout\n * @param {String} [layout.button_html=\"Display options\"] Text to display on the toolbar button\n * @param {String} [layout.button_title=\"Control how plot items are displayed\"] Hover text for the toolbar button\n * @param {string} layout.layer_name Specify the datalayer that this button should affect\n * @param {string} [layout.default_config_display_name] Store the default configuration for this datalayer\n *  configuration, and show a button to revert to the \"default\" (listing the human-readable display name provided)\n * @param {Array} [layout.fields_whitelist='see code'] The list of presentation fields that this button can control.\n *  This can be overridden if this button needs to be used on a custom layer type with special options.\n * @typedef {{display_name: string, display: Object}} DisplayOptionsButtonConfigField\n * @param {DisplayOptionsButtonConfigField[]} layout.options Specify a label and set of layout directives associated\n *  with this `display` option. Display field should include all changes to datalayer presentation options.\n */\nLocusZoom.Dashboard.Components.add(\"display_options\", function (layout) {\n    if (typeof layout.button_html != \"string\"){ layout.button_html = \"Display options\"; }\n    if (typeof layout.button_title != \"string\"){ layout.button_title = \"Control how plot items are displayed\"; }\n\n    // Call parent constructor\n    LocusZoom.Dashboard.Component.apply(this, arguments);\n\n    // List of layout fields that this button is allowed to control. This ensures that we don't override any other\n    //  information (like plot height etc) while changing point rendering\n    var allowed_fields = layout.fields_whitelist || [\"color\", \"fill_opacity\", \"label\", \"legend\",\n        \"point_shape\", \"point_size\", \"tooltip\", \"tooltip_positioning\"];\n\n    var dataLayer = this.parent_panel.data_layers[layout.layer_name];\n    var dataLayerLayout = dataLayer.layout;\n\n    // Store default configuration for the layer as a clean deep copy, so we may revert later\n    var defaultConfig = {};\n    allowed_fields.forEach(function(name) {\n        var configSlot = dataLayerLayout[name];\n        if (configSlot) {\n            defaultConfig[name] = JSON.parse(JSON.stringify(configSlot));\n        }\n    });\n\n    /**\n     * Which item in the menu is currently selected. (track for rerendering menu)\n     * @member {String}\n     * @private\n     */\n    this._selected_item = \"default\";\n\n    // Define the button + menu that provides the real functionality for this dashboard component\n    var self = this;\n    this.button = new LocusZoom.Dashboard.Component.Button(self)\n        .setColor(layout.color).setHtml(layout.button_html).setTitle(layout.button_title)\n        .setOnclick(function () {\n            self.button.menu.populate();\n        });\n    this.button.menu.setPopulate(function () {\n        // Multiple copies of this button might be used on a single LZ page; append unique IDs where needed\n        var uniqueID = Math.floor(Math.random() * 1e4).toString();\n\n        self.button.menu.inner_selector.html(\"\");\n        var table = self.button.menu.inner_selector.append(\"table\");\n\n        var menuLayout = self.layout;\n\n        var renderRow = function(display_name, display_options, row_id) { // Helper method\n            var row = table.append(\"tr\");\n            row.append(\"td\")\n                .append(\"input\")\n                .attr({type: \"radio\", name: \"color-picker-\" + uniqueID, value: row_id})\n                .property(\"checked\", (row_id === self._selected_item))\n                .on(\"click\", function () {\n                    Object.keys(display_options).forEach(function(field_name) {\n                        dataLayer.layout[field_name] = display_options[field_name];\n                    });\n                    self._selected_item = row_id;\n                    self.parent_panel.render();\n                    var legend = self.parent_panel.legend;\n                    if (legend && display_options.legend) {\n                        // Update the legend only if necessary\n                        legend.render();\n                    }\n                });\n            row.append(\"td\").text(display_name);\n        };\n        // Render the \"display options\" menu: default and special custom options\n        var defaultName = menuLayout.default_config_display_name || \"Default style\";\n        renderRow(defaultName, defaultConfig, \"default\");\n        menuLayout.options.forEach(function (item, index) {\n            renderRow(item.display_name, item.display, index);\n        });\n        return self;\n    });\n\n    this.update = function () {\n        this.button.show();\n        return this;\n    };\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n *\n * LocusZoom has various singleton objects that are used for registering functions or classes.\n * These objects provide safe, standard methods to redefine or delete existing functions/classes\n * as well as define new custom functions/classes to be used in a plot.\n *\n * @namespace Singletons\n */\n\n\n/*\n * The Collection of \"Known\" Data Sources. This registry is used internally by the `DataSources` class\n * @class\n * @static\n */\nLocusZoom.KnownDataSources = (function() {\n    /** @lends LocusZoom.KnownDataSources */\n    var obj = {};\n    /* @member {function[]} */\n    var sources = [];\n\n    var findSourceByName = function(x) {\n        for(var i=0; i<sources.length; i++) {\n            if (!sources[i].SOURCE_NAME) {\n                throw(\"KnownDataSources at position \" + i + \" does not have a 'SOURCE_NAME' static property\");\n            }\n            if (sources[i].SOURCE_NAME === x) {\n                return sources[i];\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Identify the datasource associated with a given name\n     * @param {String} name\n     * @returns {function} The constructor for the data source; will usually extend `Data.Source`\n     */\n    obj.get = function(name) {\n        return findSourceByName(name);\n    };\n\n    /**\n     * Register a data source constructor so that it may be located by name\n     * @param {function} source A constructor function for a data source; will usually extend `Data.Source`,\n     *   and should have a `SOURCE_NAME` property\n     */\n    obj.add = function(source) {\n        if (!source.SOURCE_NAME) {\n            console.warn(\"Data source added does not have a SOURCE_NAME\");\n        }\n        sources.push(source);\n    };\n\n    /**\n     * Create a custom source type that extends the behavior of an existing source, and registers that\n     *  source by the provided name\n     * @param {String} parent_name The name of a previously registered data source type to use as a template\n     * @param {String} source_name The new name to use when registering this data source\n     * @param {Object} overrides An object of additional properties and methods to add/override behavior\n     * @returns {LocusZoom.Data.Source} The newly defined class for this source\n     */\n    obj.extend = function(parent_name, source_name, overrides) {\n        var parent = findSourceByName(parent_name);\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered data source\";\n        }\n        if (!source_name) {\n            throw \"Must provide a name for the new data source\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        child.SOURCE_NAME = source_name;\n        sources.push(child);\n        return child;\n    };\n\n    /** @deprecated */\n    obj.push = function(source) {\n        console.warn(\"Warning: KnownDataSources.push() is deprecated. Use .add() instead\");\n        obj.add(source);\n    };\n\n    /**\n     * List the names of all registered datasources\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return sources.map(function(x) {return x.SOURCE_NAME;});\n    };\n\n    /**\n     * Create a datasource instance\n     * @param {String} name The name of the desired datasource to instantiate (must be defined in the registry)\n     * @returns {LocusZoom.Data.Source}\n     */\n    obj.create = function(name) {\n        //create new object (pass additional parameters to constructor)\n        var newObj = findSourceByName(name);\n        if (newObj) {\n            var params = arguments;\n            params[0] = null;\n            return new (Function.prototype.bind.apply(newObj, params));\n        } else {\n            throw(\"Unable to find data source for name: \" + name); \n        }\n    };\n\n    /**\n     * Get the array of all registered constructors\n     *   Generally only used for unit tests internally\n     * @private\n     * @returns {function[]}\n     */\n    obj.getAll = function() {\n        return sources;\n    };\n\n    /**\n     * Register an entire collection of data sources\n     *   Generally only used for unit tests internally\n     * @private\n     * @param {function[]} x An array of datasource constructors\n     */\n    obj.setAll = function(x) {\n        sources = x;\n    };\n\n    /**\n     * Unregister all known data sources\n     *   Generally only used for unit tests internally\n     * @private\n     */\n    obj.clear = function() {\n        sources = [];\n    };\n\n    return obj;\n})();\n\n/**************************\n * Transformation Functions\n *\n * Singleton for formatting or transforming a single input, for instance turning raw p values into negative log10 form\n * Transformation functions are chainable with a pipe on a field name, like so: \"pvalue|neglog10\"\n *\n * NOTE: Because these functions are chainable the FUNCTION is returned by get(), not the result of that function.\n *\n * All transformation functions must accept an object of parameters and a value to process.\n * @class\n */\nLocusZoom.TransformationFunctions = (function() {\n    /** @lends LocusZoom.TransformationFunctions */\n    var obj = {};\n    var transformations = {};\n\n    var getTrans = function(name) {\n        if (!name) {\n            return null;\n        }\n        var fun = transformations[name];\n        if (fun)  {\n            return fun;\n        } else {\n            throw(\"transformation \" + name + \" not found\");\n        }\n    };\n\n    //a single transformation with any parameters\n    //(parameters not currently supported)\n    var parseTrans = function(name) {\n        return getTrans(name);\n    };\n\n    //a \"raw\" transformation string with a leading pipe\n    //and one or more transformations\n    var parseTransString = function(x) {\n        var funs = [];\n        var re = /\\|([^|]+)/g;\n        var result;\n        while((result = re.exec(x))!==null) {\n            funs.push(result[1]);\n        }\n        if (funs.length===1) {\n            return parseTrans(funs[0]);\n        } else if (funs.length > 1) {\n            return function(x) {\n                var val = x;\n                for(var i = 0; i<funs.length; i++) {\n                    val = parseTrans(funs[i])(val);\n                }\n                return val;\n            };\n        }\n        return null;\n    };\n\n    /**\n     * Retrieve a transformation function by name\n     * @param {String} name The name of the transformation function to retrieve. May optionally be prefixed with a\n     *   pipe (`|`) when chaining multiple transformation functions.\n     * @returns {function} The constructor for the transformation function\n     */\n    obj.get = function(name) {\n        if (name && name.substring(0,1)===\"|\") {\n            return parseTransString(name);\n        } else {\n            return parseTrans(name);\n        }\n    };\n    /**\n     * Internal logic that registers a transformation function\n     * @protected\n     * @param {String} name\n     * @param {function} fn\n     */\n    obj.set = function(name, fn) {\n        if (name.substring(0,1)===\"|\") {\n            throw(\"transformation name should not start with a pipe\");\n        } else {\n            if (fn) {\n                transformations[name] = fn;\n            } else {\n                delete transformations[name];\n            }\n        }\n    };\n\n    /**\n     * Register a transformation function\n     * @param {String} name\n     * @param {function} fn A transformation function (should accept one argument with the value)\n     */\n    obj.add = function(name, fn) {\n        if (transformations[name]) {\n            throw(\"transformation already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n    /**\n     * List the names of all registered transformation functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(transformations);\n    };\n\n    return obj;\n})();\n\n/**\n * Return the -log (base 10)\n * @function neglog10\n */\nLocusZoom.TransformationFunctions.add(\"neglog10\", function(x) {\n    if (isNaN(x) || x <= 0){ return null; }\n    return -Math.log(x) / Math.LN10;\n});\n\n/**\n * Convert a number from logarithm to scientific notation. Useful for, eg, a datasource that returns -log(p) by default\n * @function logtoscinotation\n */\nLocusZoom.TransformationFunctions.add(\"logtoscinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"1\"; }\n    var exp = Math.ceil(x);\n    var diff = exp - x;\n    var base = Math.pow(10, diff);\n    if (exp === 1){\n        return (base / 10).toFixed(4);\n    } else if (exp === 2){\n        return (base / 100).toFixed(3);\n    } else {\n        return base.toFixed(2) + \" × 10^-\" + exp;\n    }\n});\n\n/**\n * Represent a number in scientific notation\n * @function scinotation\n * @param {Number} x\n * @returns {String}\n */\nLocusZoom.TransformationFunctions.add(\"scinotation\", function(x) {\n    if (isNaN(x)){ return \"NaN\"; }\n    if (x === 0){ return \"0\"; }\n\n    var abs = Math.abs(x);\n    var log;\n    if (abs > 1) {\n        log = Math.ceil(Math.log(abs) / Math.LN10);\n    } else {  // 0...1\n        log = Math.floor(Math.log(abs) / Math.LN10);\n    }\n    if (Math.abs(log) <= 3){\n        return x.toFixed(3);\n    } else {\n        return x.toExponential(2).replace(\"+\", \"\").replace(\"e\", \" × 10^\");\n    }\n});\n\n/**\n * URL-encode the provided text, eg for constructing hyperlinks\n * @function urlencode\n * @param {String} str\n */\nLocusZoom.TransformationFunctions.add(\"urlencode\", function(str) {\n    return encodeURIComponent(str);\n});\n\n/**\n * HTML-escape user entered values for use in constructed HTML fragments\n *\n * For example, this filter can be used on tooltips with custom HTML display\n * @function htmlescape\n * @param {String} str HTML-escape the provided value\n */\nLocusZoom.TransformationFunctions.add(\"htmlescape\", function(str) {\n    if ( !str ) {\n        return \"\";\n    }\n    str = str + \"\";\n\n    return str.replace( /['\"<>&`]/g, function( s ) {\n        switch ( s ) {\n        case \"'\":\n            return \"&#039;\";\n        case \"\\\"\":\n            return \"&quot;\";\n        case \"<\":\n            return \"&lt;\";\n        case \">\":\n            return \"&gt;\";\n        case \"&\":\n            return \"&amp;\";\n        case \"`\":\n            return \"&#x60;\";\n        }\n    });\n});\n\n/**\n * Singleton for accessing/storing functions that will convert arbitrary data points to values in a given scale\n * Useful for anything that needs to scale discretely with data (e.g. color, point size, etc.)\n *\n * A Scale Function can be thought of as a modifier to a layout directive that adds extra logic to how a piece of data\n *   can be resolved to a value.\n *\n * All scale functions must accept an object of parameters and a value to process.\n * @class\n * @static\n */\nLocusZoom.ScaleFunctions = (function() {\n    /** @lends LocusZoom.ScaleFunctions */\n    var obj = {};\n    var functions = {};\n\n    /**\n     * Find a scale function and return it. If parameters and values are passed, calls the function directly; otherwise\n     *   returns a callable.\n     * @param {String} name\n     * @param {Object} [parameters] Configuration parameters specific to the specified scale function\n     * @param {*} [value] The value to operate on\n     * @returns {*}\n     */\n    obj.get = function(name, parameters, value) {\n        if (!name) {\n            return null;\n        } else if (functions[name]) {\n            if (typeof parameters === \"undefined\" && typeof value === \"undefined\"){\n                return functions[name];\n            } else {\n                return functions[name](parameters, value);\n            }\n        } else {\n            throw(\"scale function [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @protected\n     * @param {String} name The name of the function to set/unset\n     * @param {Function} [fn] The function to register. If blank, removes this function name from the registry.\n     */\n    obj.set = function(name, fn) {\n        if (fn) {\n            functions[name] = fn;\n        } else {\n            delete functions[name];\n        }\n    };\n\n    /**\n     * Add a new scale function to the registry\n     * @param {String} name The name of the scale function\n     * @param {function} fn A scale function that accepts two parameters: an object of configuration and a value\n     */\n    obj.add = function(name, fn) {\n        if (functions[name]) {\n            throw(\"scale function already exists with name: \" + name);\n        } else {\n            obj.set(name, fn);\n        }\n    };\n\n    /**\n     * List the names of all registered scale functions\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(functions);\n    };\n\n    return obj;\n})();\n\n/**\n * Basic conditional function to evaluate the value of the input field and return based on equality.\n * @param {Object} parameters\n * @param {*} parameters.field_value The value against which to test the input value.\n * @param {*} parameters.then The value to return if the input value matches the field value\n * @param {*} parameters.else  The value to return if the input value does not match the field value. Optional. If not\n *   defined this scale function will return null (or value of null_value parameter, if defined) when input value fails\n *   to match field_value.\n * @param {*} input value\n */\nLocusZoom.ScaleFunctions.add(\"if\", function(parameters, input){\n    if (typeof input == \"undefined\" || parameters.field_value !== input){\n        if (typeof parameters.else != \"undefined\"){\n            return parameters.else;\n        } else {\n            return null;\n        }\n    } else {\n        return parameters.then;\n    }\n});\n\n/**\n * Function to sort numerical values into bins based on numerical break points. Will only operate on numbers and\n *   return null (or value of null_value parameter, if defined) if provided a non-numeric input value. Parameters:\n * @function numerical_bin\n * @param {Object} parameters\n * @param {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter. If the input value is greater than or equal to break n and less than\n *   or equal to break n+1 (or break n+1 doesn't exist) then returned value is the nth entry in the values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against break points. Must be of\n *   equal length to breaks parameter. Each entry n represents the value to return if the input value is greater than\n *   or equal to break n and less than or equal to break n+1 (or break n+1 doesn't exist).\n * @param {*} null_value\n * @param {*} input value\n * @returns\n */\nLocusZoom.ScaleFunctions.add(\"numerical_bin\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){\n        return (parameters.null_value ? parameters.null_value : null);\n    }\n    var threshold = breaks.reduce(function(prev, curr){\n        if (+input < prev || (+input >= prev && +input < curr)){\n            return prev;\n        } else {\n            return curr;\n        }\n    });\n    return values[breaks.indexOf(threshold)];\n});\n\n/**\n * Function to sort values of any type into bins based on direct equality testing with a list of categories.\n *   Will return null if provided an input value that does not match to a listed category.\n * @function categorical_bin\n * @param {Object} parameters\n * @param {Array} parameters.categories  Array of values against which to evaluate the input value. Must be of equal\n *   length to values parameter. If the input value is equal to category n then returned value is the nth entry in the\n *   values parameter.\n * @param {Array} parameters.values  Array of values to return given evaluations against categories. Must be of equal\n *   length to categories parameter. Each entry n represents the value to return if the input value is equal to the nth\n *   value in the categories parameter.\n * @param {*} parameters.null_value  Value to return if the input value fails to match to any categories. Optional.\n */\nLocusZoom.ScaleFunctions.add(\"categorical_bin\", function(parameters, value){\n    if (typeof value == \"undefined\" || parameters.categories.indexOf(value) === -1){\n        return (parameters.null_value ? parameters.null_value : null); \n    } else {\n        return parameters.values[parameters.categories.indexOf(value)];\n    }\n});\n\n/**\n * Function for continuous interpolation of numerical values along a gradient with arbitrarily many break points.\n * @function interpolate\n * @parameters {Object} parameters\n * @parameters {Number[]} parameters.breaks  Array of numerical break points against which to evaluate the input value.\n *   Must be of equal length to values parameter and contain at least two elements. Input value will be evaluated for\n *   relative position between two break points n and n+1 and the returned value will be interpolated at a relative\n *   position between values n and n+1.\n * @parameters {*[]} parameters.values  Array of values to interpolate and return given evaluations against break\n *   points. Must be of equal length to breaks parameter and contain at least two elements. Each entry n represents\n *   the value to return if the input value matches the nth entry in breaks exactly. Note that this scale function\n *   uses d3.interpolate to provide for effective interpolation of many different value types, including numbers,\n *   colors, shapes, etc.\n * @parameters {*} parameters.null_value\n */\nLocusZoom.ScaleFunctions.add(\"interpolate\", function(parameters, input){\n    var breaks = parameters.breaks || [];\n    var values = parameters.values || [];\n    var nullval = (parameters.null_value ? parameters.null_value : null);\n    if (breaks.length < 2 || breaks.length !== values.length){ return nullval; }\n    if (typeof input == \"undefined\" || input === null || isNaN(+input)){ return nullval; }\n    if (+input <= parameters.breaks[0]){\n        return values[0];\n    } else if (+input >= parameters.breaks[parameters.breaks.length-1]){\n        return values[breaks.length-1];\n    } else {\n        var upper_idx = null;\n        breaks.forEach(function(brk, idx){\n            if (!idx){ return; }\n            if (breaks[idx-1] <= +input && breaks[idx] >= +input){ upper_idx = idx; }\n        });\n        if (upper_idx === null){ return nullval; }\n        var normalized_input = (+input - breaks[upper_idx-1]) / (breaks[upper_idx] - breaks[upper_idx-1]);\n        if (!isFinite(normalized_input)){ return nullval; }\n        return d3.interpolate(values[upper_idx-1], values[upper_idx])(normalized_input);\n    }\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A data layer is an abstract class representing a data set and its graphical representation within a panel\n * @public\n * @class\n * @param {Object} layout A JSON-serializable object describing the layout for this layer\n * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n*/\nLocusZoom.DataLayer = function(layout, parent) {\n    /** @member {Boolean} */\n    this.initialized = false;\n    /** @member {Number} */\n    this.layout_idx = null;\n\n    /** @member {String} */\n    this.id     = null;\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent || null;\n    /**\n     * @member {{group: d3.selection, container: d3.selection, clipRect: d3.selection}}\n     */\n    this.svg    = {};\n\n    /** @member {LocusZoom.Plot} */\n    this.parent_plot = null;\n    if (typeof parent != \"undefined\" && parent instanceof LocusZoom.Panel){ this.parent_plot = parent.parent; }\n\n    /** @member {Object} */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.DataLayer.DefaultLayout);\n    if (this.layout.id){ this.id = this.layout.id; }\n\n    // Ensure any axes defined in the layout have an explicit axis number (default: 1)\n    if (this.layout.x_axis !== {} && typeof this.layout.x_axis.axis !== \"number\"){ this.layout.x_axis.axis = 1; }\n    if (this.layout.y_axis !== {} && typeof this.layout.y_axis.axis !== \"number\"){ this.layout.y_axis.axis = 1; }\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original data layer state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n    /** @member {Object} */\n    this.state = {};\n    /** @member {String} */\n    this.state_id = null;\n\n    this.setDefaultState();\n\n    // Initialize parameters for storing data and tool tips\n    /** @member {Array} */\n    this.data = [];\n    if (this.layout.tooltip){\n        /** @member {Object} */\n        this.tooltips = {};\n    }\n\n    // Initialize flags for tracking global statuses\n    this.global_statuses = {\n        \"highlighted\": false,\n        \"selected\": false,\n        \"faded\": false,\n        \"hidden\": false\n    };\n    \n    return this;\n\n};\n\n/**\n * Instruct this datalayer to begin tracking additional fields from data sources (does not guarantee that such a field actually exists)\n *\n * Custom plots can use this to dynamically extend datalayer functionality after the plot is drawn\n *\n *  (since removing core fields may break layer functionality, there is presently no hook for the inverse behavior)\n * @param fieldName\n * @param namespace\n * @param {String|String[]} transformations The name (or array of names) of transformations to apply to this field\n * @returns {String} The raw string added to the fields array\n */\nLocusZoom.DataLayer.prototype.addField = function(fieldName, namespace, transformations) {\n    if (!fieldName || !namespace) {\n        throw \"Must specify field name and namespace to use when adding field\";\n    }\n    var fieldString = namespace + \":\" + fieldName;\n    if (transformations) {\n        fieldString += \"|\";\n        if (typeof transformations === \"string\") {\n            fieldString += transformations;\n        } else if (Array.isArray(transformations)) {\n            fieldString += transformations.join(\"|\");\n        } else {\n            throw \"Must provide transformations as either a string or array of strings\";\n        }\n    }\n    var fields = this.layout.fields;\n    if (fields.indexOf(fieldString) === -1) {\n        fields.push(fieldString);\n    }\n    return fieldString;\n};\n\n/**\n * Define default state that should get tracked during the lifetime of this layer.\n *\n * In some special custom usages, it may be useful to completely reset a panel (eg \"click for\n *   genome region\" links), plotting new data that invalidates any previously tracked state.  This hook makes it\n *   possible to reset without destroying the panel entirely. It is used by `Plot.clearPanelData`.\n */\nLocusZoom.DataLayer.prototype.setDefaultState = function() {\n    // Define state parameters specific to this data layer. Within plot state, this will live under a key\n    //  `panel_name.layer_name`.\n    if (this.parent){\n        this.state = this.parent.state;\n        this.state_id = this.parent.id + \".\" + this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n        LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n            this.state[this.state_id][status] = this.state[this.state_id][status] || [];\n        }.bind(this));\n    }\n};\n\n/**\n * A basic description of keys expected in a layout. Not intended to be directly used or modified by an end user.\n * @protected\n * @type {{type: string, fields: Array, x_axis: {}, y_axis: {}}}\n */\nLocusZoom.DataLayer.DefaultLayout = {\n    type: \"\",\n    fields: [],\n    x_axis: {},\n    y_axis: {}\n};\n\n/**\n * Available statuses that individual elements can have. Each status is described by\n *   a verb/antiverb and an adjective. Verbs and antiverbs are used to generate data layer\n *   methods for updating the status on one or more elements. Adjectives are used in class\n *   names and applied or removed from elements to have a visual representation of the status,\n *   as well as used as keys in the state for tracking which elements are in which status(es)\n * @static\n * @type {{verbs: String[], adjectives: String[], menu_antiverbs: String[]}}\n */\nLocusZoom.DataLayer.Statuses = {\n    verbs: [\"highlight\", \"select\", \"fade\", \"hide\"],\n    adjectives: [\"highlighted\", \"selected\", \"faded\", \"hidden\"],\n    menu_antiverbs: [\"unhighlight\", \"deselect\", \"unfade\", \"show\"]\n};\n\n/**\n * Get the fully qualified identifier for the data layer, prefixed by any parent or container elements\n *\n * @returns {string} A dot-delimited string of the format <plot>.<panel>.<data_layer>\n */\nLocusZoom.DataLayer.prototype.getBaseId = function(){\n    return this.parent_plot.id + \".\" + this.parent.id + \".\" + this.id;\n};\n\n/**\n * Determine the pixel height of data-bound objects represented inside this data layer. (excluding elements such as axes)\n *\n * May be used by operations that resize the data layer to fit available data\n *\n * @public\n * @returns {number}\n */\nLocusZoom.DataLayer.prototype.getAbsoluteDataHeight = function(){\n    var dataBCR = this.svg.group.node().getBoundingClientRect();\n    return dataBCR.height;\n};\n\n/**\n * Whether transitions can be applied to this data layer\n * @returns {boolean}\n */\nLocusZoom.DataLayer.prototype.canTransition = function(){\n    if (!this.layout.transition){ return false; }\n    return !(this.parent_plot.panel_boundaries.dragging || this.parent_plot.interaction.panel_id);\n};\n\n/**\n * Fetch the fully qualified ID to be associated with a specific visual element, based on the data to which that\n *   element is bound. In general this element ID will be unique, allowing it to be addressed directly via selectors.\n * @param {String|Object} element\n * @returns {String}\n */\nLocusZoom.DataLayer.prototype.getElementId = function(element){\n    var element_id = \"element\";\n    if (typeof element == \"string\"){\n        element_id = element;\n    } else if (typeof element == \"object\"){\n        var id_field = this.layout.id_field || \"id\";\n        if (typeof element[id_field] == \"undefined\"){\n            throw(\"Unable to generate element ID\");\n        }\n        element_id = element[id_field].toString().replace(/\\W/g,\"\");\n    }\n    return (this.getBaseId() + \"-\" + element_id).replace(/(:|\\.|\\[|\\]|,)/g, \"_\");\n};\n\n/**\n * Fetch an ID that may bind a data element to a separate visual node for displaying status\n * Examples of this might be seperate visual nodes to show select/highlight statuses, or\n * even a common/shared node to show status across many elements in a set.\n * Abstract method. It should be overridden by data layers that implement seperate status\n * nodes specifically to the use case of the data layer type.\n * @param {String|Object} element\n * @returns {String|null}\n */\nLocusZoom.DataLayer.prototype.getElementStatusNodeId = function(element){\n    return null;\n};\n\n/**\n * Returns a reference to the underlying data associated with a single visual element in the data layer, as\n *   referenced by the unique identifier for the element\n\n * @param {String} id The unique identifier for the element, as defined by `getElementId`\n * @returns {Object|null} The data bound to that element\n */\nLocusZoom.DataLayer.prototype.getElementById = function(id){\n    var selector = d3.select(\"#\" + id.replace(/(:|\\.|\\[|\\]|,)/g, \"\\\\$1\"));\n    if (!selector.empty() && selector.data() && selector.data().length){\n        return selector.data()[0];\n    } else {\n        return null;\n    }\n};\n\n/**\n * Basic method to apply arbitrary methods and properties to data elements.\n *   This is called on all data immediately after being fetched.\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyDataMethods = function(){\n    this.data.forEach(function(d, i){\n        // Basic toHTML() method - return the stringified value in the id_field, if defined.\n        this.data[i].toHTML = function(){\n            var id_field = this.layout.id_field || \"id\";\n            var html = \"\";\n            if (this.data[i][id_field]){ html = this.data[i][id_field].toString(); }\n            return html;\n        }.bind(this);\n        // getDataLayer() method - return a reference to the data layer\n        this.data[i].getDataLayer = function(){\n            return this;\n        }.bind(this);\n        // deselect() method - shortcut method to deselect the element\n        this.data[i].deselect = function(){\n            var data_layer = this.getDataLayer();\n            data_layer.unselectElement(this);\n        };\n    }.bind(this));\n    this.applyCustomDataMethods();\n    return this;\n};\n\n/**\n * Hook that allows custom datalayers to apply additional methods and properties to data elements as needed\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.applyCustomDataMethods = function(){\n    return this;\n};\n\n/**\n * Initialize a data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.initialize = function(){\n\n    // Append a container group element to house the main data layer group element and the clip path\n    this.svg.container = this.parent.svg.group.append(\"g\")\n        .attr(\"class\", \"lz-data_layer-container\")\n        .attr(\"id\", this.getBaseId() + \".data_layer_container\");\n        \n    // Append clip path to the container element\n    this.svg.clipRect = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\")\n        .append(\"rect\");\n    \n    // Append svg group for rendering all data layer elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".data_layer\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    return this;\n\n};\n\n/**\n * Move a data layer up relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveUp = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index + 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Move a data layer down relative to others by z-index\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.moveDown = function(){\n    if (this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1]){\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index] = this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1];\n        this.parent.data_layer_ids_by_z_index[this.layout.z_index - 1] = this.id;\n        this.parent.resortDataLayers();\n    }\n    return this;\n};\n\n/**\n * Apply scaling functions to an element or parameter as needed, based on its layout and the element's data\n * If the layout parameter is already a primitive type, simply return the value as given\n * @param {Array|Number|String|Object} layout\n * @param {*} data The value to be used with the filter\n * @returns {*} The transformed value\n */\nLocusZoom.DataLayer.prototype.resolveScalableParameter = function(layout, data){\n    var ret = null;\n    if (Array.isArray(layout)){\n        var idx = 0;\n        while (ret === null && idx < layout.length){\n            ret = this.resolveScalableParameter(layout[idx], data);\n            idx++;\n        }\n    } else {\n        switch (typeof layout){\n        case \"number\":\n        case \"string\":\n            ret = layout;\n            break;\n        case \"object\":\n            if (layout.scale_function){\n                if(layout.field) {\n                    var f = new LocusZoom.Data.Field(layout.field);\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, f.resolve(data));\n                } else {\n                    ret = LocusZoom.ScaleFunctions.get(layout.scale_function, layout.parameters || {}, data);\n                }\n            }\n            break;\n        }\n    }\n    return ret;\n};\n\n/**\n * Generate dimension extent function based on layout parameters\n * @param {('x'|'y')} dimension\n */\nLocusZoom.DataLayer.prototype.getAxisExtent = function(dimension){\n\n    if ([\"x\", \"y\"].indexOf(dimension) === -1){\n        throw(\"Invalid dimension identifier passed to LocusZoom.DataLayer.getAxisExtent()\");\n    }\n\n    var axis_name = dimension + \"_axis\";\n    var axis_layout = this.layout[axis_name];\n\n    // If a floor AND a ceiling are explicitly defined then just return that extent and be done\n    if (!isNaN(axis_layout.floor) && !isNaN(axis_layout.ceiling)){\n        return [+axis_layout.floor, +axis_layout.ceiling];\n    }\n\n    // If a field is defined for the axis and the data layer has data then generate the extent from the data set\n    var data_extent = [];\n    if (axis_layout.field && this.data) {\n        if (!this.data.length) {\n            // If data has been fetched (but no points in region), enforce the min_extent (with no buffers,\n            //  because we don't need padding around an empty screen)\n            data_extent = axis_layout.min_extent || [];\n            return data_extent;\n        } else {\n            data_extent = d3.extent(this.data, function (d) {\n                var f = new LocusZoom.Data.Field(axis_layout.field);\n                return +f.resolve(d);\n            });\n\n            // Apply upper/lower buffers, if applicable\n            var original_extent_span = data_extent[1] - data_extent[0];\n            if (!isNaN(axis_layout.lower_buffer)) {\n                data_extent[0] -= original_extent_span * axis_layout.lower_buffer;\n            }\n            if (!isNaN(axis_layout.upper_buffer)) {\n                data_extent[1] += original_extent_span * axis_layout.upper_buffer;\n            }\n\n            if (typeof axis_layout.min_extent == \"object\") {\n                // The data should span at least the range specified by min_extent, an array with [low, high]\n                var range_min = axis_layout.min_extent[0];\n                var range_max = axis_layout.min_extent[1];\n                if (!isNaN(range_min) && !isNaN(range_max)) {\n                    data_extent[0] = Math.min(data_extent[0], range_min);\n                }\n                if (!isNaN(range_max)) {\n                    data_extent[1] = Math.max(data_extent[1], range_max);\n                }\n            }\n            // If specified, floor and ceiling will override the actual data range\n            return [\n                isNaN(axis_layout.floor) ? data_extent[0] : axis_layout.floor,\n                isNaN(axis_layout.ceiling) ? data_extent[1] : axis_layout.ceiling\n            ];\n        }\n    }\n\n    // If this is for the x axis and no extent could be generated yet but state has a defined start and end\n    // then default to using the state-defined region as the extent\n    if (dimension === \"x\" && !isNaN(this.state.start) && !isNaN(this.state.end)) {\n        return [this.state.start, this.state.end];\n    }\n\n    // No conditions met for generating a valid extent, return an empty array\n    return [];\n\n};\n\n/**\n * Allow this data layer to tell the panel what axis ticks it thinks it will require. The panel may choose whether\n *   to use some, all, or none of these when rendering, either alone or in conjunction with other data layers.\n *\n *   This method is a stub and should be overridden in data layers that need to specify custom behavior.\n *\n * @param {('x'|'y1'|'y2')} dimension\n * @param {Object} [config] Additional parameters for the panel to specify how it wants ticks to be drawn. The names\n *   and meanings of these parameters may vary between different data layers.\n * @returns {Object[]}\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.DataLayer.prototype.getTicks = function (dimension, config) {\n    if ([\"x\", \"y1\", \"y2\"].indexOf(dimension) === -1) {\n        throw(\"Invalid dimension identifier at layer level\" + dimension);\n    }\n    return [];\n};\n\n/**\n * Generate a tool tip for a given element\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.createTooltip = function(d, id){\n    if (typeof this.layout.tooltip != \"object\"){\n        throw (\"DataLayer [\" + this.id + \"] layout does not define a tooltip\");\n    }\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    if (this.tooltips[id]){\n        this.positionTooltip(id);\n        return;\n    }\n    this.tooltips[id] = {\n        data: d,\n        arrow: null,\n        selector: d3.select(this.parent_plot.svg.node().parentNode).append(\"div\")\n            .attr(\"class\", \"lz-data_layer-tooltip\")\n            .attr(\"id\", id + \"-tooltip\")\n    };\n    this.updateTooltip(d);\n    return this;\n};\n\n/**\n * Update a tool tip (generate its inner HTML)\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n */\nLocusZoom.DataLayer.prototype.updateTooltip = function(d, id){\n    if (typeof id == \"undefined\"){ id = this.getElementId(d); }\n    // Empty the tooltip of all HTML (including its arrow!)\n    this.tooltips[id].selector.html(\"\");\n    this.tooltips[id].arrow = null;\n    // Set the new HTML\n    if (this.layout.tooltip.html){\n        this.tooltips[id].selector.html(LocusZoom.parseFields(d, this.layout.tooltip.html));\n    }\n    // If the layout allows tool tips on this data layer to be closable then add the close button\n    // and add padding to the tooltip to accommodate it\n    if (this.layout.tooltip.closable){\n        this.tooltips[id].selector.insert(\"button\", \":first-child\")\n            .attr(\"class\", \"lz-tooltip-close-button\")\n            .attr(\"title\", \"Close\")\n            .text(\"×\")\n            .on(\"click\", function(){\n                this.destroyTooltip(id);\n            }.bind(this));\n    }\n    // Apply data directly to the tool tip for easier retrieval by custom UI elements inside the tool tip\n    this.tooltips[id].selector.data([d]);\n    // Reposition and draw a new arrow\n    this.positionTooltip(id);\n    return this;\n};\n\n/**\n * Destroy tool tip - remove the tool tip element from the DOM and delete the tool tip's record on the data layer\n * @param {String|Object} d The element associated with the tooltip\n * @param {String} [id] An identifier to the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyTooltip = function(d, id){\n    if (typeof d == \"string\"){\n        id = d;\n    } else if (typeof id == \"undefined\"){\n        id = this.getElementId(d);\n    }\n    if (this.tooltips[id]){\n        if (typeof this.tooltips[id].selector == \"object\"){\n            this.tooltips[id].selector.remove();\n        }\n        delete this.tooltips[id];\n    }\n    return this;\n};\n\n/**\n * Loop through and destroy all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.destroyAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.destroyTooltip(id);\n    }\n    return this;\n};\n\n//\n/**\n * Position tool tip - naïve function to place a tool tip to the lower right of the current mouse element\n *   Most data layers reimplement this method to position tool tips specifically for the data they display\n * @param {String} id The identifier of the tooltip to position\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionTooltip = function(id){\n    if (typeof id != \"string\"){\n        throw (\"Unable to position tooltip: id is not a string\");\n    }\n    // Position the div itself\n    this.tooltips[id].selector\n        .style(\"left\", (d3.event.pageX) + \"px\")\n        .style(\"top\", (d3.event.pageY) + \"px\");\n    // Create / update position on arrow connecting tooltip to data\n    if (!this.tooltips[id].arrow){\n        this.tooltips[id].arrow = this.tooltips[id].selector.append(\"div\")\n            .style(\"position\", \"absolute\")\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_top_left\");\n    }\n    this.tooltips[id].arrow\n        .style(\"left\", \"-1px\")\n        .style(\"top\", \"-1px\");\n    return this;\n};\n\n/**\n * Loop through and position all tool tips on this data layer\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.positionAllTooltips = function(){\n    for (var id in this.tooltips){\n        this.positionTooltip(id);\n    }\n    return this;\n};\n\n/**\n * Show or hide a tool tip by ID depending on directives in the layout and state values relative to the ID\n * @param {String|Object} element The element associated with the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.showOrHideTooltip = function(element){\n    \n    if (typeof this.layout.tooltip != \"object\"){ return; }\n    var id = this.getElementId(element);\n\n    var resolveStatus = function(statuses, directive, operator){\n        var status = null;\n        if (typeof statuses != \"object\" || statuses === null){ return null; }\n        if (Array.isArray(directive)){\n            if (typeof operator == \"undefined\"){ operator = \"and\"; }\n            if (directive.length === 1){\n                status = statuses[directive[0]];\n            } else {\n                status = directive.reduce(function(previousValue, currentValue) {\n                    if (operator === \"and\"){\n                        return statuses[previousValue] && statuses[currentValue];\n                    } else if (operator === \"or\"){\n                        return statuses[previousValue] || statuses[currentValue];\n                    }\n                    return null;\n                });\n            }\n        } else if (typeof directive == \"object\"){\n            var sub_status;\n            for (var sub_operator in directive){\n                sub_status = resolveStatus(statuses, directive[sub_operator], sub_operator);\n                if (status === null){\n                    status = sub_status;\n                } else if (operator === \"and\"){\n                    status = status && sub_status;\n                } else if (operator === \"or\"){\n                    status = status || sub_status;\n                }\n            }\n        }\n        return status;\n    };\n\n    var show_directive = {};\n    if (typeof this.layout.tooltip.show == \"string\"){\n        show_directive = { and: [ this.layout.tooltip.show ] };\n    } else if (typeof this.layout.tooltip.show == \"object\"){\n        show_directive = this.layout.tooltip.show;\n    }\n\n    var hide_directive = {};\n    if (typeof this.layout.tooltip.hide == \"string\"){\n        hide_directive = { and: [ this.layout.tooltip.hide ] };\n    } else if (typeof this.layout.tooltip.hide == \"object\"){\n        hide_directive = this.layout.tooltip.hide;\n    }\n\n    var statuses = {};\n    LocusZoom.DataLayer.Statuses.adjectives.forEach(function(status){\n        var antistatus = \"un\" + status;\n        statuses[status] = this.state[this.state_id][status].indexOf(id) !== -1;\n        statuses[antistatus] = !statuses[status];\n    }.bind(this));\n\n    var show_resolved = resolveStatus(statuses, show_directive);\n    var hide_resolved = resolveStatus(statuses, hide_directive);\n\n    // Only show tooltip if the resolved logic explicitly shows and explicitly not hides the tool tip\n    // Otherwise ensure tooltip does not exist\n    if (show_resolved && !hide_resolved){\n        this.createTooltip(element);\n    } else {\n        this.destroyTooltip(element);\n    }\n\n    return this;\n    \n};\n\n/**\n * Find the elements (or indices) that match any of a set of provided filters\n * @protected\n * @param {Array[]} filters A list of filter entries: [field, value] (for equivalence testing) or\n *   [field, operator, value] for other operators\n * @param {('indexes'|'elements')} [return_type='indexes'] Specify whether to return either the indices of the matching\n *   elements, or references to the elements themselves\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filter = function(filters, return_type){\n    if (typeof return_type == \"undefined\" || [\"indexes\",\"elements\"].indexOf(return_type) === -1){\n        return_type = \"indexes\";\n    }\n    if (!Array.isArray(filters)){ return []; }\n    var test = function(element, filter){\n        var operators = {\n            \"=\": function(a,b){ return a === b; },\n            \"<\": function(a,b){ return a < b; },\n            \"<=\": function(a,b){ return a <= b; },\n            \">\": function(a,b){ return a > b; },\n            \">=\": function(a,b){ return a >= b; },\n            \"%\": function(a,b){ return a % b; }\n        };\n        if (!Array.isArray(filter)){ return false; }\n        if (filter.length === 2){\n            return element[filter[0]] === filter[1];\n        } else if (filter.length === 3 && operators[filter[1]]){\n            return operators[filter[1]](element[filter[0]], filter[2]);\n        } else {\n            return false;\n        }\n    };\n    var matches = [];\n    this.data.forEach(function(element, idx){\n        var match = true;\n        filters.forEach(function(filter){\n            if (!test(element, filter)){ match = false; }\n        });\n        if (match){ matches.push(return_type === \"indexes\" ? idx : element); }\n    });\n    return matches;\n};\n\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterIndexes = function(filters){ return this.filter(filters, \"indexes\"); };\n/**\n * @param filters\n * @returns {Array}\n */\nLocusZoom.DataLayer.prototype.filterElements = function(filters){ return this.filter(filters, \"elements\"); };\n\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset a single element's status\n    // TODO: Improve documentation for dynamically generated methods/properties\n    LocusZoom.DataLayer.prototype[verb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, true, exclusive);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"Element\"] = function(element, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        this.setElementStatus(adjective, element, false, exclusive);\n        return this;\n    };\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.DataLayer.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.DataLayer.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.DataLayer.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n/**\n * Toggle a status (e.g. highlighted, selected, identified) on an element\n * @param {String} status The name of a recognized status to be added/removed on an appropriate element\n * @param {String|Object} element The data bound to the element of interest\n * @param {Boolean} toggle True to add the status (and associated CSS styles); false to remove it\n * @param {Boolean} exclusive Whether to only allow a state for a single element at a time\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatus = function(status, element, toggle, exclusive){\n    // Sanity checks\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof element == \"undefined\"){\n        throw(\"Invalid element passed to DataLayer.setElementStatus()\");\n    }\n    if (typeof toggle == \"undefined\"){\n        toggle = true;\n    }\n\n    // Get an ID for the element or return having changed nothing\n    try {\n        var element_id = this.getElementId(element);\n    } catch (get_element_id_error){\n        return this;\n    }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Set/unset the proper status class on the appropriate DOM element(s)\n    d3.select(\"#\" + element_id).classed(\"lz-data_layer-\" + this.layout.type + \"-\" + status, toggle);\n    var element_status_node_id = this.getElementStatusNodeId(element);\n    if (element_status_node_id !== null){\n        d3.select(\"#\" + element_status_node_id).classed(\"lz-data_layer-\" + this.layout.type + \"-statusnode-\" + status, toggle);\n    }\n    \n    // Track element ID in the proper status state array\n    var element_status_idx = this.state[this.state_id][status].indexOf(element_id);\n    if (toggle && element_status_idx === -1){\n        this.state[this.state_id][status].push(element_id);\n    }\n    if (!toggle && element_status_idx !== -1){\n        this.state[this.state_id][status].splice(element_status_idx, 1);\n    }\n    \n    // Trigger tool tip show/hide logic\n    this.showOrHideTooltip(element);\n\n    // Trigger layout changed event hook\n    this.parent.emit(\"layout_changed\", true);\n    if (status === \"selected\") {\n        // Notify parents that a given element has been interacted with. For now, we will only notify on\n        //   \"selected\" type events, which is (usually) a toggle-able state. If elements are exclusive, two selection\n        //   events will be sent in short order as the previously selected element has to be de-selected first\n        this.parent.emit(\"element_selection\", { element: element, active: toggle }, true);\n    }\n    return this;\n    \n};\n\n/**\n * Toggle a status on elements in the data layer based on a set of filters\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setElementStatusByFilters()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; } else { toggle = !!toggle; }\n    if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n    if (!Array.isArray(filters)){ filters = []; }\n\n    // Enforce exclusivity (force all elements to have the opposite of toggle first)\n    if (exclusive){\n        this.setAllElementStatus(status, !toggle);\n    }\n    \n    // Apply statuses\n    this.filterElements(filters).forEach(function(element){\n        this.setElementStatus(status, element, toggle);\n    }.bind(this));\n    \n    return this;\n};\n\n/**\n * Toggle a status on all elements in the data layer\n * @param {String} status\n * @param {Boolean} toggle\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.setAllElementStatus = function(status, toggle){\n    \n    // Sanity check\n    if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n        throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n    }\n    if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n    if (typeof toggle == \"undefined\"){ toggle = true; }\n\n    // Apply statuses\n    if (toggle){\n        this.data.forEach(function(element){\n            this.setElementStatus(status, element, true);\n        }.bind(this));\n    } else {\n        var status_ids = this.state[this.state_id][status].slice();\n        status_ids.forEach(function(id){\n            var element = this.getElementById(id);\n            if (typeof element == \"object\" && element !== null){\n                this.setElementStatus(status, element, false);\n            }\n        }.bind(this));\n        this.state[this.state_id][status] = [];\n    }\n\n    // Update global status flag\n    this.global_statuses[status] = toggle;\n\n    return this;\n};\n\n/**\n * Apply all layout-defined behaviors (DOM event handlers) to a selection of elements\n * @param {d3.selection} selection\n */\nLocusZoom.DataLayer.prototype.applyBehaviors = function(selection){\n    if (typeof this.layout.behaviors != \"object\"){ return; }\n    Object.keys(this.layout.behaviors).forEach(function(directive){\n        var event_match = /(click|mouseover|mouseout)/.exec(directive);\n        if (!event_match){ return; }\n        selection.on(event_match[0] + \".\" + directive, this.executeBehaviors(directive, this.layout.behaviors[directive]));\n    }.bind(this));\n};\n\n/**\n * Generate a function that executes an arbitrary list of behaviors on an element during an event\n * @param {String} directive The name of the event, as described in layout.behaviors for this datalayer\n * @param {Object} behaviors An object describing the behavior to attach to this single element\n * @param {string} behaviors.action The name of the action that would trigger this behavior (eg click, mouseover, etc)\n * @param {string} behaviors.status What status to apply to the element when this behavior is triggered (highlighted,\n *  selected, etc)\n * @param {string} [behaviors.exclusive] Whether triggering the event for this element should unset the relevant status\n *   for all other elements. Useful for, eg, click events that exclusively highlight one thing.\n * @returns {function(this:LocusZoom.DataLayer)} Return a function that handles the event in context with the behavior\n *   and the element- can be attached as an event listener\n */\nLocusZoom.DataLayer.prototype.executeBehaviors = function(directive, behaviors) {\n\n    // Determine the required state of control and shift keys during the event\n    var requiredKeyStates = {\n        \"ctrl\": (directive.indexOf(\"ctrl\") !== -1),\n        \"shift\": (directive.indexOf(\"shift\") !== -1)\n    };\n\n    return function(element){\n\n        // Do nothing if the required control and shift key presses (or lack thereof) doesn't match the event\n        if (requiredKeyStates.ctrl !== !!d3.event.ctrlKey || requiredKeyStates.shift !== !!d3.event.shiftKey){ return; }\n\n        // Loop through behaviors making each one go in succession\n        behaviors.forEach(function(behavior){\n            \n            // Route first by the action, if defined\n            if (typeof behavior != \"object\" || behavior === null){ return; }\n            \n            switch (behavior.action){\n                \n            // Set a status (set to true regardless of current status, optionally with exclusivity)\n            case \"set\":\n                this.setElementStatus(behavior.status, element, true, behavior.exclusive);\n                break;\n                \n            // Unset a status (set to false regardless of current status, optionally with exclusivity)\n            case \"unset\":\n                this.setElementStatus(behavior.status, element, false, behavior.exclusive);\n                break;\n                \n            // Toggle a status\n            case \"toggle\":\n                var current_status_boolean = (this.state[this.state_id][behavior.status].indexOf(this.getElementId(element)) !== -1);\n                var exclusive = behavior.exclusive && !current_status_boolean;\n                this.setElementStatus(behavior.status, element, !current_status_boolean, exclusive);\n                break;\n                \n            // Link to a dynamic URL\n            case \"link\":\n                if (typeof behavior.href == \"string\"){\n                    var url = LocusZoom.parseFields(element, behavior.href);\n                    if (typeof behavior.target == \"string\"){\n                        window.open(url, behavior.target);\n                    } else {\n                        window.location.href = url;\n                    }\n                }\n                break;\n                \n            // Action not defined, just return\n            default:\n                break;\n                \n            }\n            \n            return;\n            \n        }.bind(this));\n\n    }.bind(this);\n\n};\n\n/**\n * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n *   Necessary for positioning any HTML elements over the panel\n * @returns {{x: Number, y: Number}}\n */\nLocusZoom.DataLayer.prototype.getPageOrigin = function(){\n    var panel_origin = this.parent.getPageOrigin();\n    return {\n        x: panel_origin.x + this.parent.layout.margin.left,\n        y: panel_origin.y + this.parent.layout.margin.top\n    };\n};\n\n/**\n * Get a data layer's current underlying data in a standard format (e.g. JSON or CSV)\n * @param {('csv'|'tsv'|'json')} format How to export the data\n * @returns {*}\n */\nLocusZoom.DataLayer.prototype.exportData = function(format){\n    var default_format = \"json\";\n    format = format || default_format;\n    format = (typeof format == \"string\" ? format.toLowerCase() : default_format);\n    if ([\"json\",\"csv\",\"tsv\"].indexOf(format) === -1){ format = default_format; }\n    var ret;\n    switch (format){\n    case \"json\":\n        try {\n            ret = JSON.stringify(this.data);\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export JSON data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    case \"tsv\":\n    case \"csv\":\n        try {\n            var jsonified = JSON.parse(JSON.stringify(this.data));\n            if (typeof jsonified != \"object\"){\n                ret = jsonified.toString();\n            } else if (!Array.isArray(jsonified)){\n                ret = \"Object\";\n            } else {\n                var delimiter = (format === \"tsv\") ? \"\\t\" : \",\";\n                var header = this.layout.fields.map(function(header){\n                    return JSON.stringify(header);\n                }).join(delimiter) + \"\\n\";\n                ret = header + jsonified.map(function(record){\n                    return this.layout.fields.map(function(field){\n                        if (typeof record[field] == \"undefined\"){\n                            return JSON.stringify(null);\n                        } else if (typeof record[field] == \"object\" && record[field] !== null){\n                            return Array.isArray(record[field]) ? \"\\\"[Array(\" + record[field].length + \")]\\\"\" : \"\\\"[Object]\\\"\";\n                        } else {\n                            return JSON.stringify(record[field]);\n                        }\n                    }).join(delimiter);\n                }.bind(this)).join(\"\\n\");\n            }\n        } catch (e){\n            ret = null;\n            console.error(\"Unable to export CSV data from data layer: \" + this.getBaseId() + \";\", e);\n        }\n        break;\n    }\n    return ret;\n};\n\n/**\n * Position the datalayer and all tooltips\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.DataLayer.prototype.draw = function(){\n    this.svg.container.attr(\"transform\", \"translate(\" + this.parent.layout.cliparea.origin.x +  \",\" + this.parent.layout.cliparea.origin.y + \")\");\n    this.svg.clipRect\n        .attr(\"width\", this.parent.layout.cliparea.width)\n        .attr(\"height\", this.parent.layout.cliparea.height);\n    this.positionAllTooltips();\n    return this;\n};\n\n\n/**\n * Re-Map a data layer to reflect changes in the state of a plot (such as viewing region/ chromosome range)\n * @return {Promise}\n */\nLocusZoom.DataLayer.prototype.reMap = function(){\n\n    this.destroyAllTooltips(); // hack - only non-visible tooltips should be destroyed\n    // and then recreated if returning to visibility\n\n    // Fetch new data. Datalayers are only given access to the final consolidated data from the chain (not headers or raw payloads)\n    var promise = this.parent_plot.lzd.getData(this.state, this.layout.fields);\n    promise.then(function(new_data) {\n        this.data = new_data.body;\n        this.applyDataMethods();\n        this.initialized = true;\n    }.bind(this));\n\n    return promise;\n};\n\n\n/**\n * The central registry of known data layer definitions (which may be stored in separate files due to length)\n * @namespace\n */\nLocusZoom.DataLayers = (function() {\n    var obj = {};\n    var datalayers = {};\n    /**\n     * @name LocusZoom.DataLayers.get\n     * @param {String} name The name of the datalayer\n     * @param {Object} layout The configuration object for this data layer\n     * @param {LocusZoom.DataLayer|LocusZoom.Panel} parent Where this layout is used\n     * @returns {LocusZoom.DataLayer}\n     */\n    obj.get = function(name, layout, parent) {\n        if (!name) {\n            return null;\n        } else if (datalayers[name]) {\n            if (typeof layout != \"object\"){\n                throw(\"invalid layout argument for data layer [\" + name + \"]\");\n            } else {\n                return new datalayers[name](layout, parent);\n            }\n        } else {\n            throw(\"data layer [\" + name + \"] not found\");\n        }\n    };\n\n    /**\n     * @name LocusZoom.DataLayers.set\n     * @protected\n     * @param {String} name\n     * @param {Function} datalayer Constructor for the datalayer\n     */\n    obj.set = function(name, datalayer) {\n        if (datalayer) {\n            if (typeof datalayer != \"function\"){\n                throw(\"unable to set data layer [\" + name + \"], argument provided is not a function\");\n            } else {\n                datalayers[name] = datalayer;\n                datalayers[name].prototype = new LocusZoom.DataLayer();\n            }\n        } else {\n            delete datalayers[name];\n        }\n    };\n\n    /**\n     * Add a new type of datalayer to the registry of known layer types\n     * @name LocusZoom.DataLayers.add\n     * @param {String} name The name of the data layer to register\n     * @param {Function} datalayer\n     */\n    obj.add = function(name, datalayer) {\n        if (datalayers[name]) {\n            throw(\"data layer already exists with name: \" + name);\n        } else {\n            obj.set(name, datalayer);\n        }\n    };\n\n    /**\n     * Register a new datalayer that inherits and extends basic behaviors from a known datalayer\n     * @param {String} parent_name The name of the parent data layer whose behavior is to be extended\n     * @param {String} name The name of the new datalayer to register\n     * @param {Object} [overrides] Object of properties and methods to combine with the prototype of the parent datalayer\n     * @returns {Function} The constructor for the new child class\n     */\n    obj.extend = function(parent_name, name, overrides) {\n        // TODO: Consider exposing additional constructor argument, if there is a use case for very granular extension\n        overrides = overrides || {};\n\n        var parent = datalayers[parent_name];\n        if (!parent) {\n            throw \"Attempted to subclass an unknown or unregistered datalayer type\";\n        }\n        if (typeof overrides !== \"object\") {\n            throw \"Must specify an object of properties and methods\";\n        }\n        var child = LocusZoom.subclass(parent, overrides);\n        // Bypass .set() because we want a layer of inheritance below `DataLayer`\n        datalayers[name] = child;\n        return child;\n    };\n\n    /**\n     * List the names of all known datalayers\n     * @name LocusZoom.DataLayers.list\n     * @returns {String[]}\n     */\n    obj.list = function() {\n        return Object.keys(datalayers);\n    };\n\n    return obj;\n})();\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * Manage known layouts for all parts of the LocusZoom plot\n *\n * This registry allows for layouts to be reused and customized many times on a page, using a common base pattern.\n *   It handles the work of ensuring that each new instance of the layout has no shared state with other copies.\n *\n * @class\n */\nLocusZoom.Layouts = (function() {\n    var obj = {};\n    var layouts = {\n        \"plot\": {},\n        \"panel\": {},\n        \"data_layer\": {},\n        \"dashboard\": {},\n        \"tooltip\": {}\n    };\n\n    /**\n     * Generate a layout configuration object\n     * @param {('plot'|'panel'|'data_layer'|'dashboard'|'tooltip')} type The type of layout to retrieve\n     * @param {string} name Identifier of the predefined layout within the specified type\n     * @param {object} [modifications] Custom properties that override default settings for this layout\n     * @returns {object} A JSON-serializable object representation\n     */\n    obj.get = function(type, name, modifications) {\n        if (typeof type != \"string\" || typeof name != \"string\") {\n            throw(\"invalid arguments passed to LocusZoom.Layouts.get, requires string (layout type) and string (layout name)\");\n        } else if (layouts[type][name]) {\n            // Get the base layout\n            var layout = LocusZoom.Layouts.merge(modifications || {}, layouts[type][name]);\n            // If \"unnamespaced\" is true then strike that from the layout and return the layout without namespacing\n            if (layout.unnamespaced){\n                delete layout.unnamespaced;\n                return JSON.parse(JSON.stringify(layout));\n            }\n            // Determine the default namespace for namespaced values\n            var default_namespace = \"\";\n            if (typeof layout.namespace == \"string\"){\n                default_namespace = layout.namespace;\n            } else if (typeof layout.namespace == \"object\" && Object.keys(layout.namespace).length){\n                if (typeof layout.namespace.default != \"undefined\"){\n                    default_namespace = layout.namespace.default;\n                } else {\n                    default_namespace = layout.namespace[Object.keys(layout.namespace)[0]].toString();\n                }\n            }\n            default_namespace += default_namespace.length ? \":\" : \"\";\n            // Apply namespaces to layout, recursively\n            var applyNamespaces = function(element, namespace){\n                if (namespace){\n                    if (typeof namespace == \"string\"){\n                        namespace = { default: namespace }; \n                    }\n                } else {\n                    namespace = { default: \"\" };\n                }\n                if (typeof element == \"string\"){\n                    var re = /\\{\\{namespace(\\[[A-Za-z_0-9]+\\]|)\\}\\}/g;\n                    var match, base, key, resolved_namespace;\n                    var replace = [];\n                    while ((match = re.exec(element)) !== null){\n                        base = match[0];\n                        key  = match[1].length ? match[1].replace(/(\\[|\\])/g,\"\") : null;\n                        resolved_namespace = default_namespace;\n                        if (namespace != null && typeof namespace == \"object\" && typeof namespace[key] != \"undefined\"){\n                            resolved_namespace = namespace[key] + (namespace[key].length ? \":\" : \"\");\n                        }\n                        replace.push({ base: base, namespace: resolved_namespace });\n                    }\n                    for (var r in replace){\n                        element = element.replace(replace[r].base, replace[r].namespace);\n                    }\n                } else if (typeof element == \"object\" && element != null){\n                    if (typeof element.namespace != \"undefined\"){\n                        var merge_namespace = (typeof element.namespace == \"string\") ? { default: element.namespace } : element.namespace;\n                        namespace = LocusZoom.Layouts.merge(namespace, merge_namespace);\n                    }\n                    var namespaced_element, namespaced_property;\n                    for (var property in element) {\n                        if (property === \"namespace\"){ continue; }\n                        namespaced_element = applyNamespaces(element[property], namespace);\n                        namespaced_property = applyNamespaces(property, namespace);\n                        if (property !== namespaced_property){\n                            delete element[property];\n                        }\n                        element[namespaced_property] = namespaced_element;\n                    }\n                }\n                return element;\n            };\n            layout = applyNamespaces(layout, layout.namespace);\n            // Return the layout as valid JSON only\n            return JSON.parse(JSON.stringify(layout));\n        } else {\n            throw(\"layout type [\" + type + \"] name [\" + name + \"] not found\");\n        }\n    };\n\n    /** @private */\n    obj.set = function(type, name, layout) {\n        if (typeof type != \"string\" || typeof name != \"string\" || typeof layout != \"object\"){\n            throw (\"unable to set new layout; bad arguments passed to set()\");\n        }\n        if (!layouts[type]){\n            layouts[type] = {};\n        }\n        if (layout){\n            return (layouts[type][name] = JSON.parse(JSON.stringify(layout)));\n        } else {\n            delete layouts[type][name];\n            return null;\n        }\n    };\n\n    /**\n     * Register a new layout definition by name.\n     *\n     * @param {string} type The type of layout to add. Usually, this will be one of the predefined LocusZoom types,\n     *   but if you pass a different name, this method will automatically create the new `type` bucket\n     * @param {string} name The identifier of the newly added layout\n     * @param {object} [layout] A JSON-serializable object containing configuration properties for this layout\n     * @returns The JSON representation of the newly created layout\n     */\n    obj.add = function(type, name, layout) {\n        return obj.set(type, name, layout);\n    };\n\n    /**\n     * List all registered layouts\n     * @param [type] Optionally narrow the list to only layouts of a specific type; else return all known layouts\n     * @returns {*}\n     */\n    obj.list = function(type) {\n        if (!layouts[type]){\n            var list = {};\n            Object.keys(layouts).forEach(function(type){\n                list[type] =  Object.keys(layouts[type]);\n            });\n            return list;\n        } else {\n            return Object.keys(layouts[type]);\n        }\n    };\n\n    /**\n     * A helper method used for merging two objects. If a key is present in both, takes the value from the first object\n     *   Values from `default_layout` will be cleanly copied over, ensuring no references or shared state.\n     *\n     * Frequently used for preparing custom layouts. Both objects should be JSON-serializable.\n     *\n     * @param {object} custom_layout An object containing configuration parameters that override or add to defaults\n     * @param {object} default_layout An object containing default settings.\n     * @returns The custom layout is modified in place and also returned from this method.\n     */\n    obj.merge = function (custom_layout, default_layout) {\n        if (typeof custom_layout !== \"object\" || typeof default_layout !== \"object\"){\n            throw(\"LocusZoom.Layouts.merge only accepts two layout objects; \" + (typeof custom_layout) + \", \" + (typeof default_layout) + \" given\");\n        }\n        for (var property in default_layout) {\n            if (!default_layout.hasOwnProperty(property)){ continue; }\n            // Get types for comparison. Treat nulls in the custom layout as undefined for simplicity.\n            // (javascript treats nulls as \"object\" when we just want to overwrite them as if they're undefined)\n            // Also separate arrays from objects as a discrete type.\n            var custom_type  = custom_layout[property] === null ? \"undefined\" : typeof custom_layout[property];\n            var default_type = typeof default_layout[property];\n            if (custom_type === \"object\" && Array.isArray(custom_layout[property])){ custom_type = \"array\"; }\n            if (default_type === \"object\" && Array.isArray(default_layout[property])){ default_type = \"array\"; }\n            // Unsupported property types: throw an exception\n            if (custom_type === \"function\" || default_type === \"function\"){\n                throw(\"LocusZoom.Layouts.merge encountered an unsupported property type\");\n            }\n            // Undefined custom value: pull the default value\n            if (custom_type === \"undefined\"){\n                custom_layout[property] = JSON.parse(JSON.stringify(default_layout[property]));\n                continue;\n            }\n            // Both values are objects: merge recursively\n            if (custom_type === \"object\" && default_type === \"object\"){\n                custom_layout[property] = LocusZoom.Layouts.merge(custom_layout[property], default_layout[property]);\n                continue;\n            }\n        }\n        return custom_layout;\n    };\n\n    return obj;\n})();\n\n\n/**\n * Tooltip Layouts\n * @namespace LocusZoom.Layouts.tooltips\n */\n\n// TODO: Improve documentation of predefined types within layout namespaces\nLocusZoom.Layouts.add(\"tooltip\", \"standard_association\", {\n    namespace: { \"assoc\": \"assoc\" },\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<strong>{{{{namespace[assoc]}}variant}}</strong><br>\"\n        + \"P Value: <strong>{{{{namespace[assoc]}}log_pvalue|logtoscinotation}}</strong><br>\"\n        + \"Ref. Allele: <strong>{{{{namespace[assoc]}}ref_allele}}</strong><br>\"\n        + \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipDataLayer(this).makeLDReference(LocusZoom.getToolTipData(this));\\\">Make LD Reference</a><br>\"\n});\n\nvar covariates_model_association = LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true });\ncovariates_model_association.html += \"<a href=\\\"javascript:void(0);\\\" onclick=\\\"LocusZoom.getToolTipPlot(this).CovariatesModel.add(LocusZoom.getToolTipData(this));\\\">Condition on Variant</a><br>\";\nLocusZoom.Layouts.add(\"tooltip\", \"covariates_model_association\", covariates_model_association);\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_genes\", {\n    closable: true,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"<h4><strong><i>{{gene_name}}</i></strong></h4>\"\n        + \"<div style=\\\"float: left;\\\">Gene ID: <strong>{{gene_id}}</strong></div>\"\n        + \"<div style=\\\"float: right;\\\">Transcript ID: <strong>{{transcript_id}}</strong></div>\"\n        + \"<div style=\\\"clear: both;\\\"></div>\"\n        + \"<table>\"\n        + \"<tr><th>Constraint</th><th>Expected variants</th><th>Observed variants</th><th>Const. Metric</th></tr>\"\n        + \"<tr><td>Synonymous</td><td>{{exp_syn}}</td><td>{{n_syn}}</td><td>z = {{syn_z}}</td></tr>\"\n        + \"<tr><td>Missense</td><td>{{exp_mis}}</td><td>{{n_mis}}</td><td>z = {{mis_z}}</td></tr>\"\n        + \"<tr><td>LoF</td><td>{{exp_lof}}</td><td>{{n_lof}}</td><td>pLI = {{pLI}}</td></tr>\"\n        + \"</table>\"\n        + \"<a href=\\\"http://exac.broadinstitute.org/gene/{{gene_id}}\\\" target=\\\"_new\\\">More data on ExAC</a>\"\n});\n\nLocusZoom.Layouts.add(\"tooltip\", \"standard_intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    closable: false,\n    show: { or: [\"highlighted\", \"selected\"] },\n    hide: { and: [\"unhighlighted\", \"unselected\"] },\n    html: \"{{{{namespace[intervals]}}state_name}}<br>{{{{namespace[intervals]}}start}}-{{{{namespace[intervals]}}end}}\"\n});\n\n/**\n * Data Layer Layouts: represent specific information from a data source\n * @namespace Layouts.data_layer\n*/\n\nLocusZoom.Layouts.add(\"data_layer\", \"significance\", {\n    id: \"significance\",\n    type: \"orthogonal_line\",\n    orientation: \"horizontal\",\n    offset: 4.522\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"recomb_rate\", {\n    namespace: { \"recomb\": \"recomb\" },\n    id: \"recombrate\",\n    type: \"line\",\n    fields: [\"{{namespace[recomb]}}position\", \"{{namespace[recomb]}}recomb_rate\"],\n    z_index: 1,\n    style: {\n        \"stroke\": \"#0000FF\",\n        \"stroke-width\": \"1.5px\"\n    },\n    x_axis: {\n        field: \"{{namespace[recomb]}}position\"\n    },\n    y_axis: {\n        axis: 2,\n        field: \"{{namespace[recomb]}}recomb_rate\",\n        floor: 0,\n        ceiling: 100\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"association_pvalues\", {\n    namespace: { \"assoc\": \"assoc\", \"ld\": \"ld\" },\n    id: \"associationpvalues\",\n    type: \"scatter\",\n    point_shape: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: \"diamond\",\n            else: \"circle\"\n        }\n    },\n    point_size: {\n        scale_function: \"if\",\n        field: \"{{namespace[ld]}}isrefvar\",\n        parameters: {\n            field_value: 1,\n            then: 80,\n            else: 40\n        }\n    },\n    color: [\n        {\n            scale_function: \"if\",\n            field: \"{{namespace[ld]}}isrefvar\",\n            parameters: {\n                field_value: 1,\n                then: \"#9632b8\"\n            }\n        },\n        {\n            scale_function: \"numerical_bin\",\n            field: \"{{namespace[ld]}}state\",\n            parameters: {\n                breaks: [0, 0.2, 0.4, 0.6, 0.8],\n                values: [\"#357ebd\",\"#46b8da\",\"#5cb85c\",\"#eea236\",\"#d43f3a\"]\n            }\n        },\n        \"#B8B8B8\"\n    ],\n    legend: [\n        { shape: \"diamond\", color: \"#9632b8\", size: 40, label: \"LD Ref Var\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#d43f3a\", size: 40, label: \"1.0 > r² ≥ 0.8\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#eea236\", size: 40, label: \"0.8 > r² ≥ 0.6\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#5cb85c\", size: 40, label: \"0.6 > r² ≥ 0.4\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#46b8da\", size: 40, label: \"0.4 > r² ≥ 0.2\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#357ebd\", size: 40, label: \"0.2 > r² ≥ 0.0\", class: \"lz-data_layer-scatter\" },\n        { shape: \"circle\", color: \"#B8B8B8\", size: 40, label: \"no r² data\", class: \"lz-data_layer-scatter\" }\n    ],\n    fields: [\"{{namespace[assoc]}}variant\", \"{{namespace[assoc]}}position\", \"{{namespace[assoc]}}log_pvalue\", \"{{namespace[assoc]}}log_pvalue|logtoscinotation\", \"{{namespace[assoc]}}ref_allele\", \"{{namespace[ld]}}state\", \"{{namespace[ld]}}isrefvar\"],\n    id_field: \"{{namespace[assoc]}}variant\",\n    z_index: 2,\n    x_axis: {\n        field: \"{{namespace[assoc]}}position\"\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[assoc]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.10,\n        min_extent: [ 0, 10 ]\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_association\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"phewas_pvalues\", {\n    namespace: {\"phewas\": \"phewas\"},\n    id: \"phewaspvalues\",\n    type: \"category_scatter\",\n    point_shape: \"circle\",\n    point_size: 70,\n    tooltip_positioning: \"vertical\",\n    id_field: \"{{namespace[phewas]}}id\",\n    fields: [\"{{namespace[phewas]}}id\", \"{{namespace[phewas]}}log_pvalue\", \"{{namespace[phewas]}}trait_group\", \"{{namespace[phewas]}}trait_label\"],\n    x_axis: {\n        field: \"{{namespace[phewas]}}x\",  // Synthetic/derived field added by `category_scatter` layer\n        category_field: \"{{namespace[phewas]}}trait_group\",\n        lower_buffer: 0.025,\n        upper_buffer: 0.025\n    },\n    y_axis: {\n        axis: 1,\n        field: \"{{namespace[phewas]}}log_pvalue\",\n        floor: 0,\n        upper_buffer: 0.15\n    },\n    color: {\n        field: \"{{namespace[phewas]}}trait_group\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [],\n            values: [],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    fill_opacity: 0.7,\n    tooltip: {\n        closable: true,\n        show: { or: [\"highlighted\", \"selected\"] },\n        hide: { and: [\"unhighlighted\", \"unselected\"] },\n        html: [\n            \"<strong>Trait:</strong> {{{{namespace[phewas]}}trait_label|htmlescape}}<br>\",\n            \"<strong>Trait Category:</strong> {{{{namespace[phewas]}}trait_group|htmlescape}}<br>\",\n            \"<strong>P-value:</strong> {{{{namespace[phewas]}}log_pvalue|logtoscinotation|htmlescape}}<br>\"\n        ].join(\"\")\n    },\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    label: {\n        text: \"{{{{namespace[phewas]}}trait_label}}\",\n        spacing: 6,\n        lines: {\n            style: {\n                \"stroke-width\": \"2px\",\n                \"stroke\": \"#333333\",\n                \"stroke-dasharray\": \"2px 2px\"\n            }\n        },\n        filters: [\n            {\n                field: \"{{namespace[phewas]}}log_pvalue\",\n                operator: \">=\",\n                value: 20\n            }\n        ],\n        style: {\n            \"font-size\": \"14px\",\n            \"font-weight\": \"bold\",\n            \"fill\": \"#333333\"\n        }\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genes\", {\n    namespace: { \"gene\": \"gene\", \"constraint\": \"constraint\" },\n    id: \"genes\",\n    type: \"genes\",\n    fields: [\"{{namespace[gene]}}all\", \"{{namespace[constraint]}}all\"],\n    id_field: \"gene_id\",\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_genes\", { unnamespaced: true })\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"genome_legend\", {\n    namespace: { \"genome\": \"genome\" },\n    id: \"genome_legend\",\n    type: \"genome_legend\",\n    fields: [\"{{namespace[genome]}}chr\", \"{{namespace[genome]}}base_pairs\"],\n    x_axis: {\n        floor: 0,\n        ceiling: 2881033286\n    }\n});\n\nLocusZoom.Layouts.add(\"data_layer\", \"intervals\", {\n    namespace: { \"intervals\": \"intervals\" },\n    id: \"intervals\",\n    type: \"intervals\",\n    fields: [\"{{namespace[intervals]}}start\",\"{{namespace[intervals]}}end\",\"{{namespace[intervals]}}state_id\",\"{{namespace[intervals]}}state_name\"],\n    id_field: \"{{namespace[intervals]}}start\",\n    start_field: \"{{namespace[intervals]}}start\",\n    end_field: \"{{namespace[intervals]}}end\",\n    track_split_field: \"{{namespace[intervals]}}state_id\",\n    split_tracks: true,\n    always_hide_legend: false,\n    color: {\n        field: \"{{namespace[intervals]}}state_id\",\n        scale_function: \"categorical_bin\",\n        parameters: {\n            categories: [1,2,3,4,5,6,7,8,9,10,11,12,13],\n            values: [\"rgb(212,63,58)\", \"rgb(250,120,105)\", \"rgb(252,168,139)\", \"rgb(240,189,66)\", \"rgb(250,224,105)\", \"rgb(240,238,84)\", \"rgb(244,252,23)\", \"rgb(23,232,252)\", \"rgb(32,191,17)\", \"rgb(23,166,77)\", \"rgb(32,191,17)\", \"rgb(162,133,166)\", \"rgb(212,212,212)\"],\n            null_value: \"#B8B8B8\"\n        }\n    },\n    legend: [\n        { shape: \"rect\", color: \"rgb(212,63,58)\", width: 9, label: \"Active Promoter\", \"{{namespace[intervals]}}state_id\": 1 },\n        { shape: \"rect\", color: \"rgb(250,120,105)\", width: 9, label: \"Weak Promoter\", \"{{namespace[intervals]}}state_id\": 2 },\n        { shape: \"rect\", color: \"rgb(252,168,139)\", width: 9, label: \"Poised Promoter\", \"{{namespace[intervals]}}state_id\": 3 },\n        { shape: \"rect\", color: \"rgb(240,189,66)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 4 },\n        { shape: \"rect\", color: \"rgb(250,224,105)\", width: 9, label: \"Strong enhancer\", \"{{namespace[intervals]}}state_id\": 5 },\n        { shape: \"rect\", color: \"rgb(240,238,84)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 6 },\n        { shape: \"rect\", color: \"rgb(244,252,23)\", width: 9, label: \"Weak enhancer\", \"{{namespace[intervals]}}state_id\": 7 },\n        { shape: \"rect\", color: \"rgb(23,232,252)\", width: 9, label: \"Insulator\", \"{{namespace[intervals]}}state_id\": 8 },\n        { shape: \"rect\", color: \"rgb(32,191,17)\", width: 9, label: \"Transcriptional transition\", \"{{namespace[intervals]}}state_id\": 9 },\n        { shape: \"rect\", color: \"rgb(23,166,77)\", width: 9, label: \"Transcriptional elongation\", \"{{namespace[intervals]}}state_id\": 10 },\n        { shape: \"rect\", color: \"rgb(136,240,129)\", width: 9, label: \"Weak transcribed\", \"{{namespace[intervals]}}state_id\": 11 },\n        { shape: \"rect\", color: \"rgb(162,133,166)\", width: 9, label: \"Polycomb-repressed\", \"{{namespace[intervals]}}state_id\": 12 },\n        { shape: \"rect\", color: \"rgb(212,212,212)\", width: 9, label: \"Heterochromatin / low signal\", \"{{namespace[intervals]}}state_id\": 13 }\n    ],\n    behaviors: {\n        onmouseover: [\n            { action: \"set\", status: \"highlighted\" }\n        ],\n        onmouseout: [\n            { action: \"unset\", status: \"highlighted\" }\n        ],\n        onclick: [\n            { action: \"toggle\", status: \"selected\", exclusive: true }\n        ],\n        onshiftclick: [\n            { action: \"toggle\", status: \"selected\" }\n        ]\n    },\n    tooltip: LocusZoom.Layouts.get(\"tooltip\", \"standard_intervals\", { unnamespaced: true })\n});\n\n/**\n * Dashboard Layouts: toolbar buttons etc\n  * @namespace Layouts.dashboard\n */\nLocusZoom.Layouts.add(\"dashboard\", \"standard_panel\", {\n    components: [\n        {\n            type: \"remove_panel\",\n            position: \"right\",\n            color: \"red\",\n            group_position: \"end\"\n        },\n        {\n            type: \"move_panel_up\",\n            position: \"right\",\n            group_position: \"middle\"\n        },\n        {\n            type: \"move_panel_down\",\n            position: \"right\",\n            group_position: \"start\",\n            style: { \"margin-left\": \"0.75em\" }\n        }\n    ]\n});                 \n\nLocusZoom.Layouts.add(\"dashboard\", \"standard_plot\", {\n    components: [\n        {\n            type: \"title\",\n            title: \"LocusZoom\",\n            subtitle: \"<a href=\\\"https://statgen.github.io/locuszoom/\\\" target=\\\"_blank\\\">v\" + LocusZoom.version + \"</a>\",\n            position: \"left\"\n        },\n        {\n            type: \"download\",\n            position: \"right\"\n        }\n    ]\n});\n\nvar covariates_model_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\ncovariates_model_plot_dashboard.components.push({\n    type: \"covariates_model\",\n    button_html: \"Model\",\n    button_title: \"Show and edit covariates currently in model\",\n    position: \"left\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"covariates_model_plot\", covariates_model_plot_dashboard);\n\nvar region_nav_plot_dashboard = LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\");\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 500000,\n    button_html: \">>\",\n    position: \"right\",\n    group_position: \"end\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: 50000,\n    button_html: \">\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: 0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"zoom_region\",\n    step: -0.2,\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -50000,\n    button_html: \"<\",\n    position: \"right\",\n    group_position: \"middle\"\n});\nregion_nav_plot_dashboard.components.push({\n    type: \"shift_region\",\n    step: -500000,\n    button_html: \"<<\",\n    position: \"right\",\n    group_position: \"start\"\n});\nLocusZoom.Layouts.add(\"dashboard\", \"region_nav_plot\", region_nav_plot_dashboard);\n\n/**\n * Panel Layouts\n * @namespace Layouts.panel\n */\n\nLocusZoom.Layouts.add(\"panel\", \"association\", {\n    id: \"association\",\n    width: 800,\n    height: 225,\n    min_width:  400,\n    min_height: 200,\n    proportional_width: 1,\n    margin: { top: 35, right: 50, bottom: 40, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_legend\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {\n        x: {\n            label: \"Chromosome {{chr}} (Mb)\",\n            label_offset: 32,\n            tick_format: \"region\",\n            extent: \"state\"\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        },\n        y2: {\n            label: \"Recombination Rate (cM/Mb)\",\n            label_offset: 40\n        }\n    },\n    legend: {\n        orientation: \"vertical\",\n        origin: { x: 55, y: 40 },\n        hidden: true\n    },\n    interaction: {\n        drag_background_to_pan: true,\n        drag_x_ticks_to_scale: true,\n        drag_y1_ticks_to_scale: true,\n        drag_y2_ticks_to_scale: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"recomb_rate\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"association_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genes\", {\n    id: \"genes\",\n    width: 800,\n    height: 225,\n    min_width: 400,\n    min_height: 112.5,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 20, left: 50 },\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"resize_to_data\",\n            position: \"right\"\n        });\n        return l;\n    })(),   \n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genes\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"phewas\", {\n    id: \"phewas\",\n    width: 800,\n    height: 300,\n    min_width:  800,\n    min_height: 300,\n    proportional_width: 1,\n    margin: { top: 20, right: 50, bottom: 120, left: 50 },\n    inner_border: \"rgb(210, 210, 210)\",\n    axes: {\n        x: {\n            ticks: {  // Object based config (shared defaults; allow layers to specify ticks)\n                style: {\n                    \"font-weight\": \"bold\",\n                    \"font-size\": \"11px\",\n                    \"text-anchor\": \"start\"\n                },\n                transform: \"rotate(50)\",\n                position: \"left\"  // Special param recognized by `category_scatter` layers\n            }\n        },\n        y1: {\n            label: \"-log10 p-value\",\n            label_offset: 28\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"significance\", { unnamespaced: true }),\n        LocusZoom.Layouts.get(\"data_layer\", \"phewas_pvalues\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"genome_legend\", {\n    id: \"genome_legend\",\n    width: 800,\n    height: 50,\n    origin: { x: 0, y: 300 },\n    min_width:  800,\n    min_height: 50,\n    proportional_width: 1,\n    margin: { top: 0, right: 50, bottom: 35, left: 50 },\n    axes: {\n        x: {\n            label: \"Genomic Position (number denotes chromosome)\",\n            label_offset: 35,\n            ticks: [\n                {\n                    x: 124625310,\n                    text: \"1\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 370850307,\n                    text: \"2\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 591461209,\n                    text: \"3\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 786049562,\n                    text: \"4\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 972084330,\n                    text: \"5\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1148099493,\n                    text: \"6\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1313226358,\n                    text: \"7\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1465977701,\n                    text: \"8\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1609766427,\n                    text: \"9\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1748140516,\n                    text: \"10\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 1883411148,\n                    text: \"11\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2017840353,\n                    text: \"12\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2142351240,\n                    text: \"13\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2253610949,\n                    text: \"14\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2358551415,\n                    text: \"15\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2454994487,\n                    text: \"16\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2540769469,\n                    text: \"17\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2620405698,\n                    text: \"18\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2689008813,\n                    text: \"19\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2750086065,\n                    text: \"20\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2805663772,\n                    text: \"21\",\n                    style: {\n                        \"fill\": \"rgb(120, 120, 186)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                },\n                {\n                    x: 2855381003,\n                    text: \"22\",\n                    style: {\n                        \"fill\": \"rgb(0, 0, 66)\",\n                        \"text-anchor\": \"center\",\n                        \"font-size\": \"13px\",\n                        \"font-weight\": \"bold\"\n                    },\n                    transform: \"translate(0, 2)\"\n                }\n            ]\n        }\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"genome_legend\", { unnamespaced: true })\n    ]\n});\n\nLocusZoom.Layouts.add(\"panel\", \"intervals\", {\n    id: \"intervals\",\n    width: 1000,\n    height: 50,\n    min_width: 500,\n    min_height: 50,\n    margin: { top: 25, right: 150, bottom: 5, left: 50 },\n    dashboard: (function(){\n        var l = LocusZoom.Layouts.get(\"dashboard\", \"standard_panel\", { unnamespaced: true });\n        l.components.push({\n            type: \"toggle_split_tracks\",\n            data_layer_id: \"intervals\",\n            position: \"right\"\n        });\n        return l;\n    })(),\n    axes: {},\n    interaction: {\n        drag_background_to_pan: true,\n        scroll_to_zoom: true,\n        x_linked: true\n    },\n    legend: {\n        hidden: true,\n        orientation: \"horizontal\",\n        origin: { x: 50, y: 0 },\n        pad_from_bottom: 5\n    },\n    data_layers: [\n        LocusZoom.Layouts.get(\"data_layer\", \"intervals\", { unnamespaced: true })\n    ]\n});\n\n\n/**\n * Plot Layouts\n * @namespace Layouts.plot\n */\n\nLocusZoom.Layouts.add(\"plot\", \"standard_association\", {\n    state: {},\n    width: 800,\n    height: 450,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, proportional_height: 0.5 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, proportional_height: 0.5 })\n    ]\n});\n\n// Shortcut to \"StandardLayout\" for backward compatibility\nLocusZoom.StandardLayout = LocusZoom.Layouts.get(\"plot\", \"standard_association\");\n\nLocusZoom.Layouts.add(\"plot\", \"standard_phewas\", {\n    width: 800,\n    height: 600,\n    min_width: 800,\n    min_height: 600,\n    responsive_resize: true,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true } ),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"phewas\", { unnamespaced: true, proportional_height: 0.45 }),\n        LocusZoom.Layouts.get(\"panel\", \"genome_legend\", { unnamespaced: true, proportional_height: 0.1 }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", {\n            unnamespaced: true, proportional_height: 0.45,\n            margin: { bottom: 40 },\n            axes: {\n                x: {\n                    label: \"Chromosome {{chr}} (Mb)\",\n                    label_offset: 32,\n                    tick_format: \"region\",\n                    extent: \"state\"\n                }\n            }\n        })\n    ],\n    mouse_guide: false\n});\n\nLocusZoom.Layouts.add(\"plot\", \"interval_association\", {\n    state: {},\n    width: 800,\n    height: 550,\n    responsive_resize: true,\n    min_region_scale: 20000,\n    max_region_scale: 1000000,\n    dashboard: LocusZoom.Layouts.get(\"dashboard\", \"standard_plot\", { unnamespaced: true }),\n    panels: [\n        LocusZoom.Layouts.get(\"panel\", \"association\", { unnamespaced: true, width: 800, proportional_height: (225/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"intervals\", { unnamespaced: true, proportional_height: (120/570) }),\n        LocusZoom.Layouts.get(\"panel\", \"genes\", { unnamespaced: true, width: 800, proportional_height: (225/570) })\n    ]\n});\n","/**\n * @namespace\n */\nvar LocusZoom = {\n    version: \"0.8.2\"\n};\n\n/**\n * Populate a single element with a LocusZoom plot.\n * selector can be a string for a DOM Query or a d3 selector.\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot} The newly created plot instance\n */\nLocusZoom.populate = function(selector, datasource, layout) {\n    if (typeof selector == \"undefined\"){\n        throw (\"LocusZoom.populate selector not defined\");\n    }\n    // Empty the selector of any existing content\n    d3.select(selector).html(\"\");\n    var plot;\n    d3.select(selector).call(function(){\n        // Require each containing element have an ID. If one isn't present, create one.\n        if (typeof this.node().id == \"undefined\"){\n            var iterator = 0;\n            while (!d3.select(\"#lz-\" + iterator).empty()){ iterator++; }\n            this.attr(\"id\", \"#lz-\" + iterator);\n        }\n        // Create the plot\n        plot = new LocusZoom.Plot(this.node().id, datasource, layout);\n        plot.container = this.node();\n        // Detect data-region and fill in state values if present\n        if (typeof this.node().dataset !== \"undefined\" && typeof this.node().dataset.region !== \"undefined\"){\n            var parsed_state = LocusZoom.parsePositionQuery(this.node().dataset.region);\n            Object.keys(parsed_state).forEach(function(key){\n                plot.state[key] = parsed_state[key];\n            });\n        }\n        // Add an SVG to the div and set its dimensions\n        plot.svg = d3.select(\"div#\" + plot.id)\n            .append(\"svg\")\n            .attr(\"version\", \"1.1\")\n            .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n            .attr(\"id\", plot.id + \"_svg\").attr(\"class\", \"lz-locuszoom\")\n            .style(plot.layout.style);\n        plot.setDimensions();\n        plot.positionPanels();\n        // Initialize the plot\n        plot.initialize();\n        // If the plot has defined data sources then trigger its first mapping based on state values\n        if (typeof datasource == \"object\" && Object.keys(datasource).length){\n            plot.refresh();\n        }\n    });\n    return plot;\n};\n\n/**\n * Populate arbitrarily many elements each with a LocusZoom plot\n *   using a common datasource and layout\n * @param {String} selector CSS selector for the container element where the plot will be mounted. Any pre-existing\n *   content in the container will be completely replaced.\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n * @returns {LocusZoom.Plot[]}\n */\nLocusZoom.populateAll = function(selector, datasource, layout) {\n    var plots = [];\n    d3.selectAll(selector).each(function(d,i) {\n        plots[i] = LocusZoom.populate(this, datasource, layout);\n    });\n    return plots;\n};\n\n/**\n * Convert an integer chromosome position to an SI string representation (e.g. 23423456 => \"23.42\" (Mb))\n * @param {Number} pos Position\n * @param {String} [exp] Exponent to use for the returned string, eg 6=> MB. If not specified, will attempt to guess\n *   the most appropriate SI prefix based on the number provided.\n * @param {Boolean} [suffix=false] Whether or not to append a suffix (e.g. \"Mb\") to the end of the returned string\n * @returns {string}\n */\nLocusZoom.positionIntToString = function(pos, exp, suffix){\n    var exp_symbols = { 0: \"\", 3: \"K\", 6: \"M\", 9: \"G\" };\n    suffix = suffix || false;\n    if (isNaN(exp) || exp === null){\n        var log = Math.log(pos) / Math.LN10;\n        exp = Math.min(Math.max(log - (log % 3), 0), 9);\n    }\n    var places_exp = exp - Math.floor((Math.log(pos) / Math.LN10).toFixed(exp + 3));\n    var min_exp = Math.min(Math.max(exp, 0), 2);\n    var places = Math.min(Math.max(places_exp, min_exp), 12);\n    var ret = \"\" + (pos / Math.pow(10, exp)).toFixed(places);\n    if (suffix && typeof exp_symbols[exp] !== \"undefined\"){\n        ret += \" \" + exp_symbols[exp] + \"b\";\n    }\n    return ret;\n};\n\n/**\n * Convert an SI string chromosome position to an integer representation (e.g. \"5.8 Mb\" => 58000000)\n * @param {String} p The chromosome position\n * @returns {Number}\n */\nLocusZoom.positionStringToInt = function(p) {\n    var val = p.toUpperCase();\n    val = val.replace(/,/g, \"\");\n    var suffixre = /([KMG])[B]*$/;\n    var suffix = suffixre.exec(val);\n    var mult = 1;\n    if (suffix) {\n        if (suffix[1]===\"M\") {\n            mult = 1e6;\n        } else if (suffix[1]===\"G\") {\n            mult = 1e9;\n        } else {\n            mult = 1e3; //K\n        }\n        val = val.replace(suffixre,\"\");\n    }\n    val = Number(val) * mult;\n    return val;\n};\n\n/**\n * Parse region queries into their constituent parts\n * TODO: handle genes (or send off to API)\n * @param {String} x A chromosome position query. May be any of the forms `chr:start-end`, `chr:center+offset`,\n *   or `chr:pos`\n * @returns {{chr:*, start: *, end:*} | {chr:*, position:*}}\n */\nLocusZoom.parsePositionQuery = function(x) {\n    var chrposoff = /^(\\w+):([\\d,.]+[kmgbKMGB]*)([-+])([\\d,.]+[kmgbKMGB]*)$/;\n    var chrpos = /^(\\w+):([\\d,.]+[kmgbKMGB]*)$/;\n    var match = chrposoff.exec(x);\n    if (match) {\n        if (match[3] === \"+\") {\n            var center = LocusZoom.positionStringToInt(match[2]);\n            var offset = LocusZoom.positionStringToInt(match[4]);\n            return {\n                chr:match[1],\n                start: center - offset,\n                end: center + offset\n            };\n        } else {\n            return {\n                chr: match[1],\n                start: LocusZoom.positionStringToInt(match[2]),\n                end: LocusZoom.positionStringToInt(match[4])\n            };\n        }\n    }\n    match = chrpos.exec(x);\n    if (match) {\n        return {\n            chr:match[1],\n            position: LocusZoom.positionStringToInt(match[2])\n        };\n    }\n    return null;\n};\n\n/**\n * Generate a \"pretty\" set of ticks (multiples of 1, 2, or 5 on the same order of magnitude for the range)\n *   Based on R's \"pretty\" function: https://github.com/wch/r-source/blob/b156e3a711967f58131e23c1b1dc1ea90e2f0c43/src/appl/pretty.c\n * @param {Number[]} range A two-item array specifying [low, high] values for the axis range\n * @param {('low'|'high'|'both'|'neither')} [clip_range='neither'] What to do if first and last generated ticks extend\n *   beyond the range. Set this to \"low\", \"high\", \"both\", or \"neither\" to clip the first (low) or last (high) tick to\n *   be inside the range or allow them to extend beyond.\n *   e.g. \"low\" will clip the first (low) tick if it extends beyond the low end of the range but allow the\n *  last (high) tick to extend beyond the range. \"both\" clips both ends, \"neither\" allows both to extend beyond.\n * @param {Number} [target_tick_count=5] The approximate number of ticks you would like to be returned; may not be exact\n * @returns {Number[]}\n */\nLocusZoom.prettyTicks = function(range, clip_range, target_tick_count){\n    if (typeof target_tick_count == \"undefined\" || isNaN(parseInt(target_tick_count))){\n        target_tick_count = 5;\n    }\n    target_tick_count = parseInt(target_tick_count);\n\n    var min_n = target_tick_count / 3;\n    var shrink_sml = 0.75;\n    var high_u_bias = 1.5;\n    var u5_bias = 0.5 + 1.5 * high_u_bias;\n\n    var d = Math.abs(range[0] - range[1]);\n    var c = d / target_tick_count;\n    if ((Math.log(d) / Math.LN10) < -2){\n        c = (Math.max(Math.abs(d)) * shrink_sml) / min_n;\n    }\n\n    var base = Math.pow(10, Math.floor(Math.log(c)/Math.LN10));\n    var base_toFixed = 0;\n    if (base < 1 && base !== 0){\n        base_toFixed = Math.abs(Math.round(Math.log(base)/Math.LN10));\n    }\n\n    var unit = base;\n    if ( ((2 * base) - c) < (high_u_bias * (c - unit)) ){\n        unit = 2 * base;\n        if ( ((5 * base) - c) < (u5_bias * (c - unit)) ){\n            unit = 5 * base;\n            if ( ((10 * base) - c) < (high_u_bias * (c - unit)) ){\n                unit = 10 * base;\n            }\n        }\n    }\n\n    var ticks = [];\n    var i = parseFloat( (Math.floor(range[0]/unit)*unit).toFixed(base_toFixed) );\n    while (i < range[1]){\n        ticks.push(i);\n        i += unit;\n        if (base_toFixed > 0){\n            i = parseFloat(i.toFixed(base_toFixed));\n        }\n    }\n    ticks.push(i);\n\n    if (typeof clip_range == \"undefined\" || [\"low\", \"high\", \"both\", \"neither\"].indexOf(clip_range) === -1){\n        clip_range = \"neither\";\n    }\n    if (clip_range === \"low\" || clip_range === \"both\"){\n        if (ticks[0] < range[0]){ ticks = ticks.slice(1); }\n    }\n    if (clip_range === \"high\" || clip_range === \"both\"){\n        if (ticks[ticks.length-1] > range[1]){ ticks.pop(); }\n    }\n\n    return ticks;\n};\n\n/**\n * Make an AJAX request and return a promise.\n * From http://www.html5rocks.com/en/tutorials/cors/\n *   and with promises from https://gist.github.com/kriskowal/593076\n *\n * @param {String} method The HTTP verb\n * @param {String} url\n * @param {String} body The request body to send to the server\n * @param {Object} headers Object of custom request headers\n * @param {Number} [timeout] If provided, wait this long (in ms) before timing out\n * @returns {Promise}\n */\nLocusZoom.createCORSPromise = function (method, url, body, headers, timeout) {\n    var response = Q.defer();\n    var xhr = new XMLHttpRequest();\n    if (\"withCredentials\" in xhr) {\n        // Check if the XMLHttpRequest object has a \"withCredentials\" property.\n        // \"withCredentials\" only exists on XMLHTTPRequest2 objects.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        // Otherwise, check if XDomainRequest.\n        // XDomainRequest only exists in IE, and is IE's way of making CORS requests.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // Otherwise, CORS is not supported by the browser.\n        xhr = null;\n    }\n    if (xhr) {\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200 || xhr.status === 0 ) {\n                    response.resolve(xhr.response);\n                } else {\n                    response.reject(\"HTTP \" + xhr.status + \" for \" + url);\n                }\n            }\n        };\n        timeout && setTimeout(response.reject, timeout);\n        body = typeof body !== \"undefined\" ? body : \"\";\n        if (typeof headers !== \"undefined\"){\n            for (var header in headers){\n                xhr.setRequestHeader(header, headers[header]);\n            }\n        }\n        // Send the request\n        xhr.send(body);\n    }\n    return response.promise;\n};\n\n/**\n * Validate a (presumed complete) plot state object against internal rules for consistency, and ensure the plot fits\n *   within any constraints imposed by the layout.\n * @param {Object} new_state\n * @param {Number} new_state.start\n * @param {Number} new_state.end\n * @param {Object} layout\n * @returns {*|{}}\n */\nLocusZoom.validateState = function(new_state, layout){\n\n    new_state = new_state || {};\n    layout = layout || {};\n\n    // If a \"chr\", \"start\", and \"end\" are present then resolve start and end\n    // to numeric values that are not decimal, negative, or flipped\n    var validated_region = false;\n    if (typeof new_state.chr != \"undefined\" && typeof new_state.start != \"undefined\" && typeof new_state.end != \"undefined\"){\n        // Determine a numeric scale and midpoint for the attempted region,\n        var attempted_midpoint = null; var attempted_scale;\n        new_state.start = Math.max(parseInt(new_state.start), 1);\n        new_state.end = Math.max(parseInt(new_state.end), 1);\n        if (isNaN(new_state.start) && isNaN(new_state.end)){\n            new_state.start = 1;\n            new_state.end = 1;\n            attempted_midpoint = 0.5;\n            attempted_scale = 0;\n        } else if (isNaN(new_state.start) || isNaN(new_state.end)){\n            attempted_midpoint = new_state.start || new_state.end;\n            attempted_scale = 0;\n            new_state.start = (isNaN(new_state.start) ? new_state.end : new_state.start);\n            new_state.end = (isNaN(new_state.end) ? new_state.start : new_state.end);\n        } else {\n            attempted_midpoint = Math.round((new_state.start + new_state.end) / 2);\n            attempted_scale = new_state.end - new_state.start;\n            if (attempted_scale < 0){\n                var temp = new_state.start;\n                new_state.end = new_state.start;\n                new_state.start = temp;\n                attempted_scale = new_state.end - new_state.start;\n            }\n            if (attempted_midpoint < 0){\n                new_state.start = 1;\n                new_state.end = 1;\n                attempted_scale = 0;\n            }\n        }\n        validated_region = true;\n    }\n\n    // Constrain w/r/t layout-defined minimum region scale\n    if (!isNaN(layout.min_region_scale) && validated_region && attempted_scale < layout.min_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.min_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.min_region_scale;\n    }\n\n    // Constrain w/r/t layout-defined maximum region scale\n    if (!isNaN(layout.max_region_scale) && validated_region && attempted_scale > layout.max_region_scale){\n        new_state.start = Math.max(attempted_midpoint - Math.floor(layout.max_region_scale / 2), 1);\n        new_state.end = new_state.start + layout.max_region_scale;\n    }\n\n    return new_state;\n};\n\n//\n/**\n * Replace placeholders in an html string with field values defined in a data object\n *  Only works on scalar values! Will ignore non-scalars.\n *\n *  NOTE: Trusts content exactly as given. XSS prevention is the responsibility of the implementer.\n * @param {Object} data\n * @param {String} html A placeholder string in which to substitute fields. Supports several template options:\n *   `{{field_name}}` is a variable placeholder for the value of `field_name` from the provided data\n *   `{{#if {{field_name}} }} Conditional text {{/if}} will insert the contents of the tag only if the value exists.\n *     Since this is only an existence check, **variables with a value of 0 will be evaluated as true**.\n * @returns {string}\n */\nLocusZoom.parseFields = function (data, html) {\n    if (typeof data != \"object\"){\n        throw (\"LocusZoom.parseFields invalid arguments: data is not an object\");\n    }\n    if (typeof html != \"string\"){\n        throw (\"LocusZoom.parseFields invalid arguments: html is not a string\");\n    }\n    // `tokens` is like [token,...]\n    // `token` is like {text: '...'} or {variable: 'foo|bar'} or {condition: 'foo|bar'} or {close: 'if'}\n    var tokens = [];\n    var regex = /\\{\\{(?:(#if )?([A-Za-z0-9_:|]+)|(\\/if))\\}\\}/;\n    while (html.length > 0){\n        var m = regex.exec(html);\n        if (!m) { tokens.push({text: html}); html = \"\"; }\n        else if (m.index !== 0) { tokens.push({text: html.slice(0, m.index)}); html = html.slice(m.index); }\n        else if (m[1] === \"#if \") { tokens.push({condition: m[2]}); html = html.slice(m[0].length); }\n        else if (m[2]) { tokens.push({variable: m[2]}); html = html.slice(m[0].length); }\n        else if (m[3] === \"/if\") { tokens.push({close: \"if\"}); html = html.slice(m[0].length); }\n        else {\n            console.error(\"Error tokenizing tooltip when remaining template is \" + JSON.stringify(html) +\n                          \" and previous tokens are \" + JSON.stringify(tokens) +\n                          \" and current regex match is \" + JSON.stringify([m[1], m[2], m[3]]));\n            html=html.slice(m[0].length);\n        }\n    }\n    var astify = function() {\n        var token = tokens.shift();\n        if (typeof token.text !== \"undefined\" || token.variable) {\n            return token;\n        } else if (token.condition) {\n            token.then = [];\n            while(tokens.length > 0) {\n                if (tokens[0].close === \"if\") { tokens.shift(); break; }\n                token.then.push(astify());\n            }\n            return token;\n        } else {\n            console.error(\"Error making tooltip AST due to unknown token \" + JSON.stringify(token));\n            return { text: \"\" };\n        }\n    };\n    // `ast` is like [thing,...]\n    // `thing` is like {text: \"...\"} or {variable:\"foo|bar\"} or {condition: \"foo|bar\", then:[thing,...]}\n    var ast = [];\n    while (tokens.length > 0) ast.push(astify());\n\n    var resolve = function(variable) {\n        if (!resolve.cache.hasOwnProperty(variable)) {\n            resolve.cache[variable] = (new LocusZoom.Data.Field(variable)).resolve(data);\n        }\n        return resolve.cache[variable];\n    };\n    resolve.cache = {};\n    var render_node = function(node) {\n        if (typeof node.text !== \"undefined\") {\n            return node.text;\n        } else if (node.variable) {\n            try {\n                var value = resolve(node.variable);\n                if ([\"string\",\"number\",\"boolean\"].indexOf(typeof value) !== -1) { return value; }\n                if (value === null) { return \"\"; }\n            } catch (error) { console.error(\"Error while processing variable \" + JSON.stringify(node.variable)); }\n            return \"{{\" + node.variable + \"}}\";\n        } else if (node.condition) {\n            try {\n                var condition = resolve(node.condition);\n                if (condition || condition === 0) {\n                    return node.then.map(render_node).join(\"\");\n                }\n            } catch (error) { console.error(\"Error while processing condition \" + JSON.stringify(node.variable)); }\n            return \"\";\n        } else { console.error(\"Error rendering tooltip due to unknown AST node \" + JSON.stringify(node)); }\n    };\n    return ast.map(render_node).join(\"\");\n};\n\n/**\n * Shortcut method for getting the data bound to a tool tip.\n * @param {Element} node\n * @returns {*} The first element of data bound to the tooltip\n */\nLocusZoom.getToolTipData = function(node){\n    if (typeof node != \"object\" || typeof node.parentNode == \"undefined\"){\n        throw(\"Invalid node object\");\n    }\n    // If this node is a locuszoom tool tip then return its data\n    var selector = d3.select(node);\n    if (selector.classed(\"lz-data_layer-tooltip\") && typeof selector.data()[0] != \"undefined\"){\n        return selector.data()[0];\n    } else {\n        return LocusZoom.getToolTipData(node.parentNode);\n    }\n};\n\n/**\n * Shortcut method for getting a reference to the data layer that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.DataLayer}\n */\nLocusZoom.getToolTipDataLayer = function(node){\n    var data = LocusZoom.getToolTipData(node);\n    if (data.getDataLayer){ return data.getDataLayer(); }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the panel that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.getToolTipPanel = function(node){\n    var data_layer = LocusZoom.getToolTipDataLayer(node);\n    if (data_layer){ return data_layer.parent; }\n    return null;\n};\n\n/**\n * Shortcut method for getting a reference to the plot that generated a tool tip.\n * @param {Element} node The element associated with the tooltip, or any element contained inside the tooltip\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.getToolTipPlot = function(node){\n    var panel = LocusZoom.getToolTipPanel(node);\n    if (panel){ return panel.parent; }\n    return null;\n};\n\n/**\n * Generate a curtain object for a plot, panel, or any other subdivision of a layout\n * The panel curtain, like the plot curtain is an HTML overlay that obscures the entire panel. It can be styled\n *   arbitrarily and display arbitrary messages. It is useful for reporting error messages visually to an end user\n *   when the error renders the panel unusable.\n *   TODO: Improve type doc here\n * @returns {object}\n */\nLocusZoom.generateCurtain = function(){\n    var curtain = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        hide_delay: null,\n\n        /**\n         * Generate the curtain. Any content (string) argument passed will be displayed in the curtain as raw HTML.\n         *   CSS (object) can be passed which will apply styles to the curtain and its content.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        show: function(content, css){\n            if (!this.curtain.showing){\n                this.curtain.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-curtain\").attr(\"id\", this.id + \".curtain\");\n                this.curtain.content_selector = this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-content\");\n                this.curtain.selector.append(\"div\").attr(\"class\", \"lz-curtain-dismiss\").html(\"Dismiss\")\n                    .on(\"click\", function(){\n                        this.curtain.hide();\n                    }.bind(this));\n                this.curtain.showing = true;\n            }\n            return this.curtain.update(content, css);\n        }.bind(this),\n\n        /**\n         * Update the content and css of the curtain that's currently being shown. This method also adjusts the size\n         *   and positioning of the curtain to ensure it still covers the entire panel with no overlap.\n         * @param {string} content Content to be displayed on the curtain (as raw HTML)\n         * @param {object} css Apply the specified styles to the curtain and its contents\n         */\n        update: function(content, css){\n            if (!this.curtain.showing){ return this.curtain; }\n            clearTimeout(this.curtain.hide_delay);\n            // Apply CSS if provided\n            if (typeof css == \"object\"){\n                this.curtain.selector.style(css);\n            }\n            // Update size and position\n            var page_origin = this.getPageOrigin();\n            this.curtain.selector.style({\n                top: page_origin.y + \"px\",\n                left: page_origin.x + \"px\",\n                width: this.layout.width + \"px\",\n                height: this.layout.height + \"px\"\n            });\n            this.curtain.content_selector.style({\n                \"max-width\": (this.layout.width - 40) + \"px\",\n                \"max-height\": (this.layout.height - 40) + \"px\"\n            });\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.curtain.content_selector.html(content);\n            }\n            return this.curtain;\n        }.bind(this),\n\n        /**\n         * Remove the curtain\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.curtain.showing){ return this.curtain; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.curtain.hide_delay);\n                this.curtain.hide_delay = setTimeout(this.curtain.hide, delay);\n                return this.curtain;\n            }\n            // Remove curtain\n            this.curtain.selector.remove();\n            this.curtain.selector = null;\n            this.curtain.content_selector = null;\n            this.curtain.showing = false;\n            return this.curtain;\n        }.bind(this)\n    };\n    return curtain;\n};\n\n/**\n * Generate a loader object for a plot, panel, or any other subdivision of a layout\n *\n * The panel loader is a small HTML overlay that appears in the lower left corner of the panel. It cannot be styled\n *   arbitrarily, but can show a custom message and show a minimalist loading bar that can be updated to specific\n *   completion percentages or be animated.\n * TODO Improve type documentation\n * @returns {object}\n */\nLocusZoom.generateLoader = function(){\n    var loader = {\n        showing: false,\n        selector: null,\n        content_selector: null,\n        progress_selector: null,\n        cancel_selector: null,\n\n        /**\n         * Show a loading indicator\n         * @param {string} [content='Loading...'] Loading message (displayed as raw HTML)\n         */\n        show: function(content){\n            // Generate loader\n            if (!this.loader.showing){\n                this.loader.selector = d3.select(this.parent_plot.svg.node().parentNode).insert(\"div\")\n                    .attr(\"class\", \"lz-loader\").attr(\"id\", this.id + \".loader\");\n                this.loader.content_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-content\");\n                this.loader.progress_selector = this.loader.selector\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress-container\")\n                    .append(\"div\").attr(\"class\", \"lz-loader-progress\");\n                /* TODO: figure out how to make this cancel button work\n                this.loader.cancel_selector = this.loader.selector.append(\"div\")\n                    .attr(\"class\", \"lz-loader-cancel\").html(\"Cancel\")\n                    .on(\"click\", function(){\n                        this.loader.hide();\n                    }.bind(this));\n                */\n                this.loader.showing = true;\n                if (typeof content == \"undefined\"){ content = \"Loading...\"; }\n            }\n            return this.loader.update(content);\n        }.bind(this),\n\n        /**\n         * Update the currently displayed loader and ensure the new content is positioned correctly.\n         * @param {string} content The text to display (as raw HTML). If not a string, will be ignored.\n         * @param {number} [percent] A number from 1-100. If a value is specified, it will stop all animations\n         *   in progress.\n         */\n        update: function(content, percent){\n            if (!this.loader.showing){ return this.loader; }\n            clearTimeout(this.loader.hide_delay);\n            // Apply content if provided\n            if (typeof content == \"string\"){\n                this.loader.content_selector.html(content);\n            }\n            // Update size and position\n            var padding = 6; // is there a better place to store/define this?\n            var page_origin = this.getPageOrigin();\n            var loader_boundrect = this.loader.selector.node().getBoundingClientRect();\n            this.loader.selector.style({\n                top: (page_origin.y + this.layout.height - loader_boundrect.height - padding) + \"px\",\n                left: (page_origin.x + padding) + \"px\"\n            });\n            /* Uncomment this code when a functional cancel button can be shown\n            var cancel_boundrect = this.loader.cancel_selector.node().getBoundingClientRect();\n            this.loader.content_selector.style({\n                \"padding-right\": (cancel_boundrect.width + padding) + \"px\"\n            });\n            */\n            // Apply percent if provided\n            if (typeof percent == \"number\"){\n                this.loader.progress_selector.style({\n                    width: (Math.min(Math.max(percent, 1), 100)) + \"%\"\n                });\n            }\n            return this.loader;\n        }.bind(this),\n\n        /**\n         * Adds a class to the loading bar that makes it loop infinitely in a loading animation. Useful when exact\n         *   percent progress is not available.\n         */\n        animate: function(){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", true);\n            return this.loader;\n        }.bind(this),\n\n        /**\n         *  Sets the loading bar in the loader to percentage width equal to the percent (number) value passed. Percents\n         *    will automatically be limited to a range of 1 to 100. Will stop all animations in progress.\n         */\n        setPercentCompleted: function(percent){\n            this.loader.progress_selector.classed(\"lz-loader-progress-animated\", false);\n            return this.loader.update(null, percent);\n        }.bind(this),\n\n        /**\n         * Remove the loader\n         * @param {number} delay Time to wait (in ms)\n         */\n        hide: function(delay){\n            if (!this.loader.showing){ return this.loader; }\n            // If a delay was passed then defer to a timeout\n            if (typeof delay == \"number\"){\n                clearTimeout(this.loader.hide_delay);\n                this.loader.hide_delay = setTimeout(this.loader.hide, delay);\n                return this.loader;\n            }\n            // Remove loader\n            this.loader.selector.remove();\n            this.loader.selector = null;\n            this.loader.content_selector = null;\n            this.loader.progress_selector = null;\n            this.loader.cancel_selector = null;\n            this.loader.showing = false;\n            return this.loader;\n        }.bind(this)\n    };\n    return loader;\n};\n\n/**\n * Create a new subclass following classical inheritance patterns. Some registry singletons use this internally to\n *   enable code reuse and customization of known LZ core functionality.\n *\n * @param {Function} parent A parent class constructor that will be extended by the child class\n * @param {Object} extra An object of additional properties and methods to add/override behavior for the child class.\n *   The special \"constructor\" property can be used to specify a custom constructor, or it will call parent by default.\n *   Implementer must manage super calls when overriding the constructor.\n * @returns {Function} The constructor for the new child class\n */\nLocusZoom.subclass = function(parent, extra) {\n    if (typeof parent !== \"function\" ) {\n        throw \"Parent must be a callable constructor\";\n    }\n\n    extra = extra || {};\n    var Sub = extra.hasOwnProperty(\"constructor\") ? extra.constructor : function() {\n        parent.apply(this, arguments);\n    };\n\n    Sub.prototype = Object.create(parent.prototype);\n    Object.keys(extra).forEach(function(k) {\n        Sub.prototype[k] = extra[k];\n    });\n    return Sub;\n};\n\n\n/**\n * LocusZoom optional extensions will live under this namespace.\n *\n * Extension code is not part of the core LocusZoom app.js bundle.\n * @namespace\n * @public\n */\nLocusZoom.ext = {};\n","\"use strict\";\n\n/**\n * Create a single continuous 2D track that provides information about each datapoint\n *\n * For example, this can be used to color by membership in a group, alongside information in other panels\n *\n * @class LocusZoom.DataLayers.annotation_track\n * @augments LocusZoom.DataLayer\n * @param {Object} layout\n * @param {Object|String} [layout.color]\n * @param {Array[]} An array of filter entries specifying which points to draw annotations for.\n *  See `LocusZoom.DataLayer.filter` for details\n */\nLocusZoom.DataLayers.add(\"annotation_track\", function(layout) {\n    // In the future we may add additional options for controlling marker size/ shape, based on user feedback\n    this.DefaultLayout = {\n        color: \"#000000\",\n        filters: []\n    };\n\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    if (!Array.isArray(layout.filters)) {\n        throw \"Annotation track must specify array of filters for selecting points to annotate\";\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    this.render = function() {\n        var self = this;\n        // Only render points that currently satisfy all provided filter conditions.\n        var trackData = this.filter(this.layout.filters, \"elements\");\n\n        var selection = this.svg.group\n            .selectAll(\"rect.lz-data_layer-\" + self.layout.type)\n            .data(trackData, function(d) { return d[self.layout.id_field]; });\n\n        // Add new elements as needed\n        selection.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function (d){ return self.getElementId(d); });\n        // Update the set of elements to reflect new data\n        selection\n            .attr(\"x\", function (d) { return self.parent[\"x_scale\"](d[self.layout.x_axis.field]); })\n            .attr(\"width\", 1)  // TODO autocalc width of track? Based on datarange / pixel width presumably\n            .attr(\"height\", self.parent.layout.height)\n            .attr(\"fill\", function(d){ return self.resolveScalableParameter(self.layout.color, d); });\n        // Remove unused elements\n        selection.exit().remove();\n\n        // Set up tooltips and mouse interaction\n        this.applyBehaviors(selection);\n    };\n\n    // Reimplement the positionTooltip() method to be annotation-specific\n    this.positionTooltip = function(id) {\n        if (typeof id != \"string\") {\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]) {\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var offset = stroke_width / 2;\n        var page_origin = this.getPageOrigin();\n\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_center = data_layer_height / 2;\n\n        // Tooltip should be horizontally centered above the point to be annotated. (or below if space is limited)\n        var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n        left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n        arrow_left = (tooltip_box.width / 2) - (arrow_width) + offset_left - offset_right - offset;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - y_center) {\n            top = page_origin.y + y_center - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + y_center + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow) {\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    return this;\n});\n","\"use strict\";\n\n/**\n * Forest Data Layer\n * Implements a standard forest plot. In order to space out points, any layout using this must specify axis ticks\n *  and extent in advance.\n *\n * If you are using dynamically fetched data, consider using `category_forest` instead.\n *\n * @class LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.add(\"forest\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"square\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 2\n        },\n        id_field: \"id\",\n        confidence_intervals: {\n            start_field: \"ci_start\",\n            end_field: \"ci_end\"\n        },\n        show_no_significance_line: true\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be forest-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        // Position horizontally on the left or the right depending on which side of the plot the point is on\n        var offset = Math.sqrt(point_size / Math.PI);\n        var left, arrow_type, arrow_left;\n        if (x_center <= this.parent.layout.width / 2){\n            left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n            arrow_type = \"left\";\n            arrow_left = -1 * (arrow_width + stroke_width);\n        } else {\n            left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n            arrow_type = \"right\";\n            arrow_left = tooltip_box.width - stroke_width;\n        }\n        // Position vertically centered unless we're at the top or bottom of the plot\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var top, arrow_top;\n        if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n            top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n            arrow_top = border_radius;\n        } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n            top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n            arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n        } else { // vertically centered\n            top = page_origin.y + y_center - (tooltip_box.height / 2);\n            arrow_top = (tooltip_box.height / 2) - arrow_width;\n        }        \n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate confidence interval paths if fields are defined\n        if (this.layout.confidence_intervals\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.start_field) !== -1\n            && this.layout.fields.indexOf(this.layout.confidence_intervals.end_field) !== -1){\n            // Generate a selection for all forest plot confidence intervals\n            var ci_selection = this.svg.group\n                .selectAll(\"rect.lz-data_layer-forest.lz-data_layer-forest-ci\")\n                .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n            // Create confidence interval rect elements\n            ci_selection.enter()\n                .append(\"rect\")\n                .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-ci\")\n                .attr(\"id\", function(d){ return this.getElementId(d) + \"_ci\"; }.bind(this))\n                .attr(\"transform\", \"translate(0,\" + (isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height) + \")\");\n            // Apply position and size parameters using transition if necessary\n            var ci_transform = function(d) {\n                var x = this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n                var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n                if (isNaN(x)){ x = -1000; }\n                if (isNaN(y)){ y = -1000; }\n                return \"translate(\" + x + \",\" + y + \")\";\n            }.bind(this);\n            var ci_width = function(d){\n                return this.parent[x_scale](d[this.layout.confidence_intervals.end_field])\n                     - this.parent[x_scale](d[this.layout.confidence_intervals.start_field]);\n            }.bind(this);\n            var ci_height = 1;\n            if (this.canTransition()){\n                ci_selection\n                    .transition()\n                    .duration(this.layout.transition.duration || 0)\n                    .ease(this.layout.transition.ease || \"cubic-in-out\")\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            } else {\n                ci_selection\n                    .attr(\"transform\", ci_transform)\n                    .attr(\"width\", ci_width).attr(\"height\", ci_height);\n            }\n            // Remove old elements as needed\n            ci_selection.exit().remove();\n        }\n            \n        // Generate a selection for all forest plot points\n        var points_selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-forest.lz-data_layer-forest-point\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        points_selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-forest lz-data_layer-forest-point\")\n            .attr(\"id\", function(d){ return this.getElementId(d) + \"_point\"; }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n        if (this.canTransition()){\n            points_selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            points_selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        points_selection.exit().remove();\n\n        // Apply default event emitters to selection\n        points_selection.on(\"click.event_emitter\", function(element_data){\n            this.parent.emit(\"element_clicked\", element_data, true);\n        }.bind(this));\n       \n        // Apply behaviors to points\n        this.applyBehaviors(points_selection);\n        \n    };\n \n    return this;\n\n});\n\n/**\n * A y-aligned forest plot that dynamically chooses category labels when the data is first loaded.\n * This allows generating forest plots without defining the layout in advance.\n *\n * @class LocusZoom.DataLayers.category_forest\n * @augments LocusZoom.DataLayers.forest\n */\nLocusZoom.DataLayers.extend(\"forest\", \"category_forest\", {\n    getTicks: function(dimension, config) { // Overrides parent method\n        if ([\"x\", \"y1\", \"y2\"].indexOf(dimension) === -1) {\n            throw \"Invalid dimension identifier\" + dimension;\n        }\n\n        // Design assumption: one axis (y1 or y2) has the ticks, and the layout says which to use\n        // Also assumes that every tick gets assigned a unique matching label\n        var axis_num = this.layout.y_axis.axis;\n        if (dimension === (\"y\" + axis_num)) {\n            var category_field = this.layout.y_axis.category_field;\n            if (!category_field) {\n                throw \"Layout for \" + this.layout.id + \" must specify category_field\";\n            }\n\n            return this.data.map(function (item, index) {\n                return {\n                    y: index + 1,\n                    text: item[category_field]\n                };\n            });\n        } else {\n            return [];\n        }\n    },\n\n    applyCustomDataMethods: function () {\n        // Add a synthetic yaxis field to ensure data is spread out on plot. Then, set axis floor and ceiling to\n        //  correct extents.\n        var field_to_add = this.layout.y_axis.field;\n        if (!field_to_add) {\n            throw \"Layout for \" + this.layout.id + \" must specify yaxis.field\";\n        }\n\n        this.data = this.data.map(function (item, index) {\n            item[field_to_add] = index +1;\n            return item;\n        });\n        // Update axis extents based on one label for every point (with a bit of padding above and below)\n        this.layout.y_axis.floor = 0;\n        this.layout.y_axis.ceiling = this.data.length + 1;\n        return this;\n    }\n});\n","\"use strict\";\n\n/*********************\n * Genes Data Layer\n * Implements a data layer that will render gene tracks\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"genes\", function(layout){\n    /**\n     * Define a default layout for this DataLayer type and merge it with the passed argument\n     * @protected\n     * @member {Object}\n     * */\n    this.DefaultLayout = {\n        // Optionally specify different fill and stroke properties\n        stroke: \"rgb(54, 54, 150)\",\n        color: \"#363696\",\n        label_font_size: 12,\n        label_exon_spacing: 4,\n        exon_height: 16,\n        bounding_box_padding: 6,\n        track_vertical_spacing: 10\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Generate a statusnode ID for a given element\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        return this.getElementId(element) + \"-statusnode\";\n    };\n\n    /**\n     * Helper function to sum layout values to derive total height for a single gene track\n     * @returns {number}\n     */\n    this.getTrackHeight = function(){\n        return 2 * this.layout.bounding_box_padding\n            + this.layout.label_font_size\n            + this.layout.label_exon_spacing\n            + this.layout.exon_height\n            + this.layout.track_vertical_spacing;\n    };\n\n    /**\n     * A gene may have arbitrarily many transcripts, but this data layer isn't set up to render them yet.\n     * Stash a transcript_idx to point to the first transcript and use that for all transcript refs.\n     * @member {number}\n     * @type {number}\n     */\n    this.transcript_idx = 0;\n\n    /**\n     * An internal counter for the number of tracks in the data layer. Used as an internal counter for looping\n     *   over positions / assignments\n     * @protected\n     * @member {number}\n     */\n    this.tracks = 1;\n\n    /**\n     * Store information about genes in dataset, in a hash indexed by track number: {track_number: [gene_indices]}\n     * @member {Object.<Number, Array>}\n     */\n    this.gene_track_index = { 1: [] };\n\n    /**\n     * Ensure that genes in overlapping chromosome regions are positioned so that parts of different genes do not\n     *   overlap in the view. A track is a row used to vertically separate overlapping genes.\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.assignTracks = function(){\n        /**\n         * Function to get the width in pixels of a label given the text and layout attributes\n         *      TODO: Move to outer scope?\n         * @param {String} gene_name\n         * @param {number|string} font_size\n         * @returns {number}\n         */\n        this.getLabelWidth = function(gene_name, font_size){\n            try {\n                var temp_text = this.svg.group.append(\"text\")\n                    .attr(\"x\", 0).attr(\"y\", 0).attr(\"class\", \"lz-data_layer-genes lz-label\")\n                    .style(\"font-size\", font_size)\n                    .text(gene_name + \"→\");\n                var label_width = temp_text.node().getBBox().width;\n                temp_text.remove();\n                return label_width;\n            } catch (e){\n                return 0;\n            }\n        };\n\n        // Reinitialize some metadata\n        this.tracks = 1;\n        this.gene_track_index = { 1: [] };\n\n        this.data.map(function(d, g){\n\n            // If necessary, split combined gene id / version fields into discrete fields.\n            // NOTE: this may be an issue with CSG's genes data source that may eventually be solved upstream.\n            if (this.data[g].gene_id && this.data[g].gene_id.indexOf(\".\")){\n                var split = this.data[g].gene_id.split(\".\");\n                this.data[g].gene_id = split[0];\n                this.data[g].gene_version = split[1];\n            }\n\n            // Stash the transcript ID on the parent gene\n            this.data[g].transcript_id = this.data[g].transcripts[this.transcript_idx].transcript_id;\n\n            // Determine display range start and end, based on minimum allowable gene display width, bounded by what we can see\n            // (range: values in terms of pixels on the screen)\n            this.data[g].display_range = {\n                start: this.parent.x_scale(Math.max(d.start, this.state.start)),\n                end:   this.parent.x_scale(Math.min(d.end, this.state.end))\n            };\n            this.data[g].display_range.label_width = this.getLabelWidth(this.data[g].gene_name, this.layout.label_font_size);\n            this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            // Determine label text anchor (default to middle)\n            this.data[g].display_range.text_anchor = \"middle\";\n            if (this.data[g].display_range.width < this.data[g].display_range.label_width){\n                if (d.start < this.state.start){\n                    this.data[g].display_range.end = this.data[g].display_range.start\n                        + this.data[g].display_range.label_width\n                        + this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"start\";\n                } else if (d.end > this.state.end){\n                    this.data[g].display_range.start = this.data[g].display_range.end\n                        - this.data[g].display_range.label_width\n                        - this.layout.label_font_size;\n                    this.data[g].display_range.text_anchor = \"end\";\n                } else {\n                    var centered_margin = ((this.data[g].display_range.label_width - this.data[g].display_range.width) / 2)\n                        + this.layout.label_font_size;\n                    if ((this.data[g].display_range.start - centered_margin) < this.parent.x_scale(this.state.start)){\n                        this.data[g].display_range.start = this.parent.x_scale(this.state.start);\n                        this.data[g].display_range.end = this.data[g].display_range.start + this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"start\";\n                    } else if ((this.data[g].display_range.end + centered_margin) > this.parent.x_scale(this.state.end)) {\n                        this.data[g].display_range.end = this.parent.x_scale(this.state.end);\n                        this.data[g].display_range.start = this.data[g].display_range.end - this.data[g].display_range.label_width;\n                        this.data[g].display_range.text_anchor = \"end\";\n                    } else {\n                        this.data[g].display_range.start -= centered_margin;\n                        this.data[g].display_range.end += centered_margin;\n                    }\n                }\n                this.data[g].display_range.width = this.data[g].display_range.end - this.data[g].display_range.start;\n            }\n            // Add bounding box padding to the calculated display range start, end, and width\n            this.data[g].display_range.start -= this.layout.bounding_box_padding;\n            this.data[g].display_range.end   += this.layout.bounding_box_padding;\n            this.data[g].display_range.width += 2 * this.layout.bounding_box_padding;\n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[g].display_domain = {\n                start: this.parent.x_scale.invert(this.data[g].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[g].display_range.end)\n            };\n            this.data[g].display_domain.width = this.data[g].display_domain.end - this.data[g].display_domain.start;\n\n            // Using display range/domain data generated above cast each gene to tracks such that none overlap\n            this.data[g].track = null;\n            var potential_track = 1;\n            while (this.data[g].track === null){\n                var collision_on_potential_track = false;\n                this.gene_track_index[potential_track].map(function(placed_gene){\n                    if (!collision_on_potential_track){\n                        var min_start = Math.min(placed_gene.display_range.start, this.display_range.start);\n                        var max_end = Math.max(placed_gene.display_range.end, this.display_range.end);\n                        if ((max_end - min_start) < (placed_gene.display_range.width + this.display_range.width)){\n                            collision_on_potential_track = true;\n                        }\n                    }\n                }.bind(this.data[g]));\n                if (!collision_on_potential_track){\n                    this.data[g].track = potential_track;\n                    this.gene_track_index[potential_track].push(this.data[g]);\n                } else {\n                    potential_track++;\n                    if (potential_track > this.tracks){\n                        this.tracks = potential_track;\n                        this.gene_track_index[potential_track] = [];\n                    }\n                }\n            }\n\n            // Stash parent references on all genes, trascripts, and exons\n            this.data[g].parent = this;\n            this.data[g].transcripts.map(function(d, t){\n                this.data[g].transcripts[t].parent = this.data[g];\n                this.data[g].transcripts[t].exons.map(function(d, e){\n                    this.data[g].transcripts[t].exons[e].parent = this.data[g].transcripts[t];\n                }.bind(this));\n            }.bind(this));\n\n        }.bind(this));\n        return this;\n    };\n\n    /**\n     * Main render function\n     */\n    this.render = function(){\n\n        var self = this;\n        this.assignTracks();\n\n        var width, height, x, y;\n\n        // Render gene groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-genes\")\n            .data(this.data, function(d){ return d.gene_name; });\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-genes\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(gene){\n\n                var data_layer = gene.parent;\n\n                // Render gene bounding boxes (status nodes to show selected/highlighted)\n                var bboxes = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-data_layer-genes-statusnode\")\n                    .data([gene], function(d){ return data_layer.getElementStatusNodeId(d); });\n\n                bboxes.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-data_layer-genes-statusnode\");\n                \n                bboxes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementStatusNodeId(d);\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    bboxes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    bboxes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                bboxes.exit().remove();\n\n                // Render gene boundaries\n                var boundary_fill = function(d){ return self.resolveScalableParameter(self.layout.color, d); };\n                var boundary_stroke = function(d){ return self.resolveScalableParameter(self.layout.stroke, d); };\n                var boundaries = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-boundary\")\n                    .data([gene], function(d){ return d.gene_name + \"_boundary\"; })\n                    .style({ fill: boundary_fill, stroke: boundary_stroke });\n\n                boundaries.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-boundary\");\n\n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return 1; // TODO: scale dynamically?\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing\n                        + (Math.max(data_layer.layout.exon_height, 3) / 2);\n                };\n                if (data_layer.canTransition()){\n                    boundaries\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    boundaries\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                \n                boundaries.exit().remove();\n\n                // Render gene labels\n                var labels = d3.select(this).selectAll(\"text.lz-data_layer-genes.lz-label\")\n                    .data([gene], function(d){ return d.gene_name + \"_label\"; });\n\n                labels.enter().append(\"text\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-label\");\n\n                labels\n                    .attr(\"text-anchor\", function(d){\n                        return d.display_range.text_anchor;\n                    })\n                    .text(function(d){\n                        return (d.strand === \"+\") ? d.gene_name + \"→\" : \"←\" + d.gene_name;\n                    })\n                    .style(\"font-size\", gene.parent.layout.label_font_size);\n\n                x = function(d){\n                    if (d.display_range.text_anchor === \"middle\"){\n                        return d.display_range.start + (d.display_range.width / 2);\n                    } else if (d.display_range.text_anchor === \"start\"){\n                        return d.display_range.start + data_layer.layout.bounding_box_padding;\n                    } else if (d.display_range.text_anchor === \"end\"){\n                        return d.display_range.end - data_layer.layout.bounding_box_padding;\n                    }\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size;\n                };\n                if (data_layer.canTransition()){\n                    labels\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    labels\n                        .attr(\"x\", x).attr(\"y\", y);\n                }\n\n                labels.exit().remove();\n\n                // Render exon rects (first transcript only, for now)\n                // Exons: by default color on gene properties for consistency with the gene boundary track- hence color uses d.parent.parent\n                var exon_fill = function(d){ return self.resolveScalableParameter(self.layout.color, d.parent.parent); };\n                var exon_stroke = function(d){ return self.resolveScalableParameter(self.layout.stroke, d.parent.parent); };\n\n                var exons = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-exon\")\n                    .data(gene.transcripts[gene.parent.transcript_idx].exons, function(d){ return d.exon_id; });\n\n                exons.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-exon\");\n\n                exons\n                    .style({ fill: exon_fill, stroke: exon_stroke });\n\n                width = function(d){\n                    return data_layer.parent.x_scale(d.end) - data_layer.parent.x_scale(d.start);\n                };\n                height = function(){\n                    return data_layer.layout.exon_height;\n                };\n                x = function(d){\n                    return data_layer.parent.x_scale(d.start);\n                };\n                y = function(){\n                    return ((gene.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding\n                        + data_layer.layout.label_font_size\n                        + data_layer.layout.label_exon_spacing;\n                };\n                if (data_layer.canTransition()){\n                    exons\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    exons\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                exons.exit().remove();\n\n                // Render gene click area\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-genes.lz-clickarea\")\n                    .data([gene], function(d){ return d.gene_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-genes lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click.event_emitter\", function(element){\n                    element.parent.parent.emit(\"element_clicked\", element, true);\n                });\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be gene-specific\n     * @param {String} id\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var gene_bbox_id = this.getElementStatusNodeId(tooltip.data);\n        var gene_bbox = d3.select(\"#\" + gene_bbox_id).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the gene that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var gene_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - gene_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + gene_center_x - data_layer_width, 0);\n        var left = page_origin.x + gene_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the gene unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (gene_bbox.y + gene_bbox.height)){\n            top = page_origin.y + gene_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + gene_bbox.y + gene_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n  Genome Legend Data Layer\n  Implements a data layer that will render a genome legend\n*/\n\n// Build a custom data layer for a genome legend\nLocusZoom.DataLayers.add(\"genome_legend\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        chromosome_fill_colors: {\n            light: \"rgb(155, 155, 188)\",\n            dark: \"rgb(95, 95, 128)\"\n        },\n        chromosome_label_colors: {\n            light: \"rgb(120, 120, 186)\",\n            dark: \"rgb(0, 0, 66)\"\n        }\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Implement the main render function\n    this.render = function(){\n\n        // Iterate over data to generate genome-wide start/end values for each chromosome\n        var position = 0;\n        this.data.forEach(function(d, i){\n            this.data[i].genome_start = position;\n            this.data[i].genome_end = position + d[\"genome:base_pairs\"];\n            position += d[\"genome:base_pairs\"];\n        }.bind(this));\n\n        var chromosomes = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend\")\n            .data(this.data, function(d){ return d[\"genome:chr\"]; });\n\n        // Create chromosome elements, apply class\n        chromosomes.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend\");\n\n        // Position and fill chromosome rects\n        var data_layer = this;\n        var panel = this.parent;\n\n        chromosomes\n            .attr(\"fill\", function(d){ return (d[\"genome:chr\"] % 2 ? data_layer.layout.chromosome_fill_colors.light : data_layer.layout.chromosome_fill_colors.dark); })\n            .attr(\"x\", function(d){ return panel.x_scale(d.genome_start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d[\"genome:base_pairs\"]); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        // Remove old elements as needed\n        chromosomes.exit().remove();\n\n        // Parse current state variant into a position\n        // Assumes that variant string is of the format 10:123352136_C/T or 10:123352136\n        var variant_parts = /([^:]+):(\\d+)(?:_.*)?/.exec(this.state.variant);\n        if (!variant_parts) {\n            throw(\"Genome legend cannot understand the specified variant position\");\n        }\n        var chr = variant_parts[1];\n        var offset = variant_parts[2];\n        // TODO: How does this handle representation of X or Y chromosomes?\n        position = +this.data[chr-1].genome_start + +offset;\n\n        // Render the position\n        var region = this.svg.group\n            .selectAll(\"rect.lz-data_layer-genome_legend-marker\")\n            .data([{ start: position, end: position + 1 }]);\n\n        region.enter()\n            .append(\"rect\")\n            .attr(\"class\", \"lz-data_layer-genome_legend-marker\");\n\n        region\n            .transition()\n            .duration(500)\n            .style({\n                \"fill\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke\": \"rgba(255, 250, 50, 0.8)\",\n                \"stroke-width\": \"3px\"\n            })\n            .attr(\"x\", function(d){ return panel.x_scale(d.start); })\n            .attr(\"y\", 0)\n            .attr(\"width\", function(d){ return panel.x_scale(d.end - d.start); })\n            .attr(\"height\", panel.layout.cliparea.height);\n\n        region.exit().remove();\n        \n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/**\n * Intervals Data Layer\n * Implements a data layer that will render interval annotation tracks (intervals must provide start and end values)\n * @class LocusZoom.DataLayers.intervals\n * @augments LocusZoom.DataLayer\n */\nLocusZoom.DataLayers.add(\"intervals\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        start_field: \"start\",\n        end_field: \"end\",\n        track_split_field: \"state_id\",\n        track_split_order: \"DESC\",\n        track_split_legend_to_y_axis: 2,\n        split_tracks: true,\n        track_height: 15,\n        track_vertical_spacing: 3,\n        bounding_box_padding: 2,\n        always_hide_legend: false,\n        color: \"#B8B8B8\",\n        fill_opacity: 1\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n    \n    /**\n     * To define shared highlighting on the track split field define the status node id override\n     * to generate an ID common to the track when we're actively splitting data out to separate tracks\n     * @override\n     * @returns {String}\n     */\n    this.getElementStatusNodeId = function(element){\n        if (this.layout.split_tracks){\n            return (this.getBaseId() + \"-statusnode-\" + element[this.layout.track_split_field]).replace(/[:.[\\],]/g, \"_\");\n        }\n        return this.getElementId(element) + \"-statusnode\";\n    }.bind(this);\n    \n    // Helper function to sum layout values to derive total height for a single interval track\n    this.getTrackHeight = function(){\n        return this.layout.track_height\n            + this.layout.track_vertical_spacing\n            + (2 * this.layout.bounding_box_padding);\n    };\n\n    this.tracks = 1;\n    this.previous_tracks = 1;\n    \n    // track-number-indexed object with arrays of interval indexes in the dataset\n    this.interval_track_index = { 1: [] };\n\n    // After we've loaded interval data interpret it to assign\n    // each to a track so that they do not overlap in the view\n    this.assignTracks = function(){\n\n        // Reinitialize some metadata\n        this.previous_tracks = this.tracks;\n        this.tracks = 0;\n        this.interval_track_index = { 1: [] };\n        this.track_split_field_index = {};\n        \n        // If splitting tracks by a field's value then do a first pass determine\n        // a value/track mapping that preserves the order of possible values\n        if (this.layout.track_split_field && this.layout.split_tracks){\n            this.data.map(function(d){\n                this.track_split_field_index[d[this.layout.track_split_field]] = null;\n            }.bind(this));\n            var index = Object.keys(this.track_split_field_index);\n            if (this.layout.track_split_order === \"DESC\"){ index.reverse(); }\n            index.forEach(function(val){\n                this.track_split_field_index[val] = this.tracks + 1;\n                this.interval_track_index[this.tracks + 1] = [];\n                this.tracks++;\n            }.bind(this));\n        }\n\n        this.data.map(function(d, i){\n\n            // Stash a parent reference on the interval\n            this.data[i].parent = this;\n\n            // Determine display range start and end, based on minimum allowable interval display width,\n            // bounded by what we can see (range: values in terms of pixels on the screen)\n            this.data[i].display_range = {\n                start: this.parent.x_scale(Math.max(d[this.layout.start_field], this.state.start)),\n                end:   this.parent.x_scale(Math.min(d[this.layout.end_field], this.state.end))\n            };\n            this.data[i].display_range.width = this.data[i].display_range.end - this.data[i].display_range.start;\n            \n            // Convert and stash display range values into domain values\n            // (domain: values in terms of the data set, e.g. megabases)\n            this.data[i].display_domain = {\n                start: this.parent.x_scale.invert(this.data[i].display_range.start),\n                end:   this.parent.x_scale.invert(this.data[i].display_range.end)\n            };\n            this.data[i].display_domain.width = this.data[i].display_domain.end - this.data[i].display_domain.start;\n\n            // If splitting to tracks based on the value of the designated track split field\n            // then don't bother with collision detection (intervals will be grouped on tracks\n            // solely by the value of track_split_field)\n            if (this.layout.track_split_field && this.layout.split_tracks){\n                var val = this.data[i][this.layout.track_split_field];\n                this.data[i].track = this.track_split_field_index[val];\n                this.interval_track_index[this.data[i].track].push(i);\n            } else {\n                // If not splitting to tracks based on a field value then do so based on collision\n                // detection (as how it's done for genes). Use display range/domain data generated\n                // above and cast each interval to tracks such that none overlap\n                this.tracks = 1;\n                this.data[i].track = null;\n                var potential_track = 1;\n                while (this.data[i].track === null){\n                    var collision_on_potential_track = false;\n                    this.interval_track_index[potential_track].map(function(placed_interval){\n                        if (!collision_on_potential_track){\n                            var min_start = Math.min(placed_interval.display_range.start, this.display_range.start);\n                            var max_end = Math.max(placed_interval.display_range.end, this.display_range.end);\n                            if ((max_end - min_start) < (placed_interval.display_range.width + this.display_range.width)){\n                                collision_on_potential_track = true;\n                            }\n                        }\n                    }.bind(this.data[i]));\n                    if (!collision_on_potential_track){\n                        this.data[i].track = potential_track;\n                        this.interval_track_index[potential_track].push(this.data[i]);\n                    } else {\n                        potential_track++;\n                        if (potential_track > this.tracks){\n                            this.tracks = potential_track;\n                            this.interval_track_index[potential_track] = [];\n                        }\n                    }\n                }\n\n            }\n\n        }.bind(this));\n\n        return this;\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        this.assignTracks();\n\n        // Remove any shared highlight nodes and re-render them if we're splitting on tracks\n        // At most there will only be dozen or so nodes here (one per track) and each time\n        // we render data we may have new tracks, so wiping/redrawing all is reasonable.\n        this.svg.group.selectAll(\".lz-data_layer-intervals-statusnode.lz-data_layer-intervals-shared\").remove();\n        Object.keys(this.track_split_field_index).forEach(function(key){\n            // Make a psuedo-element so that we can generate an id for the shared node\n            var psuedoElement = {};\n            psuedoElement[this.layout.track_split_field] = key;\n            // Insert the shared node\n            var sharedstatusnode_style = {display: (this.layout.split_tracks ? null : \"none\")};\n            this.svg.group.insert(\"rect\", \":first-child\")\n                .attr(\"id\", this.getElementStatusNodeId(psuedoElement))\n                .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-shared\")\n                .attr(\"rx\", this.layout.bounding_box_padding).attr(\"ry\", this.layout.bounding_box_padding)\n                .attr(\"width\", this.parent.layout.cliparea.width)\n                .attr(\"height\", this.getTrackHeight() - this.layout.track_vertical_spacing)\n                .attr(\"x\", 0)\n                .attr(\"y\", (this.track_split_field_index[key]-1) * this.getTrackHeight())\n                .style(sharedstatusnode_style);\n        }.bind(this));\n\n        var width, height, x, y, fill, fill_opacity;\n            \n        // Render interval groups\n        var selection = this.svg.group.selectAll(\"g.lz-data_layer-intervals\")\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        selection.enter().append(\"g\")\n            .attr(\"class\", \"lz-data_layer-intervals\");\n        \n        selection.attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .each(function(interval){\n\n                var data_layer = interval.parent;\n\n                // Render interval status nodes (displayed behind intervals to show highlight\n                // without needing to modify interval display element(s))\n                var statusnode_style = {display: (data_layer.layout.split_tracks ? \"none\" : null)};\n                var statusnodes = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-data_layer-intervals-statusnode.lz-data_layer-intervals-statusnode-discrete\")\n                    .data([interval], function(d){ return data_layer.getElementId(d) + \"-statusnode\"; });\n                statusnodes.enter().insert(\"rect\", \":first-child\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-data_layer-intervals-statusnode lz-data_layer-intervals-statusnode-discrete\");\n                statusnodes\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"-statusnode\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .style(statusnode_style);\n                width = function(d){\n                    return d.display_range.width + (2 * data_layer.layout.bounding_box_padding);\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start - data_layer.layout.bounding_box_padding;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    statusnodes\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    statusnodes\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n                statusnodes.exit().remove();\n\n                // Render primary interval rects\n                var rects = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-interval_rect\")\n                    .data([interval], function(d){ return d[data_layer.layout.id_field] + \"_interval_rect\"; });\n\n                rects.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-interval_rect\");\n\n                height = data_layer.layout.track_height;\n                width = function(d){\n                    return d.display_range.width;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight())\n                        + data_layer.layout.bounding_box_padding;\n                };\n                fill = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.color, d);\n                };\n                fill_opacity = function(d){\n                    return data_layer.resolveScalableParameter(data_layer.layout.fill_opacity, d);\n                };\n                \n                \n                if (data_layer.canTransition()){\n                    rects\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                } else {\n                    rects\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"x\", x).attr(\"y\", y)\n                        .attr(\"fill\", fill)\n                        .attr(\"fill-opacity\", fill_opacity);\n                }\n                \n                rects.exit().remove();\n\n                // Render interval click areas\n                var clickareas = d3.select(this).selectAll(\"rect.lz-data_layer-intervals.lz-clickarea\")\n                    .data([interval], function(d){ return d.interval_name + \"_clickarea\"; });\n\n                clickareas.enter().append(\"rect\")\n                    .attr(\"class\", \"lz-data_layer-intervals lz-clickarea\");\n\n                clickareas\n                    .attr(\"id\", function(d){\n                        return data_layer.getElementId(d) + \"_clickarea\";\n                    })\n                    .attr(\"rx\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    })\n                    .attr(\"ry\", function(){\n                        return data_layer.layout.bounding_box_padding;\n                    });\n\n                width = function(d){\n                    return d.display_range.width;\n                };\n                height = function(){\n                    return data_layer.getTrackHeight() - data_layer.layout.track_vertical_spacing;\n                };\n                x = function(d){\n                    return d.display_range.start;\n                };\n                y = function(d){\n                    return ((d.track-1) * data_layer.getTrackHeight());\n                };\n                if (data_layer.canTransition()){\n                    clickareas\n                        .transition()\n                        .duration(data_layer.layout.transition.duration || 0)\n                        .ease(data_layer.layout.transition.ease || \"cubic-in-out\")\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                } else {\n                    clickareas\n                        .attr(\"width\", width).attr(\"height\", height).attr(\"x\", x).attr(\"y\", y);\n                }\n\n                // Remove old clickareas as needed\n                clickareas.exit().remove();\n\n                // Apply default event emitters to clickareas\n                clickareas.on(\"click\", function(element_data){\n                    element_data.parent.parent.emit(\"element_clicked\", element_data, true);\n                }.bind(this));\n\n                // Apply mouse behaviors to clickareas\n                data_layer.applyBehaviors(clickareas);\n\n            });\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Update the legend axis if the number of ticks changed\n        if (this.previous_tracks !== this.tracks){\n            this.updateSplitTrackAxis();\n        }\n\n        return this;\n\n    };\n    \n    // Reimplement the positionTooltip() method to be interval-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var interval_bbox = d3.select(\"#\" + this.getElementStatusNodeId(tooltip.data)).node().getBBox();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        // Position horizontally: attempt to center on the portion of the interval that's visible,\n        // pad to either side if bumping up against the edge of the data layer\n        var interval_center_x = ((tooltip.data.display_range.start + tooltip.data.display_range.end) / 2) - (this.layout.bounding_box_padding / 2);\n        var offset_right = Math.max((tooltip_box.width / 2) - interval_center_x, 0);\n        var offset_left = Math.max((tooltip_box.width / 2) + interval_center_x - data_layer_width, 0);\n        var left = page_origin.x + interval_center_x - (tooltip_box.width / 2) - offset_left + offset_right;\n        var arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right;\n        // Position vertically below the interval unless there's insufficient space\n        var top, arrow_type, arrow_top;\n        if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (interval_bbox.y + interval_bbox.height)){\n            top = page_origin.y + interval_bbox.y - (tooltip_box.height + stroke_width + arrow_width);\n            arrow_type = \"down\";\n            arrow_top = tooltip_box.height - stroke_width;\n        } else {\n            top = page_origin.y + interval_bbox.y + interval_bbox.height + stroke_width + arrow_width;\n            arrow_type = \"up\";\n            arrow_top = 0 - stroke_width - arrow_width;\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Redraw split track axis or hide it, and show/hide the legend, as determined\n    // by current layout parameters and data\n    this.updateSplitTrackAxis = function(){\n        var legend_axis = this.layout.track_split_legend_to_y_axis ? \"y\" + this.layout.track_split_legend_to_y_axis : false;\n        if (this.layout.split_tracks){\n            var tracks = +this.tracks || 0;\n            var track_height = +this.layout.track_height || 0;\n            var track_spacing =  2 * (+this.layout.bounding_box_padding || 0) + (+this.layout.track_vertical_spacing || 0);\n            var target_height = (tracks * track_height) + ((tracks - 1) * track_spacing);\n            this.parent.scaleHeightToData(target_height);\n            if (legend_axis && this.parent.legend){\n                this.parent.legend.hide();                            \n                this.parent.layout.axes[legend_axis] = {\n                    render: true,\n                    ticks: [],\n                    range: {\n                        start: (target_height - (this.layout.track_height/2)),\n                        end: (this.layout.track_height/2)\n                    }\n                };\n                this.layout.legend.forEach(function(element){\n                    var key = element[this.layout.track_split_field];\n                    var track = this.track_split_field_index[key];\n                    if (track){\n                        if (this.layout.track_split_order === \"DESC\"){\n                            track = Math.abs(track - tracks - 1);\n                        }\n                        this.parent.layout.axes[legend_axis].ticks.push({\n                            y: track,\n                            text: element.label\n                        });\n                    }\n                }.bind(this));\n                this.layout.y_axis = {\n                    axis: this.layout.track_split_legend_to_y_axis,\n                    floor: 1,\n                    ceiling: tracks\n                };\n                this.parent.render();\n            }\n            this.parent_plot.positionPanels();\n        } else {\n            if (legend_axis && this.parent.legend){\n                if (!this.layout.always_hide_legend){ this.parent.legend.show(); }\n                this.parent.layout.axes[legend_axis] = { render: false };\n                this.parent.render();\n            }\n        }\n        return this;\n    };\n\n    // Method to not only toggle the split tracks boolean but also update\n    // necessary display values to animate a complete merge/split\n    this.toggleSplitTracks = function(){\n        this.layout.split_tracks = !this.layout.split_tracks;\n        if (this.parent.legend && !this.layout.always_hide_legend){\n            this.parent.layout.margin.bottom = 5 + (this.layout.split_tracks ? 0 : this.parent.legend.layout.height + 5);\n        }\n        this.render();\n        this.updateSplitTrackAxis();\n        return this;\n    };\n       \n    return this;\n\n});\n","\"use strict\";\n\n/*********************\n * Line Data Layer\n * Implements a standard line plot\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    /** @member {Object} */\n    this.DefaultLayout = {\n        style: {\n            fill: \"none\",\n            \"stroke-width\": \"2px\"\n        },\n        interpolate: \"linear\",\n        x_axis: { field: \"x\" },\n        y_axis: { field: \"y\", axis: 1 },\n        hitarea_width: 5\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Var for storing mouse events for use in tool tip positioning\n    /** @member {String} */\n    this.mouse_event = null;\n\n    /**\n     * Var for storing the generated line function itself\n     * @member {d3.svg.line}\n     * */\n    this.line = null;\n\n    /**\n     * The timeout identifier returned by setTimeout\n     * @member {Number}\n     */\n    this.tooltip_timeout = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n\n    /**\n     * Helper function to get display and data objects representing\n     *   the x/y coordinates of the current mouse event with respect to the line in terms of the display\n     *   and the interpolated values of the x/y fields with respect to the line\n     * @returns {{display: {x: *, y: null}, data: {}, slope: null}}\n     */\n    this.getMouseDisplayAndData = function(){\n        var ret = {\n            display: {\n                x: d3.mouse(this.mouse_event)[0],\n                y: null\n            },\n            data: {},\n            slope: null\n        };\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        ret.data[x_field] = this.parent[x_scale].invert(ret.display.x);\n        var bisect = d3.bisector(function(datum) { return +datum[x_field]; }).left;\n        var index = bisect(this.data, ret.data[x_field]) - 1;\n        var startDatum = this.data[index];\n        var endDatum = this.data[index + 1];\n        var interpolate = d3.interpolateNumber(+startDatum[y_field], +endDatum[y_field]);\n        var range = +endDatum[x_field] - +startDatum[x_field];\n        ret.data[y_field] = interpolate((ret.data[x_field] % range) / range);\n        ret.display.y = this.parent[y_scale](ret.data[y_field]);\n        if (this.layout.tooltip.x_precision){\n            ret.data[x_field] = ret.data[x_field].toPrecision(this.layout.tooltip.x_precision);\n        }\n        if (this.layout.tooltip.y_precision){\n            ret.data[y_field] = ret.data[y_field].toPrecision(this.layout.tooltip.y_precision);\n        }\n        ret.slope = (this.parent[y_scale](endDatum[y_field]) - this.parent[y_scale](startDatum[y_field]))\n                  / (this.parent[x_scale](endDatum[x_field]) - this.parent[x_scale](startDatum[x_field]));\n        return ret;\n    };\n\n    /**\n     * Reimplement the positionTooltip() method to be line-specific\n     * @param {String} id Identify the tooltip to be positioned\n     */\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var tooltip = this.tooltips[id];\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var arrow_width = 7; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var stroke_width = parseFloat(this.layout.style[\"stroke-width\"]) || 1;\n        var page_origin = this.getPageOrigin();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        var top, left, arrow_top, arrow_left, arrow_type;\n\n        // Determine x/y coordinates for display and data\n        var dd = this.getMouseDisplayAndData();\n\n        // If the absolute value of the slope of the line at this point is above 1 (including Infinity)\n        // then position the tool tip left/right. Otherwise position top/bottom.\n        if (Math.abs(dd.slope) > 1){\n\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (dd.display.x <= this.parent.layout.width / 2){\n                left = page_origin.x + dd.display.x + stroke_width + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + dd.display.x - tooltip_box.width - stroke_width - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            if (dd.display.y - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + dd.display.y - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (dd.display.y + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + dd.display.y + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + dd.display.y - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n\n        } else {\n\n            // Position horizontally: attempt to center on the mouse's x coordinate\n            // pad to either side if bumping up against the edge of the data layer\n            var offset_right = Math.max((tooltip_box.width / 2) - dd.display.x, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + dd.display.x - data_layer_width, 0);\n            left = page_origin.x + dd.display.x - (tooltip_box.width / 2) - offset_left + offset_right;\n            var min_arrow_left = arrow_width / 2;\n            var max_arrow_left = tooltip_box.width - (2.5 * arrow_width);\n            arrow_left = (tooltip_box.width / 2) - arrow_width + offset_left - offset_right;\n            arrow_left = Math.min(Math.max(arrow_left, min_arrow_left), max_arrow_left);\n\n            // Position vertically above the line unless there's insufficient space\n            if (tooltip_box.height + stroke_width + arrow_width > dd.display.y){\n                top = page_origin.y + dd.display.y + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            } else {\n                top = page_origin.y + dd.display.y - (tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            }\n        }\n\n        // Apply positions to the main div\n        tooltip.selector.style({ left: left + \"px\", top: top + \"px\" });\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style({ \"left\": arrow_left + \"px\", top: arrow_top + \"px\" });\n\n    };\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var data_layer = this;\n        var panel = this.parent;\n        var x_field = this.layout.x_axis.field;\n        var y_field = this.layout.y_axis.field;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n            .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n            .interpolate(this.layout.interpolate);\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Apply tooltip, etc\n        if (this.layout.tooltip){\n            // Generate an overlaying transparent \"hit area\" line for more intuitive mouse events\n            var hitarea_width = parseFloat(this.layout.hitarea_width).toString() + \"px\";\n            var hitarea = this.svg.group\n                .selectAll(\"path.lz-data_layer-line-hitarea\")\n                .data([this.data]);\n            hitarea.enter()\n                .append(\"path\")\n                .attr(\"class\", \"lz-data_layer-line-hitarea\")\n                .style(\"stroke-width\", hitarea_width);\n            var hitarea_line = d3.svg.line()\n                .x(function(d) { return parseFloat(panel[x_scale](d[x_field])); })\n                .y(function(d) { return parseFloat(panel[y_scale](d[y_field])); })\n                .interpolate(this.layout.interpolate);\n            hitarea\n                .attr(\"d\", hitarea_line)\n                .on(\"mouseover\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.createTooltip(dd.data);\n                })\n                .on(\"mousemove\", function(){\n                    clearTimeout(data_layer.tooltip_timeout);\n                    data_layer.mouse_event = this;\n                    var dd = data_layer.getMouseDisplayAndData();\n                    data_layer.updateTooltip(dd.data);\n                    data_layer.positionTooltip(data_layer.getElementId());\n                })\n                .on(\"mouseout\", function(){\n                    data_layer.tooltip_timeout = setTimeout(function(){\n                        data_layer.mouse_event = null;\n                        data_layer.destroyTooltip(data_layer.getElementId());\n                    }, 300);\n                });\n            hitarea.exit().remove();\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    /**\n     * Redefine setElementStatus family of methods as line data layers will only ever have a single path element\n     * @param {String} status A member of `LocusZoom.DataLayer.Statuses.adjectives`\n     * @param {String|Object} element\n     * @param {Boolean} toggle\n     * @returns {LocusZoom.DataLayer}\n     */\n    this.setElementStatus = function(status, element, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setElementStatusByFilters = function(status, toggle){\n        return this.setAllElementStatus(status, toggle);\n    };\n    this.setAllElementStatus = function(status, toggle){\n        // Sanity check\n        if (typeof status == \"undefined\" || LocusZoom.DataLayer.Statuses.adjectives.indexOf(status) === -1){\n            throw(\"Invalid status passed to DataLayer.setAllElementStatus()\");\n        }\n        if (typeof this.state[this.state_id][status] == \"undefined\"){ return this; }\n        if (typeof toggle == \"undefined\"){ toggle = true; }\n\n        // Update global status flag\n        this.global_statuses[status] = toggle;\n\n        // Apply class to path based on global status flags\n        var path_class = \"lz-data_layer-line\";\n        Object.keys(this.global_statuses).forEach(function(global_status){\n            if (this.global_statuses[global_status]){ path_class += \" lz-data_layer-line-\" + global_status; }\n        }.bind(this));\n        this.path.attr(\"class\", path_class);\n\n        // Trigger layout changed event hook\n        this.parent.emit(\"layout_changed\", true);\n        return this;\n    };\n\n    return this;\n\n});\n\n\n/***************************\n *  Orthogonal Line Data Layer\n *  Implements a horizontal or vertical line given an orientation and an offset in the layout\n *  Does not require a data source\n * @class\n * @augments LocusZoom.DataLayer\n*/\nLocusZoom.DataLayers.add(\"orthogonal_line\", function(layout){\n\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        style: {\n            \"stroke\": \"#D3D3D3\",\n            \"stroke-width\": \"3px\",\n            \"stroke-dasharray\": \"10px 10px\"\n        },\n        orientation: \"horizontal\",\n        x_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        y_axis: {\n            axis: 1,\n            decoupled: true\n        },\n        offset: 0\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Require that orientation be \"horizontal\" or \"vertical\" only\n    if ([\"horizontal\",\"vertical\"].indexOf(layout.orientation) === -1){\n        layout.orientation = \"horizontal\";\n    }\n\n    // Vars for storing the data generated line\n    /** @member {Array} */\n    this.data = [];\n    /** @member {d3.svg.line} */\n    this.line = null;\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    /**\n     * Implement the main render function\n     */\n    this.render = function(){\n\n        // Several vars needed to be in scope\n        var panel = this.parent;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\" + this.layout.y_axis.axis + \"_scale\";\n        var x_extent = \"x_extent\";\n        var y_extent = \"y\" + this.layout.y_axis.axis + \"_extent\";\n        var x_range = \"x_range\";\n        var y_range = \"y\" + this.layout.y_axis.axis + \"_range\";\n\n        // Generate data using extents depending on orientation\n        if (this.layout.orientation === \"horizontal\"){\n            this.data = [\n                { x: panel[x_extent][0], y: this.layout.offset },\n                { x: panel[x_extent][1], y: this.layout.offset }\n            ];\n        } else {\n            this.data = [\n                { x: this.layout.offset, y: panel[y_extent][0] },\n                { x: this.layout.offset, y: panel[y_extent][1] }\n            ];\n        }\n\n        // Join data to the line selection\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-line\")\n            .data([this.data]);\n\n        // Create path element, apply class\n        this.path = selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-line\");\n\n        // Generate the line\n        this.line = d3.svg.line()\n            .x(function(d, i) {\n                var x = parseFloat(panel[x_scale](d[\"x\"]));\n                return isNaN(x) ? panel[x_range][i] : x;\n            })\n            .y(function(d, i) {\n                var y = parseFloat(panel[y_scale](d[\"y\"]));\n                return isNaN(y) ? panel[y_range][i] : y;\n            })\n            .interpolate(\"linear\");\n\n        // Apply line and style\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        } else {\n            selection\n                .attr(\"d\", this.line)\n                .style(this.layout.style);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n        \n    };\n\n    return this;\n\n});\n","\"use strict\";\n\n/**\n * Scatter Data Layer\n * Implements a standard scatter plot\n * @class LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.add(\"scatter\", function(layout){\n    // Define a default layout for this DataLayer type and merge it with the passed argument\n    this.DefaultLayout = {\n        point_size: 40,\n        point_shape: \"circle\",\n        tooltip_positioning: \"horizontal\",\n        color: \"#888888\",\n        fill_opacity: 1,\n        y_axis: {\n            axis: 1\n        },\n        id_field: \"id\"\n    };\n    layout = LocusZoom.Layouts.merge(layout, this.DefaultLayout);\n\n    // Extra default for layout spacing\n    // Not in default layout since that would make the label attribute always present\n    if (layout.label && isNaN(layout.label.spacing)){\n        layout.label.spacing = 4;\n    }\n\n    // Apply the arguments to set LocusZoom.DataLayer as the prototype\n    LocusZoom.DataLayer.apply(this, arguments);\n\n    // Reimplement the positionTooltip() method to be scatter-specific\n    this.positionTooltip = function(id){\n        if (typeof id != \"string\"){\n            throw (\"Unable to position tooltip: id is not a string\");\n        }\n        if (!this.tooltips[id]){\n            throw (\"Unable to position tooltip: id does not point to a valid tooltip\");\n        }\n        var top, left, arrow_type, arrow_top, arrow_left;\n        var tooltip = this.tooltips[id];\n        var point_size = this.resolveScalableParameter(this.layout.point_size, tooltip.data);\n        var offset = Math.sqrt(point_size / Math.PI);\n        var arrow_width = 7; // as defined in the default stylesheet\n        var stroke_width = 1; // as defined in the default stylesheet\n        var border_radius = 6; // as defined in the default stylesheet\n        var page_origin = this.getPageOrigin();\n        var x_center = this.parent.x_scale(tooltip.data[this.layout.x_axis.field]);\n        var y_scale  = \"y\"+this.layout.y_axis.axis+\"_scale\";\n        var y_center = this.parent[y_scale](tooltip.data[this.layout.y_axis.field]);\n        var tooltip_box = tooltip.selector.node().getBoundingClientRect();\n        var data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n        var data_layer_width = this.parent.layout.width - (this.parent.layout.margin.left + this.parent.layout.margin.right);\n        if (this.layout.tooltip_positioning === \"vertical\"){\n            // Position horizontally centered above the point\n            var offset_right = Math.max((tooltip_box.width / 2) - x_center, 0);\n            var offset_left = Math.max((tooltip_box.width / 2) + x_center - data_layer_width, 0);\n            left = page_origin.x + x_center - (tooltip_box.width / 2) - offset_left + offset_right;\n            arrow_left = (tooltip_box.width / 2) - (arrow_width / 2) + offset_left - offset_right - offset;\n            // Position vertically above the point unless there's insufficient space, then go below\n            if (tooltip_box.height + stroke_width + arrow_width > data_layer_height - (y_center + offset)){\n                top = page_origin.y + y_center - (offset + tooltip_box.height + stroke_width + arrow_width);\n                arrow_type = \"down\";\n                arrow_top = tooltip_box.height - stroke_width;\n            } else {\n                top = page_origin.y + y_center + offset + stroke_width + arrow_width;\n                arrow_type = \"up\";\n                arrow_top = 0 - stroke_width - arrow_width;\n            }\n        } else {\n            // Position horizontally on the left or the right depending on which side of the plot the point is on\n            if (x_center <= this.parent.layout.width / 2){\n                left = page_origin.x + x_center + offset + arrow_width + stroke_width;\n                arrow_type = \"left\";\n                arrow_left = -1 * (arrow_width + stroke_width);\n            } else {\n                left = page_origin.x + x_center - tooltip_box.width - offset - arrow_width - stroke_width;\n                arrow_type = \"right\";\n                arrow_left = tooltip_box.width - stroke_width;\n            }\n            // Position vertically centered unless we're at the top or bottom of the plot\n            data_layer_height = this.parent.layout.height - (this.parent.layout.margin.top + this.parent.layout.margin.bottom);\n            if (y_center - (tooltip_box.height / 2) <= 0){ // Too close to the top, push it down\n                top = page_origin.y + y_center - (1.5 * arrow_width) - border_radius;\n                arrow_top = border_radius;\n            } else if (y_center + (tooltip_box.height / 2) >= data_layer_height){ // Too close to the bottom, pull it up\n                top = page_origin.y + y_center + arrow_width + border_radius - tooltip_box.height;\n                arrow_top = tooltip_box.height - (2 * arrow_width) - border_radius;\n            } else { // vertically centered\n                top = page_origin.y + y_center - (tooltip_box.height / 2);\n                arrow_top = (tooltip_box.height / 2) - arrow_width;\n            }\n        }\n        // Apply positions to the main div\n        tooltip.selector.style(\"left\", left + \"px\").style(\"top\", top + \"px\");\n        // Create / update position on arrow connecting tooltip to data\n        if (!tooltip.arrow){\n            tooltip.arrow = tooltip.selector.append(\"div\").style(\"position\", \"absolute\");\n        }\n        tooltip.arrow\n            .attr(\"class\", \"lz-data_layer-tooltip-arrow_\" + arrow_type)\n            .style(\"left\", arrow_left + \"px\")\n            .style(\"top\", arrow_top + \"px\");\n    };\n\n    // Function to flip labels from being anchored at the start of the text to the end\n    // Both to keep labels from running outside the data layer and  also as a first\n    // pass on recursive separation\n    this.flip_labels = function(){\n        var data_layer = this;\n        var point_size = data_layer.resolveScalableParameter(data_layer.layout.point_size, {});\n        var spacing = data_layer.layout.label.spacing;\n        var handle_lines = Boolean(data_layer.layout.label.lines);\n        var min_x = 2 * spacing;\n        var max_x = data_layer.parent.layout.width - data_layer.parent.layout.margin.left - data_layer.parent.layout.margin.right - (2 * spacing);\n        var flip = function(dn, dnl){\n            var dnx = +dn.attr(\"x\");\n            var text_swing = (2 * spacing) + (2 * Math.sqrt(point_size));\n            if (handle_lines){\n                var dnlx2 = +dnl.attr(\"x2\");\n                var line_swing = spacing + (2 * Math.sqrt(point_size));\n            }\n            if (dn.style(\"text-anchor\") === \"start\"){\n                dn.style(\"text-anchor\", \"end\");\n                dn.attr(\"x\", dnx - text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 - line_swing); }\n            } else {\n                dn.style(\"text-anchor\", \"start\");\n                dn.attr(\"x\", dnx + text_swing);\n                if (handle_lines){ dnl.attr(\"x2\", dnlx2 + line_swing); }\n            }\n        };\n        // Flip any going over the right edge from the right side to the left side\n        // (all labels start on the right side)\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            if (dax + abound.width + spacing > max_x){\n                var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n                flip(da, dal);\n            }\n        });\n        // Second pass to flip any others that haven't flipped yet if they collide with another label\n        data_layer.label_texts.each(function (d, i) {\n            var a = this;\n            var da = d3.select(a);\n            if (da.style(\"text-anchor\") === \"end\") return;\n            var dax = +da.attr(\"x\");\n            var abound = da.node().getBoundingClientRect();\n            var dal = handle_lines ? d3.select(data_layer.label_lines[0][i]) : null;\n            data_layer.label_texts.each(function () {\n                var b = this;\n                var db = d3.select(b);\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (collision){\n                    flip(da, dal);\n                    // Double check that this flip didn't push the label past min_x. If it did, immediately flip back.\n                    dax = +da.attr(\"x\");\n                    if (dax - abound.width - spacing < min_x){\n                        flip(da, dal);\n                    }\n                }\n                return;\n            });\n        });\n    };\n\n    // Recursive function to space labels apart immediately after initial render\n    // Adapted from thudfactor's fiddle here: https://jsfiddle.net/thudfactor/HdwTH/\n    // TODO: Make labels also aware of data elements\n    this.separate_labels = function(){\n        this.seperate_iterations++;\n        var data_layer = this;\n        var alpha = 0.5;\n        var spacing = this.layout.label.spacing;\n        var again = false;\n        data_layer.label_texts.each(function () {\n            var a = this;\n            var da = d3.select(a);\n            var y1 = da.attr(\"y\");\n            data_layer.label_texts.each(function () {\n                var b = this;\n                // a & b are the same element and don't collide.\n                if (a === b) return;\n                var db = d3.select(b);\n                // a & b are on opposite sides of the chart and\n                // don't collide\n                if (da.attr(\"text-anchor\") !== db.attr(\"text-anchor\")) return;\n                // Determine if the  bounding rects for the two text elements collide\n                var abound = da.node().getBoundingClientRect();\n                var bbound = db.node().getBoundingClientRect();\n                var collision = abound.left < bbound.left + bbound.width + (2*spacing) &&\n                    abound.left + abound.width + (2*spacing) > bbound.left &&\n                    abound.top < bbound.top + bbound.height + (2*spacing) &&\n                    abound.height + abound.top + (2*spacing) > bbound.top;\n                if (!collision) return;\n                again = true;\n                // If the labels collide, we'll push each\n                // of the two labels up and down a little bit.\n                var y2 = db.attr(\"y\");\n                var sign = abound.top < bbound.top ? 1 : -1;\n                var adjust = sign * alpha;\n                var new_a_y = +y1 - adjust;\n                var new_b_y = +y2 + adjust;\n                // Keep new values from extending outside the data layer\n                var min_y = 2 * spacing;\n                var max_y = data_layer.parent.layout.height - data_layer.parent.layout.margin.top - data_layer.parent.layout.margin.bottom - (2 * spacing);\n                var delta;\n                if (new_a_y - (abound.height/2) < min_y){\n                    delta = +y1 - new_a_y;\n                    new_a_y = +y1;\n                    new_b_y += delta;\n                } else if (new_b_y - (bbound.height/2) < min_y){\n                    delta = +y2 - new_b_y;\n                    new_b_y = +y2;\n                    new_a_y += delta;\n                }\n                if (new_a_y + (abound.height/2) > max_y){\n                    delta = new_a_y - +y1;\n                    new_a_y = +y1;\n                    new_b_y -= delta;\n                } else if (new_b_y + (bbound.height/2) > max_y){\n                    delta = new_b_y - +y2;\n                    new_b_y = +y2;\n                    new_a_y -= delta;\n                }\n                da.attr(\"y\",new_a_y);\n                db.attr(\"y\",new_b_y);\n            });\n        });\n        if (again) {\n            // Adjust lines to follow the labels\n            if (data_layer.layout.label.lines){\n                var label_elements = data_layer.label_texts[0];\n                data_layer.label_lines.attr(\"y2\",function(d,i) {\n                    var label_line = d3.select(label_elements[i]);\n                    return label_line.attr(\"y\");\n                });\n            }\n            // After ~150 iterations we're probably beyond diminising returns, so stop recursing\n            if (this.seperate_iterations < 150){\n                setTimeout(function(){\n                    this.separate_labels();\n                }.bind(this), 1);\n            }\n        }\n    };\n\n    // Implement the main render function\n    this.render = function(){\n\n        var data_layer = this;\n        var x_scale = \"x_scale\";\n        var y_scale = \"y\"+this.layout.y_axis.axis+\"_scale\";\n\n        // Generate labels first (if defined)\n        if (this.layout.label){\n            // Apply filters to generate a filtered data set\n            var filtered_data = this.data.filter(function(d){\n                if (!data_layer.layout.label.filters){\n                    return true;\n                } else {\n                    // Start by assuming a match, run through all filters to test if not a match on any one\n                    var match = true;\n                    data_layer.layout.label.filters.forEach(function(filter){\n                        var field_value = (new LocusZoom.Data.Field(filter.field)).resolve(d);\n                        if (isNaN(field_value)){\n                            match = false;\n                        } else {\n                            switch (filter.operator){\n                            case \"<\":\n                                if (!(field_value < filter.value)){ match = false; }\n                                break;\n                            case \"<=\":\n                                if (!(field_value <= filter.value)){ match = false; }\n                                break;\n                            case \">\":\n                                if (!(field_value > filter.value)){ match = false; }\n                                break;\n                            case \">=\":\n                                if (!(field_value >= filter.value)){ match = false; }\n                                break;\n                            case \"=\":\n                                if (!(field_value === filter.value)){ match = false; }\n                                break;\n                            default:\n                                // If we got here the operator is not valid, so the filter should fail\n                                match = false;\n                                break;\n                            }\n                        }\n                    });\n                    return match;\n                }\n            });\n            // Render label groups\n            var self = this;\n            this.label_groups = this.svg.group\n                .selectAll(\"g.lz-data_layer-\" + this.layout.type + \"-label\")\n                .data(filtered_data, function(d){ return d[self.layout.id_field]  + \"_label\"; });\n            this.label_groups.enter()\n                .append(\"g\")\n                .attr(\"class\", \"lz-data_layer-\"+ this.layout.type + \"-label\");\n            // Render label texts\n            if (this.label_texts){ this.label_texts.remove(); }\n            this.label_texts = this.label_groups.append(\"text\")\n                .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n            this.label_texts\n                .text(function(d){\n                    return LocusZoom.parseFields(d, data_layer.layout.label.text || \"\");\n                })\n                .style(data_layer.layout.label.style || {})\n                .attr({\n                    \"x\": function(d){\n                        var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                              + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                              + data_layer.layout.label.spacing;\n                        if (isNaN(x)){ x = -1000; }\n                        return x;\n                    },\n                    \"y\": function(d){\n                        var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                        if (isNaN(y)){ y = -1000; }\n                        return y;\n                    },\n                    \"text-anchor\": function(){\n                        return \"start\";\n                    }\n                });\n            // Render label lines\n            if (data_layer.layout.label.lines){\n                if (this.label_lines){ this.label_lines.remove(); }\n                this.label_lines = this.label_groups.append(\"line\")\n                    .attr(\"class\", \"lz-data_layer-\" + this.layout.type + \"-label\");\n                this.label_lines\n                    .style(data_layer.layout.label.lines.style || {})\n                    .attr({\n                        \"x1\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field]);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y1\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        },\n                        \"x2\": function(d){\n                            var x = data_layer.parent[x_scale](d[data_layer.layout.x_axis.field])\n                                  + Math.sqrt(data_layer.resolveScalableParameter(data_layer.layout.point_size, d))\n                                  + (data_layer.layout.label.spacing/2);\n                            if (isNaN(x)){ x = -1000; }\n                            return x;\n                        },\n                        \"y2\": function(d){\n                            var y = data_layer.parent[y_scale](d[data_layer.layout.y_axis.field]);\n                            if (isNaN(y)){ y = -1000; }\n                            return y;\n                        }\n                    });\n            }\n            // Remove labels when they're no longer in the filtered data set\n            this.label_groups.exit().remove();\n        }\n            \n        // Generate main scatter data elements\n        var selection = this.svg.group\n            .selectAll(\"path.lz-data_layer-\" + this.layout.type)\n            .data(this.data, function(d){ return d[this.layout.id_field]; }.bind(this));\n\n        // Create elements, apply class, ID, and initial position\n        var initial_y = isNaN(this.parent.layout.height) ? 0 : this.parent.layout.height;\n        selection.enter()\n            .append(\"path\")\n            .attr(\"class\", \"lz-data_layer-\" + this.layout.type)\n            .attr(\"id\", function(d){ return this.getElementId(d); }.bind(this))\n            .attr(\"transform\", \"translate(0,\" + initial_y + \")\");\n\n        // Generate new values (or functions for them) for position, color, size, and shape\n        var transform = function(d) {\n            var x = this.parent[x_scale](d[this.layout.x_axis.field]);\n            var y = this.parent[y_scale](d[this.layout.y_axis.field]);\n            if (isNaN(x)){ x = -1000; }\n            if (isNaN(y)){ y = -1000; }\n            return \"translate(\" + x + \",\" + y + \")\";\n        }.bind(this);\n\n        var fill = function(d){ return this.resolveScalableParameter(this.layout.color, d); }.bind(this);\n        var fill_opacity = function(d){ return this.resolveScalableParameter(this.layout.fill_opacity, d); }.bind(this);\n\n        var shape = d3.svg.symbol()\n            .size(function(d){ return this.resolveScalableParameter(this.layout.point_size, d); }.bind(this))\n            .type(function(d){ return this.resolveScalableParameter(this.layout.point_shape, d); }.bind(this));\n\n        // Apply position and color, using a transition if necessary\n\n        if (this.canTransition()){\n            selection\n                .transition()\n                .duration(this.layout.transition.duration || 0)\n                .ease(this.layout.transition.ease || \"cubic-in-out\")\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        } else {\n            selection\n                .attr(\"transform\", transform)\n                .attr(\"fill\", fill)\n                .attr(\"fill-opacity\", fill_opacity)\n                .attr(\"d\", shape);\n        }\n\n        // Remove old elements as needed\n        selection.exit().remove();\n\n        // Apply default event emitters to selection\n        selection.on(\"click.event_emitter\", function(element){\n            this.parent.emit(\"element_clicked\", element, true);\n        }.bind(this));\n       \n        // Apply mouse behaviors\n        this.applyBehaviors(selection);\n        \n        // Apply method to keep labels from overlapping each other\n        if (this.layout.label){\n            this.flip_labels();\n            this.seperate_iterations = 0;\n            this.separate_labels();\n            // Apply default event emitters to selection\n            this.label_texts.on(\"click.event_emitter\", function(element){\n                this.parent.emit(\"element_clicked\", element, true);\n            }.bind(this));\n            // Extend mouse behaviors to labels\n            this.applyBehaviors(this.label_texts);\n        }\n        \n    };\n\n    // Method to set a passed element as the LD reference in the plot-level state\n    this.makeLDReference = function(element){\n        var ref = null;\n        if (typeof element == \"undefined\"){\n            throw(\"makeLDReference requires one argument of any type\");\n        } else if (typeof element == \"object\"){\n            if (this.layout.id_field && typeof element[this.layout.id_field] != \"undefined\"){\n                ref = element[this.layout.id_field].toString();\n            } else if (typeof element[\"id\"] != \"undefined\"){\n                ref = element[\"id\"].toString();\n            } else {\n                ref = element.toString();\n            }\n        } else {\n            ref = element.toString();\n        }\n        this.parent_plot.applyState({ ldrefvar: ref });\n    };\n \n    return this;\n\n});\n\n/**\n * A scatter plot in which the x-axis represents categories, rather than individual positions.\n * For example, this can be used by PheWAS plots to show related groups. This plot allows the categories to be\n *   determined dynamically when data is first loaded.\n *\n * @class LocusZoom.DataLayers.category_scatter\n * @augments LocusZoom.DataLayers.scatter\n */\nLocusZoom.DataLayers.extend(\"scatter\", \"category_scatter\", {\n    /**\n     * This plot layer makes certain assumptions about the data passed in. Transform the raw array of records from\n     *   the datasource to prepare it for plotting, as follows:\n     * 1. The scatter plot assumes that all records are given in sequence (pre-grouped by `category_field`)\n     * 2. It assumes that all records have an x coordinate for individual plotting\n     * @private\n     */\n    _prepareData: function() {\n        var xField = this.layout.x_axis.field || \"x\";\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        if (!category_field) {\n            throw \"Layout for \" + this.layout.id + \" must specify category_field\";\n        }\n        // Sort the data so that things in the same category are adjacent (case-insensitive by specified field)\n        var sourceData = this.data\n            .sort(function(a, b) {\n                var ak = a[category_field];\n                var bk = b[category_field];\n                var av = ak.toString ? ak.toString().toLowerCase() : ak;\n                var bv = bk.toString ? bk.toString().toLowerCase() : bk;\n                return (av === bv) ? 0 : (av < bv ? -1 : 1);});\n        sourceData.forEach(function(d, i){\n            // Implementation detail: Scatter plot requires specifying an x-axis value, and most datasources do not\n            //   specify plotting positions. If a point is missing this field, fill in a synthetic value.\n            d[xField] = d[xField] || i;\n        });\n        return sourceData;\n    },\n\n    /**\n     * Identify the unique categories on the plot, and update the layout with an appropriate color scheme.\n     * Also identify the min and max x value associated with the category, which will be used to generate ticks\n     * @private\n     * @returns {Object.<String, Number[]>} Series of entries used to build category name ticks {category_name: [min_x, max_x]}\n     */\n    _generateCategoryBounds: function() {\n        // TODO: API may return null values in category_field; should we add placeholder category label?\n        // The (namespaced) field from `this.data` that will be used to assign datapoints to a given category & color\n        var category_field = this.layout.x_axis.category_field;\n        var xField = this.layout.x_axis.field || \"x\";\n        var uniqueCategories = {};\n        this.data.forEach(function(item) {\n            var category = item[category_field];\n            var x = item[xField];\n            var bounds = uniqueCategories[category] || [x, x];\n            uniqueCategories[category] = [Math.min(bounds[0], x), Math.max(bounds[1], x)];\n        });\n\n        var categoryNames = Object.keys(uniqueCategories);\n        this._setDynamicColorScheme(categoryNames);\n\n        return uniqueCategories;\n    },\n\n    /**\n     * Automatically define a color scheme for the layer based on data returned from the server.\n     *   If part of the color scheme has been specified, it will fill in remaining missing information.\n     *\n     * There are three scenarios:\n     * 1. The layout does not specify either category names or (color) values. Dynamically build both based on\n     *    the data and update the layout.\n     * 2. The layout specifies colors, but not categories. Use that exact color information provided, and dynamically\n     *     determine what categories are present in the data. (cycle through the available colors, reusing if there\n     *     are a lot of categories)\n     * 3. The layout specifies exactly what colors and categories to use (and they match the data!). This is useful to\n     *    specify an explicit mapping between color scheme and category names, when you want to be sure that the\n     *    plot matches a standard color scheme.\n     *    (If the layout specifies categories that do not match the data, the user specified categories will be ignored)\n     *\n     * This method will only act if the layout defines a `categorical_bin` scale function for coloring. It may be\n     *   overridden in a subclass to suit other types of coloring methods.\n     *\n     * @param {String[]} categoryNames\n     * @private\n     */\n    _setDynamicColorScheme: function(categoryNames) {\n        var colorParams = this.layout.color.parameters;\n        var baseParams = this._base_layout.color.parameters;\n\n        // If the layout does not use a supported coloring scheme, or is already complete, this method should do nothing\n        if (this.layout.color.scale_function !== \"categorical_bin\") {\n            throw \"This layer requires that coloring be specified as a `categorical_bin`\";\n        }\n\n        if (baseParams.categories.length && baseParams.values.length) {\n            // If there are preset category/color combos, make sure that they apply to the actual dataset\n            var parameters_categories_hash = {};\n            baseParams.categories.forEach(function (category) { parameters_categories_hash[category] = 1; });\n            if (categoryNames.every(function (name) { return parameters_categories_hash.hasOwnProperty(name); })) {\n                // The layout doesn't have to specify categories in order, but make sure they are all there\n                colorParams.categories = baseParams.categories;\n            } else {\n                colorParams.categories = categoryNames;\n            }\n        } else {\n            colorParams.categories = categoryNames;\n        }\n        // Prefer user-specified colors if provided. Make sure that there are enough colors for all the categories.\n        var colors;\n        if (baseParams.values.length) {\n            colors = baseParams.values;\n        } else {\n            var color_scale = categoryNames.length <= 10 ? d3.scale.category10 : d3.scale.category20;\n            colors = color_scale().range();\n        }\n        while (colors.length < categoryNames.length) { colors = colors.concat(colors); }\n        colors = colors.slice(0, categoryNames.length);  // List of hex values, should be of same length as categories array\n        colorParams.values = colors;\n    },\n\n    /**\n     *\n     * @param dimension\n     * @param {Object} [config] Parameters that customize how ticks are calculated (not style)\n     * @param {('left'|'center'|'right')} [config.position='left'] Align ticks with the center or edge of category\n     * @returns {Array}\n     */\n    getTicks: function(dimension, config) { // Overrides parent method\n        if ([\"x\", \"y1\", \"y2\"].indexOf(dimension) === -1) {\n            throw \"Invalid dimension identifier\";\n        }\n        var position = config.position || \"left\";\n        if ([\"left\", \"center\", \"right\"].indexOf(position) === -1) {\n            throw \"Invalid tick position\";\n        }\n\n        var categoryBounds = this._categories;\n        if (!categoryBounds || !Object.keys(categoryBounds).length) {\n            return [];\n        }\n\n        if (dimension === \"y\") {\n            return [];\n        }\n\n        if (dimension === \"x\") {\n            // If colors have been defined by this layer, use them to make tick colors match scatterplot point colors\n            var knownCategories = this.layout.color.parameters.categories || [];\n            var knownColors = this.layout.color.parameters.values || [];\n\n            return Object.keys(categoryBounds).map(function (category, index) {\n                var bounds = categoryBounds[category];\n                var xPos;\n\n                switch(position) {\n                case \"left\":\n                    xPos = bounds[0];\n                    break;\n                case \"center\":\n                    // Center tick under one or many elements as appropriate\n                    var diff = bounds[1] - bounds[0];\n                    xPos = bounds[0] + (diff !== 0 ? diff : bounds[0]) / 2;\n                    break;\n                case \"right\":\n                    xPos = bounds[1];\n                    break;\n                }\n                return {\n                    x: xPos,\n                    text: category,\n                    style: {\n                        \"fill\": knownColors[knownCategories.indexOf(category)] || \"#000000\"\n                    }\n                };\n            });\n        }\n    },\n\n    applyCustomDataMethods: function() {\n        this.data = this._prepareData();\n        /**\n         * Define category names and extents (boundaries) for plotting.  TODO: properties in constructor\n         * @member {Object.<String, Number[]>} Category names and extents, in the form {category_name: [min_x, max_x]}\n         */\n        this._categories = this._generateCategoryBounds();\n        return this;\n    }\n});\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An SVG object used to display contextual information about a panel.\n * Panel layouts determine basic features of a legend - its position in the panel, orientation, title, etc.\n * Layouts of child data layers of the panel determine the actual content of the legend.\n *\n * @class\n * @param {LocusZoom.Panel} parent\n*/\nLocusZoom.Legend = function(parent){\n    if (!(parent instanceof LocusZoom.Panel)){\n        throw \"Unable to create legend, parent must be a locuszoom panel\";\n    }\n    /** @member {LocusZoom.Panel} */\n    this.parent = parent;\n    /** @member {String} */\n    this.id = this.parent.getBaseId() + \".legend\";\n\n    this.parent.layout.legend = LocusZoom.Layouts.merge(this.parent.layout.legend || {}, LocusZoom.Legend.DefaultLayout);\n    /** @member {Object} */\n    this.layout = this.parent.layout.legend;\n\n    /** @member {d3.selection} */\n    this.selector = null;\n    /** @member {d3.selection} */\n    this.background_rect = null;\n    /** @member {d3.selection[]} */\n    this.elements = [];\n    /**\n     * SVG selector for the group containing all elements in the legend\n     * @protected\n     * @member {d3.selection|null}\n     */\n    this.elements_group = null;\n\n    /**\n     * TODO: Not sure if this property is used; the external-facing methods are setting `layout.hidden` instead. Tentatively mark deprecated.\n     * @deprecated\n     * @protected\n     * @member {Boolean}\n     */\n    this.hidden = false;\n\n    // TODO Revisit constructor return value; see https://stackoverflow.com/a/3350364/1422268\n    return this.render();\n};\n\n/**\n * The default layout used by legends (used internally)\n * @protected\n * @member {Object}\n */\nLocusZoom.Legend.DefaultLayout = {\n    orientation: \"vertical\",\n    origin: { x: 0, y: 0 },\n    width: 10,\n    height: 10,\n    padding: 5,\n    label_size: 12,\n    hidden: false\n};\n\n/**\n * Render the legend in the parent panel\n */\nLocusZoom.Legend.prototype.render = function(){\n\n    // Get a legend group selector if not yet defined\n    if (!this.selector){\n        this.selector = this.parent.svg.group.append(\"g\")\n            .attr(\"id\", this.parent.getBaseId() + \".legend\").attr(\"class\", \"lz-legend\");\n    }\n\n    // Get a legend background rect selector if not yet defined\n    if (!this.background_rect){\n        this.background_rect = this.selector.append(\"rect\")\n            .attr(\"width\", 100).attr(\"height\", 100).attr(\"class\", \"lz-legend-background\");\n    }\n\n    // Get a legend elements group selector if not yet defined\n    if (!this.elements_group){\n        this.elements_group = this.selector.append(\"g\");\n    }\n\n    // Remove all elements from the document and re-render from scratch\n    this.elements.forEach(function(element){\n        element.remove();\n    });\n    this.elements = [];\n\n    // Gather all elements from data layers in order (top to bottom) and render them\n    var padding = +this.layout.padding || 1;\n    var x = padding;\n    var y = padding;\n    var line_height = 0;\n    this.parent.data_layer_ids_by_z_index.slice().reverse().forEach(function(id){\n        if (Array.isArray(this.parent.data_layers[id].layout.legend)){\n            this.parent.data_layers[id].layout.legend.forEach(function(element){\n                var selector = this.elements_group.append(\"g\")\n                    .attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                var label_size = +element.label_size || +this.layout.label_size || 12;\n                var label_x = 0;\n                var label_y = (label_size/2) + (padding/2);\n                line_height = Math.max(line_height, label_size + padding);\n                // Draw the legend element symbol (line, rect, shape, etc)\n                if (element.shape === \"line\"){\n                    // Line symbol\n                    var length = +element.length || 16;\n                    var path_y = (label_size/4) + (padding/2);\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", \"M0,\" + path_y + \"L\" + length + \",\" + path_y)\n                        .style(element.style || {});\n                    label_x = length + padding;\n                } else if (element.shape === \"rect\"){\n                    // Rect symbol\n                    var width = +element.width || 16;\n                    var height = +element.height || width;\n                    selector.append(\"rect\").attr(\"class\", element.class || \"\")\n                        .attr(\"width\", width).attr(\"height\", height)\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = width + padding;\n                    line_height = Math.max(line_height, height + padding);\n                } else if (d3.svg.symbolTypes.indexOf(element.shape) !== -1) {\n                    // Shape symbol (circle, diamond, etc.)\n                    var size = +element.size || 40;\n                    var radius = Math.ceil(Math.sqrt(size/Math.PI));\n                    selector.append(\"path\").attr(\"class\", element.class || \"\")\n                        .attr(\"d\", d3.svg.symbol().size(size).type(element.shape))\n                        .attr(\"transform\", \"translate(\" + radius + \",\" + (radius+(padding/2)) + \")\")\n                        .attr(\"fill\", element.color || {})\n                        .style(element.style || {});\n                    label_x = (2*radius) + padding;\n                    label_y = Math.max((2*radius)+(padding/2), label_y);\n                    line_height = Math.max(line_height, (2*radius) + padding);\n                }\n                // Draw the legend element label\n                selector.append(\"text\").attr(\"text-anchor\", \"left\").attr(\"class\", \"lz-label\")\n                    .attr(\"x\", label_x).attr(\"y\", label_y).style({\"font-size\": label_size}).text(element.label);\n                // Position the legend element group based on legend layout orientation\n                var bcr = selector.node().getBoundingClientRect();\n                if (this.layout.orientation === \"vertical\"){\n                    y += bcr.height + padding;\n                    line_height = 0;\n                } else {\n                    // Ensure this element does not exceed the panel width\n                    // (E.g. drop to the next line if it does, but only if it's not the only element on this line)\n                    var right_x = this.layout.origin.x + x + bcr.width;\n                    if (x > padding && right_x > this.parent.layout.width){\n                        y += line_height;\n                        x = padding;\n                        selector.attr(\"transform\", \"translate(\" + x + \",\" + y + \")\");\n                    }\n                    x += bcr.width + (3*padding);\n                }\n                // Store the element\n                this.elements.push(selector);\n            }.bind(this));\n        }\n    }.bind(this));\n\n    // Scale the background rect to the elements in the legend\n    var bcr = this.elements_group.node().getBoundingClientRect();\n    this.layout.width = bcr.width + (2*this.layout.padding);\n    this.layout.height = bcr.height + (2*this.layout.padding);\n    this.background_rect\n        .attr(\"width\", this.layout.width)\n        .attr(\"height\", this.layout.height);\n\n    // Set the visibility on the legend from the \"hidden\" flag\n    // TODO: `show()` and `hide()` call a full rerender; might be able to make this more lightweight?\n    this.selector.style({ visibility: this.layout.hidden ? \"hidden\" : \"visible\" });\n\n    // TODO: Annotate return type and make consistent\n    return this.position();\n};\n\n/**\n * Place the legend in position relative to the panel, as specified in the layout configuration\n * @returns {LocusZoom.Legend | null}\n * TODO: should this always be chainable?\n */\nLocusZoom.Legend.prototype.position = function(){\n    if (!this.selector){ return this; }\n    var bcr = this.selector.node().getBoundingClientRect();\n    if (!isNaN(+this.layout.pad_from_bottom)){\n        this.layout.origin.y = this.parent.layout.height - bcr.height - +this.layout.pad_from_bottom;\n    }\n    if (!isNaN(+this.layout.pad_from_right)){\n        this.layout.origin.x = this.parent.layout.width - bcr.width - +this.layout.pad_from_right;\n    }\n    this.selector.attr(\"transform\", \"translate(\" + this.layout.origin.x + \",\" + this.layout.origin.y + \")\");\n};\n\n/**\n * Hide the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.hide = function(){\n    this.layout.hidden = true;\n    this.render();\n};\n\n/**\n * Show the legend (triggers a re-render)\n * @public\n */\nLocusZoom.Legend.prototype.show = function(){\n    this.layout.hidden = false;\n    this.render();\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * LocusZoom functionality used for data parsing and retrieval\n * @namespace\n * @public\n */\nLocusZoom.Data = LocusZoom.Data ||  {};\n\n/**\n * Create and coordinate an ensemble of (namespaced) data source instances\n * @public\n * @class\n */\nLocusZoom.DataSources = function() {\n    /** @member {Object.<string, LocusZoom.Data.Source>} */\n    this.sources = {};\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.addSource = function(ns, x) {\n    console.warn(\"Warning: .addSource() is deprecated. Use .add() instead\");\n    return this.add(ns, x);\n};\n\n/**\n * Add a (namespaced) datasource to the plot\n * @public\n * @param {String} ns A namespace used for fields from this data source\n * @param {LocusZoom.Data.Source|Array|null} x An instantiated datasource, or an array of arguments that can be used to\n *   create a known datasource type.\n */\nLocusZoom.DataSources.prototype.add = function(ns, x) {\n    return this.set(ns, x);\n};\n\n/** @protected */\nLocusZoom.DataSources.prototype.set = function(ns, x) {\n    if (Array.isArray(x)) {\n        // If passed array of source name and options, make the source\n        var dsobj = LocusZoom.KnownDataSources.create.apply(null, x);\n        // Each datasource in the chain should be aware of its assigned namespace\n        dsobj.source_id = ns;\n        this.sources[ns] = dsobj;\n    } else {\n        // If passed the already-created source object\n        if (x !== null) {\n            x.source_id = ns;\n            this.sources[ns] = x;\n        } else {\n            delete this.sources[ns];\n        }\n    }\n    return this;\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.getSource = function(ns) {\n    console.warn(\"Warning: .getSource() is deprecated. Use .get() instead\");\n    return this.get(ns);\n};\n\n/**\n * Return the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n * @returns {LocusZoom.Data.Source}\n */\nLocusZoom.DataSources.prototype.get = function(ns) {\n    return this.sources[ns];\n};\n\n/** @deprecated */\nLocusZoom.DataSources.prototype.removeSource = function(ns) {\n    console.warn(\"Warning: .removeSource() is deprecated. Use .remove() instead\");\n    return this.remove(ns);\n};\n\n/**\n * Remove the datasource associated with a given namespace\n * @public\n * @param {String} ns Namespace\n */\nLocusZoom.DataSources.prototype.remove = function(ns) {\n    return this.set(ns, null);\n};\n\n/**\n * Populate a list of datasources specified as a JSON object\n * @public\n * @param {String|Object} x An object or JSON representation containing {ns: configArray} entries\n * @returns {LocusZoom.DataSources}\n */\nLocusZoom.DataSources.prototype.fromJSON = function(x) {\n    if (typeof x === \"string\") {\n        x = JSON.parse(x);\n    }\n    var ds = this;\n    Object.keys(x).forEach(function(ns) {\n        ds.set(ns, x[ns]);\n    });\n    return ds;\n};\n\n/**\n * Return the names of all currently recognized datasources\n * @public\n * @returns {Array}\n */\nLocusZoom.DataSources.prototype.keys = function() {\n    return Object.keys(this.sources);\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents existing sources in that format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n * @public\n */\nLocusZoom.DataSources.prototype.toJSON = function() {\n    return this.sources;\n};\n\n/**\n * Represents an addressable unit of data from a namespaced datasource, subject to specified value transformations.\n *\n * When used by a data layer, fields will automatically be re-fetched from the appropriate data source whenever the\n *   state of a plot fetches, eg pan or zoom operations that would affect what data is displayed.\n *\n * @public\n * @class\n * @param {String} field A string representing the namespace of the datasource, the name of the desired field to fetch\n *   from that datasource, and arbitrarily many transformations to apply to the value. The namespace and\n *   transformation(s) are optional and information is delimited according to the general syntax\n *   `[namespace:]name[|transformation][|transformation]`. For example, `association:pvalue|neglog10`\n */\nLocusZoom.Data.Field = function(field){\n\n    var parts = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/.exec(field);\n    /** @member {String} */\n    this.full_name = field;\n    /** @member {String} */\n    this.namespace = parts[1] || null;\n    /** @member {String} */\n    this.name = parts[2] || null;\n    /** @member {Array} */\n    this.transformations = [];\n\n    if (typeof parts[3] == \"string\" && parts[3].length > 1){\n        this.transformations = parts[3].substring(1).split(\"|\");\n        this.transformations.forEach(function(transform, i){\n            this.transformations[i] = LocusZoom.TransformationFunctions.get(transform);\n        }.bind(this));\n    }\n\n    this.applyTransformations = function(val){\n        this.transformations.forEach(function(transform){\n            val = transform(val);\n        });\n        return val;\n    };\n\n    // Resolve the field for a given data element.\n    // First look for a full match with transformations already applied by the data requester.\n    // Otherwise prefer a namespace match and fall back to just a name match, applying transformations on the fly.\n    this.resolve = function(d){\n        if (typeof d[this.full_name] == \"undefined\"){\n            var val = null;\n            if (typeof (d[this.namespace+\":\"+this.name]) != \"undefined\"){ val = d[this.namespace+\":\"+this.name]; }\n            else if (typeof d[this.name] != \"undefined\"){ val = d[this.name]; }\n            d[this.full_name] = this.applyTransformations(val);\n        }\n        return d[this.full_name];\n    };\n\n};\n\n/**\n * The Requester manages fetching of data across multiple data sources. It is used internally by LocusZoom data layers.\n *   It passes state information and ensures that data is formatted in the manner expected by the plot.\n *\n * It is also responsible for constructing a \"chain\" of dependent requests, by requesting each datasource\n *   sequentially in the order specified in the datalayer `fields` array. Data sources are only chained within a\n *   data layer, and only if that layer requests more than one kind of data source.\n * @param {LocusZoom.DataSources} sources An object of {ns: LocusZoom.Data.Source} instances\n * @class\n */\nLocusZoom.Data.Requester = function(sources) {\n\n    function split_requests(fields) {\n        // Given a fields array, return an object specifying what datasource names the data layer should make requests\n        //  to, and how to handle the returned data\n        var requests = {};\n        // Regular expression finds namespace:field|trans\n        var re = /^(?:([^:]+):)?([^:|]*)(\\|.+)*$/;\n        fields.forEach(function(raw) {\n            var parts = re.exec(raw);\n            var ns = parts[1] || \"base\";\n            var field = parts[2];\n            var trans = LocusZoom.TransformationFunctions.get(parts[3]);\n            if (typeof requests[ns] ==\"undefined\") {\n                requests[ns] = {outnames:[], fields:[], trans:[]};\n            }\n            requests[ns].outnames.push(raw);\n            requests[ns].fields.push(field);\n            requests[ns].trans.push(trans);\n        });\n        return requests;\n    }\n\n    /**\n     * Fetch data, and create a chain that only connects two data sources if they depend on each other\n     * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n     * @param {String[]} fields The list of data fields specified in the `layout` for a specific data layer\n     * @returns {Promise}\n     */\n    this.getData = function(state, fields) {\n        var requests = split_requests(fields);\n        // Create an array of functions that, when called, will trigger the request to the specified datasource\n        var request_handles = Object.keys(requests).map(function(key) {\n            if (!sources.get(key)) {\n                throw(\"Datasource for namespace \" + key + \" not found\");\n            }\n            return sources.get(key).getData(state, requests[key].fields,\n                                            requests[key].outnames, requests[key].trans);\n        });\n        //assume the fields are requested in dependent order\n        //TODO: better manage dependencies\n        var ret = Q.when({header:{}, body:{}, discrete: {}});\n        for(var i=0; i < request_handles.length; i++) {\n            // If a single datalayer uses multiple sources, perform the next request when the previous one completes\n            ret = ret.then(request_handles[i]);\n        }\n        return ret;\n    };\n};\n\n/**\n * Base class for LocusZoom data sources\n * This can be extended with .extend() to create custom data sources\n * @class\n * @public\n */\nLocusZoom.Data.Source = function() {\n    /**\n     * Whether this source should enable caching\n     * @member {Boolean}\n     */\n    this.enableCache = true;\n    /**\n     * Whether this data source type is dependent on previous requests- for example, the LD source cannot annotate\n     *  association data if no data was found for that region.\n     * @member {boolean}\n     */\n    this.dependentSource = false;\n};\n\n/**\n * A default constructor that can be used when creating new data sources\n * @param {String|Object} init Basic configuration- either a url, or a config object\n * @param {String} [init.url] The datasource URL\n * @param {String} [init.params] Initial config params for the datasource\n */\nLocusZoom.Data.Source.prototype.parseInit = function(init) {\n    if (typeof init === \"string\") {\n        /** @member {String} */\n        this.url = init;\n        /** @member {String} */\n        this.params = {};\n    } else {\n        this.url = init.url;\n        this.params = init.params || {};\n    }\n    if (!this.url) {\n        throw(\"Source not initialized with required URL\");\n    }\n\n};\n\n/**\n * A unique identifier that indicates whether cached data is valid for this request\n * @protected\n * @param state\n * @param chain\n * @param fields\n * @returns {String|undefined}\n */\nLocusZoom.Data.Source.prototype.getCacheKey = function(state, chain, fields) {\n    return this.getURL && this.getURL(state, chain, fields);\n};\n\n/**\n * Stub: build the URL for any requests made by this source.\n */\nLocusZoom.Data.Source.prototype.getURL = function(state, chain, fields) { return this.url; };\n\n/**\n * Perform a network request to fetch data for this source\n * @protected\n * @param {Object} state The state of the parent plot\n * @param chain\n * @param fields\n */\nLocusZoom.Data.Source.prototype.fetchRequest = function(state, chain, fields) {\n    var url = this.getURL(state, chain, fields);\n    return LocusZoom.createCORSPromise(\"GET\", url);\n};\n\n/**\n * Gets the data for just this source, typically via a network request (caching where possible)\n * @protected\n */\nLocusZoom.Data.Source.prototype.getRequest = function(state, chain, fields) {\n    var req;\n    var cacheKey = this.getCacheKey(state, chain, fields);\n    if (this.enableCache && typeof(cacheKey) !== \"undefined\" && cacheKey === this._cachedKey) {\n        req = Q.when(this._cachedResponse);\n    } else {\n        req = this.fetchRequest(state, chain, fields);\n        if (this.enableCache) {\n            req = req.then(function(x) {\n                this._cachedKey = cacheKey;\n                return this._cachedResponse = x;\n            }.bind(this));\n        }\n    }\n    return req;\n};\n\n/**\n * Fetch the data from the specified data source, and apply transformations requested by an external consumer.\n * This is the public-facing datasource method that will most commonly be called by external code.\n *\n * @public\n * @param {Object} state The current \"state\" of the plot, such as chromosome and start/end positions\n * @param {String[]} fields Array of field names that the plot has requested from this data source. (without the \"namespace\" prefix)\n * @param {String[]} outnames  Array describing how the output data should refer to this field. This represents the\n *     originally requested field name, including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {function} A callable operation that can be used as part of the data chain\n */\nLocusZoom.Data.Source.prototype.getData = function(state, fields, outnames, trans) {\n    if (this.preGetData) {\n        var pre = this.preGetData(state, fields, outnames, trans);\n        if(this.pre) {\n            state = pre.state || state;\n            fields = pre.fields || fields;\n            outnames = pre.outnames || outnames;\n            trans = pre.trans || trans;\n        }\n    }\n\n    var self = this;\n    return function (chain) {\n        if (self.dependentSource && chain && chain.body && !chain.body.length) {\n            // A \"dependent\" source should not attempt to fire a request if there is no data for it to act on.\n            // Therefore, it should simply return the previous data chain.\n            return Q.when(chain);\n        }\n\n        return self.getRequest(state, chain, fields).then(function(resp) {\n            return self.parseResponse(resp, chain, fields, outnames, trans);\n        });\n    };\n};\n\n/**\n * Ensure the server response is in a canonical form, an array of one object per record. [ {field: oneval} ].\n * If the server response contains columns, reformats the response from {column1: [], column2: []} to the above.\n *\n * Does not apply namespacing, transformations, or field extraction.\n *\n * May be overridden by data sources that inherently return more complex payloads, or that exist to annotate other\n *  sources (eg, if the payload provides extra data rather than a series of records).\n *\n * @param {Object[]|Object} data The original parsed server response\n * @protected\n */\nLocusZoom.Data.Source.prototype.normalizeResponse = function (data) {\n    if (Array.isArray(data)) {\n        // Already in the desired form\n        return data;\n    }\n\n    // Otherwise, assume the server response is an object representing columns of data.\n    // Each array should have the same length (verify), and a given array index corresponds to a single row.\n    var keys = Object.keys(data);\n    var N = data[keys[0]].length;\n    var sameLength = keys.every(function(key) {\n        var item = data[key];\n        return item.length === N;\n    });\n    if (!sameLength) {\n        throw this.constructor.SOURCE_NAME + \" expects a response in which all arrays of data are the same length\";\n    }\n\n    // Go down the rows, and create an object for each record\n    var records = [];\n    var fields = Object.keys(data);\n    for(var i = 0; i < N; i++) {\n        var record = {};\n        for(var j = 0; j < fields.length; j++) {\n            record[fields[j]] = data[fields[j]][i];\n        }\n        records.push(record);\n    }\n    return records;\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.prepareData = function (records) {\n    console.warn(\"Warning: .prepareData() is deprecated. Use .annotateData() instead\");\n    return this.annotateData(records);\n};\n\n/**\n * Hook to post-process the data returned by this source with new, additional behavior.\n *   (eg cleaning up API values or performing complex calculations on the returned data)\n *\n * @param {Object[]} records The parsed data from the source (eg standardized api response)\n * @param {Object} chain The data chain object. For example, chain.headers may provide useful annotation metadata\n * @returns {Object[]|Promise} The modified set of records\n */\nLocusZoom.Data.Source.prototype.annotateData = function(records, chain) {\n    // Default behavior: no transformations\n    return records;\n};\n\n/**\n * Clean up the server records for use by datalayers: extract only certain fields, with the specified names.\n *   Apply per-field transformations as appropriate.\n *\n * This hook can be overridden, eg to create a source that always returns all records and ignores the \"fields\" array.\n *  This is particularly common for sources at the end of a chain- many \"dependent\" sources do not allow\n *  cherry-picking individual fields, in which case by **convention** the fields array specifies \"last_source_name:all\"\n *\n * @param {Object[]} data One record object per element\n * @param {String[]} fields The names of fields to extract (as named in the source data). Eg \"afield\"\n * @param {String[]} outnames How to represent the source fields in the output. Eg \"namespace:afield|atransform\"\n * @param {function[]} trans An array of transformation functions (if any). One function per data element, or null.\n * @protected\n */\nLocusZoom.Data.Source.prototype.extractFields = function (data, fields, outnames, trans) {\n    //intended for an array of objects\n    //  [ {\"id\":1, \"val\":5}, {\"id\":2, \"val\":10}]\n    // Since a number of sources exist that do not obey this format, we will provide a convenient pass-through\n    if (!Array.isArray(data)) {\n        return data;\n    }\n\n    var fieldFound = [];\n    for (var k=0; k<fields.length; k++) {\n        fieldFound[k] = 0;\n    }\n\n    var records = data.map(function (item) {\n        var output_record = {};\n        for (var j=0; j < fields.length; j++) {\n            var val = item[fields[j]];\n            if (typeof val != \"undefined\") {\n                fieldFound[j] = 1;\n            }\n            if (trans && trans[j]) {\n                val = trans[j](val);\n            }\n            output_record[outnames[j]] = val;\n        }\n        return output_record;\n    });\n    fieldFound.forEach(function(v, i) {\n        if (!v) {throw \"field \" + fields[i] + \" not found in response for \" + outnames[i];}\n    });\n    return records;\n};\n\n/**\n * Combine records from this source with others in the chain to yield final chain body.\n *   Handles merging this data with other sources (if applicable).\n *\n * @param {Object[]} data The data That would be returned from this source alone\n * @param {Object} chain The data chain built up during previous requests\n * @param {String[]} fields\n * @param {String[]} outnames\n * @return {Promise|Object[]} The new chain body\n * @protected\n */\nLocusZoom.Data.Source.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    return data;\n};\n\n/**\n * Coordinates the work of parsing a response and returning records. This is broken into 4 steps, which may be\n *  overridden separately for fine-grained control. Each step can return either raw data or a promise.\n *\n * @public\n * @param {String|Object} resp The raw data associated with the response\n * @param {Object} chain The combined parsed response data from this and all other requests made in the chain\n * @param {String[]} fields Array of requested field names (as they would appear in the response payload)\n * @param {String[]} outnames  Array of field names as they will be represented in the data returned by this source,\n *  including the namespace. This must be an array with the same length as `fields`\n * @param {Function[]} trans The collection of transformation functions to be run on selected fields.\n *     This must be an array with the same length as `fields`\n * @returns {Promise|{header: ({}|*), discrete: {}, body: []}} A promise that resolves to an object containing\n *   request metadata (headers), the consolidated data for plotting (body), and the individual responses that would be\n *   returned by each source in the chain in isolation (discrete)\n */\nLocusZoom.Data.Source.prototype.parseResponse = function(resp, chain, fields, outnames, trans) {\n    var source_id = this.source_id || this.constructor.SOURCE_NAME;\n    if (!chain.discrete) {\n        chain.discrete = {};\n    }\n\n    if (!resp) {\n        // FIXME: Hack. Certain browser issues (such as mixed content warnings) are reported as a successful promise\n        //  resolution, even though the request was aborted. This is difficult to reliably detect, and is most likely\n        // to occur for annotation sources (such as from ExAC). If empty response is received, skip parsing and log.\n        // FIXME: Throw an error after pending, eg https://github.com/konradjk/exac_browser/issues/345\n        console.error(\"No usable response was returned for source: '\" + source_id + \"'. Parsing will be skipped.\");\n        return Q.when(chain);\n    }\n\n    var json = typeof resp == \"string\" ? JSON.parse(resp) : resp;\n\n    var self = this;\n    // Perform the 4 steps of parsing the payload and return a combined chain object\n    return Q.when(self.normalizeResponse(json.data || json))\n        .then(function(standardized) {\n            // Perform calculations on the data from just this source\n            return Q.when(self.annotateData(standardized, chain));\n        }).then(function (data) {\n            return Q.when(self.extractFields(data, fields, outnames, trans));\n        }).then(function (one_source_body) {\n            // Store a copy of the data that would be returned by parsing this source in isolation (and taking the\n            //   fields array into account). This is useful when we want to re-use the source output in many ways.\n            chain.discrete[source_id] = one_source_body;\n            return Q.when(self.combineChainBody(one_source_body, chain, fields, outnames));\n        }).then(function (new_body) {\n            return { header: chain.header || {}, discrete: chain.discrete, body: new_body };\n        });\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseArraysToObjects = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseArraysToObjects() is no longer used. A stub is provided for legacy use\");\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseObjectsToObjects = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseObjectsToObjects() is deprecated. Use .extractFields() instead\");\n    return this.extractFields(data, fields, outnames, trans);\n};\n\n/** @deprecated */\nLocusZoom.Data.Source.prototype.parseData = function(data, fields, outnames, trans) {\n    console.warn(\"Warning: .parseData() is no longer used. A stub is provided for legacy use\");\n    var standard = this.normalizeResponse(data);\n    return this.extractFields(standard, fields, outnames, trans);\n};\n\n/**\n * Method to define new custom datasources based on a provided constructor. (does not allow registering any additional methods)\n * @public\n * @param {Function} constructorFun Constructor function that is used to create the specified class\n * @param {String} [uniqueName] The name by which the class should be listed in `KnownDataSources`\n * @param {String|Function} [base=LocusZoomData.Source] The name or constructor of a base class to use\n * @returns {*|Function}\n */\nLocusZoom.Data.Source.extend = function(constructorFun, uniqueName, base) {\n    if (base) {\n        if (Array.isArray(base)) {\n            base = LocusZoom.KnownDataSources.create.apply(null, base);\n        } else if (typeof base === \"string\") {\n            base = LocusZoom.KnownDataSources.get(base).prototype;\n        } else if (typeof base === \"function\") {\n            base = base.prototype;\n        }\n    } else {\n        base =  new LocusZoom.Data.Source();\n    }\n    constructorFun = constructorFun || function() {};\n    constructorFun.prototype = base;\n    constructorFun.prototype.constructor = constructorFun;\n    if (uniqueName) {\n        /** @member {String} LocusZoom.Data.Source.SOURCENAME */\n        constructorFun.SOURCE_NAME = uniqueName;\n        LocusZoom.KnownDataSources.add(constructorFun);\n    }\n    return constructorFun;\n};\n\n/**\n * Datasources can be instantiated from a JSON object instead of code. This represents an existing source in that data format.\n *   For example, this can be helpful when sharing plots, or to share settings with others when debugging\n *\n * Custom sources with their own parameters may need to re-implement this method\n *\n * @public\n * @returns {Object}\n */\nLocusZoom.Data.Source.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME,\n        {url:this.url, params:this.params}];\n};\n\n/**\n * Data Source for Association Data, as fetched from the LocusZoom API server (or compatible)\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.AssociationSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"AssociationLZ\");\n\nLocusZoom.Data.AssociationSource.prototype.preGetData = function(state, fields, outnames, trans) {\n    var id_field = this.params.id_field || \"id\";\n    [id_field, \"position\"].forEach(function(x) {\n        if (fields.indexOf(x)===-1) {\n            fields.unshift(x);\n            outnames.unshift(x);\n            trans.unshift(null);\n        }\n    });\n    return {fields: fields, outnames:outnames, trans:trans};\n};\n\nLocusZoom.Data.AssociationSource.prototype.getURL = function(state, chain, fields) {\n    var analysis = state.analysis || chain.header.analysis || this.params.analysis;\n    if (typeof analysis == \"undefined\") {\n        throw \"Association source must specify an analysis ID to plot\";\n    }\n    return this.url + \"results/?filter=analysis in \" + analysis  +\n        \" and chromosome in  '\" + state.chr + \"'\" +\n        \" and position ge \" + state.start +\n        \" and position le \" + state.end;\n};\n\nLocusZoom.Data.AssociationSource.prototype.normalizeResponse = function (data) {\n    // Some association sources do not sort their data in a predictable order, which makes it hard to reliably\n    //  align with other sources (such as LD). For performance reasons, sorting is an opt-in argument.\n    // TODO: Consider more fine grained sorting control in the future\n    data = LocusZoom.Data.Source.prototype.normalizeResponse.call(this, data);\n    if (this.params && this.params.sort && data.length && data[0][\"position\"]) {\n        data.sort(function (a, b) { return a[\"position\"] - b[\"position\"]; });\n    }\n    return data;\n};\n\n/**\n * Data Source for LD Data, as fetched from the LocusZoom API server (or compatible)\n * This source is designed to connect its results to association data, and therefore depends on association data having\n *  been loaded by a previous request in the data chain.\n * @class\n * @public\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.LDSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n    this.dependentSource = true;\n}, \"LDLZ\");\n\nLocusZoom.Data.LDSource.prototype.preGetData = function(state, fields) {\n    if (fields.length>1) {\n        if (fields.length!==2 || fields.indexOf(\"isrefvar\")===-1) {\n            throw(\"LD does not know how to get all fields: \" + fields.join(\", \"));\n        }\n    }\n};\n\nLocusZoom.Data.LDSource.prototype.findMergeFields = function(chain) {\n    // since LD may be shared across sources with different namespaces\n    // we use regex to find columns to join on rather than\n    // requiring exact matches\n    var exactMatch = function(arr) {return function() {\n        var regexes = arguments;\n        for(var i=0; i<regexes.length; i++) {\n            var regex = regexes[i];\n            var m = arr.filter(function(x) {return x.match(regex);});\n            if (m.length){\n                return m[0];\n            }\n        }\n        return null;\n    };};\n    var dataFields = {\n        id: this.params.id_field,\n        position: this.params.position_field,\n        pvalue: this.params.pvalue_field,\n        _names_:null\n    };\n    if (chain && chain.body && chain.body.length>0) {\n        var names = Object.keys(chain.body[0]);\n        var nameMatch = exactMatch(names);\n        dataFields.id = dataFields.id || nameMatch(/\\bvariant\\b/) || nameMatch(/\\bid\\b/);\n        dataFields.position = dataFields.position || nameMatch(/\\bposition\\b/i, /\\bpos\\b/i);\n        dataFields.pvalue = dataFields.pvalue || nameMatch(/\\bpvalue\\b/i, /\\blog_pvalue\\b/i);\n        dataFields._names_ = names;\n    }\n    return dataFields;\n};\n\nLocusZoom.Data.LDSource.prototype.findRequestedFields = function(fields, outnames) {\n    var obj = {};\n    for(var i=0; i<fields.length; i++) {\n        if(fields[i]===\"isrefvar\") {\n            obj.isrefvarin = fields[i];\n            obj.isrefvarout = outnames && outnames[i];\n        } else {\n            obj.ldin = fields[i];\n            obj.ldout = outnames && outnames[i];\n        }\n    }\n    return obj;\n};\n\nLocusZoom.Data.LDSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.LDSource.prototype.getURL = function(state, chain, fields) {\n    var findExtremeValue = function(x, pval, sign) {\n        pval = pval || \"pvalue\";\n        sign = sign || 1;\n        var extremeVal = x[0][pval], extremeIdx=0;\n        for(var i=1; i<x.length; i++) {\n            if (x[i][pval] * sign > extremeVal) {\n                extremeVal = x[i][pval] * sign;\n                extremeIdx = i;\n            }\n        }\n        return extremeIdx;\n    };\n\n    var refSource = state.ldrefsource || chain.header.ldrefsource || 1;\n    var reqFields = this.findRequestedFields(fields);\n    var refVar = reqFields.ldin;\n    if (refVar === \"state\") {\n        refVar = state.ldrefvar || chain.header.ldrefvar || \"best\";\n    }\n    if (refVar === \"best\") {\n        if (!chain.body) {\n            throw(\"No association data found to find best pvalue\");\n        }\n        var keys = this.findMergeFields(chain);\n        if (!keys.pvalue || !keys.id) {\n            var columns = \"\";\n            if (!keys.id){ columns += (columns.length ? \", \" : \"\") + \"id\"; }\n            if (!keys.pvalue){ columns += (columns.length ? \", \" : \"\") + \"pvalue\"; }\n            throw(\"Unable to find necessary column(s) for merge: \" + columns + \" (available: \" + keys._names_ + \")\");\n        }\n        refVar = chain.body[findExtremeValue(chain.body, keys.pvalue)][keys.id];\n    }\n    if (!chain.header) {chain.header = {};}\n    chain.header.ldrefvar = refVar;\n    return this.url + \"results/?filter=reference eq \" + refSource +\n        \" and chromosome2 eq '\" + state.chr + \"'\" +\n        \" and position2 ge \" + state.start +\n        \" and position2 le \" + state.end +\n        \" and variant1 eq '\" + refVar + \"'\" +\n        \"&fields=chr,pos,rsquare\";\n};\n\nLocusZoom.Data.LDSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    var keys = this.findMergeFields(chain);\n    var reqFields = this.findRequestedFields(fields, outnames);\n    if (!keys.position) {\n        throw(\"Unable to find position field for merge: \" + keys._names_);\n    }\n    var leftJoin = function(left, right, lfield, rfield) {\n        var i=0, j=0;\n        while (i < left.length && j < right.position2.length) {\n            if (left[i][keys.position] === right.position2[j]) {\n                left[i][lfield] = right[rfield][j];\n                i++;\n                j++;\n            } else if (left[i][keys.position] < right.position2[j]) {\n                i++;\n            } else {\n                j++;\n            }\n        }\n    };\n    var tagRefVariant = function(data, refvar, idfield, outname) {\n        for(var i=0; i<data.length; i++) {\n            if (data[i][idfield] && data[i][idfield]===refvar) {\n                data[i][outname] = 1;\n            } else {\n                data[i][outname] = 0;\n            }\n        }\n    };\n\n    leftJoin(chain.body, data, reqFields.ldout, \"rsquare\");\n    if(reqFields.isrefvarin && chain.header.ldrefvar) {\n        tagRefVariant(chain.body, chain.header.ldrefvar, keys.id, reqFields.isrefvarout);\n    }\n    return chain.body;\n};\n\n\n/**\n * Data Source for Gene Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.GeneSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneLZ\");\n\nLocusZoom.Data.GeneSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.source || chain.header.source || this.params.source || 2;\n    return this.url + \"?filter=source in \" + source +\n        \" and chrom eq '\" + state.chr + \"'\" +\n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\n// Genes have a very complex internal data format. Bypass any record parsing, and provide the data layer with the\n// exact information returned by the API. (ignoring the fields array in the layout)\nLocusZoom.Data.GeneSource.prototype.normalizeResponse = function (data) { return data; };\nLocusZoom.Data.GeneSource.prototype.extractFields = function (data, fields, outnames, trans) { return data; };\n\n/**\n * Data Source for Gene Constraint Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n*/\nLocusZoom.Data.GeneConstraintSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"GeneConstraintLZ\");\n\nLocusZoom.Data.GeneConstraintSource.prototype.getURL = function() {\n    return this.url;\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.normalizeResponse = function (data) { return data; };\n\nLocusZoom.Data.GeneConstraintSource.prototype.getCacheKey = function(state, chain, fields) {\n    return this.url + JSON.stringify(state);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.fetchRequest = function(state, chain, fields) {\n    var geneids = [];\n    chain.body.forEach(function(gene){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        geneids.push(gene_id);\n    });\n    var url = this.getURL(state, chain, fields);\n    var body = \"geneids=\" + encodeURIComponent(JSON.stringify(geneids));\n    var headers = {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    return LocusZoom.createCORSPromise(\"POST\", url, body, headers);\n};\n\nLocusZoom.Data.GeneConstraintSource.prototype.combineChainBody = function (data, chain, fields, outnames) {\n    if (!data) {\n        return chain;\n    }\n    var constraint_fields = [\"bp\", \"exp_lof\", \"exp_mis\", \"exp_syn\", \"lof_z\", \"mis_z\", \"mu_lof\", \"mu_mis\",\"mu_syn\", \"n_exons\", \"n_lof\", \"n_mis\", \"n_syn\", \"pLI\", \"syn_z\"];\n    chain.body.forEach(function(gene, i){\n        var gene_id = gene.gene_id;\n        if (gene_id.indexOf(\".\")){\n            gene_id = gene_id.substr(0, gene_id.indexOf(\".\"));\n        }\n        constraint_fields.forEach(function(field){\n            // Do not overwrite any fields defined in the original gene source\n            if (typeof chain.body[i][field] != \"undefined\"){ return; }\n            if (data[gene_id]){\n                var val = data[gene_id][field];\n                if (typeof val == \"number\" && val.toString().indexOf(\".\") !== -1){\n                    val = parseFloat(val.toFixed(2));\n                }\n                chain.body[i][field] = val;\n            } else {\n                // If the gene did not come back in the response then set the same field with a null values\n                chain.body[i][field] = null;\n            }\n        });\n    });\n    return chain.body;\n};\n\n/**\n * Data Source for Recombination Rate Data, as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.RecombinationRateSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"RecombLZ\");\n\nLocusZoom.Data.RecombinationRateSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.recombsource || chain.header.recombsource || this.params.source || 15;\n    return this.url + \"?filter=id in \" + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        \" and position le \" + state.end +\n        \" and position ge \" + state.start;\n};\n\n/**\n * Data Source for Interval Annotation Data (e.g. BED Tracks), as fetched from the LocusZoom API server (or compatible)\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.IntervalSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"IntervalLZ\");\n\nLocusZoom.Data.IntervalSource.prototype.getURL = function(state, chain, fields) {\n    var source = state.bedtracksource || chain.header.bedtracksource || this.params.source || 16;\n    return this.url + \"?filter=id in \" + source +\n        \" and chromosome eq '\" + state.chr + \"'\" +\n        \" and start le \" + state.end +\n        \" and end ge \" + state.start;\n};\n\n/**\n * Data Source for static blobs of JSON Data. This does not perform additional parsing, and therefore it is the\n * responsibility of the user to pass information in a format that can be read and understood by the chosen plot.\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n */\nLocusZoom.Data.StaticSource = LocusZoom.Data.Source.extend(function(data) {\n    /** @member {Object} */\n    this._data = data;\n},\"StaticJSON\");\n\nLocusZoom.Data.StaticSource.prototype.getRequest = function(state, chain, fields) {\n    return Q.fcall(function() {return this._data;}.bind(this));\n};\n\nLocusZoom.Data.StaticSource.prototype.toJSON = function() {\n    return [Object.getPrototypeOf(this).constructor.SOURCE_NAME, this._data];\n};\n\n/**\n * Data source for PheWAS data served from external JSON files\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {String[]} init.build This datasource expects to be provided the name of the genome build that will be used to\n *   provide pheWAS results for this position. Note positions may not translate between builds.\n */\nLocusZoom.Data.PheWASSource = LocusZoom.Data.Source.extend(function(init) {\n    this.parseInit(init);\n}, \"PheWASLZ\");\nLocusZoom.Data.PheWASSource.prototype.getURL = function(state, chain, fields) {\n    var build = this.params.build;\n    if (!build || !Array.isArray(build) || !build.length) {\n        throw [\"Data source\", this.constructor.SOURCE_NAME, \"requires that you specify array of one or more desired genome build names\"].join(\" \");\n    }\n    var url = [\n        this.url,\n        \"?filter=variant eq '\", encodeURIComponent(state.variant), \"'&format=objects&\",\n        build.map(function(item) {return \"build=\" + encodeURIComponent(item);}).join(\"&\")\n    ];\n    return url.join(\"\");\n};\n\n/**\n * Base class for \"connectors\"- this is meant to be subclassed, rather than used directly.\n *\n * A connector is a source that makes no server requests and caches no data of its own. Instead, it decides how to\n *  combine data from other sources in the chain. Connectors are useful when we want to request (or calculate) some\n *  useful piece of information once, but apply it to many different kinds of record types.\n *\n * Typically, a subclass will implement the field merging logic in `combineChainBody`.\n *\n * @public\n * @class\n * @augments LocusZoom.Data.Source\n * @param {Object} init Configuration for this source\n * @param {Object} init.sources Specify how the hard-coded logic should find the data it relies on in the chain,\n *  as {internal_name: chain_source_id} pairs. This allows writing a reusable connector that does not need to make\n *  assumptions about what namespaces a source is using.\n * @type {*|Function}\n */\nLocusZoom.Data.ConnectorSource = LocusZoom.Data.Source.extend(function(init) {\n    if (!init || !init.sources) {\n        throw \"Connectors must specify the data they require as init.sources = {internal_name: chain_source_id}} pairs\";\n    }\n\n    /**\n     * Tells the connector how to find the data it relies on\n     *\n     * For example, a connector that applies burden test information to the genes layer might specify:\n     *  {gene_ns: \"gene\", aggregation_ns: \"aggregation\"}\n     *\n     * @member {Object}\n     */\n    this._source_name_mapping = init.sources;\n\n    // Validate that this source has been told how to find the required information\n    var specified_ids = Object.keys(init.sources);\n    var self = this;\n    this.REQUIRED_SOURCES.forEach(function (k) {\n        if (specified_ids.indexOf(k) === -1) {\n            throw \"Configuration for \" + self.constructor.SOURCE_NAME + \" must specify a source ID corresponding to \" + k;\n        }\n    });\n    this.parseInit(init);\n}, \"ConnectorSource\");\n\n/** @property {String[]} Specifies the sources that must be provided in the original config object */\nLocusZoom.Data.ConnectorSource.prototype.REQUIRED_SOURCES = [];\n\nLocusZoom.Data.ConnectorSource.prototype.parseInit = function(init) {};  // Stub\n\nLocusZoom.Data.ConnectorSource.prototype.getRequest = function(state, chain, fields) {\n    // Connectors do not request their own data by definition, but they *do* depend on other sources having been loaded\n    //  first. This method performs basic validation, and preserves the accumulated body from the chain so far.\n    var self = this;\n    Object.keys(this._source_name_mapping).forEach(function(ns) {\n        var chain_source_id = self._source_name_mapping[ns];\n        if (chain.discrete && !chain.discrete[chain_source_id]) {\n            throw self.constructor.SOURCE_NAME + \" cannot be used before loading required data for: \" + chain_source_id;\n        }\n    });\n    return Q.when(chain.body || []);\n};\n\nLocusZoom.Data.ConnectorSource.prototype.parseResponse = function(data, chain, fields, outnames) {\n    // A connector source does not update chain.discrete, but it may use it. It bypasses data formatting\n    //  and field selection (both are assumed to have been done already, by the previous sources this draws from)\n\n    // Because of how the chain works, connectors are not very good at applying new transformations or namespacing.\n    // Typically connectors are called with `connector_name:all` in the fields array.\n    return Q.when(this.combineChainBody(data, chain, fields, outnames))\n        .then(function(new_body) {\n            return {header: chain.header || {}, discrete: chain.discrete || {}, body: new_body};\n        });\n};\n\nLocusZoom.Data.ConnectorSource.prototype.combineChainBody = function(records, chain) {\n    // Stub method: specifies how to combine the data\n    throw \"This method must be implemented in a subclass\";\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * An independent LocusZoom object that renders a unique set of data and subpanels.\n * Many such LocusZoom objects can exist simultaneously on a single page, each having its own layout.\n *\n * This creates a new plot instance, but does not immediately render it. For practical use, it may be more convenient\n * to use the `LocusZoom.populate` helper method.\n *\n * @class\n * @param {String} id The ID of the plot. Often corresponds to the ID of the container element on the page\n *   where the plot is rendered..\n * @param {LocusZoom.DataSources} datasource Ensemble of data providers used by the plot\n * @param {Object} layout A JSON-serializable object of layout configuration parameters\n*/\nLocusZoom.Plot = function(id, datasource, layout) {\n    /** @member Boolean} */\n    this.initialized = false;\n    // TODO: This makes sense for all other locuszoom elements to have; determine whether this is interface boilerplate or something that can be removed\n    this.parent_plot = this;\n\n    /** @member {String} */\n    this.id = id;\n\n    /** @member {Element} */\n    this.container = null;\n    /**\n     * Selector for a node that will contain the plot. (set externally by populate methods)\n     * @member {d3.selection}\n     */\n    this.svg = null;\n\n    /** @member {Object.<String, Number>} */\n    this.panels = {};\n    /**\n     * TODO: This is currently used by external classes that manipulate the parent and may indicate room for a helper method in the api to coordinate boilerplate\n     * @protected\n     * @member {String[]}\n     */\n    this.panel_ids_by_y_index = [];\n\n    /**\n     * Notify each child panel of the plot of changes in panel ordering/ arrangement\n     */\n    this.applyPanelYIndexesToPanelLayouts = function(){\n        this.panel_ids_by_y_index.forEach(function(pid, idx){\n            this.panels[pid].layout.y_index = idx;\n        }.bind(this));\n    };\n\n    /**\n     * Get the qualified ID pathname for the plot\n     * @returns {String}\n     */\n    this.getBaseId = function(){\n        return this.id;\n    };\n\n    /**\n     * Track update operations (reMap) performed on all child panels, and notify the parent plot when complete\n     * TODO: Reconsider whether we need to be tracking this as global state outside of context of specific operations\n     * @protected\n     * @member {Promise[]}\n     */\n    this.remap_promises = [];\n\n    if (typeof layout == \"undefined\"){\n        /**\n         * The layout is a serializable object used to describe the composition of the Plot\n         *   If no layout was passed, use the Standard Association Layout\n         *   Otherwise merge whatever was passed with the Default Layout\n         *   TODO: Review description; we *always* merge with default layout?\n         * @member {Object}\n         */\n        this.layout = LocusZoom.Layouts.merge({}, LocusZoom.Layouts.get(\"plot\", \"standard_association\"));\n    } else {\n        this.layout = layout;\n    }\n    LocusZoom.Layouts.merge(this.layout, LocusZoom.Plot.DefaultLayout);\n\n    /**\n     * Values in the layout object may change during rendering etc. Retain a copy of the original plot state\n     * @member {Object}\n     */\n    this._base_layout = JSON.parse(JSON.stringify(this.layout));\n\n\n    /**\n     * Create a shortcut to the state in the layout on the Plot. Tracking in the layout allows the plot to be created\n     *   with initial state/setup.\n     *\n     * Tracks state of the plot, eg start and end position\n     * @member {Object}\n     */\n    this.state = this.layout.state;\n\n    /** @member {LocusZoom.Data.Requester} */\n    this.lzd = new LocusZoom.Data.Requester(datasource);\n\n    /**\n     * Window.onresize listener (responsive layouts only)\n     * TODO: .on appears to return a selection, not a listener? Check logic here\n     * https://github.com/d3/d3-selection/blob/00b904b9bcec4dfaf154ae0bbc777b1fc1d7bc08/test/selection/on-test.js#L11\n     * @deprecated\n     * @member {d3.selection}\n     */\n    this.window_onresize = null;\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": [],\n        \"element_selection\": [],\n        \"state_changed\": []  // Only triggered when a state change causes rerender\n    };\n\n    /**\n     * @callback eventCallback\n     * @param {object} eventData A description of the event\n     * @param {String|null} eventData.sourceID The unique identifier (eg plot or parent name) of the element that\n     *  triggered the event. Will be automatically filled in if not explicitly provided.\n     * @param {Object|null} eventData.context Any additional information to be passed to the callback, eg the data\n     *   associated with a clicked plot element\n     */\n\n    /**\n     * There are several events that a LocusZoom plot can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following plot-level events are currently supported:\n     *   - `layout_changed` - context: plot - Any aspect of the plot's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: plot - A request for new data from any data source used in the plot has been made.\n     *   - `data_rendered` - context: plot - Data from a request has been received and rendered in the plot.\n     *   - `element_clicked` - context: plot - A data element in any of the plot's data layers has been clicked.\n     *   - `element_selection` - context: plot - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `plot.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   plot itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook){\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Plot}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof \"event\" != \"string\" || !Array.isArray(theseHooks)){\n            throw(\"Unable to remove event hook, invalid event: \" + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw(\"The specified event listener is not registered and therefore cannot be removed\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     * @param {string} event A known event name\n     * @param {*} eventData Data or event description that will be passed to the event listener\n     * @returns {LocusZoom.Plot}\n     */\n    this.emit = function(event, eventData) {\n        // TODO: there are small differences between the emit implementation between plots and panels. In the future,\n        //  DRY this code via mixins, and make sure to keep the interfaces compatible when refactoring.\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        this.event_hooks[event].forEach(function(hookToRun) {\n            var eventContext;\n            if (eventData && eventData.sourceID) {\n                // If we detect that an event originated elsewhere (via bubbling or externally), preserve the context\n                //  when re-emitting the event to plot-level listeners\n                eventContext = eventData;\n            } else {\n                eventContext = {sourceID: sourceID, data: eventData || null};\n            }\n            // By default, any handlers fired here (either directly, or bubbled) will see the plot as the\n            //  value of `this`. If a bound function is registered as a handler, the previously bound `this` will\n            //  override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the plot's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the plot\n     * @returns {{x: Number, y: Number, width: Number, height: Number}}\n     */\n    this.getPageOrigin = function(){\n        var bounding_client_rect = this.svg.node().getBoundingClientRect();\n        var x_offset = document.documentElement.scrollLeft || document.body.scrollLeft;\n        var y_offset = document.documentElement.scrollTop || document.body.scrollTop;\n        var container = this.svg.node();\n        while (container.parentNode !== null){\n            container = container.parentNode;\n            if (container !== document && d3.select(container).style(\"position\") !== \"static\"){\n                x_offset = -1 * container.getBoundingClientRect().left;\n                y_offset = -1 * container.getBoundingClientRect().top;\n                break;\n            }\n        }\n        return {\n            x: x_offset + bounding_client_rect.left,\n            y: y_offset + bounding_client_rect.top,\n            width: bounding_client_rect.width,\n            height: bounding_client_rect.height\n        };\n    };\n\n    /**\n     * Get the top and left offset values for the plot's container element (the div that was populated)\n     * @returns {{top: number, left: number}}\n     */\n    this.getContainerOffset = function(){\n        var offset = { top: 0, left: 0 };\n        var container = this.container.offsetParent || null;\n        while (container !== null){\n            offset.top += container.offsetTop;\n            offset.left += container.offsetLeft;\n            container = container.offsetParent || null;\n        }\n        return offset;\n    };\n\n    //\n    /**\n     * Event information describing interaction (e.g. panning and zooming) is stored on the plot\n     * TODO: Add/ document details of interaction structure as we expand\n     * @member {{panel_id: String, linked_panel_ids: Array, x_linked: *, dragging: *, zooming: *}}\n     * @returns {LocusZoom.Plot}\n     */\n    this.interaction = {};\n\n    /**\n     * Track whether the target panel can respond to mouse interaction events\n     * @param {String} panel_id\n     * @returns {boolean}\n     */\n    this.canInteract = function(panel_id){\n        panel_id = panel_id || null;\n        if (panel_id){\n            return ((typeof this.interaction.panel_id == \"undefined\" || this.interaction.panel_id === panel_id) && !this.loading_data);\n        } else {\n            return !(this.interaction.dragging || this.interaction.zooming || this.loading_data);\n        }\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n    // TODO: Possibly superfluous return from constructor\n    return this;\n};\n\n/**\n * Default/ expected configuration parameters for basic plotting; most plots will override\n *\n * @protected\n * @static\n * @type {Object}\n */\nLocusZoom.Plot.DefaultLayout = {\n    state: {},\n    width: 1,\n    height: 1,\n    min_width: 1,\n    min_height: 1,\n    responsive_resize: false,\n    aspect_ratio: 1,\n    panels: [],\n    dashboard: {\n        components: []\n    },\n    panel_boundaries: true,\n    mouse_guide: true\n};\n\n/**\n * Helper method to sum the proportional dimensions of panels, a value that's checked often as panels are added/removed\n * @param {('Height'|'Width')} dimension\n * @returns {number}\n */\nLocusZoom.Plot.prototype.sumProportional = function(dimension){\n    if (dimension !== \"height\" && dimension !== \"width\"){\n        throw (\"Bad dimension value passed to LocusZoom.Plot.prototype.sumProportional\");\n    }\n    var total = 0;\n    for (var id in this.panels){\n        // Ensure every panel contributing to the sum has a non-zero proportional dimension\n        if (!this.panels[id].layout[\"proportional_\" + dimension]){\n            this.panels[id].layout[\"proportional_\" + dimension] = 1 / Object.keys(this.panels).length;\n        }\n        total += this.panels[id].layout[\"proportional_\" + dimension];\n    }\n    return total;\n};\n\n/**\n * Resize the plot to fit the bounding container\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.rescaleSVG = function(){\n    var clientRect = this.svg.node().getBoundingClientRect();\n    this.setDimensions(clientRect.width, clientRect.height);\n    return this;\n};\n\n/**\n * Prepare the plot for first use by performing parameter validation, setting up panels, and calculating dimensions\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initializeLayout = function(){\n\n    // Sanity check layout values\n    // TODO: Find a way to generally abstract this, maybe into an object that models allowed layout values?\n    if (isNaN(this.layout.width) || this.layout.width <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.height) || this.layout.height <= 0){\n        throw (\"Plot layout parameter `width` must be a positive number\");\n    }\n    if (isNaN(this.layout.aspect_ratio) || this.layout.aspect_ratio <= 0){\n        throw (\"Plot layout parameter `aspect_ratio` must be a positive number\");\n    }\n\n    // If this is a responsive layout then set a namespaced/unique onresize event listener on the window\n    if (this.layout.responsive_resize){\n        this.window_onresize = d3.select(window).on(\"resize.lz-\"+this.id, function(){\n            this.rescaleSVG();\n        }.bind(this));\n        // Forcing one additional setDimensions() call after the page is loaded clears up\n        // any disagreements between the initial layout and the loaded responsive container's size\n        d3.select(window).on(\"load.lz-\"+this.id, function(){\n            this.setDimensions();\n        }.bind(this));\n    }\n\n    // Add panels\n    this.layout.panels.forEach(function(panel_layout){\n        this.addPanel(panel_layout);\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Set the dimensions for a plot, and ensure that panels are sized and positioned correctly.\n *\n * If dimensions are provided, resizes each panel proportionally to match the new plot dimensions. Otherwise,\n *   calculates the appropriate plot dimensions based on all panels.\n * @param {Number} [width] If provided and larger than minimum size, set plot to this width\n * @param {Number} [height] If provided and larger than minimum size, set plot to this height\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.setDimensions = function(width, height){\n\n    var id;\n\n    // Update minimum allowable width and height by aggregating minimums from panels, then apply minimums to containing element.\n    var min_width = parseFloat(this.layout.min_width) || 0;\n    var min_height = parseFloat(this.layout.min_height) || 0;\n    for (id in this.panels){\n        min_width = Math.max(min_width, this.panels[id].layout.min_width);\n        if (parseFloat(this.panels[id].layout.min_height) > 0 && parseFloat(this.panels[id].layout.proportional_height) > 0){\n            min_height = Math.max(min_height, (this.panels[id].layout.min_height / this.panels[id].layout.proportional_height));\n        }\n    }\n    this.layout.min_width = Math.max(min_width, 1);\n    this.layout.min_height = Math.max(min_height, 1);\n    d3.select(this.svg.node().parentNode).style({\n        \"min-width\": this.layout.min_width + \"px\",\n        \"min-height\": this.layout.min_height + \"px\"\n    });\n\n    // If width and height arguments were passed then adjust them against plot minimums if necessary.\n    // Then resize the plot and proportionally resize panels to fit inside the new plot dimensions.\n    if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n        this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n        this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        this.layout.aspect_ratio = this.layout.width / this.layout.height;\n        // Override discrete values if resizing responsively\n        if (this.layout.responsive_resize){\n            if (this.svg){\n                this.layout.width = Math.max(this.svg.node().parentNode.getBoundingClientRect().width, this.layout.min_width);\n            }\n            this.layout.height = this.layout.width / this.layout.aspect_ratio;\n            if (this.layout.height < this.layout.min_height){\n                this.layout.height = this.layout.min_height;\n                this.layout.width  = this.layout.height * this.layout.aspect_ratio;\n            }\n        }\n        // Resize/reposition panels to fit, update proportional origins if necessary\n        var y_offset = 0;\n        this.panel_ids_by_y_index.forEach(function(panel_id){\n            var panel_width = this.layout.width;\n            var panel_height = this.panels[panel_id].layout.proportional_height * this.layout.height;\n            this.panels[panel_id].setDimensions(panel_width, panel_height);\n            this.panels[panel_id].setOrigin(0, y_offset);\n            this.panels[panel_id].layout.proportional_origin.x = 0;\n            this.panels[panel_id].layout.proportional_origin.y = y_offset / this.layout.height;\n            y_offset += panel_height;\n            this.panels[panel_id].dashboard.update();\n        }.bind(this));\n    }\n\n    // If width and height arguments were NOT passed (and panels exist) then determine the plot dimensions\n    // by making it conform to panel dimensions, assuming panels are already positioned correctly.\n    else if (Object.keys(this.panels).length) {\n        this.layout.width = 0;\n        this.layout.height = 0;\n        for (id in this.panels){\n            this.layout.width = Math.max(this.panels[id].layout.width, this.layout.width);\n            this.layout.height += this.panels[id].layout.height;\n        }\n        this.layout.width = Math.max(this.layout.width, this.layout.min_width);\n        this.layout.height = Math.max(this.layout.height, this.layout.min_height);\n    }\n\n    // Keep aspect ratio in agreement with dimensions\n    this.layout.aspect_ratio = this.layout.width / this.layout.height;\n\n    // Apply layout width and height as discrete values or viewbox values\n    if (this.svg !== null){\n        if (this.layout.responsive_resize){\n            this.svg\n                .attr(\"viewBox\", \"0 0 \" + this.layout.width + \" \" + this.layout.height)\n                .attr(\"preserveAspectRatio\", \"xMinYMin meet\");\n        } else {\n            this.svg.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n        }\n    }\n\n    // If the plot has been initialized then trigger some necessary render functions\n    if (this.initialized){\n        this.panel_boundaries.position();\n        this.dashboard.update();\n        this.curtain.update();\n        this.loader.update();\n    }\n\n    return this.emit(\"layout_changed\");\n};\n\n/**\n * Create a new panel from a layout, and handle the work of initializing and placing the panel on the plot\n * @param {Object} layout\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Plot.prototype.addPanel = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\"){\n        throw \"Invalid panel layout passed to LocusZoom.Plot.prototype.addPanel()\";\n    }\n\n    // Create the Panel and set its parent\n    var panel = new LocusZoom.Panel(layout, this);\n\n    // Store the Panel on the Plot\n    this.panels[panel.id] = panel;\n\n    // If a discrete y_index was set in the layout then adjust other panel y_index values to accommodate this one\n    if (panel.layout.y_index !== null && !isNaN(panel.layout.y_index)\n        && this.panel_ids_by_y_index.length > 0){\n        // Negative y_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (panel.layout.y_index < 0){\n            panel.layout.y_index = Math.max(this.panel_ids_by_y_index.length + panel.layout.y_index, 0);\n        }\n        this.panel_ids_by_y_index.splice(panel.layout.y_index, 0, panel.id);\n        this.applyPanelYIndexesToPanelLayouts();\n    } else {\n        var length = this.panel_ids_by_y_index.push(panel.id);\n        this.panels[panel.id].layout.y_index = length - 1;\n    }\n\n    // Determine if this panel was already in the layout.panels array.\n    // If it wasn't, add it. Either way store the layout.panels array index on the panel.\n    var layout_idx = null;\n    this.layout.panels.forEach(function(panel_layout, idx){\n        if (panel_layout.id === panel.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.panels.push(this.panels[panel.id].layout) - 1;\n    }\n    this.panels[panel.id].layout_idx = layout_idx;\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        this.positionPanels();\n        // Initialize and load data into the new panel\n        this.panels[panel.id].initialize();\n        this.panels[panel.id].reMap();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this.panels[panel.id];\n};\n\n\n/**\n * Clear all state, tooltips, and other persisted data associated with one (or all) panel(s) in the plot\n *\n * This is useful when reloading an existing plot with new data, eg \"click for genome region\" links.\n *   This is a utility method for custom usage. It is not fired automatically during normal rerender of existing panels\n *   @param {String} [panelId] If provided, clear state for only this panel. Otherwise, clear state for all panels.\n *   @param {('wipe'|'reset')} [mode='wipe'] Optionally specify how state should be cleared. `wipe` deletes all data\n *     and is useful for when the panel is being removed; `reset` is best when the panel will be reused in place.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.clearPanelData = function(panelId, mode) {\n    mode = mode || \"wipe\";\n\n    // TODO: Add unit tests for this method\n    var panelsList;\n    if (panelId) {\n        panelsList = [panelId];\n    } else {\n        panelsList = Object.keys(this.panels);\n    }\n    var self = this;\n    panelsList.forEach(function(pid) {\n        self.panels[pid].data_layer_ids_by_z_index.forEach(function(dlid){\n            var layer = self.panels[pid].data_layers[dlid];\n            layer.destroyAllTooltips();\n\n            delete self.layout.state[pid + \".\" + dlid];\n            if(mode === \"reset\") {\n                layer.setDefaultState();\n            }\n        });\n    });\n    return this;\n};\n\n/**\n * Remove the panel from the plot, and clear any state, tooltips, or other visual elements belonging to nested content\n * @param {String} id\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.removePanel = function(id){\n    if (!this.panels[id]){\n        throw (\"Unable to remove panel, ID not found: \" + id);\n    }\n\n    // Hide all panel boundaries\n    this.panel_boundaries.hide();\n\n    // Destroy all tooltips and state vars for all data layers on the panel\n    this.clearPanelData(id);\n\n    // Remove all panel-level HTML overlay elements\n    this.panels[id].loader.hide();\n    this.panels[id].dashboard.destroy(true);\n    this.panels[id].curtain.hide();\n\n    // Remove the svg container for the panel if it exists\n    if (this.panels[id].svg.container){\n        this.panels[id].svg.container.remove();\n    }\n\n    // Delete the panel and its presence in the plot layout and state\n    this.layout.panels.splice(this.panels[id].layout_idx, 1);\n    delete this.panels[id];\n    delete this.layout.state[id];\n\n    // Update layout_idx values for all remaining panels\n    this.layout.panels.forEach(function(panel_layout, idx){\n        this.panels[panel_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    // Remove the panel id from the y_index array\n    this.panel_ids_by_y_index.splice(this.panel_ids_by_y_index.indexOf(id), 1);\n    this.applyPanelYIndexesToPanelLayouts();\n\n    // Call positionPanels() to keep panels from overlapping and ensure filling all available vertical space\n    if (this.initialized){\n        // Allow the plot to shrink when panels are removed, by forcing it to recalculate min dimensions from scratch\n        this.layout.min_height = this._base_layout.min_height;\n        this.layout.min_width = this._base_layout.min_width;\n\n        this.positionPanels();\n        // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n        // positioning. TODO: make this additional call unnecessary.\n        this.setDimensions(this.layout.width, this.layout.height);\n    }\n\n    return this;\n};\n\n\n/**\n * Automatically position panels based on panel positioning rules and values.\n * Keep panels from overlapping vertically by adjusting origins, and keep the sum of proportional heights at 1.\n *\n * TODO: This logic currently only supports dynamic positioning of panels to prevent overlap in a VERTICAL orientation.\n *      Some framework exists for positioning panels in horizontal orientations as well (width, proportional_width, origin.x, etc.)\n *      but the logic for keeping these user-definable values straight approaches the complexity of a 2D box-packing algorithm.\n *      That's complexity we don't need right now, and may not ever need, so it's on hiatus until a use case materializes.\n */\nLocusZoom.Plot.prototype.positionPanels = function(){\n\n    var id;\n\n    // We want to enforce that all x-linked panels have consistent horizontal margins\n    // (to ensure that aligned items stay aligned despite inconsistent initial layout parameters)\n    // NOTE: This assumes panels have consistent widths already. That should probably be enforced too!\n    var x_linked_margins = { left: 0, right: 0 };\n\n    // Proportional heights for newly added panels default to null unless explicitly set, so determine appropriate\n    // proportional heights for all panels with a null value from discretely set dimensions.\n    // Likewise handle default nulls for proportional widths, but instead just force a value of 1 (full width)\n    for (id in this.panels){\n        if (this.panels[id].layout.proportional_height === null){\n            this.panels[id].layout.proportional_height = this.panels[id].layout.height / this.layout.height;\n        }\n        if (this.panels[id].layout.proportional_width === null){\n            this.panels[id].layout.proportional_width = 1;\n        }\n        if (this.panels[id].layout.interaction.x_linked){\n            x_linked_margins.left = Math.max(x_linked_margins.left, this.panels[id].layout.margin.left);\n            x_linked_margins.right = Math.max(x_linked_margins.right, this.panels[id].layout.margin.right);\n        }\n    }\n\n    // Sum the proportional heights and then adjust all proportionally so that the sum is exactly 1\n    var total_proportional_height = this.sumProportional(\"height\");\n    if (!total_proportional_height){\n        return this;\n    }\n    var proportional_adjustment = 1 / total_proportional_height;\n    for (id in this.panels){\n        this.panels[id].layout.proportional_height *= proportional_adjustment;\n    }\n\n    // Update origins on all panels without changing plot-level dimensions yet\n    // Also apply x-linked margins to x-linked panels, updating widths as needed\n    var y_offset = 0;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setOrigin(0, y_offset);\n        this.panels[panel_id].layout.proportional_origin.x = 0;\n        y_offset += this.panels[panel_id].layout.height;\n        if (this.panels[panel_id].layout.interaction.x_linked){\n            var delta = Math.max(x_linked_margins.left - this.panels[panel_id].layout.margin.left, 0)\n                      + Math.max(x_linked_margins.right - this.panels[panel_id].layout.margin.right, 0);\n            this.panels[panel_id].layout.width += delta;\n            this.panels[panel_id].layout.margin.left = x_linked_margins.left;\n            this.panels[panel_id].layout.margin.right = x_linked_margins.right;\n            this.panels[panel_id].layout.cliparea.origin.x = x_linked_margins.left;\n        }\n    }.bind(this));\n    var calculated_plot_height = y_offset;\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].layout.proportional_origin.y = this.panels[panel_id].layout.origin.y / calculated_plot_height;\n    }.bind(this));\n\n    // Update dimensions on the plot to accommodate repositioned panels\n    this.setDimensions();\n\n    // Set dimensions on all panels using newly set plot-level dimensions and panel-level proportional dimensions\n    this.panel_ids_by_y_index.forEach(function(panel_id){\n        this.panels[panel_id].setDimensions(this.layout.width * this.panels[panel_id].layout.proportional_width,\n                                            this.layout.height * this.panels[panel_id].layout.proportional_height);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Prepare the first rendering of the plot. This includes initializing the individual panels, but also creates shared\n *   elements such as mouse events, panel guides/boundaries, and loader/curtain.\n *\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.initialize = function(){\n\n    // Ensure proper responsive class is present on the containing node if called for\n    if (this.layout.responsive_resize){\n        d3.select(this.container).classed(\"lz-container-responsive\", true);\n    }\n\n    // Create an element/layer for containing mouse guides\n    if (this.layout.mouse_guide) {\n        var mouse_guide_svg = this.svg.append(\"g\")\n            .attr(\"class\", \"lz-mouse_guide\").attr(\"id\", this.id + \".mouse_guide\");\n        var mouse_guide_vertical_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-vertical\").attr(\"x\",-1);\n        var mouse_guide_horizontal_svg = mouse_guide_svg.append(\"rect\")\n            .attr(\"class\", \"lz-mouse_guide-horizontal\").attr(\"y\",-1);\n        this.mouse_guide = {\n            svg: mouse_guide_svg,\n            vertical: mouse_guide_vertical_svg,\n            horizontal: mouse_guide_horizontal_svg\n        };\n    }\n\n    // Add curtain and loader prototpyes to the plot\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    // Create the panel_boundaries object with show/position/hide methods\n    this.panel_boundaries = {\n        parent: this,\n        hide_timeout: null,\n        showing: false,\n        dragging: false,\n        selectors: [],\n        corner_selector: null,\n        show: function(){\n            // Generate panel boundaries\n            if (!this.showing && !this.parent.curtain.showing){\n                this.showing = true;\n                // Loop through all panels to create a horizontal boundary for each\n                this.parent.panel_ids_by_y_index.forEach(function(panel_id, panel_idx){\n                    var selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                        .attr(\"class\", \"lz-panel-boundary\")\n                        .attr(\"title\", \"Resize panel\");\n                    selector.append(\"span\");\n                    var panel_resize_drag = d3.behavior.drag();\n                    panel_resize_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                    panel_resize_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                    panel_resize_drag.on(\"drag\", function(){\n                        // First set the dimensions on the panel we're resizing\n                        var this_panel = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]];\n                        var original_panel_height = this_panel.layout.height;\n                        this_panel.setDimensions(this_panel.layout.width, this_panel.layout.height + d3.event.dy);\n                        var panel_height_change = this_panel.layout.height - original_panel_height;\n                        var new_calculated_plot_height = this.parent.layout.height + panel_height_change;\n                        // Next loop through all panels.\n                        // Update proportional dimensions for all panels including the one we've resized using discrete heights.\n                        // Reposition panels with a greater y-index than this panel to their appropriate new origin.\n                        this.parent.panel_ids_by_y_index.forEach(function(loop_panel_id, loop_panel_idx){\n                            var loop_panel = this.parent.panels[this.parent.panel_ids_by_y_index[loop_panel_idx]];\n                            loop_panel.layout.proportional_height = loop_panel.layout.height / new_calculated_plot_height;\n                            if (loop_panel_idx > panel_idx){\n                                loop_panel.setOrigin(loop_panel.layout.origin.x, loop_panel.layout.origin.y + panel_height_change);\n                                loop_panel.dashboard.position();\n                            }\n                        }.bind(this));\n                        // Reset dimensions on the entire plot and reposition panel boundaries\n                        this.parent.positionPanels();\n                        this.position();\n                    }.bind(this));\n                    selector.call(panel_resize_drag);\n                    this.parent.panel_boundaries.selectors.push(selector);\n                }.bind(this));\n                // Create a corner boundary / resize element on the bottom-most panel that resizes the entire plot\n                var corner_selector = d3.select(this.parent.svg.node().parentNode).insert(\"div\", \".lz-data_layer-tooltip\")\n                    .attr(\"class\", \"lz-panel-corner-boundary\")\n                    .attr(\"title\", \"Resize plot\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-outer\");\n                corner_selector.append(\"span\").attr(\"class\", \"lz-panel-corner-boundary-inner\");\n                var corner_drag = d3.behavior.drag();\n                corner_drag.on(\"dragstart\", function(){ this.dragging = true; }.bind(this));\n                corner_drag.on(\"dragend\", function(){ this.dragging = false; }.bind(this));\n                corner_drag.on(\"drag\", function(){\n                    this.setDimensions(this.layout.width + d3.event.dx, this.layout.height + d3.event.dy);\n                }.bind(this.parent));\n                corner_selector.call(corner_drag);\n                this.parent.panel_boundaries.corner_selector = corner_selector;\n            }\n            return this.position();\n        },\n        position: function(){\n            if (!this.showing){ return this; }\n            // Position panel boundaries\n            var plot_page_origin = this.parent.getPageOrigin();\n            this.selectors.forEach(function(selector, panel_idx){\n                var panel_page_origin = this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].getPageOrigin();\n                var left = plot_page_origin.x;\n                var top = panel_page_origin.y + this.parent.panels[this.parent.panel_ids_by_y_index[panel_idx]].layout.height - 12;\n                var width = this.parent.layout.width - 1;\n                selector.style({\n                    top: top + \"px\",\n                    left: left + \"px\",\n                    width: width + \"px\"\n                });\n                selector.select(\"span\").style({\n                    width: width + \"px\"\n                });\n            }.bind(this));\n            // Position corner selector\n            var corner_padding = 10;\n            var corner_size = 16;\n            this.corner_selector.style({\n                top: (plot_page_origin.y + this.parent.layout.height - corner_padding - corner_size) + \"px\",\n                left: (plot_page_origin.x + this.parent.layout.width - corner_padding - corner_size) + \"px\"\n            });\n            return this;\n        },\n        hide: function(){\n            if (!this.showing){ return this; }\n            this.showing = false;\n            // Remove panel boundaries\n            this.selectors.forEach(function(selector){ selector.remove(); });\n            this.selectors = [];\n            // Remove corner boundary\n            this.corner_selector.remove();\n            this.corner_selector = null;\n            return this;\n        }\n    };\n\n    // Show panel boundaries stipulated by the layout (basic toggle, only show on mouse over plot)\n    if (this.layout.panel_boundaries){\n        d3.select(this.svg.node().parentNode).on(\"mouseover.\" + this.id + \".panel_boundaries\", function(){\n            clearTimeout(this.panel_boundaries.hide_timeout);\n            this.panel_boundaries.show();\n        }.bind(this));\n        d3.select(this.svg.node().parentNode).on(\"mouseout.\" + this.id + \".panel_boundaries\", function(){\n            this.panel_boundaries.hide_timeout = setTimeout(function(){\n                this.panel_boundaries.hide();\n            }.bind(this), 300);\n        }.bind(this));\n    }\n\n    // Create the dashboard object and immediately show it\n    this.dashboard = new LocusZoom.Dashboard(this).show();\n\n    // Initialize all panels\n    for (var id in this.panels){\n        this.panels[id].initialize();\n    }\n\n    // Define plot-level mouse events\n    var namespace = \".\" + this.id;\n    if (this.layout.mouse_guide) {\n        var mouseout_mouse_guide = function(){\n            this.mouse_guide.vertical.attr(\"x\", -1);\n            this.mouse_guide.horizontal.attr(\"y\", -1);\n        }.bind(this);\n        var mousemove_mouse_guide = function(){\n            var coords = d3.mouse(this.svg.node());\n            this.mouse_guide.vertical.attr(\"x\", coords[0]);\n            this.mouse_guide.horizontal.attr(\"y\", coords[1]);\n        }.bind(this);\n        this.svg\n            .on(\"mouseout\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"touchleave\" + namespace + \"-mouse_guide\", mouseout_mouse_guide)\n            .on(\"mousemove\" + namespace + \"-mouse_guide\", mousemove_mouse_guide);\n    }\n    var mouseup = function(){\n        this.stopDrag();\n    }.bind(this);\n    var mousemove = function(){\n        if (this.interaction.dragging){\n            var coords = d3.mouse(this.svg.node());\n            if (d3.event){ d3.event.preventDefault(); }\n            this.interaction.dragging.dragged_x = coords[0] - this.interaction.dragging.start_x;\n            this.interaction.dragging.dragged_y = coords[1] - this.interaction.dragging.start_y;\n            this.panels[this.interaction.panel_id].render();\n            this.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.panels[panel_id].render();\n            }.bind(this));\n        }\n    }.bind(this);\n    this.svg\n        .on(\"mouseup\" + namespace, mouseup)\n        .on(\"touchend\" + namespace, mouseup)\n        .on(\"mousemove\" + namespace, mousemove)\n        .on(\"touchmove\" + namespace, mousemove);\n\n    // Add an extra namespaced mouseup handler to the containing body, if there is one\n    // This helps to stop interaction events gracefully when dragging outside of the plot element\n    if (!d3.select(\"body\").empty()){\n        d3.select(\"body\")\n            .on(\"mouseup\" + namespace, mouseup)\n            .on(\"touchend\" + namespace, mouseup);\n    }\n\n    this.initialized = true;\n\n    // An extra call to setDimensions with existing discrete dimensions fixes some rounding errors with tooltip\n    // positioning. TODO: make this additional call unnecessary.\n    var client_rect = this.svg.node().getBoundingClientRect();\n    var width = client_rect.width ? client_rect.width : this.layout.width;\n    var height = client_rect.height ? client_rect.height : this.layout.height;\n    this.setDimensions(width, height);\n\n    return this;\n\n};\n\n/**\n * Refresh (or fetch) a plot's data from sources, regardless of whether position or state has changed\n * @returns {Promise}\n */\nLocusZoom.Plot.prototype.refresh = function(){\n    return this.applyState();\n};\n\n\n/**\n * A user-defined callback function that can receive (and potentially act on) new plot data.\n * @callback externalDataCallback\n * @param {Object} new_data The body resulting from a data request. This represents the same information that would be passed to\n *  a data layer making an equivalent request.\n */\n\n/**\n * A user-defined callback function that can respond to errors received during a previous operation\n * @callback externalErrorCallback\n * @param err A representation of the error that occurred\n */\n\n/**\n * Allow newly fetched data to be made available outside the LocusZoom plot. For example, a callback could be\n *  registered to draw an HTML table of top GWAS hits, and update that table whenever the plot region changes.\n *\n * This is a convenience method for external hooks. It registers an event listener and returns parsed data,\n *  using the same fields syntax and underlying methods as data layers.\n *\n * @param {String[]} fields An array of field names and transforms, in the same syntax used by a data layer.\n *  Different data sources should be prefixed by the source name.\n * @param {externalDataCallback} success_callback Used defined function that is automatically called any time that\n *  new data is received by the plot.\n * @param {Object} [opts] Options\n * @param {externalErrorCallback} [opts.onerror] User defined function that is automatically called if a problem\n *  occurs during the data request or subsequent callback operations\n * @param {boolean} [opts.discrete=false] Normally the callback will subscribe to the combined body from the chain,\n *  which may not be in a format that matches what the external callback wants to do. If discrete=true, returns the\n *  uncombined record info\n *  @return {function} The newly created event listener, to allow for later cleanup/removal\n */\nLocusZoom.Plot.prototype.subscribeToData = function(fields, success_callback, opts) {\n    opts = opts || {};\n\n    // Register an event listener that is notified whenever new data has been rendered\n    var error_callback = opts.onerror || function(err) {\n        console.log(\"An error occurred while acting on an external callback\", err);\n    };\n    var self = this;\n\n    var listener = function() {\n        try {\n            self.lzd.getData(self.state, fields)\n                .then(function (new_data) {\n                    success_callback(opts.discrete ? new_data.discrete : new_data.body);\n                }).catch(error_callback);\n        } catch (error) {\n            // In certain cases, errors are thrown before a promise can be generated, and LZ error display seems to rely on these errors bubbling up\n            error_callback(error);\n        }\n    };\n    this.on(\"data_rendered\", listener);\n    return listener;\n};\n\n/**\n * Update state values and trigger a pull for fresh data on all data sources for all data layers\n * @param state_changes\n * @returns {Promise} A promise that resolves when all data fetch and update operations are complete\n */\nLocusZoom.Plot.prototype.applyState = function(state_changes){\n    state_changes = state_changes || {};\n    if (typeof state_changes != \"object\"){\n        throw(\"LocusZoom.applyState only accepts an object; \" + (typeof state_changes) + \" given\");\n    }\n\n    // First make a copy of the current (old) state to work with\n    var new_state = JSON.parse(JSON.stringify(this.state));\n\n    // Apply changes by top-level property to the new state\n    for (var property in state_changes) {\n        new_state[property] = state_changes[property];\n    }\n\n    // Validate the new state (may do nothing, may do a lot, depends on how the user has things set up)\n    new_state = LocusZoom.validateState(new_state, this.layout);\n\n    // Apply new state to the actual state\n    for (property in new_state) {\n        this.state[property] = new_state[property];\n    }\n\n    // Generate requests for all panels given new state\n    this.emit(\"data_requested\");\n    this.remap_promises = [];\n    this.loading_data = true;\n    for (var id in this.panels){\n        this.remap_promises.push(this.panels[id].reMap());\n    }\n\n    return Q.all(this.remap_promises)\n        .catch(function(error){\n            console.error(error);\n            this.curtain.drop(error);\n            this.loading_data = false;\n        }.bind(this))\n        .then(function(){\n            // TODO: Check logic here; in some promise implementations, this would cause the error to be considered handled, and \"then\" would always fire. (may or may not be desired behavior)\n            // Update dashboard / components\n            this.dashboard.update();\n\n            // Apply panel-level state values\n            this.panel_ids_by_y_index.forEach(function(panel_id){\n                var panel = this.panels[panel_id];\n                panel.dashboard.update();\n                // Apply data-layer-level state values\n                panel.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n                    var data_layer = this.data_layers[data_layer_id];\n                    var state_id = panel_id + \".\" + data_layer_id;\n                    for (var property in this.state[state_id]){\n                        if (!this.state[state_id].hasOwnProperty(property)){ continue; }\n                        if (Array.isArray(this.state[state_id][property])){\n                            this.state[state_id][property].forEach(function(element_id){\n                                try {\n                                    this.setElementStatus(property, this.getElementById(element_id), true);\n                                } catch (e){\n                                    console.error(\"Unable to apply state: \" + state_id + \", \" + property);\n                                }\n                            }.bind(data_layer));\n                        }\n                    }\n                }.bind(panel));\n            }.bind(this));\n\n            // Emit events\n            this.emit(\"layout_changed\");\n            this.emit(\"data_rendered\");\n            this.emit(\"state_changed\", state_changes);\n\n            this.loading_data = false;\n\n        }.bind(this));\n};\n\n/**\n * Register interactions along the specified axis, provided that the target panel allows interaction.\n *\n * @param {LocusZoom.Panel} panel\n * @param {('x_tick'|'y1_tick'|'y2_tick')} method The direction (axis) along which dragging is being performed.\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.startDrag = function(panel, method){\n\n    panel = panel || null;\n    method = method || null;\n\n    var axis = null;\n    switch (method){\n    case \"background\":\n    case \"x_tick\":\n        axis = \"x\";\n        break;\n    case \"y1_tick\":\n        axis = \"y1\";\n        break;\n    case \"y2_tick\":\n        axis = \"y2\";\n        break;\n    }\n\n    if (!(panel instanceof LocusZoom.Panel) || !axis || !this.canInteract()){ return this.stopDrag(); }\n\n    var coords = d3.mouse(this.svg.node());\n    this.interaction = {\n        panel_id: panel.id,\n        linked_panel_ids: panel.getLinkedPanelIds(axis),\n        dragging: {\n            method: method,\n            start_x: coords[0],\n            start_y: coords[1],\n            dragged_x: 0,\n            dragged_y: 0,\n            axis: axis\n        }\n    };\n\n    this.svg.style(\"cursor\", \"all-scroll\");\n\n    return this;\n\n};\n\n/**\n * Process drag interactions across the target panel and synchronize plot state across other panels in sync;\n *   clear the event when complete\n * @returns {LocusZoom.Plot}\n */\nLocusZoom.Plot.prototype.stopDrag = function(){\n\n    if (!this.interaction.dragging){ return this; }\n\n    if (typeof this.panels[this.interaction.panel_id] != \"object\"){\n        this.interaction = {};\n        return this;\n    }\n    var panel = this.panels[this.interaction.panel_id];\n\n    // Helper function to find the appropriate axis layouts on child data layers\n    // Once found, apply the extent as floor/ceiling and remove all other directives\n    // This forces all associated axes to conform to the extent generated by a drag action\n    var overrideAxisLayout = function(axis, axis_number, extent){\n        panel.data_layer_ids_by_z_index.forEach(function(id){\n            if (panel.data_layers[id].layout[axis+\"_axis\"].axis === axis_number){\n                panel.data_layers[id].layout[axis+\"_axis\"].floor = extent[0];\n                panel.data_layers[id].layout[axis+\"_axis\"].ceiling = extent[1];\n                delete panel.data_layers[id].layout[axis+\"_axis\"].lower_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].upper_buffer;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].min_extent;\n                delete panel.data_layers[id].layout[axis+\"_axis\"].ticks;\n            }\n        });\n    };\n\n    switch(this.interaction.dragging.method){\n    case \"background\":\n    case \"x_tick\":\n        if (this.interaction.dragging.dragged_x !== 0){\n            overrideAxisLayout(\"x\", 1, panel.x_extent);\n            this.applyState({ start: panel.x_extent[0], end: panel.x_extent[1] });\n        }\n        break;\n    case \"y1_tick\":\n    case \"y2_tick\":\n        if (this.interaction.dragging.dragged_y !== 0){\n            // TODO: Hardcoded assumption of only two possible axes with single-digit #s (switch/case)\n            var y_axis_number = parseInt(this.interaction.dragging.method[1]);\n            overrideAxisLayout(\"y\", y_axis_number, panel[\"y\"+y_axis_number+\"_extent\"]);\n        }\n        break;\n    }\n\n    this.interaction = {};\n    this.svg.style(\"cursor\", null);\n\n    return this;\n\n};\n","/* global LocusZoom */\n\"use strict\";\n\n/**\n * A panel is an abstract class representing a subdivision of the LocusZoom stage\n *   to display a distinct data representation as a collection of data layers.\n * @class\n * @param {Object} layout\n * @param {LocusZoom.Plot|null} parent\n*/\nLocusZoom.Panel = function(layout, parent) {\n\n    if (typeof layout !== \"object\"){\n        throw \"Unable to create panel, invalid layout\";\n    }\n\n    /** @member {LocusZoom.Plot|null} */\n    this.parent = parent || null;\n    /** @member {LocusZoom.Plot|null} */\n    this.parent_plot = parent;\n\n    // Ensure a valid ID is present. If there is no valid ID then generate one\n    if (typeof layout.id !== \"string\" || !layout.id.length){\n        if (!this.parent){\n            layout.id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n        } else {\n            var id = null;\n            var generateID = function(){\n                id = \"p\" + Math.floor(Math.random()*Math.pow(10,8));\n                if (id == null || typeof this.parent.panels[id] != \"undefined\"){\n                    id = generateID();\n                }\n            }.bind(this);\n            layout.id = id;\n        }\n    } else if (this.parent) {\n        if (typeof this.parent.panels[layout.id] !== \"undefined\"){\n            throw \"Cannot create panel with id [\" + layout.id + \"]; panel with that id already exists\";\n        }\n    }\n    /** @member {String} */\n    this.id = layout.id;\n\n    /** @member {Boolean} */\n    this.initialized = false;\n    /**\n     * The index of this panel in the parent plot's `layout.panels`\n     * @member {number}\n     * */\n    this.layout_idx = null;\n    /** @member {Object} */\n    this.svg = {};\n\n    /**\n     * A JSON-serializable object used to describe the composition of the Panel\n     * @member {Object}\n     */\n    this.layout = LocusZoom.Layouts.merge(layout || {}, LocusZoom.Panel.DefaultLayout);\n\n    // Define state parameters specific to this panel\n    if (this.parent){\n        /** @member {Object} */\n        this.state = this.parent.state;\n\n        /** @member {String} */\n        this.state_id = this.id;\n        this.state[this.state_id] = this.state[this.state_id] || {};\n    } else {\n        this.state = null;\n        this.state_id = null;\n    }\n\n    /** @member {Object} */\n    this.data_layers = {};\n    /** @member {String[]} */\n    this.data_layer_ids_by_z_index = [];\n\n    /** @protected */\n    this.applyDataLayerZIndexesToDataLayerLayouts = function(){\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    }.bind(this);\n\n    /**\n     * Track data requests in progress\n     * @member {Promise[]}\n     *  @protected\n     */\n    this.data_promises = [];\n\n    /** @member {d3.scale} */\n    this.x_scale  = null;\n    /** @member {d3.scale} */\n    this.y1_scale = null;\n    /** @member {d3.scale} */\n    this.y2_scale = null;\n\n    /** @member {d3.extent} */\n    this.x_extent  = null;\n    /** @member {d3.extent} */\n    this.y1_extent = null;\n    /** @member {d3.extent} */\n    this.y2_extent = null;\n\n    /** @member {Number[]} */\n    this.x_ticks  = [];\n    /** @member {Number[]} */\n    this.y1_ticks = [];\n    /** @member {Number[]} */\n    this.y2_ticks = [];\n\n    /**\n     * A timeout ID as returned by setTimeout\n     * @protected\n     * @member {number}\n     */\n    this.zoom_timeout = null;\n\n    /** @returns {string} */\n    this.getBaseId = function(){\n        return this.parent.id + \".\" + this.id;\n    };\n\n    /**\n     * Known event hooks that the panel can respond to\n     * @protected\n     * @member {Object}\n     */\n    this.event_hooks = {\n        \"layout_changed\": [],\n        \"data_requested\": [],\n        \"data_rendered\": [],\n        \"element_clicked\": [],\n        \"element_selection\": []\n    };\n    /**\n     * There are several events that a LocusZoom panel can \"emit\" when appropriate, and LocusZoom supports registering\n     *   \"hooks\" for these events which are essentially custom functions intended to fire at certain times.\n     *\n     * The following panel-level events are currently supported:\n     *   - `layout_changed` - context: panel - Any aspect of the panel's layout (including dimensions or state) has changed.\n     *   - `data_requested` - context: panel - A request for new data from any data source used in the panel has been made.\n     *   - `data_rendered` - context: panel - Data from a request has been received and rendered in the panel.\n     *   - `element_clicked` - context: panel - A data element in any of the panel's data layers has been clicked.\n     *   - `element_selection` - context: panel - Triggered when an element changes \"selection\" status, and identifies\n     *        whether the element is being selected or deselected.\n     *\n     * To register a hook for any of these events use `panel.on('event_name', function() {})`.\n     *\n     * There can be arbitrarily many functions registered to the same event. They will be executed in the order they\n     *   were registered. The this context bound to each event hook function is dependent on the type of event, as\n     *   denoted above. For example, when data_requested is emitted the context for this in the event hook will be the\n     *   panel itself, but when element_clicked is emitted the context for this in the event hook will be the element\n     *   that was clicked.\n     *\n     * @param {String} event The name of the event (as defined in `event_hooks`)\n     * @param {function} hook\n     * @returns {function} The registered event listener\n     */\n    this.on = function(event, hook){\n        // TODO: Dry plot and panel event code into a shared mixin\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"Unable to register event hook, invalid event: \" + event.toString());\n        }\n        if (typeof hook != \"function\"){\n            throw(\"Unable to register event hook, invalid hook function passed\");\n        }\n        this.event_hooks[event].push(hook);\n        return hook;\n    };\n    /**\n     * Remove one or more previously defined event listeners\n     * @param {String} event The name of an event (as defined in `event_hooks`)\n     * @param {eventCallback} [hook] The callback to deregister\n     * @returns {LocusZoom.Panel}\n     */\n    this.off = function(event, hook) {\n        var theseHooks = this.event_hooks[event];\n        if (typeof \"event\" != \"string\" || !Array.isArray(theseHooks)){\n            throw(\"Unable to remove event hook, invalid event: \" + event.toString());\n        }\n        if (hook === undefined) {\n            // Deregistering all hooks for this event may break basic functionality, and should only be used during\n            //  cleanup operations (eg to prevent memory leaks)\n            this.event_hooks[event] = [];\n        } else {\n            var hookMatch = theseHooks.indexOf(hook);\n            if (hookMatch !== -1) {\n                theseHooks.splice(hookMatch, 1);\n            } else {\n                throw(\"The specified event listener is not registered and therefore cannot be removed\");\n            }\n        }\n        return this;\n    };\n    /**\n     * Handle running of event hooks when an event is emitted\n     *\n     * There is a shorter overloaded form of this method: if the event does not have any data, the second\n     *   argument can be a boolean to control bubbling\n     *\n     * @param {string} event A known event name\n     * @param {*} [eventData] Data or event description that will be passed to the event listener\n     * @param {boolean} [bubble=false] Whether to bubble the event to the parent\n     * @returns {LocusZoom.Panel}\n     */\n    this.emit = function(event, eventData, bubble)  {\n        bubble = bubble || false;\n\n        // TODO: DRY this with the parent plot implementation. Ensure interfaces remain compatible.\n        // TODO: Improve documentation for overloaded method signature (JSDoc may have trouble here)\n        if (typeof \"event\" != \"string\" || !Array.isArray(this.event_hooks[event])){\n            throw(\"LocusZoom attempted to throw an invalid event: \" + event.toString());\n        }\n        if (typeof eventData === \"boolean\" && arguments.length === 2) {\n            // Overloaded method signature: emit(event, bubble)\n            bubble = eventData;\n            eventData = null;\n        }\n        var sourceID = this.getBaseId();\n        var self = this;\n        var eventContext = {sourceID: sourceID, data: eventData || null};\n        this.event_hooks[event].forEach(function(hookToRun) {\n            // By default, any handlers fired here will see the panel as the value of `this`. If a bound function is\n            // registered as a handler, the previously bound `this` will override anything provided to `call` below.\n            hookToRun.call(self, eventContext);\n        });\n        if (bubble && this.parent) {\n            this.parent.emit(event, eventContext);\n        }\n        return this;\n    };\n\n    /**\n     * Get an object with the x and y coordinates of the panel's origin in terms of the entire page\n     * Necessary for positioning any HTML elements over the panel\n     * @returns {{x: Number, y: Number}}\n     */\n    this.getPageOrigin = function(){\n        var plot_origin = this.parent.getPageOrigin();\n        return {\n            x: plot_origin.x + this.layout.origin.x,\n            y: plot_origin.y + this.layout.origin.y\n        };\n    };\n\n    // Initialize the layout\n    this.initializeLayout();\n\n    return this;\n\n};\n\n/**\n * Default panel layout\n * @static\n * @type {Object}\n */\nLocusZoom.Panel.DefaultLayout = {\n    title: { text: \"\", style: {}, x: 10, y: 22 },\n    y_index: null,\n    width:  0,\n    height: 0,\n    origin: { x: 0, y: null },\n    min_width: 1,\n    min_height: 1,\n    proportional_width: null,\n    proportional_height: null,\n    proportional_origin: { x: 0, y: null },\n    margin: { top: 0, right: 0, bottom: 0, left: 0 },\n    background_click: \"clear_selections\",\n    dashboard: {\n        components: []\n    },\n    cliparea: {\n        height: 0,\n        width: 0,\n        origin: { x: 0, y: 0 }\n    },\n    axes: {  // These are the only axes supported!!\n        x:  {},\n        y1: {},\n        y2: {}\n    },\n    legend: null,\n    interaction: {\n        drag_background_to_pan: false,\n        drag_x_ticks_to_scale: false,\n        drag_y1_ticks_to_scale: false,\n        drag_y2_ticks_to_scale: false,\n        scroll_to_zoom: false,\n        x_linked: false,\n        y1_linked: false,\n        y2_linked: false\n    },\n    data_layers: []\n};\n\n/**\n * Prepare the panel for first use by performing parameter validation, creating axes, setting default dimensions,\n *   and preparing / positioning data layers as appropriate.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initializeLayout = function(){\n\n    // If the layout is missing BOTH width and proportional width then set the proportional width to 1.\n    // This will default the panel to taking up the full width of the plot.\n    if (this.layout.width === 0 && this.layout.proportional_width === null){\n        this.layout.proportional_width = 1;\n    }\n\n    // If the layout is missing BOTH height and proportional height then set the proportional height to\n    // an equal share of the plot's current height.\n    if (this.layout.height === 0 && this.layout.proportional_height === null){\n        var panel_count = Object.keys(this.parent.panels).length;\n        if (panel_count > 0){\n            this.layout.proportional_height = (1 / panel_count);\n        } else {\n            this.layout.proportional_height = 1;\n        }\n    }\n\n    // Set panel dimensions, origin, and margin\n    this.setDimensions();\n    this.setOrigin();\n    this.setMargin();\n\n    // Set ranges\n    // TODO: Define stub values in constructor\n    this.x_range = [0, this.layout.cliparea.width];\n    this.y1_range = [this.layout.cliparea.height, 0];\n    this.y2_range = [this.layout.cliparea.height, 0];\n\n    // Initialize panel axes\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!Object.keys(this.layout.axes[axis]).length || this.layout.axes[axis].render ===false){\n            // The default layout sets the axis to an empty object, so set its render boolean here\n            this.layout.axes[axis].render = false;\n        } else {\n            this.layout.axes[axis].render = true;\n            this.layout.axes[axis].label = this.layout.axes[axis].label || null;\n            this.layout.axes[axis].label_function = this.layout.axes[axis].label_function || null;\n        }\n    }.bind(this));\n\n    // Add data layers (which define x and y extents)\n    this.layout.data_layers.forEach(function(data_layer_layout){\n        this.addDataLayer(data_layer_layout);\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Set the dimensions for the panel. If passed with no arguments will calculate optimal size based on layout\n *   directives and the available area within the plot. If passed discrete width (number) and height (number) will\n *   attempt to resize the panel to them, but may be limited by minimum dimensions defined on the plot or panel.\n *\n * @public\n * @param {number} [width]\n * @param {number} [height]\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setDimensions = function(width, height){\n    if (typeof width != \"undefined\" && typeof height != \"undefined\"){\n        if (!isNaN(width) && width >= 0 && !isNaN(height) && height >= 0){\n            this.layout.width = Math.max(Math.round(+width), this.layout.min_width);\n            this.layout.height = Math.max(Math.round(+height), this.layout.min_height);\n        }\n    } else {\n        if (this.layout.proportional_width !== null){\n            this.layout.width = Math.max(this.layout.proportional_width * this.parent.layout.width, this.layout.min_width);\n        }\n        if (this.layout.proportional_height !== null){\n            this.layout.height = Math.max(this.layout.proportional_height * this.parent.layout.height, this.layout.min_height);\n        }\n    }\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    if (this.svg.clipRect){\n        this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n    }\n    if (this.initialized){\n        this.render();\n        this.curtain.update();\n        this.loader.update();\n        this.dashboard.update();\n        if (this.legend){ this.legend.position(); }\n    }\n    return this;\n};\n\n/**\n * Set panel origin on the plot, and re-render as appropriate\n *\n * @public\n * @param {number} x\n * @param {number} y\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setOrigin = function(x, y){\n    if (!isNaN(x) && x >= 0){ this.layout.origin.x = Math.max(Math.round(+x), 0); }\n    if (!isNaN(y) && y >= 0){ this.layout.origin.y = Math.max(Math.round(+y), 0); }\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set margins around this panel\n * @public\n * @param {number} top\n * @param {number} right\n * @param {number} bottom\n * @param {number} left\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setMargin = function(top, right, bottom, left){\n    var extra;\n    if (!isNaN(top)    && top    >= 0){ this.layout.margin.top    = Math.max(Math.round(+top),    0); }\n    if (!isNaN(right)  && right  >= 0){ this.layout.margin.right  = Math.max(Math.round(+right),  0); }\n    if (!isNaN(bottom) && bottom >= 0){ this.layout.margin.bottom = Math.max(Math.round(+bottom), 0); }\n    if (!isNaN(left)   && left   >= 0){ this.layout.margin.left   = Math.max(Math.round(+left),   0); }\n    if (this.layout.margin.top + this.layout.margin.bottom > this.layout.height){\n        extra = Math.floor(((this.layout.margin.top + this.layout.margin.bottom) - this.layout.height) / 2);\n        this.layout.margin.top -= extra;\n        this.layout.margin.bottom -= extra;\n    }\n    if (this.layout.margin.left + this.layout.margin.right > this.layout.width){\n        extra = Math.floor(((this.layout.margin.left + this.layout.margin.right) - this.layout.width) / 2);\n        this.layout.margin.left -= extra;\n        this.layout.margin.right -= extra;\n    }\n    [\"top\", \"right\", \"bottom\", \"left\"].forEach(function(m){\n        this.layout.margin[m] = Math.max(this.layout.margin[m], 0);\n    }.bind(this));\n    this.layout.cliparea.width = Math.max(this.layout.width - (this.layout.margin.left + this.layout.margin.right), 0);\n    this.layout.cliparea.height = Math.max(this.layout.height - (this.layout.margin.top + this.layout.margin.bottom), 0);\n    this.layout.cliparea.origin.x = this.layout.margin.left;\n    this.layout.cliparea.origin.y = this.layout.margin.top;\n\n    if (this.initialized){ this.render(); }\n    return this;\n};\n\n/**\n * Set the title for the panel. If passed an object, will merge the object with the existing layout configuration, so\n *   that all or only some of the title layout object's parameters can be customized. If passed null, false, or an empty\n *   string, the title DOM element will be set to display: none.\n *\n * @param {string|object|null} title The title text, or an object with additional configuration\n * @param {string} title.text Text to display. Since titles are rendered as SVG text, HTML and newlines will not be rendered.\n * @param {number} title.x X-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n * @param {number} title.y Y-offset, in pixels, for the title's text anchor (default left) relative to the top-left corner of the panel.\n    NOTE: SVG y values go from the top down, so the SVG origin of (0,0) is in the top left corner.\n * @param {object} title.style CSS styles object to be applied to the title's DOM element.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.setTitle = function(title){\n    if (typeof this.layout.title == \"string\"){\n        var text = this.layout.title;\n        this.layout.title = { text: text, x: 0, y: 0, style: {} };\n    }\n    if (typeof title == \"string\"){\n        this.layout.title.text = title;\n    } else if (typeof title == \"object\" && title !== null){\n        this.layout.title = LocusZoom.Layouts.merge(title, this.layout.title);\n    }\n    if (this.layout.title.text.length){\n        this.title.attr(\"display\", null)\n            .attr(\"x\", parseFloat(this.layout.title.x))\n            .attr(\"y\", parseFloat(this.layout.title.y))\n            .style(this.layout.title.style)\n            .text(this.layout.title.text);\n    } else {\n        this.title.attr(\"display\", \"none\");\n    }\n    return this;\n};\n\n\n/**\n * Prepare the first rendering of the panel. This includes drawing the individual data layers, but also creates shared\n *   elements such as axes,  title, and loader/curtain.\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.initialize = function(){\n\n    // Append a container group element to house the main panel group element and the clip path\n    // Position with initial layout parameters\n    this.svg.container = this.parent.svg.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel_container\")\n        .attr(\"transform\", \"translate(\" + (this.layout.origin.x || 0) + \",\" + (this.layout.origin.y || 0) + \")\");\n\n    // Append clip path to the parent svg element, size with initial layout parameters\n    var clipPath = this.svg.container.append(\"clipPath\")\n        .attr(\"id\", this.getBaseId() + \".clip\");\n    this.svg.clipRect = clipPath.append(\"rect\")\n        .attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Append svg group for rendering all panel child elements, clipped by the clip path\n    this.svg.group = this.svg.container.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".panel\")\n        .attr(\"clip-path\", \"url(#\" + this.getBaseId() + \".clip)\");\n\n    // Add curtain and loader prototypes to the panel\n    /** @member {Object} */\n    this.curtain = LocusZoom.generateCurtain.call(this);\n    /** @member {Object} */\n    this.loader = LocusZoom.generateLoader.call(this);\n\n    /**\n     * Create the dashboard object and hang components on it as defined by panel layout\n     * @member {LocusZoom.Dashboard}\n     */\n    this.dashboard = new LocusZoom.Dashboard(this);\n\n    // Inner border\n    this.inner_border = this.svg.group.append(\"rect\")\n        .attr(\"class\", \"lz-panel-background\")\n        .on(\"click\", function(){\n            if (this.layout.background_click === \"clear_selections\"){ this.clearSelections(); }\n        }.bind(this));\n\n    // Add the title\n    /** @member {Element} */\n    this.title = this.svg.group.append(\"text\").attr(\"class\", \"lz-panel-title\");\n    if (typeof this.layout.title != \"undefined\"){ this.setTitle(); }\n\n    // Initialize Axes\n    this.svg.x_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".x_axis\").attr(\"class\", \"lz-x lz-axis\");\n    if (this.layout.axes.x.render){\n        this.svg.x_axis_label = this.svg.x_axis.append(\"text\")\n            .attr(\"class\", \"lz-x lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y1_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y1_axis\").attr(\"class\", \"lz-y lz-y1 lz-axis\");\n    if (this.layout.axes.y1.render){\n        this.svg.y1_axis_label = this.svg.y1_axis.append(\"text\")\n            .attr(\"class\", \"lz-y1 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n    this.svg.y2_axis = this.svg.group.append(\"g\")\n        .attr(\"id\", this.getBaseId() + \".y2_axis\").attr(\"class\", \"lz-y lz-y2 lz-axis\");\n    if (this.layout.axes.y2.render){\n        this.svg.y2_axis_label = this.svg.y2_axis.append(\"text\")\n            .attr(\"class\", \"lz-y2 lz-axis lz-label\")\n            .attr(\"text-anchor\", \"middle\");\n    }\n\n    // Initialize child Data Layers\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].initialize();\n    }.bind(this));\n\n    /**\n     * Legend object, as defined by panel layout and child data layer layouts\n     * @member {LocusZoom.Legend}\n     * */\n    this.legend = null;\n    if (this.layout.legend){\n        this.legend = new LocusZoom.Legend(this);\n    }\n\n    // Establish panel background drag interaction mousedown event handler (on the panel background)\n    if (this.layout.interaction.drag_background_to_pan){\n        var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n        var mousedown = function(){\n            this.parent.startDrag(this, \"background\");\n        }.bind(this);\n        this.svg.container.select(\".lz-panel-background\")\n            .on(\"mousedown\" + namespace + \".background\", mousedown)\n            .on(\"touchstart\" + namespace + \".background\", mousedown);\n    }\n\n    return this;\n\n};\n\n/**\n * Refresh the sort order of all data layers (called by data layer moveUp and moveDown methods)\n */\nLocusZoom.Panel.prototype.resortDataLayers = function(){\n    var sort = [];\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        sort.push(this.data_layers[id].layout.z_index);\n    }.bind(this));\n    this.svg.group.selectAll(\"g.lz-data_layer-container\").data(sort).sort(d3.ascending);\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n};\n\n/**\n * Get an array of panel IDs that are axis-linked to this panel\n * @param {('x'|'y1'|'y2')} axis\n * @returns {Array}\n */\nLocusZoom.Panel.prototype.getLinkedPanelIds = function(axis){\n    axis = axis || null;\n    var linked_panel_ids = [];\n    if ([\"x\",\"y1\",\"y2\"].indexOf(axis) === -1){ return linked_panel_ids; }\n    if (!this.layout.interaction[axis + \"_linked\"]){ return linked_panel_ids; }\n    this.parent.panel_ids_by_y_index.forEach(function(panel_id){\n        if (panel_id !== this.id && this.parent.panels[panel_id].layout.interaction[axis + \"_linked\"]){\n            linked_panel_ids.push(panel_id);\n        }\n    }.bind(this));\n    return linked_panel_ids;\n};\n\n/**\n * Move a panel up relative to others by y-index\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveUp = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index - 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index - 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index - 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Move a panel down (y-axis) relative to others in the plot\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.moveDown = function(){\n    if (this.parent.panel_ids_by_y_index[this.layout.y_index + 1]){\n        this.parent.panel_ids_by_y_index[this.layout.y_index] = this.parent.panel_ids_by_y_index[this.layout.y_index + 1];\n        this.parent.panel_ids_by_y_index[this.layout.y_index + 1] = this.id;\n        this.parent.applyPanelYIndexesToPanelLayouts();\n        this.parent.positionPanels();\n    }\n    return this;\n};\n\n/**\n * Create a new data layer from a provided layout object. Should have the keys specified in `DefaultLayout`\n * Will automatically add at the top (depth/z-index) of the panel unless explicitly directed differently\n *   in the layout provided.\n * @param {object} layout\n * @returns {*}\n */\nLocusZoom.Panel.prototype.addDataLayer = function(layout){\n\n    // Sanity checks\n    if (typeof layout !== \"object\" || typeof layout.id !== \"string\" || !layout.id.length){\n        throw \"Invalid data layer layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n    if (typeof this.data_layers[layout.id] !== \"undefined\"){\n        throw \"Cannot create data_layer with id [\" + layout.id + \"]; data layer with that id already exists in the panel\";\n    }\n    if (typeof layout.type !== \"string\"){\n        throw \"Invalid data layer type in layout passed to LocusZoom.Panel.prototype.addDataLayer()\";\n    }\n\n    // If the layout defines a y axis make sure the axis number is set and is 1 or 2 (default to 1)\n    if (typeof layout.y_axis == \"object\" && (typeof layout.y_axis.axis == \"undefined\" || [1,2].indexOf(layout.y_axis.axis) === -1)){\n        layout.y_axis.axis = 1;\n    }\n\n    // Create the Data Layer\n    var data_layer = LocusZoom.DataLayers.get(layout.type, layout, this);\n\n    // Store the Data Layer on the Panel\n    this.data_layers[data_layer.id] = data_layer;\n\n    // If a discrete z_index was set in the layout then adjust other data layer z_index values to accommodate this one\n    if (data_layer.layout.z_index !== null && !isNaN(data_layer.layout.z_index)\n        && this.data_layer_ids_by_z_index.length > 0){\n        // Negative z_index values should count backwards from the end, so convert negatives to appropriate values here\n        if (data_layer.layout.z_index < 0){\n            data_layer.layout.z_index = Math.max(this.data_layer_ids_by_z_index.length + data_layer.layout.z_index, 0);\n        }\n        this.data_layer_ids_by_z_index.splice(data_layer.layout.z_index, 0, data_layer.id);\n        this.data_layer_ids_by_z_index.forEach(function(dlid, idx){\n            this.data_layers[dlid].layout.z_index = idx;\n        }.bind(this));\n    } else {\n        var length = this.data_layer_ids_by_z_index.push(data_layer.id);\n        this.data_layers[data_layer.id].layout.z_index = length - 1;\n    }\n\n    // Determine if this data layer was already in the layout.data_layers array.\n    // If it wasn't, add it. Either way store the layout.data_layers array index on the data_layer.\n    var layout_idx = null;\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        if (data_layer_layout.id === data_layer.id){ layout_idx = idx; }\n    });\n    if (layout_idx === null){\n        layout_idx = this.layout.data_layers.push(this.data_layers[data_layer.id].layout) - 1;\n    }\n    this.data_layers[data_layer.id].layout_idx = layout_idx;\n\n    return this.data_layers[data_layer.id];\n};\n\n/**\n * Remove a data layer by id\n * @param {string} id\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.removeDataLayer = function(id){\n    if (!this.data_layers[id]){\n        throw (\"Unable to remove data layer, ID not found: \" + id);\n    }\n\n    // Destroy all tooltips for the data layer\n    this.data_layers[id].destroyAllTooltips();\n\n    // Remove the svg container for the data layer if it exists\n    if (this.data_layers[id].svg.container){\n        this.data_layers[id].svg.container.remove();\n    }\n\n    // Delete the data layer and its presence in the panel layout and state\n    this.layout.data_layers.splice(this.data_layers[id].layout_idx, 1);\n    delete this.state[this.data_layers[id].state_id];\n    delete this.data_layers[id];\n\n    // Remove the data_layer id from the z_index array\n    this.data_layer_ids_by_z_index.splice(this.data_layer_ids_by_z_index.indexOf(id), 1);\n\n    // Update layout_idx and layout.z_index values for all remaining data_layers\n    this.applyDataLayerZIndexesToDataLayerLayouts();\n    this.layout.data_layers.forEach(function(data_layer_layout, idx){\n        this.data_layers[data_layer_layout.id].layout_idx = idx;\n    }.bind(this));\n\n    return this;\n};\n\n/**\n * Clear all selections on all data layers\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.clearSelections = function(){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(\"selected\", false);\n    }.bind(this));\n    return this;\n};\n\n/**\n * When the parent plot changes state, adjust the panel accordingly. For example, this may include fetching new data\n *   from the API as the viewing region changes\n * @returns {Promise}\n */\nLocusZoom.Panel.prototype.reMap = function(){\n    this.emit(\"data_requested\");\n    this.data_promises = [];\n\n    // Remove any previous error messages before attempting to load new data\n    this.curtain.hide();\n    // Trigger reMap on each Data Layer\n    for (var id in this.data_layers){\n        try {\n            this.data_promises.push(this.data_layers[id].reMap());\n        } catch (error) {\n            console.warn(error);\n            this.curtain.show(error);\n        }\n    }\n    // When all finished trigger a render\n    return Q.all(this.data_promises)\n        .then(function(){\n            this.initialized = true;\n            this.render();\n            this.emit(\"layout_changed\", true);\n            this.emit(\"data_rendered\");\n        }.bind(this))\n        .catch(function(error){\n            console.warn(error);\n            this.curtain.show(error);\n        }.bind(this));\n};\n\n/**\n * Iterate over data layers to generate panel axis extents\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.generateExtents = function(){\n\n    // Reset extents\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        this[axis + \"_extent\"] = null;\n    }.bind(this));\n\n    // Loop through the data layers\n    for (var id in this.data_layers){\n\n        var data_layer = this.data_layers[id];\n\n        // If defined and not decoupled, merge the x extent of the data layer with the panel's x extent\n        if (data_layer.layout.x_axis && !data_layer.layout.x_axis.decoupled){\n            this.x_extent = d3.extent((this.x_extent || []).concat(data_layer.getAxisExtent(\"x\")));\n        }\n\n        // If defined and not decoupled, merge the y extent of the data layer with the panel's appropriate y extent\n        if (data_layer.layout.y_axis && !data_layer.layout.y_axis.decoupled){\n            var y_axis = \"y\" + data_layer.layout.y_axis.axis;\n            this[y_axis+\"_extent\"] = d3.extent((this[y_axis+\"_extent\"] || []).concat(data_layer.getAxisExtent(\"y\")));\n        }\n\n    }\n\n    // Override x_extent from state if explicitly defined to do so\n    if (this.layout.axes.x && this.layout.axes.x.extent === \"state\"){\n        this.x_extent = [ this.state.start, this.state.end ];\n    }\n\n    return this;\n\n};\n\n/**\n * Generate an array of ticks for an axis. These ticks are generated in one of three ways (highest wins):\n *   1. An array of specific tick marks\n *   2. Query each data layer for what ticks are appropriate, and allow a panel-level tick configuration parameter\n *     object to override the layer's default presentation settings\n *   3. Generate generic tick marks based on the extent of the data\n * @param {('x'|'y1'|'y2')} axis The string identifier of the axis\n * @returns {Number[]|Object[]}  TODO: number format?\n *   An array of numbers: interpreted as an array of axis value offsets for positioning.\n *   An array of objects: each object must have an 'x' attribute to position the tick.\n *   Other supported object keys:\n *     * text: string to render for a given tick\n *     * style: d3-compatible CSS style object\n *     * transform: SVG transform attribute string\n *     * color: string or LocusZoom scalable parameter object\n */\nLocusZoom.Panel.prototype.generateTicks = function(axis){\n\n    // Parse an explicit 'ticks' attribute in the axis layout\n    if (this.layout.axes[axis].ticks){\n        var layout = this.layout.axes[axis];\n\n        var baseTickConfig = layout.ticks;\n        if (Array.isArray(baseTickConfig)){\n            // Array of specific ticks hard-coded into a panel will override any ticks that an individual layer might specify\n            return baseTickConfig;\n        }\n\n        if (typeof baseTickConfig === \"object\") {\n            // If the layout specifies base configuration for ticks- but without specific positions- then ask each\n            //   data layer to report the tick marks that it thinks it needs\n            // TODO: Few layers currently need to specify custom ticks (which is ok!). But if it becomes common, consider adding mechanisms to deduplicate ticks across layers\n            var self = this;\n\n            // Pass any layer-specific customizations for how ticks are calculated. (styles are overridden separately)\n            var config = { position: baseTickConfig.position };\n\n            var combinedTicks = this.data_layer_ids_by_z_index.reduce(function(acc, data_layer_id) {\n                var nextLayer = self.data_layers[data_layer_id];\n                return acc.concat(nextLayer.getTicks(axis, config));\n            }, []);\n\n            return combinedTicks.map(function(item) {\n                // The layer makes suggestions, but tick configuration params specified on the panel take precedence\n                var itemConfig = {};\n                itemConfig = LocusZoom.Layouts.merge(itemConfig, baseTickConfig);\n                return LocusZoom.Layouts.merge(itemConfig, item);\n            });\n        }\n    }\n\n    // If no other configuration is provided, attempt to generate ticks from the extent\n    if (this[axis + \"_extent\"]) {\n        return LocusZoom.prettyTicks(this[axis + \"_extent\"], \"both\");\n    }\n    return [];\n};\n\n/**\n * Update rendering of this panel whenever an event triggers a redraw. Assumes that the panel has already been\n *   prepared the first time via `initialize`\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.render = function(){\n\n    // Position the panel container\n    this.svg.container.attr(\"transform\", \"translate(\" + this.layout.origin.x +  \",\" + this.layout.origin.y + \")\");\n\n    // Set size on the clip rect\n    this.svg.clipRect.attr(\"width\", this.layout.width).attr(\"height\", this.layout.height);\n\n    // Set and position the inner border, style if necessary\n    this.inner_border\n        .attr(\"x\", this.layout.margin.left).attr(\"y\", this.layout.margin.top)\n        .attr(\"width\", this.layout.width - (this.layout.margin.left + this.layout.margin.right))\n        .attr(\"height\", this.layout.height - (this.layout.margin.top + this.layout.margin.bottom));\n    if (this.layout.inner_border){\n        this.inner_border.style({ \"stroke-width\": 1, \"stroke\": this.layout.inner_border });\n    }\n\n    // Set/update panel title if necessary\n    this.setTitle();\n\n    // Regenerate all extents\n    this.generateExtents();\n\n    // Helper function to constrain any procedurally generated vectors (e.g. ranges, extents)\n    // Constraints applied here keep vectors from going to infinity or beyond a definable power of ten\n    var constrain = function(value, limit_exponent){\n        var neg_min = Math.pow(-10, limit_exponent);\n        var neg_max = Math.pow(-10, -limit_exponent);\n        var pos_min = Math.pow(10, -limit_exponent);\n        var pos_max = Math.pow(10, limit_exponent);\n        if (value === Infinity){ value = pos_max; }\n        if (value === -Infinity){ value = neg_min; }\n        if (value === 0){ value = pos_min; }\n        if (value > 0){ value = Math.max(Math.min(value, pos_max), pos_min); }\n        if (value < 0){ value = Math.max(Math.min(value, neg_max), neg_min); }\n        return value;\n    };\n\n    // Define default and shifted ranges for all axes\n    var ranges = {};\n    if (this.x_extent){\n        var base_x_range = { start: 0, end: this.layout.cliparea.width };\n        if (this.layout.axes.x.range){\n            base_x_range.start = this.layout.axes.x.range.start || base_x_range.start;\n            base_x_range.end = this.layout.axes.x.range.end || base_x_range.end;\n        }\n        ranges.x = [base_x_range.start, base_x_range.end];\n        ranges.x_shifted = [base_x_range.start, base_x_range.end];\n    }\n    if (this.y1_extent){\n        var base_y1_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y1.range){\n            base_y1_range.start = this.layout.axes.y1.range.start || base_y1_range.start;\n            base_y1_range.end = this.layout.axes.y1.range.end || base_y1_range.end;\n        }\n        ranges.y1 = [base_y1_range.start, base_y1_range.end];\n        ranges.y1_shifted = [base_y1_range.start, base_y1_range.end];\n    }\n    if (this.y2_extent){\n        var base_y2_range = { start: this.layout.cliparea.height, end: 0 };\n        if (this.layout.axes.y2.range){\n            base_y2_range.start = this.layout.axes.y2.range.start || base_y2_range.start;\n            base_y2_range.end = this.layout.axes.y2.range.end || base_y2_range.end;\n        }\n        ranges.y2 = [base_y2_range.start, base_y2_range.end];\n        ranges.y2_shifted = [base_y2_range.start, base_y2_range.end];\n    }\n\n    // Shift ranges based on any drag or zoom interactions currently underway\n    if (this.parent.interaction.panel_id && (this.parent.interaction.panel_id === this.id || this.parent.interaction.linked_panel_ids.indexOf(this.id) !== -1)){\n        var anchor, scalar = null;\n        if (this.parent.interaction.zooming && typeof this.x_scale == \"function\"){\n            var current_extent_size = Math.abs(this.x_extent[1] - this.x_extent[0]);\n            var current_scaled_extent_size = Math.round(this.x_scale.invert(ranges.x_shifted[1])) - Math.round(this.x_scale.invert(ranges.x_shifted[0]));\n            var zoom_factor = this.parent.interaction.zooming.scale;\n            var potential_extent_size = Math.floor(current_scaled_extent_size * (1 / zoom_factor));\n            if (zoom_factor < 1 && !isNaN(this.parent.layout.max_region_scale)){\n                zoom_factor = 1 /(Math.min(potential_extent_size, this.parent.layout.max_region_scale) / current_scaled_extent_size);\n            } else if (zoom_factor > 1 && !isNaN(this.parent.layout.min_region_scale)){\n                zoom_factor = 1 / (Math.max(potential_extent_size, this.parent.layout.min_region_scale) / current_scaled_extent_size);\n            }\n            var new_extent_size = Math.floor(current_extent_size * zoom_factor);\n            anchor = this.parent.interaction.zooming.center - this.layout.margin.left - this.layout.origin.x;\n            var offset_ratio = anchor / this.layout.cliparea.width;\n            var new_x_extent_start = Math.max(Math.floor(this.x_scale.invert(ranges.x_shifted[0]) - ((new_extent_size - current_scaled_extent_size) * offset_ratio)), 1);\n            ranges.x_shifted = [ this.x_scale(new_x_extent_start), this.x_scale(new_x_extent_start + new_extent_size) ];\n        } else if (this.parent.interaction.dragging){\n            switch (this.parent.interaction.dragging.method){\n            case \"background\":\n                ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                break;\n            case \"x_tick\":\n                if (d3.event && d3.event.shiftKey){\n                    ranges.x_shifted[0] = +this.parent.interaction.dragging.dragged_x;\n                    ranges.x_shifted[1] = this.layout.cliparea.width + this.parent.interaction.dragging.dragged_x;\n                } else {\n                    anchor = this.parent.interaction.dragging.start_x - this.layout.margin.left - this.layout.origin.x;\n                    scalar = constrain(anchor / (anchor + this.parent.interaction.dragging.dragged_x), 3);\n                    ranges.x_shifted[0] = 0;\n                    ranges.x_shifted[1] = Math.max(this.layout.cliparea.width * (1 / scalar), 1);\n                }\n                break;\n            case \"y1_tick\":\n            case \"y2_tick\":\n                var y_shifted = \"y\" + this.parent.interaction.dragging.method[1] + \"_shifted\";\n                if (d3.event && d3.event.shiftKey){\n                    ranges[y_shifted][0] = this.layout.cliparea.height + this.parent.interaction.dragging.dragged_y;\n                    ranges[y_shifted][1] = +this.parent.interaction.dragging.dragged_y;\n                } else {\n                    anchor = this.layout.cliparea.height - (this.parent.interaction.dragging.start_y - this.layout.margin.top - this.layout.origin.y);\n                    scalar = constrain(anchor / (anchor - this.parent.interaction.dragging.dragged_y), 3);\n                    ranges[y_shifted][0] = this.layout.cliparea.height;\n                    ranges[y_shifted][1] = this.layout.cliparea.height - (this.layout.cliparea.height * (1 / scalar));\n                }\n            }\n        }\n    }\n\n    // Generate scales and ticks for all axes, then render them\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (!this[axis + \"_extent\"]){ return; }\n\n        // Base Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"])\n            .range(ranges[axis + \"_shifted\"]);\n\n        // Shift the extent\n        this[axis + \"_extent\"] = [\n            this[axis + \"_scale\"].invert(ranges[axis][0]),\n            this[axis + \"_scale\"].invert(ranges[axis][1])\n        ];\n\n        // Finalize Scale\n        this[axis + \"_scale\"] = d3.scale.linear()\n            .domain(this[axis + \"_extent\"]).range(ranges[axis]);\n\n        // Render axis (and generate ticks as needed)\n        this.renderAxis(axis);\n    }.bind(this));\n\n    // Establish mousewheel zoom event handers on the panel (namespacing not passed through by d3, so not used here)\n    if (this.layout.interaction.scroll_to_zoom){\n        var zoom_handler = function(){\n            // Look for a shift key press while scrolling to execute.\n            // If not present, gracefully raise a notification and allow conventional scrolling\n            if (!d3.event.shiftKey){\n                if (this.parent.canInteract(this.id)){\n                    this.loader.show(\"Press <tt>[SHIFT]</tt> while scrolling to zoom\").hide(1000);\n                }\n                return;\n            }\n            d3.event.preventDefault();\n            if (!this.parent.canInteract(this.id)){ return; }\n            var coords = d3.mouse(this.svg.container.node());\n            var delta = Math.max(-1, Math.min(1, (d3.event.wheelDelta || -d3.event.detail || -d3.event.deltaY)));\n            if (delta === 0){ return; }\n            this.parent.interaction = {\n                panel_id: this.id,\n                linked_panel_ids: this.getLinkedPanelIds(\"x\"),\n                zooming: {\n                    scale: (delta < 1) ? 0.9 : 1.1,\n                    center: coords[0]\n                }\n            };\n            this.render();\n            this.parent.interaction.linked_panel_ids.forEach(function(panel_id){\n                this.parent.panels[panel_id].render();\n            }.bind(this));\n            if (this.zoom_timeout !== null){ clearTimeout(this.zoom_timeout); }\n            this.zoom_timeout = setTimeout(function(){\n                this.parent.interaction = {};\n                this.parent.applyState({ start: this.x_extent[0], end: this.x_extent[1] });\n            }.bind(this), 500);\n        }.bind(this);\n        this.zoom_listener = d3.behavior.zoom();\n        this.svg.container.call(this.zoom_listener)\n            .on(\"wheel.zoom\", zoom_handler)\n            .on(\"mousewheel.zoom\", zoom_handler)\n            .on(\"DOMMouseScroll.zoom\", zoom_handler);\n    }\n\n    // Render data layers in order by z-index\n    this.data_layer_ids_by_z_index.forEach(function(data_layer_id){\n        this.data_layers[data_layer_id].draw().render();\n    }.bind(this));\n\n    return this;\n};\n\n\n/**\n * Render ticks for a particular axis\n * @param {('x'|'y1'|'y2')} axis The identifier of the axes\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.renderAxis = function(axis){\n\n    if ([\"x\", \"y1\", \"y2\"].indexOf(axis) === -1){\n        throw(\"Unable to render axis; invalid axis identifier: \" + axis);\n    }\n\n    var canRender = this.layout.axes[axis].render\n        && typeof this[axis + \"_scale\"] == \"function\"\n        && !isNaN(this[axis + \"_scale\"](0));\n\n    // If the axis has already been rendered then check if we can/can't render it\n    // Make sure the axis element is shown/hidden to suit\n    if (this[axis+\"_axis\"]){\n        this.svg.container.select(\"g.lz-axis.lz-\"+axis).style(\"display\", canRender ? null : \"none\");\n    }\n\n    if (!canRender){ return this; }\n\n    // Axis-specific values to plug in where needed\n    var axis_params = {\n        x: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + (this.layout.height - this.layout.margin.bottom) + \")\",\n            orientation: \"bottom\",\n            label_x: this.layout.cliparea.width / 2,\n            label_y: (this.layout.axes[axis].label_offset || 0),\n            label_rotate: null\n        },\n        y1: {\n            position: \"translate(\" + this.layout.margin.left + \",\" + this.layout.margin.top + \")\",\n            orientation: \"left\",\n            label_x: -1 * (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        },\n        y2: {\n            position: \"translate(\" + (this.layout.width - this.layout.margin.right) + \",\" + this.layout.margin.top + \")\",\n            orientation: \"right\",\n            label_x: (this.layout.axes[axis].label_offset || 0),\n            label_y: this.layout.cliparea.height / 2,\n            label_rotate: -90\n        }\n    };\n\n    // Generate Ticks\n    this[axis + \"_ticks\"] = this.generateTicks(axis);\n\n    // Determine if the ticks are all numbers (d3-automated tick rendering) or not (manual tick rendering)\n    var ticksAreAllNumbers = (function(ticks){\n        for (var i = 0; i < ticks.length; i++){\n            if (isNaN(ticks[i])){\n                return false;\n            }\n        }\n        return true;\n    })(this[axis+\"_ticks\"]);\n\n    // Initialize the axis; set scale and orientation\n    this[axis+\"_axis\"] = d3.svg.axis().scale(this[axis+\"_scale\"]).orient(axis_params[axis].orientation).tickPadding(3);\n\n    // Set tick values and format\n    if (ticksAreAllNumbers){\n        this[axis+\"_axis\"].tickValues(this[axis+\"_ticks\"]);\n        if (this.layout.axes[axis].tick_format === \"region\"){\n            this[axis+\"_axis\"].tickFormat(function(d) { return LocusZoom.positionIntToString(d, 6); });\n        }\n    } else {\n        var ticks = this[axis+\"_ticks\"].map(function(t){\n            return(t[axis.substr(0,1)]);\n        });\n        this[axis+\"_axis\"].tickValues(ticks)\n            .tickFormat(function(t, i) { return this[axis+\"_ticks\"][i].text; }.bind(this));\n    }\n\n    // Position the axis in the SVG and apply the axis construct\n    this.svg[axis+\"_axis\"]\n        .attr(\"transform\", axis_params[axis].position)\n        .call(this[axis+\"_axis\"]);\n\n    // If necessary manually apply styles and transforms to ticks as specified by the layout\n    if (!ticksAreAllNumbers){\n        var tick_selector = d3.selectAll(\"g#\" + this.getBaseId().replace(\".\",\"\\\\.\") + \"\\\\.\" + axis + \"_axis g.tick\");\n        var panel = this;\n        tick_selector.each(function(d, i){\n            var selector = d3.select(this).select(\"text\");\n            if (panel[axis+\"_ticks\"][i].style){\n                selector.style(panel[axis+\"_ticks\"][i].style);\n            }\n            if (panel[axis+\"_ticks\"][i].transform){\n                selector.attr(\"transform\", panel[axis+\"_ticks\"][i].transform);\n            }\n        });\n    }\n\n    // Render the axis label if necessary\n    var label = this.layout.axes[axis].label || null;\n    if (label !== null){\n        this.svg[axis+\"_axis_label\"]\n            .attr(\"x\", axis_params[axis].label_x).attr(\"y\", axis_params[axis].label_y)\n            .text(LocusZoom.parseFields(this.state, label));\n        if (axis_params[axis].label_rotate !== null){\n            this.svg[axis+\"_axis_label\"]\n                .attr(\"transform\", \"rotate(\" + axis_params[axis].label_rotate + \" \" + axis_params[axis].label_x + \",\" + axis_params[axis].label_y + \")\");\n        }\n    }\n\n    // Attach interactive handlers to ticks as needed\n    [\"x\", \"y1\", \"y2\"].forEach(function(axis){\n        if (this.layout.interaction[\"drag_\" + axis + \"_ticks_to_scale\"]){\n            var namespace = \".\" + this.parent.id + \".\" + this.id + \".interaction.drag\";\n            var tick_mouseover = function(){\n                if (typeof d3.select(this).node().focus == \"function\"){ d3.select(this).node().focus(); }\n                var cursor = (axis === \"x\") ? \"ew-resize\" : \"ns-resize\";\n                if (d3.event && d3.event.shiftKey){ cursor = \"move\"; }\n                d3.select(this)\n                    .style({\"font-weight\": \"bold\", \"cursor\": cursor})\n                    .on(\"keydown\" + namespace, tick_mouseover)\n                    .on(\"keyup\" + namespace, tick_mouseover);\n            };\n            this.svg.container.selectAll(\".lz-axis.lz-\" + axis + \" .tick text\")\n                .attr(\"tabindex\", 0) // necessary to make the tick focusable so keypress events can be captured\n                .on(\"mouseover\" + namespace, tick_mouseover)\n                .on(\"mouseout\" + namespace,  function(){\n                    d3.select(this).style({\"font-weight\": \"normal\"});\n                    d3.select(this).on(\"keydown\" + namespace, null).on(\"keyup\" + namespace, null);\n                })\n                .on(\"mousedown\" + namespace, function(){\n                    this.parent.startDrag(this, axis + \"_tick\");\n                }.bind(this));\n        }\n    }.bind(this));\n\n    return this;\n\n};\n\n/**\n * Force the height of this panel to the largest absolute height of the data in\n *   all child data layers (if not null for any child data layers)\n * @param {number} [target_height] A target height, which will be used in situations when the expected height can be\n *   pre-calculated (eg when the layers are transitioning)\n */\nLocusZoom.Panel.prototype.scaleHeightToData = function(target_height){\n    target_height = +target_height || null;\n    if (target_height === null){\n        this.data_layer_ids_by_z_index.forEach(function(id){\n            var dh = this.data_layers[id].getAbsoluteDataHeight();\n            if (+dh){\n                if (target_height === null){ target_height = +dh; }\n                else { target_height = Math.max(target_height, +dh); }\n            }\n        }.bind(this));\n    }\n    if (+target_height){\n        target_height += +this.layout.margin.top + +this.layout.margin.bottom;\n        this.setDimensions(this.layout.width, target_height);\n        this.parent.setDimensions();\n        this.parent.panel_ids_by_y_index.forEach(function(id){\n            this.parent.panels[id].layout.proportional_height = null;\n        }.bind(this));\n        this.parent.positionPanels();\n    }\n};\n\n/**\n * Methods to set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n * @param {Array} filters\n * @param {Boolean} exclusive\n */\nLocusZoom.Panel.prototype.setElementStatusByFilters = function(status, toggle, filters, exclusive){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setElementStatusByFilters(status, toggle, filters, exclusive);\n    }.bind(this));\n};\n/**\n * Set/unset element statuses across all data layers\n * @param {String} status\n * @param {Boolean} toggle\n */\nLocusZoom.Panel.prototype.setAllElementStatus = function(status, toggle){\n    this.data_layer_ids_by_z_index.forEach(function(id){\n        this.data_layers[id].setAllElementStatus(status, toggle);\n    }.bind(this));\n};\n// TODO: Capture documentation for dynamically generated methods\nLocusZoom.DataLayer.Statuses.verbs.forEach(function(verb, idx){\n    var adjective = LocusZoom.DataLayer.Statuses.adjectives[idx];\n    var antiverb = \"un\" + verb;\n    // Set/unset status for arbitrarily many elements given a set of filters\n    LocusZoom.Panel.prototype[verb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, true, filters, exclusive);\n    };\n    LocusZoom.Panel.prototype[antiverb + \"ElementsByFilters\"] = function(filters, exclusive){\n        if (typeof exclusive == \"undefined\"){ exclusive = false; } else { exclusive = !!exclusive; }\n        return this.setElementStatusByFilters(adjective, false, filters, exclusive);\n    };\n    // Set/unset status for all elements\n    LocusZoom.Panel.prototype[verb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, true);\n        return this;\n    };\n    LocusZoom.Panel.prototype[antiverb + \"AllElements\"] = function(){\n        this.setAllElementStatus(adjective, false);\n        return this;\n    };\n});\n\n\n/**\n * Add a \"basic\" loader to a panel\n * This method is just a shortcut for adding the most commonly used type of loading indicator, which appears when\n *   data is requested, animates (e.g. shows an infinitely cycling progress bar as opposed to one that loads from\n *   0-100% based on actual load progress), and disappears when new data is loaded and rendered.\n *\n *\n * @param {Boolean} show_immediately\n * @returns {LocusZoom.Panel}\n */\nLocusZoom.Panel.prototype.addBasicLoader = function(show_immediately){\n    if (typeof show_immediately != \"undefined\"){ show_immediately = true; }\n    if (show_immediately){\n        this.loader.show(\"Loading...\").animate();\n    }\n    this.on(\"data_requested\", function(){\n        this.loader.show(\"Loading...\").animate();\n    }.bind(this));\n    this.on(\"data_rendered\", function(){\n        this.loader.hide();\n    }.bind(this));\n    return this;\n};\n"]}